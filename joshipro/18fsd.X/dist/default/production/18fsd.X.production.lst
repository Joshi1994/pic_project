

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Jan 12 13:12:33 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    44  0000                     
    45                           ; Version 1.44
    46                           ; Generated 14/09/2017 GMT
    47                           ; 
    48                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F45K22 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     
    80                           	psect	idataCOMRAM
    81  006BC2                     __pidataCOMRAM:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _timeout
    85  006BC2  1000               	dw	4096
    86  0000                     _ANSELCbits	set	3898
    87  0000                     _TXREG1	set	4013
    88  0000                     _RCSTA1bits	set	4011
    89  0000                     _TXSTA1bits	set	4012
    90  0000                     _TXSTAbits	set	4012
    91  0000                     _SPBRG1	set	4015
    92  0000                     _SPBRGH1	set	4016
    93  0000                     _PIR1bits	set	3998
    94  0000                     _SSP1BUF	set	4041
    95  0000                     _SSP1STATbits	set	4039
    96  0000                     _TRISAbits	set	3986
    97  0000                     _SSP1CON1bits	set	4038
    98  0000                     _LATC	set	3979
    99  0000                     _TRISC	set	3988
   100  0000                     _LATCbits	set	3979
   101  0000                     _TRISCbits	set	3988
   102                           
   103                           	psect	mediumconst
   104  007DEA                     __pmediumconst:
   105                           	opt stack 0
   106  007DEA  00                 	db	0
   107  007DEB                     STR_5:
   108  007DEB  53                 	db	83	;'S'
   109  007DEC  65                 	db	101	;'e'
   110  007DED  61                 	db	97	;'a'
   111  007DEE  72                 	db	114	;'r'
   112  007DEF  63                 	db	99	;'c'
   113  007DF0  68                 	db	104	;'h'
   114  007DF1  69                 	db	105	;'i'
   115  007DF2  6E                 	db	110	;'n'
   116  007DF3  67                 	db	103	;'g'
   117  007DF4  20                 	db	32
   118  007DF5  66                 	db	102	;'f'
   119  007DF6  69                 	db	105	;'i'
   120  007DF7  72                 	db	114	;'r'
   121  007DF8  73                 	db	115	;'s'
   122  007DF9  74                 	db	116	;'t'
   123  007DFA  20                 	db	32
   124  007DFB  75                 	db	117	;'u'
   125  007DFC  6E                 	db	110	;'n'
   126  007DFD  61                 	db	97	;'a'
   127  007DFE  6C                 	db	108	;'l'
   128  007DFF  6C                 	db	108	;'l'
   129  007E00  6F                 	db	111	;'o'
   130  007E01  63                 	db	99	;'c'
   131  007E02  61                 	db	97	;'a'
   132  007E03  74                 	db	116	;'t'
   133  007E04  65                 	db	101	;'e'
   134  007E05  64                 	db	100	;'d'
   135  007E06  20                 	db	32
   136  007E07  72                 	db	114	;'r'
   137  007E08  6F                 	db	111	;'o'
   138  007E09  6F                 	db	111	;'o'
   139  007E0A  74                 	db	116	;'t'
   140  007E0B  20                 	db	32
   141  007E0C  74                 	db	116	;'t'
   142  007E0D  61                 	db	97	;'a'
   143  007E0E  62                 	db	98	;'b'
   144  007E0F  6C                 	db	108	;'l'
   145  007E10  65                 	db	101	;'e'
   146  007E11  20                 	db	32
   147  007E12  65                 	db	101	;'e'
   148  007E13  6E                 	db	110	;'n'
   149  007E14  74                 	db	116	;'t'
   150  007E15  72                 	db	114	;'r'
   151  007E16  79                 	db	121	;'y'
   152  007E17  2E                 	db	46
   153  007E18  2E                 	db	46
   154  007E19  2E                 	db	46
   155  007E1A  00                 	db	0
   156  007E1B                     STR_26:
   157  007E1B  57                 	db	87	;'W'
   158  007E1C  61                 	db	97	;'a'
   159  007E1D  74                 	db	116	;'t'
   160  007E1E  69                 	db	105	;'i'
   161  007E1F  6E                 	db	110	;'n'
   162  007E20  67                 	db	103	;'g'
   163  007E21  20                 	db	32
   164  007E22  66                 	db	102	;'f'
   165  007E23  6F                 	db	111	;'o'
   166  007E24  72                 	db	114	;'r'
   167  007E25  20                 	db	32
   168  007E26  63                 	db	99	;'c'
   169  007E27  61                 	db	97	;'a'
   170  007E28  72                 	db	114	;'r'
   171  007E29  64                 	db	100	;'d'
   172  007E2A  20                 	db	32
   173  007E2B  74                 	db	116	;'t'
   174  007E2C  6F                 	db	111	;'o'
   175  007E2D  20                 	db	32
   176  007E2E  66                 	db	102	;'f'
   177  007E2F  69                 	db	105	;'i'
   178  007E30  6E                 	db	110	;'n'
   179  007E31  69                 	db	105	;'i'
   180  007E32  73                 	db	115	;'s'
   181  007E33  68                 	db	104	;'h'
   182  007E34  20                 	db	32
   183  007E35  77                 	db	119	;'w'
   184  007E36  72                 	db	114	;'r'
   185  007E37  69                 	db	105	;'i'
   186  007E38  74                 	db	116	;'t'
   187  007E39  65                 	db	101	;'e'
   188  007E3A  20                 	db	32
   189  007E3B  70                 	db	112	;'p'
   190  007E3C  72                 	db	114	;'r'
   191  007E3D  6F                 	db	111	;'o'
   192  007E3E  63                 	db	99	;'c'
   193  007E3F  65                 	db	101	;'e'
   194  007E40  73                 	db	115	;'s'
   195  007E41  73                 	db	115	;'s'
   196  007E42  2E                 	db	46
   197  007E43  2E                 	db	46
   198  007E44  2E                 	db	46
   199  007E45  00                 	db	0
   200  007E46                     STR_1:
   201  007E46  53                 	db	83	;'S'
   202  007E47  65                 	db	101	;'e'
   203  007E48  61                 	db	97	;'a'
   204  007E49  72                 	db	114	;'r'
   205  007E4A  63                 	db	99	;'c'
   206  007E4B  68                 	db	104	;'h'
   207  007E4C  69                 	db	105	;'i'
   208  007E4D  6E                 	db	110	;'n'
   209  007E4E  67                 	db	103	;'g'
   210  007E4F  20                 	db	32
   211  007E50  66                 	db	102	;'f'
   212  007E51  69                 	db	105	;'i'
   213  007E52  72                 	db	114	;'r'
   214  007E53  73                 	db	115	;'s'
   215  007E54  74                 	db	116	;'t'
   216  007E55  20                 	db	32
   217  007E56  75                 	db	117	;'u'
   218  007E57  6E                 	db	110	;'n'
   219  007E58  61                 	db	97	;'a'
   220  007E59  6C                 	db	108	;'l'
   221  007E5A  6C                 	db	108	;'l'
   222  007E5B  6F                 	db	111	;'o'
   223  007E5C  63                 	db	99	;'c'
   224  007E5D  61                 	db	97	;'a'
   225  007E5E  74                 	db	116	;'t'
   226  007E5F  65                 	db	101	;'e'
   227  007E60  64                 	db	100	;'d'
   228  007E61  20                 	db	32
   229  007E62  63                 	db	99	;'c'
   230  007E63  6C                 	db	108	;'l'
   231  007E64  75                 	db	117	;'u'
   232  007E65  73                 	db	115	;'s'
   233  007E66  74                 	db	116	;'t'
   234  007E67  65                 	db	101	;'e'
   235  007E68  72                 	db	114	;'r'
   236  007E69  2E                 	db	46
   237  007E6A  2E                 	db	46
   238  007E6B  2E                 	db	46
   239  007E6C  00                 	db	0
   240  007E6D                     STR_12:
   241  007E6D  53                 	db	83	;'S'
   242  007E6E  74                 	db	116	;'t'
   243  007E6F  61                 	db	97	;'a'
   244  007E70  72                 	db	114	;'r'
   245  007E71  74                 	db	116	;'t'
   246  007E72  69                 	db	105	;'i'
   247  007E73  6E                 	db	110	;'n'
   248  007E74  67                 	db	103	;'g'
   249  007E75  20                 	db	32
   250  007E76  53                 	db	83	;'S'
   251  007E77  44                 	db	68	;'D'
   252  007E78  20                 	db	32
   253  007E79  63                 	db	99	;'c'
   254  007E7A  61                 	db	97	;'a'
   255  007E7B  72                 	db	114	;'r'
   256  007E7C  64                 	db	100	;'d'
   257  007E7D  20                 	db	32
   258  007E7E  69                 	db	105	;'i'
   259  007E7F  6E                 	db	110	;'n'
   260  007E80  69                 	db	105	;'i'
   261  007E81  74                 	db	116	;'t'
   262  007E82  69                 	db	105	;'i'
   263  007E83  61                 	db	97	;'a'
   264  007E84  6C                 	db	108	;'l'
   265  007E85  69                 	db	105	;'i'
   266  007E86  7A                 	db	122	;'z'
   267  007E87  61                 	db	97	;'a'
   268  007E88  74                 	db	116	;'t'
   269  007E89  69                 	db	105	;'i'
   270  007E8A  6F                 	db	111	;'o'
   271  007E8B  6E                 	db	110	;'n'
   272  007E8C  2E                 	db	46
   273  007E8D  2E                 	db	46
   274  007E8E  2E                 	db	46
   275  007E8F  0A                 	db	10
   276  007E90  00                 	db	0
   277  007E91                     STR_17:
   278  007E91  53                 	db	83	;'S'
   279  007E92  44                 	db	68	;'D'
   280  007E93  20                 	db	32
   281  007E94  63                 	db	99	;'c'
   282  007E95  61                 	db	97	;'a'
   283  007E96  72                 	db	114	;'r'
   284  007E97  64                 	db	100	;'d'
   285  007E98  20                 	db	32
   286  007E99  69                 	db	105	;'i'
   287  007E9A  6E                 	db	110	;'n'
   288  007E9B  69                 	db	105	;'i'
   289  007E9C  74                 	db	116	;'t'
   290  007E9D  69                 	db	105	;'i'
   291  007E9E  61                 	db	97	;'a'
   292  007E9F  6C                 	db	108	;'l'
   293  007EA0  69                 	db	105	;'i'
   294  007EA1  7A                 	db	122	;'z'
   295  007EA2  65                 	db	101	;'e'
   296  007EA3  64                 	db	100	;'d'
   297  007EA4  20                 	db	32
   298  007EA5  73                 	db	115	;'s'
   299  007EA6  75                 	db	117	;'u'
   300  007EA7  63                 	db	99	;'c'
   301  007EA8  63                 	db	99	;'c'
   302  007EA9  65                 	db	101	;'e'
   303  007EAA  73                 	db	115	;'s'
   304  007EAB  73                 	db	115	;'s'
   305  007EAC  66                 	db	102	;'f'
   306  007EAD  75                 	db	117	;'u'
   307  007EAE  6C                 	db	108	;'l'
   308  007EAF  6C                 	db	108	;'l'
   309  007EB0  79                 	db	121	;'y'
   310  007EB1  21                 	db	33
   311  007EB2  0A                 	db	10
   312  007EB3  00                 	db	0
   313  007EB4                     STR_13:
   314  007EB4  53                 	db	83	;'S'
   315  007EB5  65                 	db	101	;'e'
   316  007EB6  6E                 	db	110	;'n'
   317  007EB7  64                 	db	100	;'d'
   318  007EB8  69                 	db	105	;'i'
   319  007EB9  6E                 	db	110	;'n'
   320  007EBA  67                 	db	103	;'g'
   321  007EBB  20                 	db	32
   322  007EBC  43                 	db	67	;'C'
   323  007EBD  4D                 	db	77	;'M'
   324  007EBE  44                 	db	68	;'D'
   325  007EBF  30                 	db	48	;'0'
   326  007EC0  2C                 	db	44
   327  007EC1  20                 	db	32
   328  007EC2  61                 	db	97	;'a'
   329  007EC3  77                 	db	119	;'w'
   330  007EC4  61                 	db	97	;'a'
   331  007EC5  69                 	db	105	;'i'
   332  007EC6  74                 	db	116	;'t'
   333  007EC7  69                 	db	105	;'i'
   334  007EC8  6E                 	db	110	;'n'
   335  007EC9  67                 	db	103	;'g'
   336  007ECA  20                 	db	32
   337  007ECB  72                 	db	114	;'r'
   338  007ECC  65                 	db	101	;'e'
   339  007ECD  73                 	db	115	;'s'
   340  007ECE  70                 	db	112	;'p'
   341  007ECF  6F                 	db	111	;'o'
   342  007ED0  6E                 	db	110	;'n'
   343  007ED1  73                 	db	115	;'s'
   344  007ED2  65                 	db	101	;'e'
   345  007ED3  2E                 	db	46
   346  007ED4  2E                 	db	46
   347  007ED5  2E                 	db	46
   348  007ED6  00                 	db	0
   349  007ED7                     STR_15:
   350  007ED7  53                 	db	83	;'S'
   351  007ED8  65                 	db	101	;'e'
   352  007ED9  6E                 	db	110	;'n'
   353  007EDA  64                 	db	100	;'d'
   354  007EDB  69                 	db	105	;'i'
   355  007EDC  6E                 	db	110	;'n'
   356  007EDD  67                 	db	103	;'g'
   357  007EDE  20                 	db	32
   358  007EDF  43                 	db	67	;'C'
   359  007EE0  4D                 	db	77	;'M'
   360  007EE1  44                 	db	68	;'D'
   361  007EE2  31                 	db	49	;'1'
   362  007EE3  2C                 	db	44
   363  007EE4  20                 	db	32
   364  007EE5  61                 	db	97	;'a'
   365  007EE6  77                 	db	119	;'w'
   366  007EE7  61                 	db	97	;'a'
   367  007EE8  69                 	db	105	;'i'
   368  007EE9  74                 	db	116	;'t'
   369  007EEA  69                 	db	105	;'i'
   370  007EEB  6E                 	db	110	;'n'
   371  007EEC  67                 	db	103	;'g'
   372  007EED  20                 	db	32
   373  007EEE  72                 	db	114	;'r'
   374  007EEF  65                 	db	101	;'e'
   375  007EF0  73                 	db	115	;'s'
   376  007EF1  70                 	db	112	;'p'
   377  007EF2  6F                 	db	111	;'o'
   378  007EF3  6E                 	db	110	;'n'
   379  007EF4  73                 	db	115	;'s'
   380  007EF5  65                 	db	101	;'e'
   381  007EF6  2E                 	db	46
   382  007EF7  2E                 	db	46
   383  007EF8  2E                 	db	46
   384  007EF9  00                 	db	0
   385  007EFA                     STR_11:
   386  007EFA  54                 	db	84	;'T'
   387  007EFB  68                 	db	104	;'h'
   388  007EFC  69                 	db	105	;'i'
   389  007EFD  73                 	db	115	;'s'
   390  007EFE  20                 	db	32
   391  007EFF  6C                 	db	108	;'l'
   392  007F00  69                 	db	105	;'i'
   393  007F01  6E                 	db	110	;'n'
   394  007F02  65                 	db	101	;'e'
   395  007F03  20                 	db	32
   396  007F04  63                 	db	99	;'c'
   397  007F05  6F                 	db	111	;'o'
   398  007F06  6E                 	db	110	;'n'
   399  007F07  74                 	db	116	;'t'
   400  007F08  61                 	db	97	;'a'
   401  007F09  69                 	db	105	;'i'
   402  007F0A  6E                 	db	110	;'n'
   403  007F0B  73                 	db	115	;'s'
   404  007F0C  20                 	db	32
   405  007F0D  33                 	db	51	;'3'
   406  007F0E  32                 	db	50	;'2'
   407  007F0F  63                 	db	99	;'c'
   408  007F10  68                 	db	104	;'h'
   409  007F11  61                 	db	97	;'a'
   410  007F12  72                 	db	114	;'r'
   411  007F13  61                 	db	97	;'a'
   412  007F14  63                 	db	99	;'c'
   413  007F15  74                 	db	116	;'t'
   414  007F16  65                 	db	101	;'e'
   415  007F17  72                 	db	114	;'r'
   416  007F18  73                 	db	115	;'s'
   417  007F19  0A                 	db	10
   418  007F1A  00                 	db	0
   419  007F1B                     STR_8:
   420  007F1B  41                 	db	65	;'A'
   421  007F1C  64                 	db	100	;'d'
   422  007F1D  64                 	db	100	;'d'
   423  007F1E  72                 	db	114	;'r'
   424  007F1F  65                 	db	101	;'e'
   425  007F20  73                 	db	115	;'s'
   426  007F21  73                 	db	115	;'s'
   427  007F22  20                 	db	32
   428  007F23  6F                 	db	111	;'o'
   429  007F24  66                 	db	102	;'f'
   430  007F25  20                 	db	32
   431  007F26  63                 	db	99	;'c'
   432  007F27  75                 	db	117	;'u'
   433  007F28  72                 	db	114	;'r'
   434  007F29  72                 	db	114	;'r'
   435  007F2A  65                 	db	101	;'e'
   436  007F2B  6E                 	db	110	;'n'
   437  007F2C  74                 	db	116	;'t'
   438  007F2D  20                 	db	32
   439  007F2E  73                 	db	115	;'s'
   440  007F2F  65                 	db	101	;'e'
   441  007F30  63                 	db	99	;'c'
   442  007F31  74                 	db	116	;'t'
   443  007F32  6F                 	db	111	;'o'
   444  007F33  72                 	db	114	;'r'
   445  007F34  3A                 	db	58	;':'
   446  007F35  20                 	db	32
   447  007F36  00                 	db	0
   448  007F37                     STR_23:
   449  007F37  77                 	db	119	;'w'
   450  007F38  72                 	db	114	;'r'
   451  007F39  69                 	db	105	;'i'
   452  007F3A  74                 	db	116	;'t'
   453  007F3B  65                 	db	101	;'e'
   454  007F3C  20                 	db	32
   455  007F3D  65                 	db	101	;'e'
   456  007F3E  72                 	db	114	;'r'
   457  007F3F  72                 	db	114	;'r'
   458  007F40  6F                 	db	111	;'o'
   459  007F41  72                 	db	114	;'r'
   460  007F42  20                 	db	32
   461  007F43  6F                 	db	111	;'o'
   462  007F44  63                 	db	99	;'c'
   463  007F45  63                 	db	99	;'c'
   464  007F46  75                 	db	117	;'u'
   465  007F47  72                 	db	114	;'r'
   466  007F48  65                 	db	101	;'e'
   467  007F49  64                 	db	100	;'d'
   468  007F4A  21                 	db	33
   469  007F4B  0A                 	db	10
   470  007F4C  00                 	db	0
   471  007F4D                     STR_22:
   472  007F4D  53                 	db	83	;'S'
   473  007F4E  65                 	db	101	;'e'
   474  007F4F  6E                 	db	110	;'n'
   475  007F50  64                 	db	100	;'d'
   476  007F51  69                 	db	105	;'i'
   477  007F52  6E                 	db	110	;'n'
   478  007F53  67                 	db	103	;'g'
   479  007F54  20                 	db	32
   480  007F55  64                 	db	100	;'d'
   481  007F56  61                 	db	97	;'a'
   482  007F57  74                 	db	116	;'t'
   483  007F58  61                 	db	97	;'a'
   484  007F59  20                 	db	32
   485  007F5A  62                 	db	98	;'b'
   486  007F5B  6C                 	db	108	;'l'
   487  007F5C  6F                 	db	111	;'o'
   488  007F5D  63                 	db	99	;'c'
   489  007F5E  6B                 	db	107	;'k'
   490  007F5F  2E                 	db	46
   491  007F60  2E                 	db	46
   492  007F61  2E                 	db	46
   493  007F62  00                 	db	0
   494  007F63                     STR_24:
   495  007F63  43                 	db	67	;'C'
   496  007F64  52                 	db	82	;'R'
   497  007F65  43                 	db	67	;'C'
   498  007F66  20                 	db	32
   499  007F67  65                 	db	101	;'e'
   500  007F68  72                 	db	114	;'r'
   501  007F69  72                 	db	114	;'r'
   502  007F6A  6F                 	db	111	;'o'
   503  007F6B  72                 	db	114	;'r'
   504  007F6C  20                 	db	32
   505  007F6D  6F                 	db	111	;'o'
   506  007F6E  63                 	db	99	;'c'
   507  007F6F  63                 	db	99	;'c'
   508  007F70  75                 	db	117	;'u'
   509  007F71  72                 	db	114	;'r'
   510  007F72  65                 	db	101	;'e'
   511  007F73  64                 	db	100	;'d'
   512  007F74  21                 	db	33
   513  007F75  0A                 	db	10
   514  007F76  00                 	db	0
   515  007F77                     STR_4:
   516  007F77  53                 	db	83	;'S'
   517  007F78  65                 	db	101	;'e'
   518  007F79  63                 	db	99	;'c'
   519  007F7A  74                 	db	116	;'t'
   520  007F7B  6F                 	db	111	;'o'
   521  007F7C  72                 	db	114	;'r'
   522  007F7D  20                 	db	32
   523  007F7E  30                 	db	48	;'0'
   524  007F7F  20                 	db	32
   525  007F80  61                 	db	97	;'a'
   526  007F81  64                 	db	100	;'d'
   527  007F82  64                 	db	100	;'d'
   528  007F83  72                 	db	114	;'r'
   529  007F84  65                 	db	101	;'e'
   530  007F85  73                 	db	115	;'s'
   531  007F86  73                 	db	115	;'s'
   532  007F87  3A                 	db	58	;':'
   533  007F88  20                 	db	32
   534  007F89  00                 	db	0
   535  007F8A                     STR_20:
   536  007F8A  53                 	db	83	;'S'
   537  007F8B  65                 	db	101	;'e'
   538  007F8C  6E                 	db	110	;'n'
   539  007F8D  64                 	db	100	;'d'
   540  007F8E  69                 	db	105	;'i'
   541  007F8F  6E                 	db	110	;'n'
   542  007F90  67                 	db	103	;'g'
   543  007F91  20                 	db	32
   544  007F92  43                 	db	67	;'C'
   545  007F93  4D                 	db	77	;'M'
   546  007F94  44                 	db	68	;'D'
   547  007F95  32                 	db	50	;'2'
   548  007F96  34                 	db	52	;'4'
   549  007F97  2E                 	db	46
   550  007F98  2E                 	db	46
   551  007F99  2E                 	db	46
   552  007F9A  00                 	db	0
   553  007F9B                     STR_18:
   554  007F9B  53                 	db	83	;'S'
   555  007F9C  65                 	db	101	;'e'
   556  007F9D  6E                 	db	110	;'n'
   557  007F9E  64                 	db	100	;'d'
   558  007F9F  69                 	db	105	;'i'
   559  007FA0  6E                 	db	110	;'n'
   560  007FA1  67                 	db	103	;'g'
   561  007FA2  20                 	db	32
   562  007FA3  43                 	db	67	;'C'
   563  007FA4  4D                 	db	77	;'M'
   564  007FA5  44                 	db	68	;'D'
   565  007FA6  31                 	db	49	;'1'
   566  007FA7  37                 	db	55	;'7'
   567  007FA8  2E                 	db	46
   568  007FA9  2E                 	db	46
   569  007FAA  2E                 	db	46
   570  007FAB  00                 	db	0
   571  007FAC                     STR_3:
   572  007FAC  43                 	db	67	;'C'
   573  007FAD  6C                 	db	108	;'l'
   574  007FAE  75                 	db	117	;'u'
   575  007FAF  73                 	db	115	;'s'
   576  007FB0  74                 	db	116	;'t'
   577  007FB1  65                 	db	101	;'e'
   578  007FB2  72                 	db	114	;'r'
   579  007FB3  20                 	db	32
   580  007FB4  6E                 	db	110	;'n'
   581  007FB5  75                 	db	117	;'u'
   582  007FB6  6D                 	db	109	;'m'
   583  007FB7  62                 	db	98	;'b'
   584  007FB8  65                 	db	101	;'e'
   585  007FB9  72                 	db	114	;'r'
   586  007FBA  3A                 	db	58	;':'
   587  007FBB  20                 	db	32
   588  007FBC  00                 	db	0
   589  007FBD                     STR_7:
   590  007FBD  45                 	db	69	;'E'
   591  007FBE  6E                 	db	110	;'n'
   592  007FBF  74                 	db	116	;'t'
   593  007FC0  72                 	db	114	;'r'
   594  007FC1  79                 	db	121	;'y'
   595  007FC2  20                 	db	32
   596  007FC3  6E                 	db	110	;'n'
   597  007FC4  75                 	db	117	;'u'
   598  007FC5  6D                 	db	109	;'m'
   599  007FC6  62                 	db	98	;'b'
   600  007FC7  65                 	db	101	;'e'
   601  007FC8  72                 	db	114	;'r'
   602  007FC9  3A                 	db	58	;':'
   603  007FCA  20                 	db	32
   604  007FCB  00                 	db	0
   605  007FCC                     STR_10:
   606  007FCC  5A                 	db	90	;'Z'
   607  007FCD  45                 	db	69	;'E'
   608  007FCE  54                 	db	84	;'T'
   609  007FCF  41                 	db	65	;'A'
   610  007FD0  4C                 	db	76	;'L'
   611  007FD1  4F                 	db	79	;'O'
   612  007FD2  47                 	db	71	;'G'
   613  007FD3  53                 	db	83	;'S'
   614  007FD4  2E                 	db	46
   615  007FD5  54                 	db	84	;'T'
   616  007FD6  58                 	db	88	;'X'
   617  007FD7  54                 	db	84	;'T'
   618  007FD8  00                 	db	0
   619  007FD9                     STR_9:
   620  007FD9  46                 	db	70	;'F'
   621  007FDA  69                 	db	105	;'i'
   622  007FDB  6C                 	db	108	;'l'
   623  007FDC  65                 	db	101	;'e'
   624  007FDD  20                 	db	32
   625  007FDE  73                 	db	115	;'s'
   626  007FDF  69                 	db	105	;'i'
   627  007FE0  7A                 	db	122	;'z'
   628  007FE1  65                 	db	101	;'e'
   629  007FE2  3A                 	db	58	;':'
   630  007FE3  20                 	db	32
   631  007FE4  00                 	db	0
   632  007FE5                     STR_14:
   633  007FE5  73                 	db	115	;'s'
   634  007FE6  75                 	db	117	;'u'
   635  007FE7  63                 	db	99	;'c'
   636  007FE8  63                 	db	99	;'c'
   637  007FE9  65                 	db	101	;'e'
   638  007FEA  73                 	db	115	;'s'
   639  007FEB  73                 	db	115	;'s'
   640  007FEC  21                 	db	33
   641  007FED  0A                 	db	10
   642  007FEE  00                 	db	0
   643  007FEF                     STR_27:
   644  007FEF  74                 	db	116	;'t'
   645  007FF0  69                 	db	105	;'i'
   646  007FF1  6D                 	db	109	;'m'
   647  007FF2  65                 	db	101	;'e'
   648  007FF3  6F                 	db	111	;'o'
   649  007FF4  75                 	db	117	;'u'
   650  007FF5  74                 	db	116	;'t'
   651  007FF6  21                 	db	33
   652  007FF7  00                 	db	0
   653  007FF8                     STR_2:
   654  007FF8  64                 	db	100	;'d'
   655  007FF9  6F                 	db	111	;'o'
   656  007FFA  6E                 	db	110	;'n'
   657  007FFB  65                 	db	101	;'e'
   658  007FFC  21                 	db	33
   659  007FFD  0A                 	db	10
   660  007FFE  00                 	db	0
   661  0000                     
   662                           ; #config settings
   663  007FFF  00                 	db	0	; dummy byte at the end
   664  0000                     
   665                           	psect	cinit
   666  006DB0                     __pcinit:
   667                           	opt stack 0
   668  006DB0                     start_initialization:
   669                           	opt stack 0
   670  006DB0                     __initialization:
   671                           	opt stack 0
   672                           
   673                           ; Initialize objects allocated to COMRAM (2 bytes)
   674                           ; load TBLPTR registers with __pidataCOMRAM
   675  006DB0  0EC2               	movlw	low __pidataCOMRAM
   676  006DB2  6EF6               	movwf	tblptrl,c
   677  006DB4  0E6B               	movlw	high __pidataCOMRAM
   678  006DB6  6EF7               	movwf	tblptrh,c
   679  006DB8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   680  006DBA  6EF8               	movwf	tblptru,c
   681  006DBC  0009               	tblrd		*+	;fetch initializer
   682  006DBE  CFF5 F05D          	movff	tablat,__pdataCOMRAM
   683  006DC2  0009               	tblrd		*+	;fetch initializer
   684  006DC4  CFF5 F05E          	movff	tablat,__pdataCOMRAM+1
   685                           
   686                           ; Clear objects allocated to BIGRAM (512 bytes)
   687  006DC8  EE00  F076         	lfsr	0,__pbssBIGRAM
   688  006DCC  EE12 F000          	lfsr	1,512
   689  006DD0                     clear_0:
   690  006DD0  6AEE               	clrf	postinc0,c
   691  006DD2  50E5               	movf	postdec1,w,c
   692  006DD4  50E1               	movf	fsr1l,w,c
   693  006DD6  E1FC               	bnz	clear_0
   694  006DD8  50E2               	movf	fsr1h,w,c
   695  006DDA  E1FA               	bnz	clear_0
   696                           
   697                           ; Clear objects allocated to BANK0 (22 bytes)
   698  006DDC  EE00  F060         	lfsr	0,__pbssBANK0
   699  006DE0  0E16               	movlw	22
   700  006DE2                     clear_1:
   701  006DE2  6AEE               	clrf	postinc0,c
   702  006DE4  06E8               	decf	wreg,f,c
   703  006DE6  E1FD               	bnz	clear_1
   704                           
   705                           ; Clear objects allocated to COMRAM (45 bytes)
   706  006DE8  EE00  F030         	lfsr	0,__pbssCOMRAM
   707  006DEC  0E2D               	movlw	45
   708  006DEE                     clear_2:
   709  006DEE  6AEE               	clrf	postinc0,c
   710  006DF0  06E8               	decf	wreg,f,c
   711  006DF2  E1FD               	bnz	clear_2
   712  006DF4                     end_of_initialization:
   713                           	opt stack 0
   714  006DF4                     __end_of__initialization:
   715                           	opt stack 0
   716  006DF4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   717  006DF6  6EF8               	movwf	tblptru,c
   718  006DF8  0100               	movlb	0
   719  006DFA  EFB5  F036         	goto	_main	;jump to C main() function
   720                           tblptru	equ	0xFF8
   721                           tblptrh	equ	0xFF7
   722                           tblptrl	equ	0xFF6
   723                           tablat	equ	0xFF5
   724                           postinc0	equ	0xFEE
   725                           wreg	equ	0xFE8
   726                           postdec1	equ	0xFE5
   727                           fsr1h	equ	0xFE2
   728                           fsr1l	equ	0xFE1
   729                           
   730                           	psect	bssCOMRAM
   731  000030                     __pbssCOMRAM:
   732                           	opt stack 0
   733  000030                     _FAT_address:
   734                           	opt stack 0
   735  000030                     	ds	8
   736  000038                     _file_length:
   737                           	opt stack 0
   738  000038                     	ds	4
   739  00003C                     _current_sector_address:
   740                           	opt stack 0
   741  00003C                     	ds	4
   742  000040                     _rootdir_start:
   743                           	opt stack 0
   744  000040                     	ds	4
   745  000044                     _byte_number:
   746                           	opt stack 0
   747  000044                     	ds	2
   748  000046                     _entry_addr:
   749                           	opt stack 0
   750  000046                     	ds	2
   751  000048                     _cluster_number:
   752                           	opt stack 0
   753  000048                     	ds	2
   754  00004A                     _sectors_FAT:
   755                           	opt stack 0
   756  00004A                     	ds	2
   757  00004C                     _root_entries:
   758                           	opt stack 0
   759  00004C                     	ds	2
   760  00004E                     _sectors_reserved:
   761                           	opt stack 0
   762  00004E                     	ds	2
   763  000050                     _sector_size:
   764                           	opt stack 0
   765  000050                     	ds	2
   766  000052                     _card_response:
   767                           	opt stack 0
   768  000052                     	ds	1
   769  000053                     _no_response:
   770                           	opt stack 0
   771  000053                     	ds	1
   772  000054                     _current_sector:
   773                           	opt stack 0
   774  000054                     	ds	1
   775  000055                     _FAT_copies:
   776                           	opt stack 0
   777  000055                     	ds	1
   778  000056                     _SDcommand:
   779                           	opt stack 0
   780  000056                     	ds	6
   781  00005C                     _sectors_cluster:
   782                           	opt stack 0
   783  00005C                     	ds	1
   784                           tblptru	equ	0xFF8
   785                           tblptrh	equ	0xFF7
   786                           tblptrl	equ	0xFF6
   787                           tablat	equ	0xFF5
   788                           postinc0	equ	0xFEE
   789                           wreg	equ	0xFE8
   790                           postdec1	equ	0xFE5
   791                           fsr1h	equ	0xFE2
   792                           fsr1l	equ	0xFE1
   793                           
   794                           	psect	dataCOMRAM
   795  00005D                     __pdataCOMRAM:
   796                           	opt stack 0
   797  00005D                     _timeout:
   798                           	opt stack 0
   799  00005D                     	ds	2
   800                           tblptru	equ	0xFF8
   801                           tblptrh	equ	0xFF7
   802                           tblptrl	equ	0xFF6
   803                           tablat	equ	0xFF5
   804                           postinc0	equ	0xFEE
   805                           wreg	equ	0xFE8
   806                           postdec1	equ	0xFE5
   807                           fsr1h	equ	0xFE2
   808                           fsr1l	equ	0xFE1
   809                           
   810                           	psect	bssBANK0
   811  000060                     __pbssBANK0:
   812                           	opt stack 0
   813  000060                     _start_sector_address:
   814                           	opt stack 0
   815  000060                     	ds	4
   816  000064                     _datareg_start:
   817                           	opt stack 0
   818  000064                     	ds	4
   819  000068                     _part1_addr:
   820                           	opt stack 0
   821  000068                     	ds	4
   822  00006C                     _address_buffer:
   823                           	opt stack 0
   824  00006C                     	ds	10
   825                           tblptru	equ	0xFF8
   826                           tblptrh	equ	0xFF7
   827                           tblptrl	equ	0xFF6
   828                           tablat	equ	0xFF5
   829                           postinc0	equ	0xFEE
   830                           wreg	equ	0xFE8
   831                           postdec1	equ	0xFE5
   832                           fsr1h	equ	0xFE2
   833                           fsr1l	equ	0xFE1
   834                           
   835                           	psect	bssBIGRAM
   836  000076                     __pbssBIGRAM:
   837                           	opt stack 0
   838  000076                     _SDdata:
   839                           	opt stack 0
   840  000076                     	ds	512
   841                           tblptru	equ	0xFF8
   842                           tblptrh	equ	0xFF7
   843                           tblptrl	equ	0xFF6
   844                           tablat	equ	0xFF5
   845                           postinc0	equ	0xFEE
   846                           wreg	equ	0xFE8
   847                           postdec1	equ	0xFE5
   848                           fsr1h	equ	0xFE2
   849                           fsr1l	equ	0xFE1
   850                           
   851                           	psect	cstackCOMRAM
   852  000001                     __pcstackCOMRAM:
   853                           	opt stack 0
   854  000001                     ?___wmul:
   855                           	opt stack 0
   856  000001                     ?___lwdiv:
   857                           	opt stack 0
   858  000001                     ?___lwmod:
   859                           	opt stack 0
   860  000001                     ?___lmul:
   861                           	opt stack 0
   862  000001                     ?___lldiv:
   863                           	opt stack 0
   864  000001                     ?___llmod:
   865                           	opt stack 0
   866  000001                     SDcard_get_response@response:
   867                           	opt stack 0
   868  000001                     spi_init@speed_mode:
   869                           	opt stack 0
   870  000001                     spi_single_send@tmp:
   871                           	opt stack 0
   872  000001                     uart_putc@c:
   873                           	opt stack 0
   874  000001                     spi_send@data:
   875                           	opt stack 0
   876  000001                     spi_receive@data:
   877                           	opt stack 0
   878  000001                     ___wmul@multiplier:
   879                           	opt stack 0
   880  000001                     ___lwdiv@dividend:
   881                           	opt stack 0
   882  000001                     ___lwmod@dividend:
   883                           	opt stack 0
   884  000001                     ___lmul@multiplier:
   885                           	opt stack 0
   886  000001                     ___lldiv@dividend:
   887                           	opt stack 0
   888  000001                     ___llmod@dividend:
   889                           	opt stack 0
   890                           
   891                           ; 4 bytes @ 0x0
   892  000001                     	ds	1
   893  000002                     spi_single_send@data:
   894                           	opt stack 0
   895  000002                     uart_puts@s:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x1
   899  000002                     	ds	1
   900  000003                     spi_send@length:
   901                           	opt stack 0
   902  000003                     spi_receive@length:
   903                           	opt stack 0
   904  000003                     ___wmul@multiplicand:
   905                           	opt stack 0
   906  000003                     ___lwdiv@divisor:
   907                           	opt stack 0
   908  000003                     ___lwmod@divisor:
   909                           	opt stack 0
   910                           
   911                           ; 2 bytes @ 0x2
   912  000003                     	ds	1
   913  000004                     
   914                           ; 1 bytes @ 0x3
   915  000004                     	ds	1
   916  000005                     spi_send@tmp:
   917                           	opt stack 0
   918  000005                     ___lwmod@counter:
   919                           	opt stack 0
   920  000005                     ___wmul@product:
   921                           	opt stack 0
   922  000005                     ___lwdiv@quotient:
   923                           	opt stack 0
   924  000005                     ___lmul@multiplicand:
   925                           	opt stack 0
   926  000005                     ___lldiv@divisor:
   927                           	opt stack 0
   928  000005                     ___llmod@divisor:
   929                           	opt stack 0
   930                           
   931                           ; 4 bytes @ 0x4
   932  000005                     	ds	1
   933  000006                     SDcard_init@i:
   934                           	opt stack 0
   935  000006                     SDcard_read_block@address:
   936                           	opt stack 0
   937  000006                     SDcard_write_block@address:
   938                           	opt stack 0
   939                           
   940                           ; 4 bytes @ 0x5
   941  000006                     	ds	1
   942  000007                     SDcard_init@b:
   943                           	opt stack 0
   944  000007                     ___lwdiv@counter:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x6
   948  000007                     	ds	1
   949  000008                     utoa@buf:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x7
   953  000008                     	ds	1
   954  000009                     ___llmod@counter:
   955                           	opt stack 0
   956  000009                     ___lmul@product:
   957                           	opt stack 0
   958  000009                     ___lldiv@quotient:
   959                           	opt stack 0
   960                           
   961                           ; 4 bytes @ 0x8
   962  000009                     	ds	1
   963  00000A                     utoa@val:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x9
   967  00000A                     	ds	2
   968  00000C                     utoa@base:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0xB
   972  00000C                     	ds	1
   973  00000D                     ??_mount_disk:
   974  00000D                     ___lldiv@counter:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0xC
   978  00000D                     	ds	1
   979  00000E                     uart_init@baudrate:
   980                           	opt stack 0
   981  00000E                     utoa@v:
   982                           	opt stack 0
   983  00000E                     ultoa@buf:
   984                           	opt stack 0
   985                           
   986                           ; 2 bytes @ 0xD
   987  00000E                     	ds	2
   988  000010                     ??_uart_init:
   989  000010                     utoa@c:
   990                           	opt stack 0
   991  000010                     ultoa@val:
   992                           	opt stack 0
   993                           
   994                           ; 4 bytes @ 0xF
   995  000010                     	ds	1
   996  000011                     itoa@buf:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x10
  1000  000011                     	ds	2
  1001  000013                     itoa@val:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x12
  1005  000013                     	ds	1
  1006  000014                     uart_init@BRG_val:
  1007                           	opt stack 0
  1008  000014                     ultoa@base:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x13
  1012  000014                     	ds	1
  1013  000015                     itoa@base:
  1014                           	opt stack 0
  1015                           
  1016                           ; 2 bytes @ 0x14
  1017  000015                     	ds	1
  1018  000016                     ultoa@v:
  1019                           	opt stack 0
  1020                           
  1021                           ; 4 bytes @ 0x15
  1022  000016                     	ds	1
  1023  000017                     itoa@cp:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0x16
  1027  000017                     	ds	3
  1028  00001A                     ultoa@c:
  1029                           	opt stack 0
  1030                           
  1031                           ; 1 bytes @ 0x19
  1032  00001A                     	ds	1
  1033  00001B                     ltoa@buf:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x1A
  1037  00001B                     	ds	2
  1038  00001D                     ltoa@val:
  1039                           	opt stack 0
  1040                           
  1041                           ; 4 bytes @ 0x1C
  1042  00001D                     	ds	4
  1043  000021                     ltoa@base:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x20
  1047  000021                     	ds	2
  1048  000023                     ltoa@cp:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x22
  1052  000023                     	ds	2
  1053  000025                     ??_file_update_size:
  1054  000025                     file_create@filename:
  1055                           	opt stack 0
  1056  000025                     file_append@string:
  1057                           	opt stack 0
  1058                           
  1059                           ; 2 bytes @ 0x24
  1060  000025                     	ds	2
  1061  000027                     ??_file_create:
  1062  000027                     
  1063                           ; 1 bytes @ 0x26
  1064  000027                     	ds	4
  1065  00002B                     _file_create$1476:
  1066                           	opt stack 0
  1067                           
  1068                           ; 4 bytes @ 0x2A
  1069  00002B                     	ds	4
  1070  00002F                     file_create@offset:
  1071                           	opt stack 0
  1072                           
  1073                           ; 1 bytes @ 0x2E
  1074  00002F                     	ds	1
  1075  000030                     tblptru	equ	0xFF8
  1076                           tblptrh	equ	0xFF7
  1077                           tblptrl	equ	0xFF6
  1078                           tablat	equ	0xFF5
  1079                           postinc0	equ	0xFEE
  1080                           wreg	equ	0xFE8
  1081                           postdec1	equ	0xFE5
  1082                           fsr1h	equ	0xFE2
  1083                           fsr1l	equ	0xFE1
  1084                           
  1085                           ; 1 bytes @ 0x2F
  1086 ;;
  1087 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1088 ;;
  1089 ;; *************** function _main *****************
  1090 ;; Defined at:
  1091 ;;		line 25 in file "../../picSD-master/main.c"
  1092 ;; Parameters:    Size  Location     Type
  1093 ;;		None
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;		None
  1096 ;; Return value:  Size  Location     Type
  1097 ;;                  2  110[None  ] int 
  1098 ;; Registers used:
  1099 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1100 ;; Tracked objects:
  1101 ;;		On entry : 0/0
  1102 ;;		On exit  : 0/0
  1103 ;;		Unchanged: 0/0
  1104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1105 ;;      Params:         0       0       0       0       0       0       0
  1106 ;;      Locals:         0       0       0       0       0       0       0
  1107 ;;      Temps:          0       0       0       0       0       0       0
  1108 ;;      Totals:         0       0       0       0       0       0       0
  1109 ;;Total ram usage:        0 bytes
  1110 ;; Hardware stack levels required when called:    5
  1111 ;; This function calls:
  1112 ;;		_SDcard_init
  1113 ;;		_file_append
  1114 ;;		_file_create
  1115 ;;		_file_update_size
  1116 ;;		_mount_disk
  1117 ;;		_sector_open
  1118 ;;		_spi_init
  1119 ;;		_uart_init
  1120 ;; This function is called by:
  1121 ;;		Startup code after reset
  1122 ;; This function uses a non-reentrant model
  1123 ;;
  1124                           
  1125                           	psect	text0
  1126  006D6A                     __ptext0:
  1127                           	opt stack 0
  1128  006D6A                     _main:
  1129                           	opt stack 26
  1130                           
  1131                           ;main.c: 26: uart_init(9600);
  1132                           
  1133                           ;incstack = 0
  1134  006D6A  0E25               	movlw	37
  1135  006D6C  6E0F               	movwf	uart_init@baudrate+1,c
  1136  006D6E  0E80               	movlw	128
  1137  006D70  6E0E               	movwf	uart_init@baudrate,c
  1138  006D72  EC7A  F037         	call	_uart_init	;wreg free
  1139                           
  1140                           ;main.c: 27: spi_init(2);
  1141  006D76  0E02               	movlw	2
  1142  006D78  EC04  F036         	call	_spi_init
  1143                           
  1144                           ;main.c: 28: SDcard_init();
  1145  006D7C  ECB0  F03A         	call	_SDcard_init	;wreg free
  1146                           
  1147                           ;main.c: 29: spi_init(0);
  1148  006D80  0E00               	movlw	0
  1149  006D82  EC04  F036         	call	_spi_init
  1150                           
  1151                           ;main.c: 31: mount_disk();
  1152  006D86  EC49  F03B         	call	_mount_disk	;wreg free
  1153                           
  1154                           ;main.c: 32: file_create("ZETALOGS.TXT");
  1155  006D8A  0ECC               	movlw	low STR_10
  1156  006D8C  6E25               	movwf	file_create@filename,c
  1157  006D8E  0E7F               	movlw	high STR_10
  1158  006D90  6E26               	movwf	file_create@filename+1,c
  1159  006D92  EC4F  F03C         	call	_file_create	;wreg free
  1160                           
  1161                           ;main.c: 34: sector_open();
  1162  006D96  ECB0  F038         	call	_sector_open	;wreg free
  1163                           
  1164                           ;main.c: 35: file_append("This line contains 32characters\n");
  1165  006D9A  0EFA               	movlw	low STR_11
  1166  006D9C  6E25               	movwf	file_append@string,c
  1167  006D9E  0E7E               	movlw	high STR_11
  1168  006DA0  6E26               	movwf	file_append@string+1,c
  1169  006DA2  ECCF  F037         	call	_file_append	;wreg free
  1170                           
  1171                           ;main.c: 38: file_update_size();
  1172  006DA6  EC48  F039         	call	_file_update_size	;wreg free
  1173                           
  1174                           ;main.c: 47: TRISCbits.TRISC0 = 0;
  1175  006DAA  9094               	bcf	3988,0,c	;volatile
  1176                           
  1177                           ;main.c: 48: LATCbits.LATC0 = 1;
  1178  006DAC  808B               	bsf	3979,0,c	;volatile
  1179  006DAE                     l111:
  1180  006DAE  D7FF               	goto	l111
  1181  006DB0                     __end_of_main:
  1182                           	opt stack 0
  1183                           tblptru	equ	0xFF8
  1184                           tblptrh	equ	0xFF7
  1185                           tblptrl	equ	0xFF6
  1186                           tablat	equ	0xFF5
  1187                           postinc0	equ	0xFEE
  1188                           wreg	equ	0xFE8
  1189                           postdec1	equ	0xFE5
  1190                           fsr1h	equ	0xFE2
  1191                           fsr1l	equ	0xFE1
  1192                           
  1193 ;; *************** function _uart_init *****************
  1194 ;; Defined at:
  1195 ;;		line 8 in file "../../picSD-master/uart.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;  baudrate        2   13[COMRAM] unsigned int 
  1198 ;; Auto vars:     Size  Location     Type
  1199 ;;  BRG_val         2   19[COMRAM] unsigned int 
  1200 ;; Return value:  Size  Location     Type
  1201 ;;                  1    wreg      void 
  1202 ;; Registers used:
  1203 ;;		wreg, status,2, status,0, cstack
  1204 ;; Tracked objects:
  1205 ;;		On entry : 0/0
  1206 ;;		On exit  : 0/0
  1207 ;;		Unchanged: 0/0
  1208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1209 ;;      Params:         2       0       0       0       0       0       0
  1210 ;;      Locals:         2       0       0       0       0       0       0
  1211 ;;      Temps:          4       0       0       0       0       0       0
  1212 ;;      Totals:         8       0       0       0       0       0       0
  1213 ;;Total ram usage:        8 bytes
  1214 ;; Hardware stack levels used:    1
  1215 ;; Hardware stack levels required when called:    1
  1216 ;; This function calls:
  1217 ;;		___lldiv
  1218 ;; This function is called by:
  1219 ;;		_main
  1220 ;; This function uses a non-reentrant model
  1221 ;;
  1222                           
  1223                           	psect	text1
  1224  006EF4                     __ptext1:
  1225                           	opt stack 0
  1226  006EF4                     _uart_init:
  1227                           	opt stack 29
  1228                           
  1229                           ;uart.c: 10: unsigned int BRG_val = ((16000000UL/16)/(baudrate-1));
  1230                           
  1231                           ;incstack = 0
  1232  006EF4  0E40               	movlw	64
  1233  006EF6  6E01               	movwf	___lldiv@dividend,c
  1234  006EF8  0E42               	movlw	66
  1235  006EFA  6E02               	movwf	___lldiv@dividend+1,c
  1236  006EFC  0E0F               	movlw	15
  1237  006EFE  6E03               	movwf	___lldiv@dividend+2,c
  1238  006F00  0E00               	movlw	0
  1239  006F02  6E04               	movwf	___lldiv@dividend+3,c
  1240  006F04  0EFF               	movlw	255
  1241  006F06  6E10               	movwf	??_uart_init& (0+255),c
  1242  006F08  0EFF               	movlw	255
  1243  006F0A  6E11               	movwf	(??_uart_init+1)& (0+255),c
  1244  006F0C  C00E  F012         	movff	uart_init@baudrate,??_uart_init+2
  1245  006F10  C00F  F013         	movff	uart_init@baudrate+1,??_uart_init+3
  1246  006F14  5010               	movf	??_uart_init,w,c
  1247  006F16  2612               	addwf	??_uart_init+2,f,c
  1248  006F18  5011               	movf	??_uart_init+1,w,c
  1249  006F1A  2213               	addwfc	??_uart_init+3,f,c
  1250  006F1C  C012  F005         	movff	??_uart_init+2,___lldiv@divisor
  1251  006F20  C013  F006         	movff	??_uart_init+3,___lldiv@divisor+1
  1252  006F24  6A07               	clrf	___lldiv@divisor+2,c
  1253  006F26  6A08               	clrf	___lldiv@divisor+3,c
  1254  006F28  EC6F  F038         	call	___lldiv	;wreg free
  1255  006F2C  C001  F014         	movff	?___lldiv,uart_init@BRG_val
  1256  006F30  C002  F015         	movff	?___lldiv+1,uart_init@BRG_val+1
  1257                           
  1258                           ;uart.c: 11: SPBRGH1 = BRG_val>>8;
  1259  006F34  5015               	movf	uart_init@BRG_val+1,w,c
  1260  006F36  6EB0               	movwf	4016,c	;volatile
  1261                           
  1262                           ;uart.c: 12: SPBRG1 = BRG_val;
  1263  006F38  C014  FFAF         	movff	uart_init@BRG_val,4015	;volatile
  1264                           
  1265                           ;uart.c: 14: TXSTAbits.BRGH = 1;
  1266  006F3C  84AC               	bsf	4012,2,c	;volatile
  1267                           
  1268                           ;uart.c: 15: TRISCbits.RC6 = 1;
  1269  006F3E  8C94               	bsf	3988,6,c	;volatile
  1270                           
  1271                           ;uart.c: 16: TRISCbits.RC7 = 1;
  1272  006F40  8E94               	bsf	3988,7,c	;volatile
  1273                           
  1274                           ;uart.c: 18: TXSTA1bits.TXEN = 1;
  1275  006F42  8AAC               	bsf	4012,5,c	;volatile
  1276                           
  1277                           ;uart.c: 19: RCSTA1bits.SPEN = 1;
  1278  006F44  8EAB               	bsf	4011,7,c	;volatile
  1279  006F46  0012               	return		;funcret
  1280  006F48                     __end_of_uart_init:
  1281                           	opt stack 0
  1282                           tblptru	equ	0xFF8
  1283                           tblptrh	equ	0xFF7
  1284                           tblptrl	equ	0xFF6
  1285                           tablat	equ	0xFF5
  1286                           postinc0	equ	0xFEE
  1287                           wreg	equ	0xFE8
  1288                           postdec1	equ	0xFE5
  1289                           fsr1h	equ	0xFE2
  1290                           fsr1l	equ	0xFE1
  1291                           
  1292 ;; *************** function _spi_init *****************
  1293 ;; Defined at:
  1294 ;;		line 10 in file "../../picSD-master/spi.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;  speed_mode      1    wreg     unsigned char 
  1297 ;; Auto vars:     Size  Location     Type
  1298 ;;  speed_mode      1    0[COMRAM] unsigned char 
  1299 ;; Return value:  Size  Location     Type
  1300 ;;                  1    wreg      void 
  1301 ;; Registers used:
  1302 ;;		wreg, status,2, status,0
  1303 ;; Tracked objects:
  1304 ;;		On entry : 0/0
  1305 ;;		On exit  : 0/0
  1306 ;;		Unchanged: 0/0
  1307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1308 ;;      Params:         0       0       0       0       0       0       0
  1309 ;;      Locals:         1       0       0       0       0       0       0
  1310 ;;      Temps:          0       0       0       0       0       0       0
  1311 ;;      Totals:         1       0       0       0       0       0       0
  1312 ;;Total ram usage:        1 bytes
  1313 ;; Hardware stack levels used:    1
  1314 ;; This function calls:
  1315 ;;		Nothing
  1316 ;; This function is called by:
  1317 ;;		_main
  1318 ;; This function uses a non-reentrant model
  1319 ;;
  1320                           
  1321                           	psect	text2
  1322  006C08                     __ptext2:
  1323                           	opt stack 0
  1324  006C08                     _spi_init:
  1325                           	opt stack 30
  1326                           
  1327                           ;incstack = 0
  1328                           ;spi_init@speed_mode stored from wreg
  1329  006C08  6E01               	movwf	spi_init@speed_mode,c
  1330                           
  1331                           ;spi.c: 12: SSP1CON1bits.SSPEN = 0;
  1332  006C0A  9AC6               	bcf	4038,5,c	;volatile
  1333                           
  1334                           ;spi.c: 14: TRISCbits.TRISC4 = 1;
  1335  006C0C  8894               	bsf	3988,4,c	;volatile
  1336                           
  1337                           ;spi.c: 15: ANSELCbits.ANSC4 = 0;
  1338  006C0E  010F               	movlb	15	; () banked
  1339  006C10  993A               	bcf	58,4,b	;volatile
  1340                           
  1341                           ;spi.c: 17: TRISAbits.TRISA5 = 1;
  1342  006C12  8A92               	bsf	3986,5,c	;volatile
  1343                           
  1344                           ;spi.c: 20: TRISCbits.TRISC5 = 0;
  1345  006C14  9A94               	bcf	3988,5,c	;volatile
  1346                           
  1347                           ;spi.c: 21: TRISCbits.TRISC3 = 0;
  1348  006C16  9694               	bcf	3988,3,c	;volatile
  1349                           
  1350                           ;spi.c: 24: SSP1CON1bits.CKP = 0;
  1351  006C18  98C6               	bcf	4038,4,c	;volatile
  1352                           
  1353                           ;spi.c: 25: SSP1STATbits.CKE = 1;
  1354  006C1A  8CC7               	bsf	4039,6,c	;volatile
  1355                           
  1356                           ;spi.c: 26: SSP1STATbits.SMP = 1;
  1357  006C1C  8EC7               	bsf	4039,7,c	;volatile
  1358                           
  1359                           ; BSR set to: 15
  1360                           ;spi.c: 27: SSP1CON1bits.SSPM = speed_mode;
  1361  006C1E  50C6               	movf	4038,w,c	;volatile
  1362  006C20  1801               	xorwf	spi_init@speed_mode,w,c
  1363  006C22  0BF0               	andlw	-16
  1364  006C24  1801               	xorwf	spi_init@speed_mode,w,c
  1365  006C26  6EC6               	movwf	4038,c	;volatile
  1366                           
  1367                           ; BSR set to: 15
  1368                           ;spi.c: 28: SSP1CON1bits.SSPEN = 1;
  1369  006C28  8AC6               	bsf	4038,5,c	;volatile
  1370                           
  1371                           ; BSR set to: 15
  1372  006C2A  0012               	return		;funcret
  1373  006C2C                     __end_of_spi_init:
  1374                           	opt stack 0
  1375                           tblptru	equ	0xFF8
  1376                           tblptrh	equ	0xFF7
  1377                           tblptrl	equ	0xFF6
  1378                           tablat	equ	0xFF5
  1379                           postinc0	equ	0xFEE
  1380                           wreg	equ	0xFE8
  1381                           postdec1	equ	0xFE5
  1382                           fsr1h	equ	0xFE2
  1383                           fsr1l	equ	0xFE1
  1384                           
  1385 ;; *************** function _mount_disk *****************
  1386 ;; Defined at:
  1387 ;;		line 47 in file "../../picSD-master/fatfs.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;		None
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;		None
  1392 ;; Return value:  Size  Location     Type
  1393 ;;                  1    wreg      void 
  1394 ;; Registers used:
  1395 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1396 ;; Tracked objects:
  1397 ;;		On entry : 0/0
  1398 ;;		On exit  : 0/0
  1399 ;;		Unchanged: 0/0
  1400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1401 ;;      Params:         0       0       0       0       0       0       0
  1402 ;;      Locals:         0       0       0       0       0       0       0
  1403 ;;      Temps:          5       0       0       0       0       0       0
  1404 ;;      Totals:         5       0       0       0       0       0       0
  1405 ;;Total ram usage:        5 bytes
  1406 ;; Hardware stack levels used:    1
  1407 ;; Hardware stack levels required when called:    3
  1408 ;; This function calls:
  1409 ;;		_SDcard_read_block
  1410 ;;		___lmul
  1411 ;;		___wmul
  1412 ;; This function is called by:
  1413 ;;		_main
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           	psect	text3
  1418  007692                     __ptext3:
  1419                           	opt stack 0
  1420  007692                     _mount_disk:
  1421                           	opt stack 27
  1422                           
  1423                           ;fatfs.c: 49: SDcard_read_block(0x00000000);
  1424                           
  1425                           ; BSR set to: 15
  1426                           ;incstack = 0
  1427  007692  0E00               	movlw	0
  1428  007694  6E06               	movwf	SDcard_read_block@address,c
  1429  007696  0E00               	movlw	0
  1430  007698  6E07               	movwf	SDcard_read_block@address+1,c
  1431  00769A  0E00               	movlw	0
  1432  00769C  6E08               	movwf	SDcard_read_block@address+2,c
  1433  00769E  0E00               	movlw	0
  1434  0076A0  6E09               	movwf	SDcard_read_block@address+3,c
  1435  0076A2  EC32  F038         	call	_SDcard_read_block	;wreg free
  1436                           
  1437                           ;fatfs.c: 54: part1_addr = (unsigned long)SDdata[0x01C6];
  1438  0076A6  C23C  F00D         	movff	_SDdata+454,??_mount_disk
  1439  0076AA  500D               	movf	??_mount_disk,w,c
  1440  0076AC  0100               	movlb	0	; () banked
  1441  0076AE  6F68               	movwf	_part1_addr& (0+255),b
  1442  0076B0  6B69               	clrf	(_part1_addr+1)& (0+255),b
  1443  0076B2  6B6A               	clrf	(_part1_addr+2)& (0+255),b
  1444  0076B4  6B6B               	clrf	(_part1_addr+3)& (0+255),b
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;fatfs.c: 55: part1_addr |= ((unsigned long)SDdata[0x01C7]<<8);
  1448  0076B6  C23D  F00D         	movff	_SDdata+455,??_mount_disk
  1449  0076BA  C00D  F00E         	movff	??_mount_disk,??_mount_disk+1
  1450  0076BE  6A0F               	clrf	(??_mount_disk+2)& (0+255),c
  1451  0076C0  6A10               	clrf	(??_mount_disk+3)& (0+255),c
  1452  0076C2  6A11               	clrf	(??_mount_disk+4)& (0+255),c
  1453  0076C4  C010  F011         	movff	??_mount_disk+3,??_mount_disk+4
  1454  0076C8  C00F  F010         	movff	??_mount_disk+2,??_mount_disk+3
  1455  0076CC  C00E  F00F         	movff	??_mount_disk+1,??_mount_disk+2
  1456  0076D0  6A0E               	clrf	??_mount_disk+1,c
  1457  0076D2  500E               	movf	??_mount_disk+1,w,c
  1458  0076D4  1368               	iorwf	_part1_addr& (0+255),f,b
  1459  0076D6  500F               	movf	??_mount_disk+2,w,c
  1460  0076D8  1369               	iorwf	(_part1_addr+1)& (0+255),f,b
  1461  0076DA  5010               	movf	??_mount_disk+3,w,c
  1462  0076DC  136A               	iorwf	(_part1_addr+2)& (0+255),f,b
  1463  0076DE  5011               	movf	??_mount_disk+4,w,c
  1464  0076E0  136B               	iorwf	(_part1_addr+3)& (0+255),f,b
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;fatfs.c: 56: part1_addr |= ((unsigned long)SDdata[0x01C8]<<16);
  1468  0076E2  C23E  F00D         	movff	_SDdata+456,??_mount_disk
  1469  0076E6  C00D  F00E         	movff	??_mount_disk,??_mount_disk+1
  1470  0076EA  6A0F               	clrf	(??_mount_disk+2)& (0+255),c
  1471  0076EC  6A10               	clrf	(??_mount_disk+3)& (0+255),c
  1472  0076EE  6A11               	clrf	(??_mount_disk+4)& (0+255),c
  1473  0076F0  C00F  F011         	movff	??_mount_disk+2,??_mount_disk+4
  1474  0076F4  C00E  F010         	movff	??_mount_disk+1,??_mount_disk+3
  1475  0076F8  6A0F               	clrf	??_mount_disk+2,c
  1476  0076FA  6A0E               	clrf	??_mount_disk+1,c
  1477  0076FC  500E               	movf	??_mount_disk+1,w,c
  1478  0076FE  1368               	iorwf	_part1_addr& (0+255),f,b
  1479  007700  500F               	movf	??_mount_disk+2,w,c
  1480  007702  1369               	iorwf	(_part1_addr+1)& (0+255),f,b
  1481  007704  5010               	movf	??_mount_disk+3,w,c
  1482  007706  136A               	iorwf	(_part1_addr+2)& (0+255),f,b
  1483  007708  5011               	movf	??_mount_disk+4,w,c
  1484  00770A  136B               	iorwf	(_part1_addr+3)& (0+255),f,b
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;fatfs.c: 57: part1_addr |= ((unsigned long)SDdata[0x01C9]<<24);
  1488  00770C  C23F  F00D         	movff	_SDdata+457,??_mount_disk
  1489  007710  C00D  F00E         	movff	??_mount_disk,??_mount_disk+1
  1490  007714  6A0F               	clrf	(??_mount_disk+2)& (0+255),c
  1491  007716  6A10               	clrf	(??_mount_disk+3)& (0+255),c
  1492  007718  6A11               	clrf	(??_mount_disk+4)& (0+255),c
  1493  00771A  C00E  F011         	movff	??_mount_disk+1,??_mount_disk+4
  1494  00771E  6A10               	clrf	??_mount_disk+3,c
  1495  007720  6A0F               	clrf	??_mount_disk+2,c
  1496  007722  6A0E               	clrf	??_mount_disk+1,c
  1497  007724  500E               	movf	??_mount_disk+1,w,c
  1498  007726  1368               	iorwf	_part1_addr& (0+255),f,b
  1499  007728  500F               	movf	??_mount_disk+2,w,c
  1500  00772A  1369               	iorwf	(_part1_addr+1)& (0+255),f,b
  1501  00772C  5010               	movf	??_mount_disk+3,w,c
  1502  00772E  136A               	iorwf	(_part1_addr+2)& (0+255),f,b
  1503  007730  5011               	movf	??_mount_disk+4,w,c
  1504  007732  136B               	iorwf	(_part1_addr+3)& (0+255),f,b
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;fatfs.c: 60: part1_addr *= 0x00000200;
  1508  007734  0E09               	movlw	9
  1509  007736                     u1065:
  1510  007736  90D8               	bcf	status,0,c
  1511  007738  3768               	rlcf	_part1_addr& (0+255),f,b
  1512  00773A  3769               	rlcf	(_part1_addr+1)& (0+255),f,b
  1513  00773C  376A               	rlcf	(_part1_addr+2)& (0+255),f,b
  1514  00773E  376B               	rlcf	(_part1_addr+3)& (0+255),f,b
  1515  007740  2EE8               	decfsz	wreg,f,c
  1516  007742  D7F9               	goto	u1065
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;fatfs.c: 64: SDcard_read_block(part1_addr);
  1520  007744  C068  F006         	movff	_part1_addr,SDcard_read_block@address
  1521  007748  C069  F007         	movff	_part1_addr+1,SDcard_read_block@address+1
  1522  00774C  C06A  F008         	movff	_part1_addr+2,SDcard_read_block@address+2
  1523  007750  C06B  F009         	movff	_part1_addr+3,SDcard_read_block@address+3
  1524  007754  EC32  F038         	call	_SDcard_read_block	;wreg free
  1525                           
  1526                           ;fatfs.c: 67: sector_size = SDdata[0x000B];
  1527  007758  C081  F00D         	movff	_SDdata+11,??_mount_disk
  1528  00775C  500D               	movf	??_mount_disk,w,c
  1529  00775E  6E50               	movwf	_sector_size,c
  1530  007760  6A51               	clrf	_sector_size+1,c
  1531                           
  1532                           ;fatfs.c: 68: sector_size |= SDdata[0x000C]<<8;
  1533  007762  C082  F00D         	movff	_SDdata+12,??_mount_disk
  1534  007766  500D               	movf	??_mount_disk,w,c
  1535  007768  6E0F               	movwf	(??_mount_disk+2)& (0+255),c
  1536  00776A  6A0E               	clrf	(??_mount_disk+1)& (0+255),c
  1537  00776C  500E               	movf	??_mount_disk+1,w,c
  1538  00776E  1250               	iorwf	_sector_size,f,c
  1539  007770  500F               	movf	??_mount_disk+2,w,c
  1540  007772  1251               	iorwf	_sector_size+1,f,c
  1541                           
  1542                           ;fatfs.c: 70: sectors_cluster = SDdata[0x000D];
  1543  007774  C083  F05C         	movff	_SDdata+13,_sectors_cluster
  1544                           
  1545                           ;fatfs.c: 72: sectors_reserved = SDdata[0x000E];
  1546  007778  C084  F00D         	movff	_SDdata+14,??_mount_disk
  1547  00777C  500D               	movf	??_mount_disk,w,c
  1548  00777E  6E4E               	movwf	_sectors_reserved,c
  1549  007780  6A4F               	clrf	_sectors_reserved+1,c
  1550                           
  1551                           ;fatfs.c: 73: sectors_reserved |= SDdata[0x000F]<<8;
  1552  007782  C085  F00D         	movff	_SDdata+15,??_mount_disk
  1553  007786  500D               	movf	??_mount_disk,w,c
  1554  007788  6E0F               	movwf	(??_mount_disk+2)& (0+255),c
  1555  00778A  6A0E               	clrf	(??_mount_disk+1)& (0+255),c
  1556  00778C  500E               	movf	??_mount_disk+1,w,c
  1557  00778E  124E               	iorwf	_sectors_reserved,f,c
  1558  007790  500F               	movf	??_mount_disk+2,w,c
  1559  007792  124F               	iorwf	_sectors_reserved+1,f,c
  1560                           
  1561                           ;fatfs.c: 75: FAT_copies = SDdata[0x0010];
  1562  007794  C086  F055         	movff	_SDdata+16,_FAT_copies
  1563                           
  1564                           ;fatfs.c: 77: root_entries = SDdata[0x0011];
  1565  007798  C087  F00D         	movff	_SDdata+17,??_mount_disk
  1566  00779C  500D               	movf	??_mount_disk,w,c
  1567  00779E  6E4C               	movwf	_root_entries,c
  1568  0077A0  6A4D               	clrf	_root_entries+1,c
  1569                           
  1570                           ;fatfs.c: 78: root_entries |= SDdata[0x0012]<<8;
  1571  0077A2  C088  F00D         	movff	_SDdata+18,??_mount_disk
  1572  0077A6  500D               	movf	??_mount_disk,w,c
  1573  0077A8  6E0F               	movwf	(??_mount_disk+2)& (0+255),c
  1574  0077AA  6A0E               	clrf	(??_mount_disk+1)& (0+255),c
  1575  0077AC  500E               	movf	??_mount_disk+1,w,c
  1576  0077AE  124C               	iorwf	_root_entries,f,c
  1577  0077B0  500F               	movf	??_mount_disk+2,w,c
  1578  0077B2  124D               	iorwf	_root_entries+1,f,c
  1579                           
  1580                           ;fatfs.c: 80: sectors_FAT = SDdata[0x0016];
  1581  0077B4  C08C  F00D         	movff	_SDdata+22,??_mount_disk
  1582  0077B8  500D               	movf	??_mount_disk,w,c
  1583  0077BA  6E4A               	movwf	_sectors_FAT,c
  1584  0077BC  6A4B               	clrf	_sectors_FAT+1,c
  1585                           
  1586                           ;fatfs.c: 81: sectors_FAT |= SDdata[0x0017]<<8;
  1587  0077BE  C08D  F00D         	movff	_SDdata+23,??_mount_disk
  1588  0077C2  500D               	movf	??_mount_disk,w,c
  1589  0077C4  6E0F               	movwf	(??_mount_disk+2)& (0+255),c
  1590  0077C6  6A0E               	clrf	(??_mount_disk+1)& (0+255),c
  1591  0077C8  500E               	movf	??_mount_disk+1,w,c
  1592  0077CA  124A               	iorwf	_sectors_FAT,f,c
  1593  0077CC  500F               	movf	??_mount_disk+2,w,c
  1594  0077CE  124B               	iorwf	_sectors_FAT+1,f,c
  1595                           
  1596                           ;fatfs.c: 84: FAT_address[0] = part1_addr + (sectors_reserved * sector_size);
  1597  0077D0  C04E  F001         	movff	_sectors_reserved,___wmul@multiplier
  1598  0077D4  C04F  F002         	movff	_sectors_reserved+1,___wmul@multiplier+1
  1599  0077D8  C050  F003         	movff	_sector_size,___wmul@multiplicand
  1600  0077DC  C051  F004         	movff	_sector_size+1,___wmul@multiplicand+1
  1601  0077E0  EC16  F036         	call	___wmul	;wreg free
  1602  0077E4  5001               	movf	?___wmul,w,c
  1603  0077E6  0100               	movlb	0	; () banked
  1604  0077E8  2568               	addwf	_part1_addr& (0+255),w,b
  1605  0077EA  6E30               	movwf	_FAT_address,c
  1606  0077EC  5002               	movf	?___wmul+1,w,c
  1607  0077EE  2169               	addwfc	(_part1_addr+1)& (0+255),w,b
  1608  0077F0  6E31               	movwf	_FAT_address+1,c
  1609  0077F2  0E00               	movlw	0
  1610  0077F4  216A               	addwfc	(_part1_addr+2)& (0+255),w,b
  1611  0077F6  6E32               	movwf	_FAT_address+2,c
  1612  0077F8  0E00               	movlw	0
  1613  0077FA  216B               	addwfc	(_part1_addr+3)& (0+255),w,b
  1614  0077FC  6E33               	movwf	_FAT_address+3,c
  1615                           
  1616                           ; BSR set to: 0
  1617                           ;fatfs.c: 85: FAT_address[1] = FAT_address[0] + ((unsigned long)sectors_FAT * (unsigned 
      +                          long)sector_size);
  1618  0077FE  C04A  F001         	movff	_sectors_FAT,___lmul@multiplier
  1619  007802  C04B  F002         	movff	_sectors_FAT+1,___lmul@multiplier+1
  1620  007806  6A03               	clrf	___lmul@multiplier+2,c
  1621  007808  6A04               	clrf	___lmul@multiplier+3,c
  1622  00780A  C050  F005         	movff	_sector_size,___lmul@multiplicand
  1623  00780E  C051  F006         	movff	_sector_size+1,___lmul@multiplicand+1
  1624  007812  6A07               	clrf	___lmul@multiplicand+2,c
  1625  007814  6A08               	clrf	___lmul@multiplicand+3,c
  1626  007816  ECA4  F037         	call	___lmul	;wreg free
  1627  00781A  5030               	movf	_FAT_address,w,c
  1628  00781C  2401               	addwf	?___lmul,w,c
  1629  00781E  6E34               	movwf	_FAT_address+4,c
  1630  007820  5031               	movf	_FAT_address+1,w,c
  1631  007822  2002               	addwfc	?___lmul+1,w,c
  1632  007824  6E35               	movwf	_FAT_address+5,c
  1633  007826  5032               	movf	_FAT_address+2,w,c
  1634  007828  2003               	addwfc	?___lmul+2,w,c
  1635  00782A  6E36               	movwf	_FAT_address+6,c
  1636  00782C  5033               	movf	_FAT_address+3,w,c
  1637  00782E  2004               	addwfc	?___lmul+3,w,c
  1638  007830  6E37               	movwf	_FAT_address+7,c
  1639                           
  1640                           ;fatfs.c: 88: rootdir_start = FAT_address[1] + ((unsigned long)sectors_FAT * (unsigned l
      +                          ong)sector_size);
  1641  007832  C04A  F001         	movff	_sectors_FAT,___lmul@multiplier
  1642  007836  C04B  F002         	movff	_sectors_FAT+1,___lmul@multiplier+1
  1643  00783A  6A03               	clrf	___lmul@multiplier+2,c
  1644  00783C  6A04               	clrf	___lmul@multiplier+3,c
  1645  00783E  C050  F005         	movff	_sector_size,___lmul@multiplicand
  1646  007842  C051  F006         	movff	_sector_size+1,___lmul@multiplicand+1
  1647  007846  6A07               	clrf	___lmul@multiplicand+2,c
  1648  007848  6A08               	clrf	___lmul@multiplicand+3,c
  1649  00784A  ECA4  F037         	call	___lmul	;wreg free
  1650  00784E  5034               	movf	_FAT_address+4,w,c
  1651  007850  2401               	addwf	?___lmul,w,c
  1652  007852  6E40               	movwf	_rootdir_start,c
  1653  007854  5035               	movf	_FAT_address+5,w,c
  1654  007856  2002               	addwfc	?___lmul+1,w,c
  1655  007858  6E41               	movwf	_rootdir_start+1,c
  1656  00785A  5036               	movf	_FAT_address+6,w,c
  1657  00785C  2003               	addwfc	?___lmul+2,w,c
  1658  00785E  6E42               	movwf	_rootdir_start+2,c
  1659  007860  5037               	movf	_FAT_address+7,w,c
  1660  007862  2004               	addwfc	?___lmul+3,w,c
  1661  007864  6E43               	movwf	_rootdir_start+3,c
  1662                           
  1663                           ;fatfs.c: 91: datareg_start = rootdir_start + ((unsigned long)root_entries * 32);
  1664  007866  504C               	movf	_root_entries,w,c
  1665  007868  6E0D               	movwf	??_mount_disk& (0+255),c
  1666  00786A  504D               	movf	_root_entries+1,w,c
  1667  00786C  6E0E               	movwf	(??_mount_disk+1)& (0+255),c
  1668  00786E  6A0F               	clrf	(??_mount_disk+2)& (0+255),c
  1669  007870  6A10               	clrf	(??_mount_disk+3)& (0+255),c
  1670  007872  0E05               	movlw	5
  1671  007874                     u1075:
  1672  007874  90D8               	bcf	status,0,c
  1673  007876  360D               	rlcf	??_mount_disk,f,c
  1674  007878  360E               	rlcf	??_mount_disk+1,f,c
  1675  00787A  360F               	rlcf	??_mount_disk+2,f,c
  1676  00787C  3610               	rlcf	??_mount_disk+3,f,c
  1677  00787E  2EE8               	decfsz	wreg,f,c
  1678  007880  D7F9               	goto	u1075
  1679  007882  5040               	movf	_rootdir_start,w,c
  1680  007884  240D               	addwf	??_mount_disk,w,c
  1681  007886  0100               	movlb	0	; () banked
  1682  007888  6F64               	movwf	_datareg_start& (0+255),b
  1683  00788A  5041               	movf	_rootdir_start+1,w,c
  1684  00788C  200E               	addwfc	??_mount_disk+1,w,c
  1685  00788E  6F65               	movwf	(_datareg_start+1)& (0+255),b
  1686  007890  5042               	movf	_rootdir_start+2,w,c
  1687  007892  200F               	addwfc	??_mount_disk+2,w,c
  1688  007894  6F66               	movwf	(_datareg_start+2)& (0+255),b
  1689  007896  5043               	movf	_rootdir_start+3,w,c
  1690  007898  2010               	addwfc	??_mount_disk+3,w,c
  1691  00789A  6F67               	movwf	(_datareg_start+3)& (0+255),b
  1692                           
  1693                           ; BSR set to: 0
  1694  00789C  0012               	return		;funcret
  1695  00789E                     __end_of_mount_disk:
  1696                           	opt stack 0
  1697                           tblptru	equ	0xFF8
  1698                           tblptrh	equ	0xFF7
  1699                           tblptrl	equ	0xFF6
  1700                           tablat	equ	0xFF5
  1701                           postinc0	equ	0xFEE
  1702                           wreg	equ	0xFE8
  1703                           postdec1	equ	0xFE5
  1704                           fsr1h	equ	0xFE2
  1705                           fsr1l	equ	0xFE1
  1706                           status	equ	0xFD8
  1707                           
  1708 ;; *************** function ___wmul *****************
  1709 ;; Defined at:
  1710 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\Umul16.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;  multiplier      2    0[COMRAM] unsigned int 
  1713 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;  product         2    4[COMRAM] unsigned int 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  2    0[COMRAM] unsigned int 
  1718 ;; Registers used:
  1719 ;;		wreg, status,2, status,0, prodl, prodh
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1725 ;;      Params:         4       0       0       0       0       0       0
  1726 ;;      Locals:         2       0       0       0       0       0       0
  1727 ;;      Temps:          0       0       0       0       0       0       0
  1728 ;;      Totals:         6       0       0       0       0       0       0
  1729 ;;Total ram usage:        6 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; This function calls:
  1732 ;;		Nothing
  1733 ;; This function is called by:
  1734 ;;		_mount_disk
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text4
  1739  006C2C                     __ptext4:
  1740                           	opt stack 0
  1741  006C2C                     ___wmul:
  1742                           	opt stack 29
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;incstack = 0
  1746  006C2C  5001               	movf	___wmul@multiplier,w,c
  1747  006C2E  0203               	mulwf	___wmul@multiplicand,c
  1748  006C30  CFF3 F005          	movff	prodl,___wmul@product
  1749  006C34  CFF4 F006          	movff	prodh,___wmul@product+1
  1750  006C38  5001               	movf	___wmul@multiplier,w,c
  1751  006C3A  0204               	mulwf	___wmul@multiplicand+1,c
  1752  006C3C  50F3               	movf	prodl,w,c
  1753  006C3E  2606               	addwf	___wmul@product+1,f,c
  1754  006C40  5002               	movf	___wmul@multiplier+1,w,c
  1755  006C42  0203               	mulwf	___wmul@multiplicand,c
  1756  006C44  50F3               	movf	prodl,w,c
  1757  006C46  2606               	addwf	___wmul@product+1,f,c
  1758  006C48  C005  F001         	movff	___wmul@product,?___wmul
  1759  006C4C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1760  006C50  0012               	return	
  1761  006C52                     __end_of___wmul:
  1762                           	opt stack 0
  1763                           tblptru	equ	0xFF8
  1764                           tblptrh	equ	0xFF7
  1765                           tblptrl	equ	0xFF6
  1766                           tablat	equ	0xFF5
  1767                           prodh	equ	0xFF4
  1768                           prodl	equ	0xFF3
  1769                           postinc0	equ	0xFEE
  1770                           wreg	equ	0xFE8
  1771                           postdec1	equ	0xFE5
  1772                           fsr1h	equ	0xFE2
  1773                           fsr1l	equ	0xFE1
  1774                           status	equ	0xFD8
  1775                           
  1776 ;; *************** function _file_update_size *****************
  1777 ;; Defined at:
  1778 ;;		line 259 in file "../../picSD-master/fatfs.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;		None
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;		None
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  1    wreg      void 
  1785 ;; Registers used:
  1786 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1792 ;;      Params:         0       0       0       0       0       0       0
  1793 ;;      Locals:         0       0       0       0       0       0       0
  1794 ;;      Temps:          2       0       0       0       0       0       0
  1795 ;;      Totals:         2       0       0       0       0       0       0
  1796 ;;Total ram usage:        2 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    3
  1799 ;; This function calls:
  1800 ;;		_SDcard_read_block
  1801 ;;		_SDcard_write_block
  1802 ;;		_ltoa
  1803 ;;		_uart_putc
  1804 ;;		_uart_puts
  1805 ;; This function is called by:
  1806 ;;		_main
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           	psect	text5
  1811  007290                     __ptext5:
  1812                           	opt stack 0
  1813  007290                     _file_update_size:
  1814                           	opt stack 27
  1815                           
  1816                           ;fatfs.c: 261: SDcard_read_block(rootdir_start);
  1817                           
  1818                           ;incstack = 0
  1819  007290  C040  F006         	movff	_rootdir_start,SDcard_read_block@address
  1820  007294  C041  F007         	movff	_rootdir_start+1,SDcard_read_block@address+1
  1821  007298  C042  F008         	movff	_rootdir_start+2,SDcard_read_block@address+2
  1822  00729C  C043  F009         	movff	_rootdir_start+3,SDcard_read_block@address+3
  1823  0072A0  EC32  F038         	call	_SDcard_read_block	;wreg free
  1824                           
  1825                           ;fatfs.c: 267: ltoa(address_buffer, file_length, 16);
  1826  0072A4  0E6C               	movlw	low _address_buffer
  1827  0072A6  6E1B               	movwf	ltoa@buf,c
  1828  0072A8  0E00               	movlw	high _address_buffer
  1829  0072AA  6E1C               	movwf	ltoa@buf+1,c
  1830  0072AC  C038  F01D         	movff	_file_length,ltoa@val
  1831  0072B0  C039  F01E         	movff	_file_length+1,ltoa@val+1
  1832  0072B4  C03A  F01F         	movff	_file_length+2,ltoa@val+2
  1833  0072B8  C03B  F020         	movff	_file_length+3,ltoa@val+3
  1834  0072BC  0E00               	movlw	0
  1835  0072BE  6E22               	movwf	ltoa@base+1,c
  1836  0072C0  0E10               	movlw	16
  1837  0072C2  6E21               	movwf	ltoa@base,c
  1838  0072C4  EC28  F037         	call	_ltoa	;wreg free
  1839                           
  1840                           ;fatfs.c: 268: uart_puts("File size: ");
  1841  0072C8  0ED9               	movlw	low STR_9
  1842  0072CA  6E02               	movwf	uart_puts@s,c
  1843  0072CC  0E7F               	movlw	high STR_9
  1844  0072CE  6E03               	movwf	uart_puts@s+1,c
  1845  0072D0  ECFF  F036         	call	_uart_puts	;wreg free
  1846                           
  1847                           ;fatfs.c: 269: uart_puts(address_buffer);
  1848  0072D4  0E6C               	movlw	low _address_buffer
  1849  0072D6  6E02               	movwf	uart_puts@s,c
  1850  0072D8  0E00               	movlw	high _address_buffer
  1851  0072DA  6E03               	movwf	uart_puts@s+1,c
  1852  0072DC  ECFF  F036         	call	_uart_puts	;wreg free
  1853                           
  1854                           ;fatfs.c: 270: uart_putc('\n');
  1855  0072E0  0E0A               	movlw	10
  1856  0072E2  ECE2  F035         	call	_uart_putc
  1857                           
  1858                           ;fatfs.c: 273: SDdata[entry_addr+0x1C] = file_length & 0xFF;
  1859  0072E6  0E1C               	movlw	28
  1860  0072E8  2446               	addwf	_entry_addr,w,c
  1861  0072EA  6E25               	movwf	??_file_update_size& (0+255),c
  1862  0072EC  0E00               	movlw	0
  1863  0072EE  2047               	addwfc	_entry_addr+1,w,c
  1864  0072F0  6E26               	movwf	(??_file_update_size+1)& (0+255),c
  1865  0072F2  0E76               	movlw	low _SDdata
  1866  0072F4  2425               	addwf	??_file_update_size,w,c
  1867  0072F6  6ED9               	movwf	fsr2l,c
  1868  0072F8  0E00               	movlw	high _SDdata
  1869  0072FA  2026               	addwfc	??_file_update_size+1,w,c
  1870  0072FC  6EDA               	movwf	fsr2h,c
  1871  0072FE  C038  FFDF         	movff	_file_length,indf2
  1872                           
  1873                           ;fatfs.c: 274: SDdata[entry_addr+0x1D] = (file_length>>8) & 0xFF;
  1874  007302  0E1D               	movlw	29
  1875  007304  2446               	addwf	_entry_addr,w,c
  1876  007306  6E25               	movwf	??_file_update_size& (0+255),c
  1877  007308  0E00               	movlw	0
  1878  00730A  2047               	addwfc	_entry_addr+1,w,c
  1879  00730C  6E26               	movwf	(??_file_update_size+1)& (0+255),c
  1880  00730E  0E76               	movlw	low _SDdata
  1881  007310  2425               	addwf	??_file_update_size,w,c
  1882  007312  6ED9               	movwf	fsr2l,c
  1883  007314  0E00               	movlw	high _SDdata
  1884  007316  2026               	addwfc	??_file_update_size+1,w,c
  1885  007318  6EDA               	movwf	fsr2h,c
  1886  00731A  C039  FFDF         	movff	_file_length+1,indf2
  1887                           
  1888                           ;fatfs.c: 275: SDdata[entry_addr+0x1E] = (file_length>>16) & 0xFF;
  1889  00731E  0E1E               	movlw	30
  1890  007320  2446               	addwf	_entry_addr,w,c
  1891  007322  6E25               	movwf	??_file_update_size& (0+255),c
  1892  007324  0E00               	movlw	0
  1893  007326  2047               	addwfc	_entry_addr+1,w,c
  1894  007328  6E26               	movwf	(??_file_update_size+1)& (0+255),c
  1895  00732A  0E76               	movlw	low _SDdata
  1896  00732C  2425               	addwf	??_file_update_size,w,c
  1897  00732E  6ED9               	movwf	fsr2l,c
  1898  007330  0E00               	movlw	high _SDdata
  1899  007332  2026               	addwfc	??_file_update_size+1,w,c
  1900  007334  6EDA               	movwf	fsr2h,c
  1901  007336  C03A  FFDF         	movff	_file_length+2,indf2
  1902                           
  1903                           ;fatfs.c: 276: SDdata[entry_addr+0x1F] = (file_length>>24) & 0xFF;
  1904  00733A  0E1F               	movlw	31
  1905  00733C  2446               	addwf	_entry_addr,w,c
  1906  00733E  6E25               	movwf	??_file_update_size& (0+255),c
  1907  007340  0E00               	movlw	0
  1908  007342  2047               	addwfc	_entry_addr+1,w,c
  1909  007344  6E26               	movwf	(??_file_update_size+1)& (0+255),c
  1910  007346  0E76               	movlw	low _SDdata
  1911  007348  2425               	addwf	??_file_update_size,w,c
  1912  00734A  6ED9               	movwf	fsr2l,c
  1913  00734C  0E00               	movlw	high _SDdata
  1914  00734E  2026               	addwfc	??_file_update_size+1,w,c
  1915  007350  6EDA               	movwf	fsr2h,c
  1916  007352  C03B  FFDF         	movff	_file_length+3,indf2
  1917                           
  1918                           ;fatfs.c: 278: SDcard_write_block(rootdir_start);
  1919  007356  C040  F006         	movff	_rootdir_start,SDcard_write_block@address
  1920  00735A  C041  F007         	movff	_rootdir_start+1,SDcard_write_block@address+1
  1921  00735E  C042  F008         	movff	_rootdir_start+2,SDcard_write_block@address+2
  1922  007362  C043  F009         	movff	_rootdir_start+3,SDcard_write_block@address+3
  1923  007366  EC31  F03A         	call	_SDcard_write_block	;wreg free
  1924  00736A  0012               	return		;funcret
  1925  00736C                     __end_of_file_update_size:
  1926                           	opt stack 0
  1927                           tblptru	equ	0xFF8
  1928                           tblptrh	equ	0xFF7
  1929                           tblptrl	equ	0xFF6
  1930                           tablat	equ	0xFF5
  1931                           prodh	equ	0xFF4
  1932                           prodl	equ	0xFF3
  1933                           postinc0	equ	0xFEE
  1934                           wreg	equ	0xFE8
  1935                           postdec1	equ	0xFE5
  1936                           fsr1h	equ	0xFE2
  1937                           fsr1l	equ	0xFE1
  1938                           indf2	equ	0xFDF
  1939                           fsr2h	equ	0xFDA
  1940                           fsr2l	equ	0xFD9
  1941                           status	equ	0xFD8
  1942                           
  1943 ;; *************** function _file_create *****************
  1944 ;; Defined at:
  1945 ;;		line 94 in file "../../picSD-master/fatfs.c"
  1946 ;; Parameters:    Size  Location     Type
  1947 ;;  filename        2   36[COMRAM] PTR const unsigned char 
  1948 ;;		 -> STR_10(13), 
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;  offset          1   46[COMRAM] unsigned char 
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  1    wreg      void 
  1953 ;; Registers used:
  1954 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1960 ;;      Params:         2       0       0       0       0       0       0
  1961 ;;      Locals:         5       0       0       0       0       0       0
  1962 ;;      Temps:          4       0       0       0       0       0       0
  1963 ;;      Totals:        11       0       0       0       0       0       0
  1964 ;;Total ram usage:       11 bytes
  1965 ;; Hardware stack levels used:    1
  1966 ;; Hardware stack levels required when called:    3
  1967 ;; This function calls:
  1968 ;;		_SDcard_read_block
  1969 ;;		_SDcard_write_block
  1970 ;;		___lmul
  1971 ;;		_itoa
  1972 ;;		_ltoa
  1973 ;;		_uart_putc
  1974 ;;		_uart_puts
  1975 ;; This function is called by:
  1976 ;;		_main
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           	psect	text6
  1981  00789E                     __ptext6:
  1982                           	opt stack 0
  1983  00789E                     _file_create:
  1984                           	opt stack 27
  1985                           
  1986                           ;fatfs.c: 96: SDcard_read_block(FAT_address[0]);
  1987                           
  1988                           ;incstack = 0
  1989  00789E  C030  F006         	movff	_FAT_address,SDcard_read_block@address
  1990  0078A2  C031  F007         	movff	_FAT_address+1,SDcard_read_block@address+1
  1991  0078A6  C032  F008         	movff	_FAT_address+2,SDcard_read_block@address+2
  1992  0078AA  C033  F009         	movff	_FAT_address+3,SDcard_read_block@address+3
  1993  0078AE  EC32  F038         	call	_SDcard_read_block	;wreg free
  1994                           
  1995                           ;fatfs.c: 99: uart_puts("Searching first unallocated cluster...");
  1996  0078B2  0E46               	movlw	low STR_1
  1997  0078B4  6E02               	movwf	uart_puts@s,c
  1998  0078B6  0E7E               	movlw	high STR_1
  1999  0078B8  6E03               	movwf	uart_puts@s+1,c
  2000  0078BA  ECFF  F036         	call	_uart_puts	;wreg free
  2001                           
  2002                           ;fatfs.c: 100: for(cluster_number = 0; cluster_number < 0xFFFF; cluster_number++){
  2003  0078BE  0E00               	movlw	0
  2004  0078C0  6E49               	movwf	_cluster_number+1,c
  2005  0078C2  0E00               	movlw	0
  2006  0078C4  6E48               	movwf	_cluster_number,c
  2007  0078C6                     l1909:
  2008  0078C6  2848               	incf	_cluster_number,w,c
  2009  0078C8  E103               	bnz	l1913
  2010  0078CA  2849               	incf	_cluster_number+1,w,c
  2011  0078CC  B4D8               	btfsc	status,2,c
  2012  0078CE  D023               	goto	u1110
  2013  0078D0                     l1913:
  2014                           
  2015                           ;fatfs.c: 101: if( (SDdata[cluster_number*2] == 0) && (SDdata[(cluster_number*2)+1] == 0
      +                          ) ) break;
  2016  0078D0  90D8               	bcf	status,0,c
  2017  0078D2  3448               	rlcf	_cluster_number,w,c
  2018  0078D4  6ED9               	movwf	fsr2l,c
  2019  0078D6  3449               	rlcf	_cluster_number+1,w,c
  2020  0078D8  6EDA               	movwf	fsr2h,c
  2021  0078DA  0E76               	movlw	low _SDdata
  2022  0078DC  26D9               	addwf	fsr2l,f,c
  2023  0078DE  0E00               	movlw	high _SDdata
  2024  0078E0  22DA               	addwfc	fsr2h,f,c
  2025  0078E2  50DF               	movf	indf2,w,c
  2026  0078E4  A4D8               	btfss	status,2,c
  2027  0078E6  D014               	goto	l58
  2028  0078E8  C048  F027         	movff	_cluster_number,??_file_create
  2029  0078EC  C049  F028         	movff	_cluster_number+1,??_file_create+1
  2030  0078F0  90D8               	bcf	status,0,c
  2031  0078F2  3627               	rlcf	??_file_create,f,c
  2032  0078F4  3628               	rlcf	??_file_create+1,f,c
  2033  0078F6  0E01               	movlw	1
  2034  0078F8  2627               	addwf	??_file_create,f,c
  2035  0078FA  0E00               	movlw	0
  2036  0078FC  2228               	addwfc	??_file_create+1,f,c
  2037  0078FE  0E76               	movlw	low _SDdata
  2038  007900  2427               	addwf	??_file_create,w,c
  2039  007902  6ED9               	movwf	fsr2l,c
  2040  007904  0E00               	movlw	high _SDdata
  2041  007906  2028               	addwfc	??_file_create+1,w,c
  2042  007908  6EDA               	movwf	fsr2h,c
  2043  00790A  50DF               	movf	indf2,w,c
  2044  00790C  B4D8               	btfsc	status,2,c
  2045  00790E  D003               	goto	u1110
  2046  007910                     l58:
  2047  007910  4A48               	infsnz	_cluster_number,f,c
  2048  007912  2A49               	incf	_cluster_number+1,f,c
  2049  007914  D7D8               	goto	l1909
  2050  007916                     u1110:
  2051                           
  2052                           ;fatfs.c: 102: }
  2053                           ;fatfs.c: 103: uart_puts("done!\n");
  2054  007916  0EF8               	movlw	low STR_2
  2055  007918  6E02               	movwf	uart_puts@s,c
  2056  00791A  0E7F               	movlw	high STR_2
  2057  00791C  6E03               	movwf	uart_puts@s+1,c
  2058  00791E  ECFF  F036         	call	_uart_puts	;wreg free
  2059                           
  2060                           ;fatfs.c: 112: SDdata[cluster_number*2] = 0xFF;
  2061  007922  90D8               	bcf	status,0,c
  2062  007924  3448               	rlcf	_cluster_number,w,c
  2063  007926  6ED9               	movwf	fsr2l,c
  2064  007928  3449               	rlcf	_cluster_number+1,w,c
  2065  00792A  6EDA               	movwf	fsr2h,c
  2066  00792C  0E76               	movlw	low _SDdata
  2067  00792E  26D9               	addwf	fsr2l,f,c
  2068  007930  0E00               	movlw	high _SDdata
  2069  007932  22DA               	addwfc	fsr2h,f,c
  2070  007934  0EFF               	movlw	255
  2071  007936  6EDF               	movwf	indf2,c
  2072                           
  2073                           ;fatfs.c: 113: SDdata[(cluster_number*2)+1] = 0xFF;
  2074  007938  C048  F027         	movff	_cluster_number,??_file_create
  2075  00793C  C049  F028         	movff	_cluster_number+1,??_file_create+1
  2076  007940  90D8               	bcf	status,0,c
  2077  007942  3627               	rlcf	??_file_create,f,c
  2078  007944  3628               	rlcf	??_file_create+1,f,c
  2079  007946  0E01               	movlw	1
  2080  007948  2627               	addwf	??_file_create,f,c
  2081  00794A  0E00               	movlw	0
  2082  00794C  2228               	addwfc	??_file_create+1,f,c
  2083  00794E  0E76               	movlw	low _SDdata
  2084  007950  2427               	addwf	??_file_create,w,c
  2085  007952  6ED9               	movwf	fsr2l,c
  2086  007954  0E00               	movlw	high _SDdata
  2087  007956  2028               	addwfc	??_file_create+1,w,c
  2088  007958  6EDA               	movwf	fsr2h,c
  2089  00795A  0EFF               	movlw	255
  2090  00795C  6EDF               	movwf	indf2,c
  2091                           
  2092                           ;fatfs.c: 115: SDcard_write_block(FAT_address[0]);
  2093  00795E  C030  F006         	movff	_FAT_address,SDcard_write_block@address
  2094  007962  C031  F007         	movff	_FAT_address+1,SDcard_write_block@address+1
  2095  007966  C032  F008         	movff	_FAT_address+2,SDcard_write_block@address+2
  2096  00796A  C033  F009         	movff	_FAT_address+3,SDcard_write_block@address+3
  2097  00796E  EC31  F03A         	call	_SDcard_write_block	;wreg free
  2098                           
  2099                           ;fatfs.c: 116: SDcard_write_block(FAT_address[1]);
  2100  007972  C034  F006         	movff	_FAT_address+4,SDcard_write_block@address
  2101  007976  C035  F007         	movff	_FAT_address+5,SDcard_write_block@address+1
  2102  00797A  C036  F008         	movff	_FAT_address+6,SDcard_write_block@address+2
  2103  00797E  C037  F009         	movff	_FAT_address+7,SDcard_write_block@address+3
  2104  007982  EC31  F03A         	call	_SDcard_write_block	;wreg free
  2105                           
  2106                           ;fatfs.c: 118: start_sector_address = datareg_start + (((unsigned long)(cluster_number-2
      +                          )) * (unsigned long)sectors_cluster * (unsigned long)sector_size);
  2107  007986  0EFE               	movlw	254
  2108  007988  6E27               	movwf	??_file_create& (0+255),c
  2109  00798A  0EFF               	movlw	255
  2110  00798C  6E28               	movwf	(??_file_create+1)& (0+255),c
  2111  00798E  C048  F029         	movff	_cluster_number,??_file_create+2
  2112  007992  C049  F02A         	movff	_cluster_number+1,??_file_create+3
  2113  007996  5027               	movf	??_file_create,w,c
  2114  007998  2629               	addwf	??_file_create+2,f,c
  2115  00799A  5028               	movf	??_file_create+1,w,c
  2116  00799C  222A               	addwfc	??_file_create+3,f,c
  2117  00799E  C029  F001         	movff	??_file_create+2,___lmul@multiplier
  2118  0079A2  C02A  F002         	movff	??_file_create+3,___lmul@multiplier+1
  2119  0079A6  6A03               	clrf	___lmul@multiplier+2,c
  2120  0079A8  6A04               	clrf	___lmul@multiplier+3,c
  2121  0079AA  505C               	movf	_sectors_cluster,w,c
  2122  0079AC  6E05               	movwf	___lmul@multiplicand,c
  2123  0079AE  6A06               	clrf	___lmul@multiplicand+1,c
  2124  0079B0  6A07               	clrf	___lmul@multiplicand+2,c
  2125  0079B2  6A08               	clrf	___lmul@multiplicand+3,c
  2126  0079B4  ECA4  F037         	call	___lmul	;wreg free
  2127  0079B8  C001  F02B         	movff	?___lmul,_file_create$1476
  2128  0079BC  C002  F02C         	movff	?___lmul+1,_file_create$1476+1
  2129  0079C0  C003  F02D         	movff	?___lmul+2,_file_create$1476+2
  2130  0079C4  C004  F02E         	movff	?___lmul+3,_file_create$1476+3
  2131                           
  2132                           ;fatfs.c: 118: start_sector_address = datareg_start + (((unsigned long)(cluster_number-2
      +                          )) * (unsigned long)sectors_cluster * (unsigned long)sector_size);
  2133  0079C8  C02B  F001         	movff	_file_create$1476,___lmul@multiplier
  2134  0079CC  C02C  F002         	movff	_file_create$1476+1,___lmul@multiplier+1
  2135  0079D0  C02D  F003         	movff	_file_create$1476+2,___lmul@multiplier+2
  2136  0079D4  C02E  F004         	movff	_file_create$1476+3,___lmul@multiplier+3
  2137  0079D8  C050  F005         	movff	_sector_size,___lmul@multiplicand
  2138  0079DC  C051  F006         	movff	_sector_size+1,___lmul@multiplicand+1
  2139  0079E0  6A07               	clrf	___lmul@multiplicand+2,c
  2140  0079E2  6A08               	clrf	___lmul@multiplicand+3,c
  2141  0079E4  ECA4  F037         	call	___lmul	;wreg free
  2142  0079E8  0100               	movlb	0	; () banked
  2143  0079EA  5164               	movf	_datareg_start& (0+255),w,b
  2144  0079EC  2401               	addwf	?___lmul,w,c
  2145  0079EE  6F60               	movwf	_start_sector_address& (0+255),b
  2146  0079F0  5165               	movf	(_datareg_start+1)& (0+255),w,b
  2147  0079F2  2002               	addwfc	?___lmul+1,w,c
  2148  0079F4  6F61               	movwf	(_start_sector_address+1)& (0+255),b
  2149  0079F6  5166               	movf	(_datareg_start+2)& (0+255),w,b
  2150  0079F8  2003               	addwfc	?___lmul+2,w,c
  2151  0079FA  6F62               	movwf	(_start_sector_address+2)& (0+255),b
  2152  0079FC  5167               	movf	(_datareg_start+3)& (0+255),w,b
  2153  0079FE  2004               	addwfc	?___lmul+3,w,c
  2154  007A00  6F63               	movwf	(_start_sector_address+3)& (0+255),b
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;fatfs.c: 119: current_sector = 0;
  2158  007A02  0E00               	movlw	0
  2159  007A04  6E54               	movwf	_current_sector,c
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;fatfs.c: 121: itoa(address_buffer, cluster_number, 10);
  2163  007A06  0E6C               	movlw	low _address_buffer
  2164  007A08  6E11               	movwf	itoa@buf,c
  2165  007A0A  0E00               	movlw	high _address_buffer
  2166  007A0C  6E12               	movwf	itoa@buf+1,c
  2167  007A0E  C048  F013         	movff	_cluster_number,itoa@val
  2168  007A12  C049  F014         	movff	_cluster_number+1,itoa@val+1
  2169  007A16  0E00               	movlw	0
  2170  007A18  6E16               	movwf	itoa@base+1,c
  2171  007A1A  0E0A               	movlw	10
  2172  007A1C  6E15               	movwf	itoa@base,c
  2173  007A1E  EC94  F036         	call	_itoa	;wreg free
  2174                           
  2175                           ;fatfs.c: 122: uart_puts("Cluster number: ");
  2176  007A22  0EAC               	movlw	low STR_3
  2177  007A24  6E02               	movwf	uart_puts@s,c
  2178  007A26  0E7F               	movlw	high STR_3
  2179  007A28  6E03               	movwf	uart_puts@s+1,c
  2180  007A2A  ECFF  F036         	call	_uart_puts	;wreg free
  2181                           
  2182                           ;fatfs.c: 123: uart_puts(address_buffer);
  2183  007A2E  0E6C               	movlw	low _address_buffer
  2184  007A30  6E02               	movwf	uart_puts@s,c
  2185  007A32  0E00               	movlw	high _address_buffer
  2186  007A34  6E03               	movwf	uart_puts@s+1,c
  2187  007A36  ECFF  F036         	call	_uart_puts	;wreg free
  2188                           
  2189                           ;fatfs.c: 124: uart_putc('\n');
  2190  007A3A  0E0A               	movlw	10
  2191  007A3C  ECE2  F035         	call	_uart_putc
  2192                           
  2193                           ;fatfs.c: 126: ltoa(address_buffer, start_sector_address, 16);
  2194  007A40  0E6C               	movlw	low _address_buffer
  2195  007A42  6E1B               	movwf	ltoa@buf,c
  2196  007A44  0E00               	movlw	high _address_buffer
  2197  007A46  6E1C               	movwf	ltoa@buf+1,c
  2198  007A48  C060  F01D         	movff	_start_sector_address,ltoa@val
  2199  007A4C  C061  F01E         	movff	_start_sector_address+1,ltoa@val+1
  2200  007A50  C062  F01F         	movff	_start_sector_address+2,ltoa@val+2
  2201  007A54  C063  F020         	movff	_start_sector_address+3,ltoa@val+3
  2202  007A58  0E00               	movlw	0
  2203  007A5A  6E22               	movwf	ltoa@base+1,c
  2204  007A5C  0E10               	movlw	16
  2205  007A5E  6E21               	movwf	ltoa@base,c
  2206  007A60  EC28  F037         	call	_ltoa	;wreg free
  2207                           
  2208                           ;fatfs.c: 127: uart_puts("Sector 0 address: ");
  2209  007A64  0E77               	movlw	low STR_4
  2210  007A66  6E02               	movwf	uart_puts@s,c
  2211  007A68  0E7F               	movlw	high STR_4
  2212  007A6A  6E03               	movwf	uart_puts@s+1,c
  2213  007A6C  ECFF  F036         	call	_uart_puts	;wreg free
  2214                           
  2215                           ;fatfs.c: 128: uart_puts(address_buffer);
  2216  007A70  0E6C               	movlw	low _address_buffer
  2217  007A72  6E02               	movwf	uart_puts@s,c
  2218  007A74  0E00               	movlw	high _address_buffer
  2219  007A76  6E03               	movwf	uart_puts@s+1,c
  2220  007A78  ECFF  F036         	call	_uart_puts	;wreg free
  2221                           
  2222                           ;fatfs.c: 129: uart_putc('\n');
  2223  007A7C  0E0A               	movlw	10
  2224  007A7E  ECE2  F035         	call	_uart_putc
  2225                           
  2226                           ;fatfs.c: 132: SDcard_read_block(rootdir_start);
  2227  007A82  C040  F006         	movff	_rootdir_start,SDcard_read_block@address
  2228  007A86  C041  F007         	movff	_rootdir_start+1,SDcard_read_block@address+1
  2229  007A8A  C042  F008         	movff	_rootdir_start+2,SDcard_read_block@address+2
  2230  007A8E  C043  F009         	movff	_rootdir_start+3,SDcard_read_block@address+3
  2231  007A92  EC32  F038         	call	_SDcard_read_block	;wreg free
  2232                           
  2233                           ;fatfs.c: 135: uart_puts("Searching first unallocated root table entry...");
  2234  007A96  0EEB               	movlw	low STR_5
  2235  007A98  6E02               	movwf	uart_puts@s,c
  2236  007A9A  0E7D               	movlw	high STR_5
  2237  007A9C  6E03               	movwf	uart_puts@s+1,c
  2238  007A9E  ECFF  F036         	call	_uart_puts	;wreg free
  2239                           
  2240                           ;fatfs.c: 136: for(entry_addr = 0; entry_addr < 0x0200; entry_addr += 32){
  2241  007AA2  0E00               	movlw	0
  2242  007AA4  6E47               	movwf	_entry_addr+1,c
  2243  007AA6  0E00               	movlw	0
  2244  007AA8  6E46               	movwf	_entry_addr,c
  2245  007AAA                     l1961:
  2246  007AAA  0E02               	movlw	2
  2247  007AAC  5C47               	subwf	_entry_addr+1,w,c
  2248  007AAE  B0D8               	btfsc	status,0,c
  2249  007AB0  D018               	goto	u1150
  2250                           
  2251                           ;fatfs.c: 137: if( (SDdata[entry_addr] == 0xE5) || (SDdata[entry_addr] == 0x00) ) break;
  2252  007AB2  0E76               	movlw	low _SDdata
  2253  007AB4  2446               	addwf	_entry_addr,w,c
  2254  007AB6  6ED9               	movwf	fsr2l,c
  2255  007AB8  0E00               	movlw	high _SDdata
  2256  007ABA  2047               	addwfc	_entry_addr+1,w,c
  2257  007ABC  6EDA               	movwf	fsr2h,c
  2258  007ABE  0EE5               	movlw	229
  2259  007AC0  18DE               	xorwf	postinc2,w,c
  2260  007AC2  B4D8               	btfsc	status,2,c
  2261  007AC4  D00E               	goto	u1150
  2262  007AC6  0E76               	movlw	low _SDdata
  2263  007AC8  2446               	addwf	_entry_addr,w,c
  2264  007ACA  6ED9               	movwf	fsr2l,c
  2265  007ACC  0E00               	movlw	high _SDdata
  2266  007ACE  2047               	addwfc	_entry_addr+1,w,c
  2267  007AD0  6EDA               	movwf	fsr2h,c
  2268  007AD2  50DF               	movf	indf2,w,c
  2269  007AD4  B4D8               	btfsc	status,2,c
  2270  007AD6  D005               	goto	u1150
  2271  007AD8  0E20               	movlw	32
  2272  007ADA  2646               	addwf	_entry_addr,f,c
  2273  007ADC  0E00               	movlw	0
  2274  007ADE  2247               	addwfc	_entry_addr+1,f,c
  2275  007AE0  D7E4               	goto	l1961
  2276  007AE2                     u1150:
  2277                           
  2278                           ;fatfs.c: 138: }
  2279                           ;fatfs.c: 139: uart_puts("done!\n");
  2280  007AE2  0EF8               	movlw	low STR_2
  2281  007AE4  6E02               	movwf	uart_puts@s,c
  2282  007AE6  0E7F               	movlw	high STR_2
  2283  007AE8  6E03               	movwf	uart_puts@s+1,c
  2284  007AEA  ECFF  F036         	call	_uart_puts	;wreg free
  2285                           
  2286                           ;fatfs.c: 141: ltoa(address_buffer, entry_addr, 16);
  2287  007AEE  0E6C               	movlw	low _address_buffer
  2288  007AF0  6E1B               	movwf	ltoa@buf,c
  2289  007AF2  0E00               	movlw	high _address_buffer
  2290  007AF4  6E1C               	movwf	ltoa@buf+1,c
  2291  007AF6  C046  F01D         	movff	_entry_addr,ltoa@val
  2292  007AFA  C047  F01E         	movff	_entry_addr+1,ltoa@val+1
  2293  007AFE  6A1F               	clrf	ltoa@val+2,c
  2294  007B00  6A20               	clrf	ltoa@val+3,c
  2295  007B02  0E00               	movlw	0
  2296  007B04  6E22               	movwf	ltoa@base+1,c
  2297  007B06  0E10               	movlw	16
  2298  007B08  6E21               	movwf	ltoa@base,c
  2299  007B0A  EC28  F037         	call	_ltoa	;wreg free
  2300                           
  2301                           ;fatfs.c: 142: uart_puts("Entry number: ");
  2302  007B0E  0EBD               	movlw	low STR_7
  2303  007B10  6E02               	movwf	uart_puts@s,c
  2304  007B12  0E7F               	movlw	high STR_7
  2305  007B14  6E03               	movwf	uart_puts@s+1,c
  2306  007B16  ECFF  F036         	call	_uart_puts	;wreg free
  2307                           
  2308                           ;fatfs.c: 143: uart_puts(address_buffer);
  2309  007B1A  0E6C               	movlw	low _address_buffer
  2310  007B1C  6E02               	movwf	uart_puts@s,c
  2311  007B1E  0E00               	movlw	high _address_buffer
  2312  007B20  6E03               	movwf	uart_puts@s+1,c
  2313  007B22  ECFF  F036         	call	_uart_puts	;wreg free
  2314                           
  2315                           ;fatfs.c: 144: uart_putc('\n');
  2316  007B26  0E0A               	movlw	10
  2317  007B28  ECE2  F035         	call	_uart_putc
  2318                           
  2319                           ;fatfs.c: 152: unsigned char offset = 0;
  2320  007B2C  0E00               	movlw	0
  2321  007B2E  6E2F               	movwf	file_create@offset,c
  2322                           
  2323                           ;fatfs.c: 153: while(*filename){
  2324  007B30  D022               	goto	l67
  2325  007B32                     
  2326                           ;fatfs.c: 154: if(*filename != '.'){
  2327  007B32  C025  FFF6         	movff	file_create@filename,tblptrl
  2328  007B36  C026  FFF7         	movff	file_create@filename+1,tblptrh
  2329  007B3A                     	if	0	;tblptru may be non-zero
  2330  007B3A                     	endif
  2331  007B3A                     	if	0	;tblptru may be non-zero
  2332  007B3A                     	endif
  2333  007B3A  0008               	tblrd		*
  2334  007B3C  50F5               	movf	tablat,w,c
  2335  007B3E  0A2E               	xorlw	46
  2336  007B40  B4D8               	btfsc	status,2,c
  2337  007B42  D017               	goto	l66
  2338                           
  2339                           ;fatfs.c: 155: SDdata[entry_addr+offset] = *filename;
  2340  007B44  C025  FFF6         	movff	file_create@filename,tblptrl
  2341  007B48  C026  FFF7         	movff	file_create@filename+1,tblptrh
  2342  007B4C                     	if	0	;tblptru may be non-zero
  2343  007B4C                     	endif
  2344  007B4C                     	if	0	;tblptru may be non-zero
  2345  007B4C                     	endif
  2346  007B4C  502F               	movf	file_create@offset,w,c
  2347  007B4E  2446               	addwf	_entry_addr,w,c
  2348  007B50  6E27               	movwf	??_file_create& (0+255),c
  2349  007B52  0E00               	movlw	0
  2350  007B54  2047               	addwfc	_entry_addr+1,w,c
  2351  007B56  6E28               	movwf	(??_file_create+1)& (0+255),c
  2352  007B58  0E76               	movlw	low _SDdata
  2353  007B5A  2427               	addwf	??_file_create,w,c
  2354  007B5C  6ED9               	movwf	fsr2l,c
  2355  007B5E  0E00               	movlw	high _SDdata
  2356  007B60  2028               	addwfc	??_file_create+1,w,c
  2357  007B62  6EDA               	movwf	fsr2h,c
  2358  007B64  0008               	tblrd		*
  2359  007B66  CFF5 FFDF          	movff	tablat,indf2
  2360                           
  2361                           ;fatfs.c: 156: filename++;
  2362  007B6A  4A25               	infsnz	file_create@filename,f,c
  2363  007B6C  2A26               	incf	file_create@filename+1,f,c
  2364                           
  2365                           ;fatfs.c: 157: offset++;
  2366  007B6E  2A2F               	incf	file_create@offset,f,c
  2367                           
  2368                           ;fatfs.c: 158: }
  2369  007B70  D002               	goto	l67
  2370  007B72                     l66:
  2371                           
  2372                           ;fatfs.c: 159: else{
  2373                           ;fatfs.c: 160: filename++;
  2374  007B72  4A25               	infsnz	file_create@filename,f,c
  2375  007B74  2A26               	incf	file_create@filename+1,f,c
  2376  007B76                     l67:
  2377  007B76  C025  FFF6         	movff	file_create@filename,tblptrl
  2378  007B7A  C026  FFF7         	movff	file_create@filename+1,tblptrh
  2379  007B7E                     	if	0	;tblptru may be non-zero
  2380  007B7E                     	endif
  2381  007B7E                     	if	0	;tblptru may be non-zero
  2382  007B7E                     	endif
  2383  007B7E  0008               	tblrd		*
  2384  007B80  50F5               	movf	tablat,w,c
  2385  007B82  0900               	iorlw	0
  2386  007B84  A4D8               	btfss	status,2,c
  2387  007B86  D7D5               	goto	l65
  2388                           
  2389                           ;fatfs.c: 161: }
  2390                           ;fatfs.c: 162: }
  2391                           ;fatfs.c: 166: SDdata[entry_addr+0x0B] = 0x20;
  2392  007B88  0E0B               	movlw	11
  2393  007B8A  2446               	addwf	_entry_addr,w,c
  2394  007B8C  6E27               	movwf	??_file_create& (0+255),c
  2395  007B8E  0E00               	movlw	0
  2396  007B90  2047               	addwfc	_entry_addr+1,w,c
  2397  007B92  6E28               	movwf	(??_file_create+1)& (0+255),c
  2398  007B94  0E76               	movlw	low _SDdata
  2399  007B96  2427               	addwf	??_file_create,w,c
  2400  007B98  6ED9               	movwf	fsr2l,c
  2401  007B9A  0E00               	movlw	high _SDdata
  2402  007B9C  2028               	addwfc	??_file_create+1,w,c
  2403  007B9E  6EDA               	movwf	fsr2h,c
  2404  007BA0  0E20               	movlw	32
  2405  007BA2  6EDF               	movwf	indf2,c
  2406                           
  2407                           ;fatfs.c: 169: SDdata[entry_addr+0x0C] = 0x00;
  2408  007BA4  0E0C               	movlw	12
  2409  007BA6  2446               	addwf	_entry_addr,w,c
  2410  007BA8  6E27               	movwf	??_file_create& (0+255),c
  2411  007BAA  0E00               	movlw	0
  2412  007BAC  2047               	addwfc	_entry_addr+1,w,c
  2413  007BAE  6E28               	movwf	(??_file_create+1)& (0+255),c
  2414  007BB0  0E76               	movlw	low _SDdata
  2415  007BB2  2427               	addwf	??_file_create,w,c
  2416  007BB4  6ED9               	movwf	fsr2l,c
  2417  007BB6  0E00               	movlw	high _SDdata
  2418  007BB8  2028               	addwfc	??_file_create+1,w,c
  2419  007BBA  6EDA               	movwf	fsr2h,c
  2420  007BBC  0E00               	movlw	0
  2421  007BBE  6EDF               	movwf	indf2,c
  2422                           
  2423                           ;fatfs.c: 172: SDdata[entry_addr+0x0D] = 0x00;
  2424  007BC0  0E0D               	movlw	13
  2425  007BC2  2446               	addwf	_entry_addr,w,c
  2426  007BC4  6E27               	movwf	??_file_create& (0+255),c
  2427  007BC6  0E00               	movlw	0
  2428  007BC8  2047               	addwfc	_entry_addr+1,w,c
  2429  007BCA  6E28               	movwf	(??_file_create+1)& (0+255),c
  2430  007BCC  0E76               	movlw	low _SDdata
  2431  007BCE  2427               	addwf	??_file_create,w,c
  2432  007BD0  6ED9               	movwf	fsr2l,c
  2433  007BD2  0E00               	movlw	high _SDdata
  2434  007BD4  2028               	addwfc	??_file_create+1,w,c
  2435  007BD6  6EDA               	movwf	fsr2h,c
  2436  007BD8  0E00               	movlw	0
  2437  007BDA  6EDF               	movwf	indf2,c
  2438                           
  2439                           ;fatfs.c: 176: SDdata[entry_addr+0x0E] = 0x00;
  2440  007BDC  0E0E               	movlw	14
  2441  007BDE  2446               	addwf	_entry_addr,w,c
  2442  007BE0  6E27               	movwf	??_file_create& (0+255),c
  2443  007BE2  0E00               	movlw	0
  2444  007BE4  2047               	addwfc	_entry_addr+1,w,c
  2445  007BE6  6E28               	movwf	(??_file_create+1)& (0+255),c
  2446  007BE8  0E76               	movlw	low _SDdata
  2447  007BEA  2427               	addwf	??_file_create,w,c
  2448  007BEC  6ED9               	movwf	fsr2l,c
  2449  007BEE  0E00               	movlw	high _SDdata
  2450  007BF0  2028               	addwfc	??_file_create+1,w,c
  2451  007BF2  6EDA               	movwf	fsr2h,c
  2452  007BF4  0E00               	movlw	0
  2453  007BF6  6EDF               	movwf	indf2,c
  2454                           
  2455                           ;fatfs.c: 177: SDdata[entry_addr+0x0F] = 0x60;
  2456  007BF8  0E0F               	movlw	15
  2457  007BFA  2446               	addwf	_entry_addr,w,c
  2458  007BFC  6E27               	movwf	??_file_create& (0+255),c
  2459  007BFE  0E00               	movlw	0
  2460  007C00  2047               	addwfc	_entry_addr+1,w,c
  2461  007C02  6E28               	movwf	(??_file_create+1)& (0+255),c
  2462  007C04  0E76               	movlw	low _SDdata
  2463  007C06  2427               	addwf	??_file_create,w,c
  2464  007C08  6ED9               	movwf	fsr2l,c
  2465  007C0A  0E00               	movlw	high _SDdata
  2466  007C0C  2028               	addwfc	??_file_create+1,w,c
  2467  007C0E  6EDA               	movwf	fsr2h,c
  2468  007C10  0E60               	movlw	96
  2469  007C12  6EDF               	movwf	indf2,c
  2470                           
  2471                           ;fatfs.c: 181: SDdata[entry_addr+0x10] = 0x21;
  2472  007C14  0E10               	movlw	16
  2473  007C16  2446               	addwf	_entry_addr,w,c
  2474  007C18  6E27               	movwf	??_file_create& (0+255),c
  2475  007C1A  0E00               	movlw	0
  2476  007C1C  2047               	addwfc	_entry_addr+1,w,c
  2477  007C1E  6E28               	movwf	(??_file_create+1)& (0+255),c
  2478  007C20  0E76               	movlw	low _SDdata
  2479  007C22  2427               	addwf	??_file_create,w,c
  2480  007C24  6ED9               	movwf	fsr2l,c
  2481  007C26  0E00               	movlw	high _SDdata
  2482  007C28  2028               	addwfc	??_file_create+1,w,c
  2483  007C2A  6EDA               	movwf	fsr2h,c
  2484  007C2C  0E21               	movlw	33
  2485  007C2E  6EDF               	movwf	indf2,c
  2486                           
  2487                           ;fatfs.c: 182: SDdata[entry_addr+0x11] = 0x24;
  2488  007C30  0E11               	movlw	17
  2489  007C32  2446               	addwf	_entry_addr,w,c
  2490  007C34  6E27               	movwf	??_file_create& (0+255),c
  2491  007C36  0E00               	movlw	0
  2492  007C38  2047               	addwfc	_entry_addr+1,w,c
  2493  007C3A  6E28               	movwf	(??_file_create+1)& (0+255),c
  2494  007C3C  0E76               	movlw	low _SDdata
  2495  007C3E  2427               	addwf	??_file_create,w,c
  2496  007C40  6ED9               	movwf	fsr2l,c
  2497  007C42  0E00               	movlw	high _SDdata
  2498  007C44  2028               	addwfc	??_file_create+1,w,c
  2499  007C46  6EDA               	movwf	fsr2h,c
  2500  007C48  0E24               	movlw	36
  2501  007C4A  6EDF               	movwf	indf2,c
  2502                           
  2503                           ;fatfs.c: 185: SDdata[entry_addr+0x12] = 0x21;
  2504  007C4C  0E12               	movlw	18
  2505  007C4E  2446               	addwf	_entry_addr,w,c
  2506  007C50  6E27               	movwf	??_file_create& (0+255),c
  2507  007C52  0E00               	movlw	0
  2508  007C54  2047               	addwfc	_entry_addr+1,w,c
  2509  007C56  6E28               	movwf	(??_file_create+1)& (0+255),c
  2510  007C58  0E76               	movlw	low _SDdata
  2511  007C5A  2427               	addwf	??_file_create,w,c
  2512  007C5C  6ED9               	movwf	fsr2l,c
  2513  007C5E  0E00               	movlw	high _SDdata
  2514  007C60  2028               	addwfc	??_file_create+1,w,c
  2515  007C62  6EDA               	movwf	fsr2h,c
  2516  007C64  0E21               	movlw	33
  2517  007C66  6EDF               	movwf	indf2,c
  2518                           
  2519                           ;fatfs.c: 186: SDdata[entry_addr+0x13] = 0x24;
  2520  007C68  0E13               	movlw	19
  2521  007C6A  2446               	addwf	_entry_addr,w,c
  2522  007C6C  6E27               	movwf	??_file_create& (0+255),c
  2523  007C6E  0E00               	movlw	0
  2524  007C70  2047               	addwfc	_entry_addr+1,w,c
  2525  007C72  6E28               	movwf	(??_file_create+1)& (0+255),c
  2526  007C74  0E76               	movlw	low _SDdata
  2527  007C76  2427               	addwf	??_file_create,w,c
  2528  007C78  6ED9               	movwf	fsr2l,c
  2529  007C7A  0E00               	movlw	high _SDdata
  2530  007C7C  2028               	addwfc	??_file_create+1,w,c
  2531  007C7E  6EDA               	movwf	fsr2h,c
  2532  007C80  0E24               	movlw	36
  2533  007C82  6EDF               	movwf	indf2,c
  2534                           
  2535                           ;fatfs.c: 189: SDdata[entry_addr+0x14] = 0x00;
  2536  007C84  0E14               	movlw	20
  2537  007C86  2446               	addwf	_entry_addr,w,c
  2538  007C88  6E27               	movwf	??_file_create& (0+255),c
  2539  007C8A  0E00               	movlw	0
  2540  007C8C  2047               	addwfc	_entry_addr+1,w,c
  2541  007C8E  6E28               	movwf	(??_file_create+1)& (0+255),c
  2542  007C90  0E76               	movlw	low _SDdata
  2543  007C92  2427               	addwf	??_file_create,w,c
  2544  007C94  6ED9               	movwf	fsr2l,c
  2545  007C96  0E00               	movlw	high _SDdata
  2546  007C98  2028               	addwfc	??_file_create+1,w,c
  2547  007C9A  6EDA               	movwf	fsr2h,c
  2548  007C9C  0E00               	movlw	0
  2549  007C9E  6EDF               	movwf	indf2,c
  2550                           
  2551                           ;fatfs.c: 190: SDdata[entry_addr+0x15] = 0x00;
  2552  007CA0  0E15               	movlw	21
  2553  007CA2  2446               	addwf	_entry_addr,w,c
  2554  007CA4  6E27               	movwf	??_file_create& (0+255),c
  2555  007CA6  0E00               	movlw	0
  2556  007CA8  2047               	addwfc	_entry_addr+1,w,c
  2557  007CAA  6E28               	movwf	(??_file_create+1)& (0+255),c
  2558  007CAC  0E76               	movlw	low _SDdata
  2559  007CAE  2427               	addwf	??_file_create,w,c
  2560  007CB0  6ED9               	movwf	fsr2l,c
  2561  007CB2  0E00               	movlw	high _SDdata
  2562  007CB4  2028               	addwfc	??_file_create+1,w,c
  2563  007CB6  6EDA               	movwf	fsr2h,c
  2564  007CB8  0E00               	movlw	0
  2565  007CBA  6EDF               	movwf	indf2,c
  2566                           
  2567                           ;fatfs.c: 193: SDdata[entry_addr+0x16] = 0x00;
  2568  007CBC  0E16               	movlw	22
  2569  007CBE  2446               	addwf	_entry_addr,w,c
  2570  007CC0  6E27               	movwf	??_file_create& (0+255),c
  2571  007CC2  0E00               	movlw	0
  2572  007CC4  2047               	addwfc	_entry_addr+1,w,c
  2573  007CC6  6E28               	movwf	(??_file_create+1)& (0+255),c
  2574  007CC8  0E76               	movlw	low _SDdata
  2575  007CCA  2427               	addwf	??_file_create,w,c
  2576  007CCC  6ED9               	movwf	fsr2l,c
  2577  007CCE  0E00               	movlw	high _SDdata
  2578  007CD0  2028               	addwfc	??_file_create+1,w,c
  2579  007CD2  6EDA               	movwf	fsr2h,c
  2580  007CD4  0E00               	movlw	0
  2581  007CD6  6EDF               	movwf	indf2,c
  2582                           
  2583                           ;fatfs.c: 194: SDdata[entry_addr+0x17] = 0x60;
  2584  007CD8  0E17               	movlw	23
  2585  007CDA  2446               	addwf	_entry_addr,w,c
  2586  007CDC  6E27               	movwf	??_file_create& (0+255),c
  2587  007CDE  0E00               	movlw	0
  2588  007CE0  2047               	addwfc	_entry_addr+1,w,c
  2589  007CE2  6E28               	movwf	(??_file_create+1)& (0+255),c
  2590  007CE4  0E76               	movlw	low _SDdata
  2591  007CE6  2427               	addwf	??_file_create,w,c
  2592  007CE8  6ED9               	movwf	fsr2l,c
  2593  007CEA  0E00               	movlw	high _SDdata
  2594  007CEC  2028               	addwfc	??_file_create+1,w,c
  2595  007CEE  6EDA               	movwf	fsr2h,c
  2596  007CF0  0E60               	movlw	96
  2597  007CF2  6EDF               	movwf	indf2,c
  2598                           
  2599                           ;fatfs.c: 197: SDdata[entry_addr+0x18] = 0x21;
  2600  007CF4  0E18               	movlw	24
  2601  007CF6  2446               	addwf	_entry_addr,w,c
  2602  007CF8  6E27               	movwf	??_file_create& (0+255),c
  2603  007CFA  0E00               	movlw	0
  2604  007CFC  2047               	addwfc	_entry_addr+1,w,c
  2605  007CFE  6E28               	movwf	(??_file_create+1)& (0+255),c
  2606  007D00  0E76               	movlw	low _SDdata
  2607  007D02  2427               	addwf	??_file_create,w,c
  2608  007D04  6ED9               	movwf	fsr2l,c
  2609  007D06  0E00               	movlw	high _SDdata
  2610  007D08  2028               	addwfc	??_file_create+1,w,c
  2611  007D0A  6EDA               	movwf	fsr2h,c
  2612  007D0C  0E21               	movlw	33
  2613  007D0E  6EDF               	movwf	indf2,c
  2614                           
  2615                           ;fatfs.c: 198: SDdata[entry_addr+0x19] = 0x24;
  2616  007D10  0E19               	movlw	25
  2617  007D12  2446               	addwf	_entry_addr,w,c
  2618  007D14  6E27               	movwf	??_file_create& (0+255),c
  2619  007D16  0E00               	movlw	0
  2620  007D18  2047               	addwfc	_entry_addr+1,w,c
  2621  007D1A  6E28               	movwf	(??_file_create+1)& (0+255),c
  2622  007D1C  0E76               	movlw	low _SDdata
  2623  007D1E  2427               	addwf	??_file_create,w,c
  2624  007D20  6ED9               	movwf	fsr2l,c
  2625  007D22  0E00               	movlw	high _SDdata
  2626  007D24  2028               	addwfc	??_file_create+1,w,c
  2627  007D26  6EDA               	movwf	fsr2h,c
  2628  007D28  0E24               	movlw	36
  2629  007D2A  6EDF               	movwf	indf2,c
  2630                           
  2631                           ;fatfs.c: 201: SDdata[entry_addr+0x1A] = cluster_number & 0xFF;
  2632  007D2C  0E1A               	movlw	26
  2633  007D2E  2446               	addwf	_entry_addr,w,c
  2634  007D30  6E27               	movwf	??_file_create& (0+255),c
  2635  007D32  0E00               	movlw	0
  2636  007D34  2047               	addwfc	_entry_addr+1,w,c
  2637  007D36  6E28               	movwf	(??_file_create+1)& (0+255),c
  2638  007D38  0E76               	movlw	low _SDdata
  2639  007D3A  2427               	addwf	??_file_create,w,c
  2640  007D3C  6ED9               	movwf	fsr2l,c
  2641  007D3E  0E00               	movlw	high _SDdata
  2642  007D40  2028               	addwfc	??_file_create+1,w,c
  2643  007D42  6EDA               	movwf	fsr2h,c
  2644  007D44  C048  FFDF         	movff	_cluster_number,indf2
  2645                           
  2646                           ;fatfs.c: 202: SDdata[entry_addr+0x1B] = (cluster_number>>8) & 0xFF;
  2647  007D48  0E1B               	movlw	27
  2648  007D4A  2446               	addwf	_entry_addr,w,c
  2649  007D4C  6E27               	movwf	??_file_create& (0+255),c
  2650  007D4E  0E00               	movlw	0
  2651  007D50  2047               	addwfc	_entry_addr+1,w,c
  2652  007D52  6E28               	movwf	(??_file_create+1)& (0+255),c
  2653  007D54  0E76               	movlw	low _SDdata
  2654  007D56  2427               	addwf	??_file_create,w,c
  2655  007D58  6ED9               	movwf	fsr2l,c
  2656  007D5A  0E00               	movlw	high _SDdata
  2657  007D5C  2028               	addwfc	??_file_create+1,w,c
  2658  007D5E  6EDA               	movwf	fsr2h,c
  2659  007D60  5049               	movf	_cluster_number+1,w,c
  2660  007D62  6EDF               	movwf	indf2,c
  2661                           
  2662                           ;fatfs.c: 205: SDdata[entry_addr+0x1C] = 0x00;
  2663  007D64  0E1C               	movlw	28
  2664  007D66  2446               	addwf	_entry_addr,w,c
  2665  007D68  6E27               	movwf	??_file_create& (0+255),c
  2666  007D6A  0E00               	movlw	0
  2667  007D6C  2047               	addwfc	_entry_addr+1,w,c
  2668  007D6E  6E28               	movwf	(??_file_create+1)& (0+255),c
  2669  007D70  0E76               	movlw	low _SDdata
  2670  007D72  2427               	addwf	??_file_create,w,c
  2671  007D74  6ED9               	movwf	fsr2l,c
  2672  007D76  0E00               	movlw	high _SDdata
  2673  007D78  2028               	addwfc	??_file_create+1,w,c
  2674  007D7A  6EDA               	movwf	fsr2h,c
  2675  007D7C  0E00               	movlw	0
  2676  007D7E  6EDF               	movwf	indf2,c
  2677                           
  2678                           ;fatfs.c: 206: SDdata[entry_addr+0x1D] = 0x00;
  2679  007D80  0E1D               	movlw	29
  2680  007D82  2446               	addwf	_entry_addr,w,c
  2681  007D84  6E27               	movwf	??_file_create& (0+255),c
  2682  007D86  0E00               	movlw	0
  2683  007D88  2047               	addwfc	_entry_addr+1,w,c
  2684  007D8A  6E28               	movwf	(??_file_create+1)& (0+255),c
  2685  007D8C  0E76               	movlw	low _SDdata
  2686  007D8E  2427               	addwf	??_file_create,w,c
  2687  007D90  6ED9               	movwf	fsr2l,c
  2688  007D92  0E00               	movlw	high _SDdata
  2689  007D94  2028               	addwfc	??_file_create+1,w,c
  2690  007D96  6EDA               	movwf	fsr2h,c
  2691  007D98  0E00               	movlw	0
  2692  007D9A  6EDF               	movwf	indf2,c
  2693                           
  2694                           ;fatfs.c: 207: SDdata[entry_addr+0x1E] = 0x00;
  2695  007D9C  0E1E               	movlw	30
  2696  007D9E  2446               	addwf	_entry_addr,w,c
  2697  007DA0  6E27               	movwf	??_file_create& (0+255),c
  2698  007DA2  0E00               	movlw	0
  2699  007DA4  2047               	addwfc	_entry_addr+1,w,c
  2700  007DA6  6E28               	movwf	(??_file_create+1)& (0+255),c
  2701  007DA8  0E76               	movlw	low _SDdata
  2702  007DAA  2427               	addwf	??_file_create,w,c
  2703  007DAC  6ED9               	movwf	fsr2l,c
  2704  007DAE  0E00               	movlw	high _SDdata
  2705  007DB0  2028               	addwfc	??_file_create+1,w,c
  2706  007DB2  6EDA               	movwf	fsr2h,c
  2707  007DB4  0E00               	movlw	0
  2708  007DB6  6EDF               	movwf	indf2,c
  2709                           
  2710                           ;fatfs.c: 208: SDdata[entry_addr+0x1F] = 0x00;
  2711  007DB8  0E1F               	movlw	31
  2712  007DBA  2446               	addwf	_entry_addr,w,c
  2713  007DBC  6E27               	movwf	??_file_create& (0+255),c
  2714  007DBE  0E00               	movlw	0
  2715  007DC0  2047               	addwfc	_entry_addr+1,w,c
  2716  007DC2  6E28               	movwf	(??_file_create+1)& (0+255),c
  2717  007DC4  0E76               	movlw	low _SDdata
  2718  007DC6  2427               	addwf	??_file_create,w,c
  2719  007DC8  6ED9               	movwf	fsr2l,c
  2720  007DCA  0E00               	movlw	high _SDdata
  2721  007DCC  2028               	addwfc	??_file_create+1,w,c
  2722  007DCE  6EDA               	movwf	fsr2h,c
  2723  007DD0  0E00               	movlw	0
  2724  007DD2  6EDF               	movwf	indf2,c
  2725                           
  2726                           ;fatfs.c: 211: SDcard_write_block(rootdir_start);
  2727  007DD4  C040  F006         	movff	_rootdir_start,SDcard_write_block@address
  2728  007DD8  C041  F007         	movff	_rootdir_start+1,SDcard_write_block@address+1
  2729  007DDC  C042  F008         	movff	_rootdir_start+2,SDcard_write_block@address+2
  2730  007DE0  C043  F009         	movff	_rootdir_start+3,SDcard_write_block@address+3
  2731  007DE4  EC31  F03A         	call	_SDcard_write_block	;wreg free
  2732  007DE8  0012               	return		;funcret
  2733  007DEA                     __end_of_file_create:
  2734                           	opt stack 0
  2735                           tblptru	equ	0xFF8
  2736                           tblptrh	equ	0xFF7
  2737                           tblptrl	equ	0xFF6
  2738                           tablat	equ	0xFF5
  2739                           prodh	equ	0xFF4
  2740                           prodl	equ	0xFF3
  2741                           postinc0	equ	0xFEE
  2742                           wreg	equ	0xFE8
  2743                           postdec1	equ	0xFE5
  2744                           fsr1h	equ	0xFE2
  2745                           fsr1l	equ	0xFE1
  2746                           indf2	equ	0xFDF
  2747                           postinc2	equ	0xFDE
  2748                           fsr2h	equ	0xFDA
  2749                           fsr2l	equ	0xFD9
  2750                           status	equ	0xFD8
  2751                           
  2752 ;; *************** function _itoa *****************
  2753 ;; Defined at:
  2754 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\itoa.c"
  2755 ;; Parameters:    Size  Location     Type
  2756 ;;  buf             2   16[COMRAM] PTR unsigned char 
  2757 ;;		 -> address_buffer(10), 
  2758 ;;  val             2   18[COMRAM] int 
  2759 ;;  base            2   20[COMRAM] int 
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;  cp              2   22[COMRAM] PTR unsigned char 
  2762 ;;		 -> address_buffer(10), 
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  2   16[COMRAM] PTR unsigned char 
  2765 ;; Registers used:
  2766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2772 ;;      Params:         6       0       0       0       0       0       0
  2773 ;;      Locals:         2       0       0       0       0       0       0
  2774 ;;      Temps:          0       0       0       0       0       0       0
  2775 ;;      Totals:         8       0       0       0       0       0       0
  2776 ;;Total ram usage:        8 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; Hardware stack levels required when called:    2
  2779 ;; This function calls:
  2780 ;;		_utoa
  2781 ;; This function is called by:
  2782 ;;		_file_create
  2783 ;; This function uses a non-reentrant model
  2784 ;;
  2785                           
  2786                           	psect	text7
  2787  006D28                     __ptext7:
  2788                           	opt stack 0
  2789  006D28                     _itoa:
  2790                           	opt stack 27
  2791                           
  2792                           ;incstack = 0
  2793  006D28  C011  F017         	movff	itoa@buf,itoa@cp
  2794  006D2C  C012  F018         	movff	itoa@buf+1,itoa@cp+1
  2795  006D30  AE14               	btfss	itoa@val+1,7,c
  2796  006D32  D00C               	goto	l590
  2797  006D34  C011  FFD9         	movff	itoa@buf,fsr2l
  2798  006D38  C012  FFDA         	movff	itoa@buf+1,fsr2h
  2799  006D3C  0E2D               	movlw	45
  2800  006D3E  6EDF               	movwf	indf2,c
  2801  006D40  4A11               	infsnz	itoa@buf,f,c
  2802  006D42  2A12               	incf	itoa@buf+1,f,c
  2803  006D44  6C13               	negf	itoa@val,c
  2804  006D46  1E14               	comf	itoa@val+1,f,c
  2805  006D48  B0D8               	btfsc	status,0,c
  2806  006D4A  2A14               	incf	itoa@val+1,f,c
  2807  006D4C                     l590:
  2808  006D4C  C011  F008         	movff	itoa@buf,utoa@buf
  2809  006D50  C012  F009         	movff	itoa@buf+1,utoa@buf+1
  2810  006D54  C013  F00A         	movff	itoa@val,utoa@val
  2811  006D58  C014  F00B         	movff	itoa@val+1,utoa@val+1
  2812  006D5C  C015  F00C         	movff	itoa@base,utoa@base
  2813  006D60  C016  F00D         	movff	itoa@base+1,utoa@base+1
  2814  006D64  ECF6  F038         	call	_utoa	;wreg free
  2815  006D68  0012               	return	
  2816  006D6A                     __end_of_itoa:
  2817                           	opt stack 0
  2818                           tblptru	equ	0xFF8
  2819                           tblptrh	equ	0xFF7
  2820                           tblptrl	equ	0xFF6
  2821                           tablat	equ	0xFF5
  2822                           prodh	equ	0xFF4
  2823                           prodl	equ	0xFF3
  2824                           postinc0	equ	0xFEE
  2825                           wreg	equ	0xFE8
  2826                           postdec1	equ	0xFE5
  2827                           fsr1h	equ	0xFE2
  2828                           fsr1l	equ	0xFE1
  2829                           indf2	equ	0xFDF
  2830                           postinc2	equ	0xFDE
  2831                           fsr2h	equ	0xFDA
  2832                           fsr2l	equ	0xFD9
  2833                           status	equ	0xFD8
  2834                           
  2835 ;; *************** function _utoa *****************
  2836 ;; Defined at:
  2837 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\itoa.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;  buf             2    7[COMRAM] PTR unsigned char 
  2840 ;;		 -> address_buffer(10), 
  2841 ;;  val             2    9[COMRAM] unsigned int 
  2842 ;;  base            2   11[COMRAM] int 
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;  v               2   13[COMRAM] unsigned int 
  2845 ;;  c               1   15[COMRAM] unsigned char 
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  2    7[COMRAM] PTR unsigned char 
  2848 ;; Registers used:
  2849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2855 ;;      Params:         6       0       0       0       0       0       0
  2856 ;;      Locals:         3       0       0       0       0       0       0
  2857 ;;      Temps:          0       0       0       0       0       0       0
  2858 ;;      Totals:         9       0       0       0       0       0       0
  2859 ;;Total ram usage:        9 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:    1
  2862 ;; This function calls:
  2863 ;;		___lwdiv
  2864 ;;		___lwmod
  2865 ;; This function is called by:
  2866 ;;		_itoa
  2867 ;; This function uses a non-reentrant model
  2868 ;;
  2869                           
  2870                           	psect	text8
  2871  0071EC                     __ptext8:
  2872                           	opt stack 0
  2873  0071EC                     _utoa:
  2874                           	opt stack 27
  2875                           
  2876                           ;incstack = 0
  2877  0071EC  C00A  F00E         	movff	utoa@val,utoa@v
  2878  0071F0  C00B  F00F         	movff	utoa@val+1,utoa@v+1
  2879  0071F4  C00E  F001         	movff	utoa@v,___lwdiv@dividend
  2880  0071F8  C00F  F002         	movff	utoa@v+1,___lwdiv@dividend+1
  2881  0071FC  C00C  F003         	movff	utoa@base,___lwdiv@divisor
  2882  007200  C00D  F004         	movff	utoa@base+1,___lwdiv@divisor+1
  2883  007204  EC51  F037         	call	___lwdiv	;wreg free
  2884  007208  C001  F00E         	movff	?___lwdiv,utoa@v
  2885  00720C  C002  F00F         	movff	?___lwdiv+1,utoa@v+1
  2886  007210  4A08               	infsnz	utoa@buf,f,c
  2887  007212  2A09               	incf	utoa@buf+1,f,c
  2888  007214  500E               	movf	utoa@v,w,c
  2889  007216  100F               	iorwf	utoa@v+1,w,c
  2890  007218  A4D8               	btfss	status,2,c
  2891  00721A  D7EC               	goto	l594
  2892  00721C  C008  FFD9         	movff	utoa@buf,fsr2l
  2893  007220  C009  FFDA         	movff	utoa@buf+1,fsr2h
  2894  007224  0E00               	movlw	0
  2895  007226  6EDF               	movwf	indf2,c
  2896  007228  0608               	decf	utoa@buf,f,c
  2897  00722A  A0D8               	btfss	status,0,c
  2898  00722C  0609               	decf	utoa@buf+1,f,c
  2899  00722E  C00A  F001         	movff	utoa@val,___lwmod@dividend
  2900  007232  C00B  F002         	movff	utoa@val+1,___lwmod@dividend+1
  2901  007236  C00C  F003         	movff	utoa@base,___lwmod@divisor
  2902  00723A  C00D  F004         	movff	utoa@base+1,___lwmod@divisor+1
  2903  00723E  EC73  F036         	call	___lwmod	;wreg free
  2904  007242  5001               	movf	?___lwmod,w,c
  2905  007244  6E10               	movwf	utoa@c,c
  2906  007246  C00A  F001         	movff	utoa@val,___lwdiv@dividend
  2907  00724A  C00B  F002         	movff	utoa@val+1,___lwdiv@dividend+1
  2908  00724E  C00C  F003         	movff	utoa@base,___lwdiv@divisor
  2909  007252  C00D  F004         	movff	utoa@base+1,___lwdiv@divisor+1
  2910  007256  EC51  F037         	call	___lwdiv	;wreg free
  2911  00725A  C001  F00A         	movff	?___lwdiv,utoa@val
  2912  00725E  C002  F00B         	movff	?___lwdiv+1,utoa@val+1
  2913  007262  0E09               	movlw	9
  2914  007264  6410               	cpfsgt	utoa@c,c
  2915  007266  D002               	goto	l597
  2916  007268  0E07               	movlw	7
  2917  00726A  2610               	addwf	utoa@c,f,c
  2918  00726C                     l597:
  2919  00726C  0E30               	movlw	48
  2920  00726E  2610               	addwf	utoa@c,f,c
  2921  007270  C008  FFD9         	movff	utoa@buf,fsr2l
  2922  007274  C009  FFDA         	movff	utoa@buf+1,fsr2h
  2923  007278  C010  FFDF         	movff	utoa@c,indf2
  2924  00727C  0608               	decf	utoa@buf,f,c
  2925  00727E  A0D8               	btfss	status,0,c
  2926  007280  0609               	decf	utoa@buf+1,f,c
  2927  007282  500A               	movf	utoa@val,w,c
  2928  007284  100B               	iorwf	utoa@val+1,w,c
  2929  007286  A4D8               	btfss	status,2,c
  2930  007288  D7D2               	goto	l596
  2931                           
  2932                           ;	Return value of _utoa is never used
  2933  00728A  4A08               	infsnz	utoa@buf,f,c
  2934  00728C  2A09               	incf	utoa@buf+1,f,c
  2935  00728E  0012               	return	
  2936  007290                     __end_of_utoa:
  2937                           	opt stack 0
  2938                           tblptru	equ	0xFF8
  2939                           tblptrh	equ	0xFF7
  2940                           tblptrl	equ	0xFF6
  2941                           tablat	equ	0xFF5
  2942                           prodh	equ	0xFF4
  2943                           prodl	equ	0xFF3
  2944                           postinc0	equ	0xFEE
  2945                           wreg	equ	0xFE8
  2946                           postdec1	equ	0xFE5
  2947                           fsr1h	equ	0xFE2
  2948                           fsr1l	equ	0xFE1
  2949                           indf2	equ	0xFDF
  2950                           postinc2	equ	0xFDE
  2951                           fsr2h	equ	0xFDA
  2952                           fsr2l	equ	0xFD9
  2953                           status	equ	0xFD8
  2954                           
  2955 ;; *************** function ___lwmod *****************
  2956 ;; Defined at:
  2957 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lwmod.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;  dividend        2    0[COMRAM] unsigned int 
  2960 ;;  divisor         2    2[COMRAM] unsigned int 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  counter         1    4[COMRAM] unsigned char 
  2963 ;; Return value:  Size  Location     Type
  2964 ;;                  2    0[COMRAM] unsigned int 
  2965 ;; Registers used:
  2966 ;;		wreg, status,2, status,0
  2967 ;; Tracked objects:
  2968 ;;		On entry : 0/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2972 ;;      Params:         4       0       0       0       0       0       0
  2973 ;;      Locals:         1       0       0       0       0       0       0
  2974 ;;      Temps:          0       0       0       0       0       0       0
  2975 ;;      Totals:         5       0       0       0       0       0       0
  2976 ;;Total ram usage:        5 bytes
  2977 ;; Hardware stack levels used:    1
  2978 ;; This function calls:
  2979 ;;		Nothing
  2980 ;; This function is called by:
  2981 ;;		_utoa
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           	psect	text9
  2986  006CE6                     __ptext9:
  2987                           	opt stack 0
  2988  006CE6                     ___lwmod:
  2989                           	opt stack 27
  2990                           
  2991                           ;incstack = 0
  2992  006CE6  5003               	movf	___lwmod@divisor,w,c
  2993  006CE8  1004               	iorwf	___lwmod@divisor+1,w,c
  2994  006CEA  B4D8               	btfsc	status,2,c
  2995  006CEC  D018               	goto	l706
  2996  006CEE  0E01               	movlw	1
  2997  006CF0  6E05               	movwf	___lwmod@counter,c
  2998  006CF2  D004               	goto	l701
  2999  006CF4  90D8               	bcf	status,0,c
  3000  006CF6  3603               	rlcf	___lwmod@divisor,f,c
  3001  006CF8  3604               	rlcf	___lwmod@divisor+1,f,c
  3002  006CFA  2A05               	incf	___lwmod@counter,f,c
  3003  006CFC                     l701:
  3004  006CFC  AE04               	btfss	___lwmod@divisor+1,7,c
  3005  006CFE  D7FA               	goto	l702
  3006  006D00                     u930:
  3007  006D00  5003               	movf	___lwmod@divisor,w,c
  3008  006D02  5C01               	subwf	___lwmod@dividend,w,c
  3009  006D04  5004               	movf	___lwmod@divisor+1,w,c
  3010  006D06  5802               	subwfb	___lwmod@dividend+1,w,c
  3011  006D08  A0D8               	btfss	status,0,c
  3012  006D0A  D004               	goto	l705
  3013  006D0C  5003               	movf	___lwmod@divisor,w,c
  3014  006D0E  5E01               	subwf	___lwmod@dividend,f,c
  3015  006D10  5004               	movf	___lwmod@divisor+1,w,c
  3016  006D12  5A02               	subwfb	___lwmod@dividend+1,f,c
  3017  006D14                     l705:
  3018  006D14  90D8               	bcf	status,0,c
  3019  006D16  3204               	rrcf	___lwmod@divisor+1,f,c
  3020  006D18  3203               	rrcf	___lwmod@divisor,f,c
  3021  006D1A  2E05               	decfsz	___lwmod@counter,f,c
  3022  006D1C  D7F1               	goto	u930
  3023  006D1E                     l706:
  3024  006D1E  C001  F001         	movff	___lwmod@dividend,?___lwmod
  3025  006D22  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  3026  006D26  0012               	return		;funcret
  3027  006D28                     __end_of___lwmod:
  3028                           	opt stack 0
  3029                           tblptru	equ	0xFF8
  3030                           tblptrh	equ	0xFF7
  3031                           tblptrl	equ	0xFF6
  3032                           tablat	equ	0xFF5
  3033                           prodh	equ	0xFF4
  3034                           prodl	equ	0xFF3
  3035                           postinc0	equ	0xFEE
  3036                           wreg	equ	0xFE8
  3037                           postdec1	equ	0xFE5
  3038                           fsr1h	equ	0xFE2
  3039                           fsr1l	equ	0xFE1
  3040                           indf2	equ	0xFDF
  3041                           postinc2	equ	0xFDE
  3042                           fsr2h	equ	0xFDA
  3043                           fsr2l	equ	0xFD9
  3044                           status	equ	0xFD8
  3045                           
  3046 ;; *************** function ___lwdiv *****************
  3047 ;; Defined at:
  3048 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  3049 ;; Parameters:    Size  Location     Type
  3050 ;;  dividend        2    0[COMRAM] unsigned int 
  3051 ;;  divisor         2    2[COMRAM] unsigned int 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  quotient        2    4[COMRAM] unsigned int 
  3054 ;;  counter         1    6[COMRAM] unsigned char 
  3055 ;; Return value:  Size  Location     Type
  3056 ;;                  2    0[COMRAM] unsigned int 
  3057 ;; Registers used:
  3058 ;;		wreg, status,2, status,0
  3059 ;; Tracked objects:
  3060 ;;		On entry : 0/0
  3061 ;;		On exit  : 0/0
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3064 ;;      Params:         4       0       0       0       0       0       0
  3065 ;;      Locals:         3       0       0       0       0       0       0
  3066 ;;      Temps:          0       0       0       0       0       0       0
  3067 ;;      Totals:         7       0       0       0       0       0       0
  3068 ;;Total ram usage:        7 bytes
  3069 ;; Hardware stack levels used:    1
  3070 ;; This function calls:
  3071 ;;		Nothing
  3072 ;; This function is called by:
  3073 ;;		_utoa
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text10
  3078  006EA2                     __ptext10:
  3079                           	opt stack 0
  3080  006EA2                     ___lwdiv:
  3081                           	opt stack 27
  3082                           
  3083                           ;incstack = 0
  3084  006EA2  0E00               	movlw	0
  3085  006EA4  6E06               	movwf	___lwdiv@quotient+1,c
  3086  006EA6  0E00               	movlw	0
  3087  006EA8  6E05               	movwf	___lwdiv@quotient,c
  3088  006EAA  5003               	movf	___lwdiv@divisor,w,c
  3089  006EAC  1004               	iorwf	___lwdiv@divisor+1,w,c
  3090  006EAE  B4D8               	btfsc	status,2,c
  3091  006EB0  D01C               	goto	l696
  3092  006EB2  0E01               	movlw	1
  3093  006EB4  6E07               	movwf	___lwdiv@counter,c
  3094  006EB6  D004               	goto	l691
  3095  006EB8  90D8               	bcf	status,0,c
  3096  006EBA  3603               	rlcf	___lwdiv@divisor,f,c
  3097  006EBC  3604               	rlcf	___lwdiv@divisor+1,f,c
  3098  006EBE  2A07               	incf	___lwdiv@counter,f,c
  3099  006EC0                     l691:
  3100  006EC0  AE04               	btfss	___lwdiv@divisor+1,7,c
  3101  006EC2  D7FA               	goto	l692
  3102  006EC4                     u900:
  3103  006EC4  90D8               	bcf	status,0,c
  3104  006EC6  3605               	rlcf	___lwdiv@quotient,f,c
  3105  006EC8  3606               	rlcf	___lwdiv@quotient+1,f,c
  3106  006ECA  5003               	movf	___lwdiv@divisor,w,c
  3107  006ECC  5C01               	subwf	___lwdiv@dividend,w,c
  3108  006ECE  5004               	movf	___lwdiv@divisor+1,w,c
  3109  006ED0  5802               	subwfb	___lwdiv@dividend+1,w,c
  3110  006ED2  A0D8               	btfss	status,0,c
  3111  006ED4  D005               	goto	l695
  3112  006ED6  5003               	movf	___lwdiv@divisor,w,c
  3113  006ED8  5E01               	subwf	___lwdiv@dividend,f,c
  3114  006EDA  5004               	movf	___lwdiv@divisor+1,w,c
  3115  006EDC  5A02               	subwfb	___lwdiv@dividend+1,f,c
  3116  006EDE  8005               	bsf	___lwdiv@quotient,0,c
  3117  006EE0                     l695:
  3118  006EE0  90D8               	bcf	status,0,c
  3119  006EE2  3204               	rrcf	___lwdiv@divisor+1,f,c
  3120  006EE4  3203               	rrcf	___lwdiv@divisor,f,c
  3121  006EE6  2E07               	decfsz	___lwdiv@counter,f,c
  3122  006EE8  D7ED               	goto	u900
  3123  006EEA                     l696:
  3124  006EEA  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3125  006EEE  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3126  006EF2  0012               	return		;funcret
  3127  006EF4                     __end_of___lwdiv:
  3128                           	opt stack 0
  3129                           tblptru	equ	0xFF8
  3130                           tblptrh	equ	0xFF7
  3131                           tblptrl	equ	0xFF6
  3132                           tablat	equ	0xFF5
  3133                           prodh	equ	0xFF4
  3134                           prodl	equ	0xFF3
  3135                           postinc0	equ	0xFEE
  3136                           wreg	equ	0xFE8
  3137                           postdec1	equ	0xFE5
  3138                           fsr1h	equ	0xFE2
  3139                           fsr1l	equ	0xFE1
  3140                           indf2	equ	0xFDF
  3141                           postinc2	equ	0xFDE
  3142                           fsr2h	equ	0xFDA
  3143                           fsr2l	equ	0xFD9
  3144                           status	equ	0xFD8
  3145                           
  3146 ;; *************** function _file_append *****************
  3147 ;; Defined at:
  3148 ;;		line 236 in file "../../picSD-master/fatfs.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;  string          2   36[COMRAM] PTR const unsigned char 
  3151 ;;		 -> STR_11(33), 
  3152 ;; Auto vars:     Size  Location     Type
  3153 ;;		None
  3154 ;; Return value:  Size  Location     Type
  3155 ;;                  1    wreg      void 
  3156 ;; Registers used:
  3157 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3158 ;; Tracked objects:
  3159 ;;		On entry : 0/0
  3160 ;;		On exit  : 0/0
  3161 ;;		Unchanged: 0/0
  3162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3163 ;;      Params:         2       0       0       0       0       0       0
  3164 ;;      Locals:         0       0       0       0       0       0       0
  3165 ;;      Temps:          0       0       0       0       0       0       0
  3166 ;;      Totals:         2       0       0       0       0       0       0
  3167 ;;Total ram usage:        2 bytes
  3168 ;; Hardware stack levels used:    1
  3169 ;; Hardware stack levels required when called:    4
  3170 ;; This function calls:
  3171 ;;		_sector_close
  3172 ;;		_sector_open
  3173 ;; This function is called by:
  3174 ;;		_main
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           	psect	text11
  3179  006F9E                     __ptext11:
  3180                           	opt stack 0
  3181  006F9E                     _file_append:
  3182                           	opt stack 26
  3183                           
  3184                           ;fatfs.c: 239: while(*string){
  3185                           
  3186                           ;incstack = 0
  3187  006F9E  D025               	goto	l81
  3188  006FA0                     
  3189                           ;fatfs.c: 240: if(byte_number < 512){
  3190  006FA0  0E02               	movlw	2
  3191  006FA2  5C45               	subwf	_byte_number+1,w,c
  3192  006FA4  B0D8               	btfsc	status,0,c
  3193  006FA6  D018               	goto	l80
  3194                           
  3195                           ;fatfs.c: 241: SDdata[byte_number] = *string;
  3196  006FA8  C025  FFF6         	movff	file_append@string,tblptrl
  3197  006FAC  C026  FFF7         	movff	file_append@string+1,tblptrh
  3198  006FB0                     	if	0	;tblptru may be non-zero
  3199  006FB0                     	endif
  3200  006FB0                     	if	0	;tblptru may be non-zero
  3201  006FB0                     	endif
  3202  006FB0  0E76               	movlw	low _SDdata
  3203  006FB2  2444               	addwf	_byte_number,w,c
  3204  006FB4  6ED9               	movwf	fsr2l,c
  3205  006FB6  0E00               	movlw	high _SDdata
  3206  006FB8  2045               	addwfc	_byte_number+1,w,c
  3207  006FBA  6EDA               	movwf	fsr2h,c
  3208  006FBC  0008               	tblrd		*
  3209  006FBE  CFF5 FFDF          	movff	tablat,indf2
  3210                           
  3211                           ;fatfs.c: 242: string++;
  3212  006FC2  4A25               	infsnz	file_append@string,f,c
  3213  006FC4  2A26               	incf	file_append@string+1,f,c
  3214                           
  3215                           ;fatfs.c: 243: byte_number++;
  3216  006FC6  4A44               	infsnz	_byte_number,f,c
  3217  006FC8  2A45               	incf	_byte_number+1,f,c
  3218                           
  3219                           ;fatfs.c: 245: file_length++;
  3220  006FCA  0E01               	movlw	1
  3221  006FCC  2638               	addwf	_file_length,f,c
  3222  006FCE  0E00               	movlw	0
  3223  006FD0  2239               	addwfc	_file_length+1,f,c
  3224  006FD2  223A               	addwfc	_file_length+2,f,c
  3225  006FD4  223B               	addwfc	_file_length+3,f,c
  3226                           
  3227                           ;fatfs.c: 246: }
  3228  006FD6  D009               	goto	l81
  3229  006FD8                     l80:
  3230                           
  3231                           ;fatfs.c: 247: else{
  3232                           ;fatfs.c: 249: sector_close();
  3233  006FD8  ECF9  F035         	call	_sector_close	;wreg free
  3234                           
  3235                           ;fatfs.c: 251: byte_number = 0;
  3236  006FDC  0E00               	movlw	0
  3237  006FDE  6E45               	movwf	_byte_number+1,c
  3238  006FE0  0E00               	movlw	0
  3239  006FE2  6E44               	movwf	_byte_number,c
  3240                           
  3241                           ;fatfs.c: 253: current_sector++;
  3242  006FE4  2A54               	incf	_current_sector,f,c
  3243                           
  3244                           ;fatfs.c: 254: sector_open();
  3245  006FE6  ECB0  F038         	call	_sector_open	;wreg free
  3246  006FEA                     l81:
  3247  006FEA  C025  FFF6         	movff	file_append@string,tblptrl
  3248  006FEE  C026  FFF7         	movff	file_append@string+1,tblptrh
  3249  006FF2                     	if	0	;tblptru may be non-zero
  3250  006FF2                     	endif
  3251  006FF2                     	if	0	;tblptru may be non-zero
  3252  006FF2                     	endif
  3253  006FF2  0008               	tblrd		*
  3254  006FF4  50F5               	movf	tablat,w,c
  3255  006FF6  0900               	iorlw	0
  3256  006FF8  B4D8               	btfsc	status,2,c
  3257  006FFA  0012               	return	
  3258  006FFC  D7D1               	goto	l79
  3259  006FFE                     __end_of_file_append:
  3260                           	opt stack 0
  3261                           tblptru	equ	0xFF8
  3262                           tblptrh	equ	0xFF7
  3263                           tblptrl	equ	0xFF6
  3264                           tablat	equ	0xFF5
  3265                           prodh	equ	0xFF4
  3266                           prodl	equ	0xFF3
  3267                           postinc0	equ	0xFEE
  3268                           wreg	equ	0xFE8
  3269                           postdec1	equ	0xFE5
  3270                           fsr1h	equ	0xFE2
  3271                           fsr1l	equ	0xFE1
  3272                           indf2	equ	0xFDF
  3273                           postinc2	equ	0xFDE
  3274                           fsr2h	equ	0xFDA
  3275                           fsr2l	equ	0xFD9
  3276                           status	equ	0xFD8
  3277                           
  3278 ;; *************** function _sector_open *****************
  3279 ;; Defined at:
  3280 ;;		line 214 in file "../../picSD-master/fatfs.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;		None
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;		None
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  1    wreg      void 
  3287 ;; Registers used:
  3288 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3294 ;;      Params:         0       0       0       0       0       0       0
  3295 ;;      Locals:         0       0       0       0       0       0       0
  3296 ;;      Temps:          0       0       0       0       0       0       0
  3297 ;;      Totals:         0       0       0       0       0       0       0
  3298 ;;Total ram usage:        0 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:    3
  3301 ;; This function calls:
  3302 ;;		_SDcard_read_block
  3303 ;;		___lmul
  3304 ;;		_ltoa
  3305 ;;		_uart_putc
  3306 ;;		_uart_puts
  3307 ;; This function is called by:
  3308 ;;		_file_append
  3309 ;;		_main
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text12
  3314  007160                     __ptext12:
  3315                           	opt stack 0
  3316  007160                     _sector_open:
  3317                           	opt stack 27
  3318                           
  3319                           ;fatfs.c: 216: current_sector_address = start_sector_address + ((unsigned long)current_s
      +                          ector * (unsigned long)sector_size);
  3320                           
  3321                           ;incstack = 0
  3322  007160  5054               	movf	_current_sector,w,c
  3323  007162  6E01               	movwf	___lmul@multiplier,c
  3324  007164  6A02               	clrf	___lmul@multiplier+1,c
  3325  007166  6A03               	clrf	___lmul@multiplier+2,c
  3326  007168  6A04               	clrf	___lmul@multiplier+3,c
  3327  00716A  C050  F005         	movff	_sector_size,___lmul@multiplicand
  3328  00716E  C051  F006         	movff	_sector_size+1,___lmul@multiplicand+1
  3329  007172  6A07               	clrf	___lmul@multiplicand+2,c
  3330  007174  6A08               	clrf	___lmul@multiplicand+3,c
  3331  007176  ECA4  F037         	call	___lmul	;wreg free
  3332  00717A  0100               	movlb	0	; () banked
  3333  00717C  5160               	movf	_start_sector_address& (0+255),w,b
  3334  00717E  2401               	addwf	?___lmul,w,c
  3335  007180  6E3C               	movwf	_current_sector_address,c
  3336  007182  5161               	movf	(_start_sector_address+1)& (0+255),w,b
  3337  007184  2002               	addwfc	?___lmul+1,w,c
  3338  007186  6E3D               	movwf	_current_sector_address+1,c
  3339  007188  5162               	movf	(_start_sector_address+2)& (0+255),w,b
  3340  00718A  2003               	addwfc	?___lmul+2,w,c
  3341  00718C  6E3E               	movwf	_current_sector_address+2,c
  3342  00718E  5163               	movf	(_start_sector_address+3)& (0+255),w,b
  3343  007190  2004               	addwfc	?___lmul+3,w,c
  3344  007192  6E3F               	movwf	_current_sector_address+3,c
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;fatfs.c: 217: SDcard_read_block(current_sector_address);
  3348  007194  C03C  F006         	movff	_current_sector_address,SDcard_read_block@address
  3349  007198  C03D  F007         	movff	_current_sector_address+1,SDcard_read_block@address+1
  3350  00719C  C03E  F008         	movff	_current_sector_address+2,SDcard_read_block@address+2
  3351  0071A0  C03F  F009         	movff	_current_sector_address+3,SDcard_read_block@address+3
  3352  0071A4  EC32  F038         	call	_SDcard_read_block	;wreg free
  3353                           
  3354                           ;fatfs.c: 219: ltoa(address_buffer, current_sector_address, 16);
  3355  0071A8  0E6C               	movlw	low _address_buffer
  3356  0071AA  6E1B               	movwf	ltoa@buf,c
  3357  0071AC  0E00               	movlw	high _address_buffer
  3358  0071AE  6E1C               	movwf	ltoa@buf+1,c
  3359  0071B0  C03C  F01D         	movff	_current_sector_address,ltoa@val
  3360  0071B4  C03D  F01E         	movff	_current_sector_address+1,ltoa@val+1
  3361  0071B8  C03E  F01F         	movff	_current_sector_address+2,ltoa@val+2
  3362  0071BC  C03F  F020         	movff	_current_sector_address+3,ltoa@val+3
  3363  0071C0  0E00               	movlw	0
  3364  0071C2  6E22               	movwf	ltoa@base+1,c
  3365  0071C4  0E10               	movlw	16
  3366  0071C6  6E21               	movwf	ltoa@base,c
  3367  0071C8  EC28  F037         	call	_ltoa	;wreg free
  3368                           
  3369                           ;fatfs.c: 220: uart_puts("Address of current sector: ");
  3370  0071CC  0E1B               	movlw	low STR_8
  3371  0071CE  6E02               	movwf	uart_puts@s,c
  3372  0071D0  0E7F               	movlw	high STR_8
  3373  0071D2  6E03               	movwf	uart_puts@s+1,c
  3374  0071D4  ECFF  F036         	call	_uart_puts	;wreg free
  3375                           
  3376                           ;fatfs.c: 221: uart_puts(address_buffer);
  3377  0071D8  0E6C               	movlw	low _address_buffer
  3378  0071DA  6E02               	movwf	uart_puts@s,c
  3379  0071DC  0E00               	movlw	high _address_buffer
  3380  0071DE  6E03               	movwf	uart_puts@s+1,c
  3381  0071E0  ECFF  F036         	call	_uart_puts	;wreg free
  3382                           
  3383                           ;fatfs.c: 222: uart_putc('\n');
  3384  0071E4  0E0A               	movlw	10
  3385  0071E6  ECE2  F035         	call	_uart_putc
  3386  0071EA  0012               	return		;funcret
  3387  0071EC                     __end_of_sector_open:
  3388                           	opt stack 0
  3389                           tblptru	equ	0xFF8
  3390                           tblptrh	equ	0xFF7
  3391                           tblptrl	equ	0xFF6
  3392                           tablat	equ	0xFF5
  3393                           prodh	equ	0xFF4
  3394                           prodl	equ	0xFF3
  3395                           postinc0	equ	0xFEE
  3396                           wreg	equ	0xFE8
  3397                           postdec1	equ	0xFE5
  3398                           fsr1h	equ	0xFE2
  3399                           fsr1l	equ	0xFE1
  3400                           indf2	equ	0xFDF
  3401                           postinc2	equ	0xFDE
  3402                           fsr2h	equ	0xFDA
  3403                           fsr2l	equ	0xFD9
  3404                           status	equ	0xFD8
  3405                           
  3406 ;; *************** function _ltoa *****************
  3407 ;; Defined at:
  3408 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\ltoa.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;  buf             2   26[COMRAM] PTR unsigned char 
  3411 ;;		 -> address_buffer(10), 
  3412 ;;  val             4   28[COMRAM] long 
  3413 ;;  base            2   32[COMRAM] int 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;  cp              2   34[COMRAM] PTR unsigned char 
  3416 ;;		 -> address_buffer(10), 
  3417 ;; Return value:  Size  Location     Type
  3418 ;;                  2   26[COMRAM] PTR unsigned char 
  3419 ;; Registers used:
  3420 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3421 ;; Tracked objects:
  3422 ;;		On entry : 0/0
  3423 ;;		On exit  : 0/0
  3424 ;;		Unchanged: 0/0
  3425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3426 ;;      Params:         8       0       0       0       0       0       0
  3427 ;;      Locals:         2       0       0       0       0       0       0
  3428 ;;      Temps:          0       0       0       0       0       0       0
  3429 ;;      Totals:        10       0       0       0       0       0       0
  3430 ;;Total ram usage:       10 bytes
  3431 ;; Hardware stack levels used:    1
  3432 ;; Hardware stack levels required when called:    2
  3433 ;; This function calls:
  3434 ;;		_ultoa
  3435 ;; This function is called by:
  3436 ;;		_file_create
  3437 ;;		_sector_open
  3438 ;;		_file_update_size
  3439 ;; This function uses a non-reentrant model
  3440 ;;
  3441                           
  3442                           	psect	text13
  3443  006E50                     __ptext13:
  3444                           	opt stack 0
  3445  006E50                     _ltoa:
  3446                           	opt stack 27
  3447                           
  3448                           ;incstack = 0
  3449  006E50  C01B  F023         	movff	ltoa@buf,ltoa@cp
  3450  006E54  C01C  F024         	movff	ltoa@buf+1,ltoa@cp+1
  3451  006E58  AE20               	btfss	ltoa@val+3,7,c
  3452  006E5A  D010               	goto	l673
  3453  006E5C  C01B  FFD9         	movff	ltoa@buf,fsr2l
  3454  006E60  C01C  FFDA         	movff	ltoa@buf+1,fsr2h
  3455  006E64  0E2D               	movlw	45
  3456  006E66  6EDF               	movwf	indf2,c
  3457  006E68  4A1B               	infsnz	ltoa@buf,f,c
  3458  006E6A  2A1C               	incf	ltoa@buf+1,f,c
  3459  006E6C  1E20               	comf	ltoa@val+3,f,c
  3460  006E6E  1E1F               	comf	ltoa@val+2,f,c
  3461  006E70  1E1E               	comf	ltoa@val+1,f,c
  3462  006E72  6C1D               	negf	ltoa@val,c
  3463  006E74  0E00               	movlw	0
  3464  006E76  221E               	addwfc	ltoa@val+1,f,c
  3465  006E78  221F               	addwfc	ltoa@val+2,f,c
  3466  006E7A  2220               	addwfc	ltoa@val+3,f,c
  3467  006E7C                     l673:
  3468  006E7C  C01B  F00E         	movff	ltoa@buf,ultoa@buf
  3469  006E80  C01C  F00F         	movff	ltoa@buf+1,ultoa@buf+1
  3470  006E84  C01D  F010         	movff	ltoa@val,ultoa@val
  3471  006E88  C01E  F011         	movff	ltoa@val+1,ultoa@val+1
  3472  006E8C  C01F  F012         	movff	ltoa@val+2,ultoa@val+2
  3473  006E90  C020  F013         	movff	ltoa@val+3,ultoa@val+3
  3474  006E94  C021  F014         	movff	ltoa@base,ultoa@base
  3475  006E98  C022  F015         	movff	ltoa@base+1,ultoa@base+1
  3476  006E9C  ECB6  F039         	call	_ultoa	;wreg free
  3477  006EA0  0012               	return	
  3478  006EA2                     __end_of_ltoa:
  3479                           	opt stack 0
  3480                           tblptru	equ	0xFF8
  3481                           tblptrh	equ	0xFF7
  3482                           tblptrl	equ	0xFF6
  3483                           tablat	equ	0xFF5
  3484                           prodh	equ	0xFF4
  3485                           prodl	equ	0xFF3
  3486                           postinc0	equ	0xFEE
  3487                           wreg	equ	0xFE8
  3488                           postdec1	equ	0xFE5
  3489                           fsr1h	equ	0xFE2
  3490                           fsr1l	equ	0xFE1
  3491                           indf2	equ	0xFDF
  3492                           postinc2	equ	0xFDE
  3493                           fsr2h	equ	0xFDA
  3494                           fsr2l	equ	0xFD9
  3495                           status	equ	0xFD8
  3496                           
  3497 ;; *************** function _ultoa *****************
  3498 ;; Defined at:
  3499 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\ltoa.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;  buf             2   13[COMRAM] PTR unsigned char 
  3502 ;;		 -> address_buffer(10), 
  3503 ;;  val             4   15[COMRAM] unsigned long 
  3504 ;;  base            2   19[COMRAM] int 
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;  v               4   21[COMRAM] unsigned long 
  3507 ;;  c               1   25[COMRAM] unsigned char 
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  2   13[COMRAM] PTR unsigned char 
  3510 ;; Registers used:
  3511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3517 ;;      Params:         8       0       0       0       0       0       0
  3518 ;;      Locals:         5       0       0       0       0       0       0
  3519 ;;      Temps:          0       0       0       0       0       0       0
  3520 ;;      Totals:        13       0       0       0       0       0       0
  3521 ;;Total ram usage:       13 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; Hardware stack levels required when called:    1
  3524 ;; This function calls:
  3525 ;;		___lldiv
  3526 ;;		___llmod
  3527 ;; This function is called by:
  3528 ;;		_ltoa
  3529 ;; This function uses a non-reentrant model
  3530 ;;
  3531                           
  3532                           	psect	text14
  3533  00736C                     __ptext14:
  3534                           	opt stack 0
  3535  00736C                     _ultoa:
  3536                           	opt stack 27
  3537                           
  3538                           ;incstack = 0
  3539  00736C  C010  F016         	movff	ultoa@val,ultoa@v
  3540  007370  C011  F017         	movff	ultoa@val+1,ultoa@v+1
  3541  007374  C012  F018         	movff	ultoa@val+2,ultoa@v+2
  3542  007378  C013  F019         	movff	ultoa@val+3,ultoa@v+3
  3543  00737C  C016  F001         	movff	ultoa@v,___lldiv@dividend
  3544  007380  C017  F002         	movff	ultoa@v+1,___lldiv@dividend+1
  3545  007384  C018  F003         	movff	ultoa@v+2,___lldiv@dividend+2
  3546  007388  C019  F004         	movff	ultoa@v+3,___lldiv@dividend+3
  3547  00738C  C014  F005         	movff	ultoa@base,___lldiv@divisor
  3548  007390  C015  F006         	movff	ultoa@base+1,___lldiv@divisor+1
  3549  007394  0E00               	movlw	0
  3550  007396  BE06               	btfsc	___lldiv@divisor+1,7,c
  3551  007398  0EFF               	movlw	-1
  3552  00739A  6E07               	movwf	___lldiv@divisor+2,c
  3553  00739C  6E08               	movwf	___lldiv@divisor+3,c
  3554  00739E  EC6F  F038         	call	___lldiv	;wreg free
  3555  0073A2  C001  F016         	movff	?___lldiv,ultoa@v
  3556  0073A6  C002  F017         	movff	?___lldiv+1,ultoa@v+1
  3557  0073AA  C003  F018         	movff	?___lldiv+2,ultoa@v+2
  3558  0073AE  C004  F019         	movff	?___lldiv+3,ultoa@v+3
  3559  0073B2  4A0E               	infsnz	ultoa@buf,f,c
  3560  0073B4  2A0F               	incf	ultoa@buf+1,f,c
  3561  0073B6  5016               	movf	ultoa@v,w,c
  3562  0073B8  1017               	iorwf	ultoa@v+1,w,c
  3563  0073BA  1018               	iorwf	ultoa@v+2,w,c
  3564  0073BC  1019               	iorwf	ultoa@v+3,w,c
  3565  0073BE  A4D8               	btfss	status,2,c
  3566  0073C0  D7DD               	goto	l677
  3567  0073C2  C00E  FFD9         	movff	ultoa@buf,fsr2l
  3568  0073C6  C00F  FFDA         	movff	ultoa@buf+1,fsr2h
  3569  0073CA  0E00               	movlw	0
  3570  0073CC  6EDF               	movwf	indf2,c
  3571  0073CE  060E               	decf	ultoa@buf,f,c
  3572  0073D0  A0D8               	btfss	status,0,c
  3573  0073D2  060F               	decf	ultoa@buf+1,f,c
  3574  0073D4  C010  F001         	movff	ultoa@val,___llmod@dividend
  3575  0073D8  C011  F002         	movff	ultoa@val+1,___llmod@dividend+1
  3576  0073DC  C012  F003         	movff	ultoa@val+2,___llmod@dividend+2
  3577  0073E0  C013  F004         	movff	ultoa@val+3,___llmod@dividend+3
  3578  0073E4  C014  F005         	movff	ultoa@base,___llmod@divisor
  3579  0073E8  C015  F006         	movff	ultoa@base+1,___llmod@divisor+1
  3580  0073EC  0E00               	movlw	0
  3581  0073EE  BE06               	btfsc	___llmod@divisor+1,7,c
  3582  0073F0  0EFF               	movlw	-1
  3583  0073F2  6E07               	movwf	___llmod@divisor+2,c
  3584  0073F4  6E08               	movwf	___llmod@divisor+3,c
  3585  0073F6  ECFF  F037         	call	___llmod	;wreg free
  3586  0073FA  5001               	movf	?___llmod,w,c
  3587  0073FC  6E1A               	movwf	ultoa@c,c
  3588  0073FE  C010  F001         	movff	ultoa@val,___lldiv@dividend
  3589  007402  C011  F002         	movff	ultoa@val+1,___lldiv@dividend+1
  3590  007406  C012  F003         	movff	ultoa@val+2,___lldiv@dividend+2
  3591  00740A  C013  F004         	movff	ultoa@val+3,___lldiv@dividend+3
  3592  00740E  C014  F005         	movff	ultoa@base,___lldiv@divisor
  3593  007412  C015  F006         	movff	ultoa@base+1,___lldiv@divisor+1
  3594  007416  0E00               	movlw	0
  3595  007418  BE06               	btfsc	___lldiv@divisor+1,7,c
  3596  00741A  0EFF               	movlw	-1
  3597  00741C  6E07               	movwf	___lldiv@divisor+2,c
  3598  00741E  6E08               	movwf	___lldiv@divisor+3,c
  3599  007420  EC6F  F038         	call	___lldiv	;wreg free
  3600  007424  C001  F010         	movff	?___lldiv,ultoa@val
  3601  007428  C002  F011         	movff	?___lldiv+1,ultoa@val+1
  3602  00742C  C003  F012         	movff	?___lldiv+2,ultoa@val+2
  3603  007430  C004  F013         	movff	?___lldiv+3,ultoa@val+3
  3604  007434  0E09               	movlw	9
  3605  007436  641A               	cpfsgt	ultoa@c,c
  3606  007438  D002               	goto	l680
  3607  00743A  0E07               	movlw	7
  3608  00743C  261A               	addwf	ultoa@c,f,c
  3609  00743E                     l680:
  3610  00743E  0E30               	movlw	48
  3611  007440  261A               	addwf	ultoa@c,f,c
  3612  007442  C00E  FFD9         	movff	ultoa@buf,fsr2l
  3613  007446  C00F  FFDA         	movff	ultoa@buf+1,fsr2h
  3614  00744A  C01A  FFDF         	movff	ultoa@c,indf2
  3615  00744E  060E               	decf	ultoa@buf,f,c
  3616  007450  A0D8               	btfss	status,0,c
  3617  007452  060F               	decf	ultoa@buf+1,f,c
  3618  007454  5010               	movf	ultoa@val,w,c
  3619  007456  1011               	iorwf	ultoa@val+1,w,c
  3620  007458  1012               	iorwf	ultoa@val+2,w,c
  3621  00745A  1013               	iorwf	ultoa@val+3,w,c
  3622  00745C  B4D8               	btfsc	status,2,c
  3623  00745E  0012               	return	
  3624  007460  D7B9               	goto	l679
  3625  007462                     __end_of_ultoa:
  3626                           	opt stack 0
  3627                           tblptru	equ	0xFF8
  3628                           tblptrh	equ	0xFF7
  3629                           tblptrl	equ	0xFF6
  3630                           tablat	equ	0xFF5
  3631                           prodh	equ	0xFF4
  3632                           prodl	equ	0xFF3
  3633                           postinc0	equ	0xFEE
  3634                           wreg	equ	0xFE8
  3635                           postdec1	equ	0xFE5
  3636                           fsr1h	equ	0xFE2
  3637                           fsr1l	equ	0xFE1
  3638                           indf2	equ	0xFDF
  3639                           postinc2	equ	0xFDE
  3640                           fsr2h	equ	0xFDA
  3641                           fsr2l	equ	0xFD9
  3642                           status	equ	0xFD8
  3643                           
  3644 ;; *************** function ___llmod *****************
  3645 ;; Defined at:
  3646 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\llmod.c"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;  dividend        4    0[COMRAM] unsigned long 
  3649 ;;  divisor         4    4[COMRAM] unsigned long 
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;  counter         1    8[COMRAM] unsigned char 
  3652 ;; Return value:  Size  Location     Type
  3653 ;;                  4    0[COMRAM] unsigned long 
  3654 ;; Registers used:
  3655 ;;		wreg, status,2, status,0
  3656 ;; Tracked objects:
  3657 ;;		On entry : 0/0
  3658 ;;		On exit  : 0/0
  3659 ;;		Unchanged: 0/0
  3660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3661 ;;      Params:         8       0       0       0       0       0       0
  3662 ;;      Locals:         1       0       0       0       0       0       0
  3663 ;;      Temps:          0       0       0       0       0       0       0
  3664 ;;      Totals:         9       0       0       0       0       0       0
  3665 ;;Total ram usage:        9 bytes
  3666 ;; Hardware stack levels used:    1
  3667 ;; This function calls:
  3668 ;;		Nothing
  3669 ;; This function is called by:
  3670 ;;		_ultoa
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           	psect	text15
  3675  006FFE                     __ptext15:
  3676                           	opt stack 0
  3677  006FFE                     ___llmod:
  3678                           	opt stack 27
  3679                           
  3680                           ;incstack = 0
  3681  006FFE  5005               	movf	___llmod@divisor,w,c
  3682  007000  1006               	iorwf	___llmod@divisor+1,w,c
  3683  007002  1007               	iorwf	___llmod@divisor+2,w,c
  3684  007004  1008               	iorwf	___llmod@divisor+3,w,c
  3685  007006  B4D8               	btfsc	status,2,c
  3686  007008  D024               	goto	l639
  3687  00700A  0E01               	movlw	1
  3688  00700C  6E09               	movwf	___llmod@counter,c
  3689  00700E  D006               	goto	l634
  3690  007010  90D8               	bcf	status,0,c
  3691  007012  3605               	rlcf	___llmod@divisor,f,c
  3692  007014  3606               	rlcf	___llmod@divisor+1,f,c
  3693  007016  3607               	rlcf	___llmod@divisor+2,f,c
  3694  007018  3608               	rlcf	___llmod@divisor+3,f,c
  3695  00701A  2A09               	incf	___llmod@counter,f,c
  3696  00701C                     l634:
  3697  00701C  AE08               	btfss	___llmod@divisor+3,7,c
  3698  00701E  D7F8               	goto	l635
  3699  007020                     u710:
  3700  007020  5005               	movf	___llmod@divisor,w,c
  3701  007022  5C01               	subwf	___llmod@dividend,w,c
  3702  007024  5006               	movf	___llmod@divisor+1,w,c
  3703  007026  5802               	subwfb	___llmod@dividend+1,w,c
  3704  007028  5007               	movf	___llmod@divisor+2,w,c
  3705  00702A  5803               	subwfb	___llmod@dividend+2,w,c
  3706  00702C  5008               	movf	___llmod@divisor+3,w,c
  3707  00702E  5804               	subwfb	___llmod@dividend+3,w,c
  3708  007030  A0D8               	btfss	status,0,c
  3709  007032  D008               	goto	l638
  3710  007034  5005               	movf	___llmod@divisor,w,c
  3711  007036  5E01               	subwf	___llmod@dividend,f,c
  3712  007038  5006               	movf	___llmod@divisor+1,w,c
  3713  00703A  5A02               	subwfb	___llmod@dividend+1,f,c
  3714  00703C  5007               	movf	___llmod@divisor+2,w,c
  3715  00703E  5A03               	subwfb	___llmod@dividend+2,f,c
  3716  007040  5008               	movf	___llmod@divisor+3,w,c
  3717  007042  5A04               	subwfb	___llmod@dividend+3,f,c
  3718  007044                     l638:
  3719  007044  90D8               	bcf	status,0,c
  3720  007046  3208               	rrcf	___llmod@divisor+3,f,c
  3721  007048  3207               	rrcf	___llmod@divisor+2,f,c
  3722  00704A  3206               	rrcf	___llmod@divisor+1,f,c
  3723  00704C  3205               	rrcf	___llmod@divisor,f,c
  3724  00704E  2E09               	decfsz	___llmod@counter,f,c
  3725  007050  D7E7               	goto	u710
  3726  007052                     l639:
  3727  007052  C001  F001         	movff	___llmod@dividend,?___llmod
  3728  007056  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  3729  00705A  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  3730  00705E  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  3731  007062  0012               	return		;funcret
  3732  007064                     __end_of___llmod:
  3733                           	opt stack 0
  3734                           tblptru	equ	0xFF8
  3735                           tblptrh	equ	0xFF7
  3736                           tblptrl	equ	0xFF6
  3737                           tablat	equ	0xFF5
  3738                           prodh	equ	0xFF4
  3739                           prodl	equ	0xFF3
  3740                           postinc0	equ	0xFEE
  3741                           wreg	equ	0xFE8
  3742                           postdec1	equ	0xFE5
  3743                           fsr1h	equ	0xFE2
  3744                           fsr1l	equ	0xFE1
  3745                           indf2	equ	0xFDF
  3746                           postinc2	equ	0xFDE
  3747                           fsr2h	equ	0xFDA
  3748                           fsr2l	equ	0xFD9
  3749                           status	equ	0xFD8
  3750                           
  3751 ;; *************** function ___lldiv *****************
  3752 ;; Defined at:
  3753 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lldiv.c"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;  dividend        4    0[COMRAM] unsigned long 
  3756 ;;  divisor         4    4[COMRAM] unsigned long 
  3757 ;; Auto vars:     Size  Location     Type
  3758 ;;  quotient        4    8[COMRAM] unsigned long 
  3759 ;;  counter         1   12[COMRAM] unsigned char 
  3760 ;; Return value:  Size  Location     Type
  3761 ;;                  4    0[COMRAM] unsigned long 
  3762 ;; Registers used:
  3763 ;;		wreg, status,2, status,0
  3764 ;; Tracked objects:
  3765 ;;		On entry : 0/0
  3766 ;;		On exit  : 0/0
  3767 ;;		Unchanged: 0/0
  3768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3769 ;;      Params:         8       0       0       0       0       0       0
  3770 ;;      Locals:         5       0       0       0       0       0       0
  3771 ;;      Temps:          0       0       0       0       0       0       0
  3772 ;;      Totals:        13       0       0       0       0       0       0
  3773 ;;Total ram usage:       13 bytes
  3774 ;; Hardware stack levels used:    1
  3775 ;; This function calls:
  3776 ;;		Nothing
  3777 ;; This function is called by:
  3778 ;;		_uart_init
  3779 ;;		_ultoa
  3780 ;; This function uses a non-reentrant model
  3781 ;;
  3782                           
  3783                           	psect	text16
  3784  0070DE                     __ptext16:
  3785                           	opt stack 0
  3786  0070DE                     ___lldiv:
  3787                           	opt stack 29
  3788                           
  3789                           ;incstack = 0
  3790  0070DE  0E00               	movlw	0
  3791  0070E0  6E09               	movwf	___lldiv@quotient,c
  3792  0070E2  0E00               	movlw	0
  3793  0070E4  6E0A               	movwf	___lldiv@quotient+1,c
  3794  0070E6  0E00               	movlw	0
  3795  0070E8  6E0B               	movwf	___lldiv@quotient+2,c
  3796  0070EA  0E00               	movlw	0
  3797  0070EC  6E0C               	movwf	___lldiv@quotient+3,c
  3798  0070EE  5005               	movf	___lldiv@divisor,w,c
  3799  0070F0  1006               	iorwf	___lldiv@divisor+1,w,c
  3800  0070F2  1007               	iorwf	___lldiv@divisor+2,w,c
  3801  0070F4  1008               	iorwf	___lldiv@divisor+3,w,c
  3802  0070F6  B4D8               	btfsc	status,2,c
  3803  0070F8  D02A               	goto	l629
  3804  0070FA  0E01               	movlw	1
  3805  0070FC  6E0D               	movwf	___lldiv@counter,c
  3806  0070FE  D006               	goto	l624
  3807  007100  90D8               	bcf	status,0,c
  3808  007102  3605               	rlcf	___lldiv@divisor,f,c
  3809  007104  3606               	rlcf	___lldiv@divisor+1,f,c
  3810  007106  3607               	rlcf	___lldiv@divisor+2,f,c
  3811  007108  3608               	rlcf	___lldiv@divisor+3,f,c
  3812  00710A  2A0D               	incf	___lldiv@counter,f,c
  3813  00710C                     l624:
  3814  00710C  AE08               	btfss	___lldiv@divisor+3,7,c
  3815  00710E  D7F8               	goto	l625
  3816  007110                     u680:
  3817  007110  90D8               	bcf	status,0,c
  3818  007112  3609               	rlcf	___lldiv@quotient,f,c
  3819  007114  360A               	rlcf	___lldiv@quotient+1,f,c
  3820  007116  360B               	rlcf	___lldiv@quotient+2,f,c
  3821  007118  360C               	rlcf	___lldiv@quotient+3,f,c
  3822  00711A  5005               	movf	___lldiv@divisor,w,c
  3823  00711C  5C01               	subwf	___lldiv@dividend,w,c
  3824  00711E  5006               	movf	___lldiv@divisor+1,w,c
  3825  007120  5802               	subwfb	___lldiv@dividend+1,w,c
  3826  007122  5007               	movf	___lldiv@divisor+2,w,c
  3827  007124  5803               	subwfb	___lldiv@dividend+2,w,c
  3828  007126  5008               	movf	___lldiv@divisor+3,w,c
  3829  007128  5804               	subwfb	___lldiv@dividend+3,w,c
  3830  00712A  A0D8               	btfss	status,0,c
  3831  00712C  D009               	goto	l628
  3832  00712E  5005               	movf	___lldiv@divisor,w,c
  3833  007130  5E01               	subwf	___lldiv@dividend,f,c
  3834  007132  5006               	movf	___lldiv@divisor+1,w,c
  3835  007134  5A02               	subwfb	___lldiv@dividend+1,f,c
  3836  007136  5007               	movf	___lldiv@divisor+2,w,c
  3837  007138  5A03               	subwfb	___lldiv@dividend+2,f,c
  3838  00713A  5008               	movf	___lldiv@divisor+3,w,c
  3839  00713C  5A04               	subwfb	___lldiv@dividend+3,f,c
  3840  00713E  8009               	bsf	___lldiv@quotient,0,c
  3841  007140                     l628:
  3842  007140  90D8               	bcf	status,0,c
  3843  007142  3208               	rrcf	___lldiv@divisor+3,f,c
  3844  007144  3207               	rrcf	___lldiv@divisor+2,f,c
  3845  007146  3206               	rrcf	___lldiv@divisor+1,f,c
  3846  007148  3205               	rrcf	___lldiv@divisor,f,c
  3847  00714A  2E0D               	decfsz	___lldiv@counter,f,c
  3848  00714C  D7E1               	goto	u680
  3849  00714E                     l629:
  3850  00714E  C009  F001         	movff	___lldiv@quotient,?___lldiv
  3851  007152  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3852  007156  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3853  00715A  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3854  00715E  0012               	return		;funcret
  3855  007160                     __end_of___lldiv:
  3856                           	opt stack 0
  3857                           tblptru	equ	0xFF8
  3858                           tblptrh	equ	0xFF7
  3859                           tblptrl	equ	0xFF6
  3860                           tablat	equ	0xFF5
  3861                           prodh	equ	0xFF4
  3862                           prodl	equ	0xFF3
  3863                           postinc0	equ	0xFEE
  3864                           wreg	equ	0xFE8
  3865                           postdec1	equ	0xFE5
  3866                           fsr1h	equ	0xFE2
  3867                           fsr1l	equ	0xFE1
  3868                           indf2	equ	0xFDF
  3869                           postinc2	equ	0xFDE
  3870                           fsr2h	equ	0xFDA
  3871                           fsr2l	equ	0xFD9
  3872                           status	equ	0xFD8
  3873                           
  3874 ;; *************** function ___lmul *****************
  3875 ;; Defined at:
  3876 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\Umul32.c"
  3877 ;; Parameters:    Size  Location     Type
  3878 ;;  multiplier      4    0[COMRAM] unsigned long 
  3879 ;;  multiplicand    4    4[COMRAM] unsigned long 
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;  product         4    8[COMRAM] unsigned long 
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  4    0[COMRAM] unsigned long 
  3884 ;; Registers used:
  3885 ;;		wreg, status,2, status,0
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3891 ;;      Params:         8       0       0       0       0       0       0
  3892 ;;      Locals:         4       0       0       0       0       0       0
  3893 ;;      Temps:          0       0       0       0       0       0       0
  3894 ;;      Totals:        12       0       0       0       0       0       0
  3895 ;;Total ram usage:       12 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; This function calls:
  3898 ;;		Nothing
  3899 ;; This function is called by:
  3900 ;;		_mount_disk
  3901 ;;		_file_create
  3902 ;;		_sector_open
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           	psect	text17
  3907  006F48                     __ptext17:
  3908                           	opt stack 0
  3909  006F48                     ___lmul:
  3910                           	opt stack 29
  3911                           
  3912                           ;incstack = 0
  3913  006F48  0E00               	movlw	0
  3914  006F4A  6E09               	movwf	___lmul@product,c
  3915  006F4C  0E00               	movlw	0
  3916  006F4E  6E0A               	movwf	___lmul@product+1,c
  3917  006F50  0E00               	movlw	0
  3918  006F52  6E0B               	movwf	___lmul@product+2,c
  3919  006F54  0E00               	movlw	0
  3920  006F56  6E0C               	movwf	___lmul@product+3,c
  3921  006F58  A001               	btfss	___lmul@multiplier,0,c
  3922  006F5A  D008               	goto	l272
  3923  006F5C  5005               	movf	___lmul@multiplicand,w,c
  3924  006F5E  2609               	addwf	___lmul@product,f,c
  3925  006F60  5006               	movf	___lmul@multiplicand+1,w,c
  3926  006F62  220A               	addwfc	___lmul@product+1,f,c
  3927  006F64  5007               	movf	___lmul@multiplicand+2,w,c
  3928  006F66  220B               	addwfc	___lmul@product+2,f,c
  3929  006F68  5008               	movf	___lmul@multiplicand+3,w,c
  3930  006F6A  220C               	addwfc	___lmul@product+3,f,c
  3931  006F6C                     l272:
  3932  006F6C  90D8               	bcf	status,0,c
  3933  006F6E  3605               	rlcf	___lmul@multiplicand,f,c
  3934  006F70  3606               	rlcf	___lmul@multiplicand+1,f,c
  3935  006F72  3607               	rlcf	___lmul@multiplicand+2,f,c
  3936  006F74  3608               	rlcf	___lmul@multiplicand+3,f,c
  3937  006F76  90D8               	bcf	status,0,c
  3938  006F78  3204               	rrcf	___lmul@multiplier+3,f,c
  3939  006F7A  3203               	rrcf	___lmul@multiplier+2,f,c
  3940  006F7C  3202               	rrcf	___lmul@multiplier+1,f,c
  3941  006F7E  3201               	rrcf	___lmul@multiplier,f,c
  3942  006F80  5001               	movf	___lmul@multiplier,w,c
  3943  006F82  1002               	iorwf	___lmul@multiplier+1,w,c
  3944  006F84  1003               	iorwf	___lmul@multiplier+2,w,c
  3945  006F86  1004               	iorwf	___lmul@multiplier+3,w,c
  3946  006F88  A4D8               	btfss	status,2,c
  3947  006F8A  D7E6               	goto	l271
  3948  006F8C  C009  F001         	movff	___lmul@product,?___lmul
  3949  006F90  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  3950  006F94  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  3951  006F98  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  3952  006F9C  0012               	return		;funcret
  3953  006F9E                     __end_of___lmul:
  3954                           	opt stack 0
  3955                           tblptru	equ	0xFF8
  3956                           tblptrh	equ	0xFF7
  3957                           tblptrl	equ	0xFF6
  3958                           tablat	equ	0xFF5
  3959                           prodh	equ	0xFF4
  3960                           prodl	equ	0xFF3
  3961                           postinc0	equ	0xFEE
  3962                           wreg	equ	0xFE8
  3963                           postdec1	equ	0xFE5
  3964                           fsr1h	equ	0xFE2
  3965                           fsr1l	equ	0xFE1
  3966                           indf2	equ	0xFDF
  3967                           postinc2	equ	0xFDE
  3968                           fsr2h	equ	0xFDA
  3969                           fsr2l	equ	0xFD9
  3970                           status	equ	0xFD8
  3971                           
  3972 ;; *************** function _SDcard_read_block *****************
  3973 ;; Defined at:
  3974 ;;		line 78 in file "../../picSD-master/sdcard.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;  address         4    5[COMRAM] unsigned long 
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;		None
  3979 ;; Return value:  Size  Location     Type
  3980 ;;                  1    wreg      void 
  3981 ;; Registers used:
  3982 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3988 ;;      Params:         4       0       0       0       0       0       0
  3989 ;;      Locals:         0       0       0       0       0       0       0
  3990 ;;      Temps:          0       0       0       0       0       0       0
  3991 ;;      Totals:         4       0       0       0       0       0       0
  3992 ;;Total ram usage:        4 bytes
  3993 ;; Hardware stack levels used:    1
  3994 ;; Hardware stack levels required when called:    2
  3995 ;; This function calls:
  3996 ;;		_SDcard_get_response
  3997 ;;		_spi_receive
  3998 ;;		_spi_send
  3999 ;;		_spi_single_send
  4000 ;;		_uart_puts
  4001 ;; This function is called by:
  4002 ;;		_mount_disk
  4003 ;;		_file_create
  4004 ;;		_sector_open
  4005 ;;		_file_update_size
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           	psect	text18
  4010  007064                     __ptext18:
  4011                           	opt stack 0
  4012  007064                     _SDcard_read_block:
  4013                           	opt stack 27
  4014                           
  4015                           ;sdcard.c: 79: uart_puts("Sending CMD17...");
  4016                           
  4017                           ;incstack = 0
  4018  007064  0E9B               	movlw	low STR_18
  4019  007066  6E02               	movwf	uart_puts@s,c
  4020  007068  0E7F               	movlw	high STR_18
  4021  00706A  6E03               	movwf	uart_puts@s+1,c
  4022  00706C  ECFF  F036         	call	_uart_puts	;wreg free
  4023                           
  4024                           ;sdcard.c: 81: (LATC &= ~(0x02));
  4025  007070  928B               	bcf	3979,1,c	;volatile
  4026                           
  4027                           ;sdcard.c: 84: SDcommand[0] = 0x51;
  4028  007072  0E51               	movlw	81
  4029  007074  6E56               	movwf	_SDcommand,c
  4030                           
  4031                           ;sdcard.c: 85: SDcommand[1] = (address>>24) & 0xFF;
  4032  007076  C009  F057         	movff	SDcard_read_block@address+3,_SDcommand+1
  4033                           
  4034                           ;sdcard.c: 86: SDcommand[2] = (address>>16) & 0xFF;
  4035  00707A  C008  F058         	movff	SDcard_read_block@address+2,_SDcommand+2
  4036                           
  4037                           ;sdcard.c: 87: SDcommand[3] = (address>>8) & 0xFF;
  4038  00707E  C007  F059         	movff	SDcard_read_block@address+1,_SDcommand+3
  4039                           
  4040                           ;sdcard.c: 88: SDcommand[4] = address & 0xFF;
  4041  007082  C006  F05A         	movff	SDcard_read_block@address,_SDcommand+4
  4042                           
  4043                           ;sdcard.c: 89: SDcommand[5] = 0xFF;
  4044  007086  685B               	setf	_SDcommand+5,c
  4045                           
  4046                           ;sdcard.c: 92: spi_send(SDcommand, 6);
  4047  007088  0E56               	movlw	low _SDcommand
  4048  00708A  6E01               	movwf	spi_send@data,c
  4049  00708C  0E00               	movlw	high _SDcommand
  4050  00708E  6E02               	movwf	spi_send@data+1,c
  4051  007090  0E00               	movlw	0
  4052  007092  6E04               	movwf	spi_send@length+1,c
  4053  007094  0E06               	movlw	6
  4054  007096  6E03               	movwf	spi_send@length,c
  4055  007098  EC29  F036         	call	_spi_send	;wreg free
  4056                           
  4057                           ;sdcard.c: 95: SDcard_get_response(0x00);
  4058  00709C  0E00               	movlw	0
  4059  00709E  EC56  F036         	call	_SDcard_get_response
  4060                           
  4061                           ;sdcard.c: 96: uart_puts("success!\n");
  4062  0070A2  0EE5               	movlw	low STR_14
  4063  0070A4  6E02               	movwf	uart_puts@s,c
  4064  0070A6  0E7F               	movlw	high STR_14
  4065  0070A8  6E03               	movwf	uart_puts@s+1,c
  4066  0070AA  ECFF  F036         	call	_uart_puts	;wreg free
  4067                           
  4068                           ;sdcard.c: 100: SDcard_get_response(0xFE);
  4069  0070AE  0EFE               	movlw	254
  4070  0070B0  EC56  F036         	call	_SDcard_get_response
  4071                           
  4072                           ;sdcard.c: 102: spi_receive(SDdata, 512);
  4073  0070B4  0E76               	movlw	low _SDdata
  4074  0070B6  6E01               	movwf	spi_receive@data,c
  4075  0070B8  0E00               	movlw	high _SDdata
  4076  0070BA  6E02               	movwf	spi_receive@data+1,c
  4077  0070BC  0E02               	movlw	2
  4078  0070BE  6E04               	movwf	spi_receive@length+1,c
  4079  0070C0  0E00               	movlw	0
  4080  0070C2  6E03               	movwf	spi_receive@length,c
  4081  0070C4  EC3F  F036         	call	_spi_receive	;wreg free
  4082                           
  4083                           ;sdcard.c: 104: spi_single_send(0xFF);
  4084  0070C8  0EFF               	movlw	255
  4085  0070CA  ECF0  F035         	call	_spi_single_send
  4086                           
  4087                           ;sdcard.c: 105: spi_single_send(0xFF);
  4088  0070CE  0EFF               	movlw	255
  4089  0070D0  ECF0  F035         	call	_spi_single_send
  4090                           
  4091                           ;sdcard.c: 106: spi_single_send(0xFF);
  4092  0070D4  0EFF               	movlw	255
  4093  0070D6  ECF0  F035         	call	_spi_single_send
  4094                           
  4095                           ;sdcard.c: 109: (LATC |= 0x02);
  4096  0070DA  828B               	bsf	3979,1,c	;volatile
  4097  0070DC  0012               	return		;funcret
  4098  0070DE                     __end_of_SDcard_read_block:
  4099                           	opt stack 0
  4100                           tblptru	equ	0xFF8
  4101                           tblptrh	equ	0xFF7
  4102                           tblptrl	equ	0xFF6
  4103                           tablat	equ	0xFF5
  4104                           prodh	equ	0xFF4
  4105                           prodl	equ	0xFF3
  4106                           postinc0	equ	0xFEE
  4107                           wreg	equ	0xFE8
  4108                           postdec1	equ	0xFE5
  4109                           fsr1h	equ	0xFE2
  4110                           fsr1l	equ	0xFE1
  4111                           indf2	equ	0xFDF
  4112                           postinc2	equ	0xFDE
  4113                           fsr2h	equ	0xFDA
  4114                           fsr2l	equ	0xFD9
  4115                           status	equ	0xFD8
  4116                           
  4117 ;; *************** function _sector_close *****************
  4118 ;; Defined at:
  4119 ;;		line 231 in file "../../picSD-master/fatfs.c"
  4120 ;; Parameters:    Size  Location     Type
  4121 ;;		None
  4122 ;; Auto vars:     Size  Location     Type
  4123 ;;		None
  4124 ;; Return value:  Size  Location     Type
  4125 ;;                  1    wreg      void 
  4126 ;; Registers used:
  4127 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4128 ;; Tracked objects:
  4129 ;;		On entry : 0/0
  4130 ;;		On exit  : 0/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4133 ;;      Params:         0       0       0       0       0       0       0
  4134 ;;      Locals:         0       0       0       0       0       0       0
  4135 ;;      Temps:          0       0       0       0       0       0       0
  4136 ;;      Totals:         0       0       0       0       0       0       0
  4137 ;;Total ram usage:        0 bytes
  4138 ;; Hardware stack levels used:    1
  4139 ;; Hardware stack levels required when called:    3
  4140 ;; This function calls:
  4141 ;;		_SDcard_write_block
  4142 ;; This function is called by:
  4143 ;;		_file_append
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147                           	psect	text19
  4148  006BF2                     __ptext19:
  4149                           	opt stack 0
  4150  006BF2                     _sector_close:
  4151                           	opt stack 26
  4152                           
  4153                           ;fatfs.c: 233: SDcard_write_block(current_sector_address);
  4154                           
  4155                           ;incstack = 0
  4156  006BF2  C03C  F006         	movff	_current_sector_address,SDcard_write_block@address
  4157  006BF6  C03D  F007         	movff	_current_sector_address+1,SDcard_write_block@address+1
  4158  006BFA  C03E  F008         	movff	_current_sector_address+2,SDcard_write_block@address+2
  4159  006BFE  C03F  F009         	movff	_current_sector_address+3,SDcard_write_block@address+3
  4160  006C02  EC31  F03A         	call	_SDcard_write_block	;wreg free
  4161  006C06  0012               	return		;funcret
  4162  006C08                     __end_of_sector_close:
  4163                           	opt stack 0
  4164                           tblptru	equ	0xFF8
  4165                           tblptrh	equ	0xFF7
  4166                           tblptrl	equ	0xFF6
  4167                           tablat	equ	0xFF5
  4168                           prodh	equ	0xFF4
  4169                           prodl	equ	0xFF3
  4170                           postinc0	equ	0xFEE
  4171                           wreg	equ	0xFE8
  4172                           postdec1	equ	0xFE5
  4173                           fsr1h	equ	0xFE2
  4174                           fsr1l	equ	0xFE1
  4175                           indf2	equ	0xFDF
  4176                           postinc2	equ	0xFDE
  4177                           fsr2h	equ	0xFDA
  4178                           fsr2l	equ	0xFD9
  4179                           status	equ	0xFD8
  4180                           
  4181 ;; *************** function _SDcard_write_block *****************
  4182 ;; Defined at:
  4183 ;;		line 112 in file "../../picSD-master/sdcard.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;  address         4    5[COMRAM] unsigned long 
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;		None
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  1    wreg      void 
  4190 ;; Registers used:
  4191 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4197 ;;      Params:         4       0       0       0       0       0       0
  4198 ;;      Locals:         0       0       0       0       0       0       0
  4199 ;;      Temps:          0       0       0       0       0       0       0
  4200 ;;      Totals:         4       0       0       0       0       0       0
  4201 ;;Total ram usage:        4 bytes
  4202 ;; Hardware stack levels used:    1
  4203 ;; Hardware stack levels required when called:    2
  4204 ;; This function calls:
  4205 ;;		_SDcard_get_response
  4206 ;;		_spi_send
  4207 ;;		_spi_single_receive
  4208 ;;		_spi_single_send
  4209 ;;		_uart_puts
  4210 ;; This function is called by:
  4211 ;;		_file_create
  4212 ;;		_sector_close
  4213 ;;		_file_update_size
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217                           	psect	text20
  4218  007462                     __ptext20:
  4219                           	opt stack 0
  4220  007462                     _SDcard_write_block:
  4221                           	opt stack 27
  4222                           
  4223                           ;sdcard.c: 113: uart_puts("Sending CMD24...");
  4224                           
  4225                           ;incstack = 0
  4226  007462  0E8A               	movlw	low STR_20
  4227  007464  6E02               	movwf	uart_puts@s,c
  4228  007466  0E7F               	movlw	high STR_20
  4229  007468  6E03               	movwf	uart_puts@s+1,c
  4230  00746A  ECFF  F036         	call	_uart_puts	;wreg free
  4231                           
  4232                           ;sdcard.c: 115: (LATC &= ~(0x02));
  4233  00746E  928B               	bcf	3979,1,c	;volatile
  4234                           
  4235                           ;sdcard.c: 118: SDcommand[0] = 0x58;
  4236  007470  0E58               	movlw	88
  4237  007472  6E56               	movwf	_SDcommand,c
  4238                           
  4239                           ;sdcard.c: 119: SDcommand[1] = (address>>24) & 0xFF;
  4240  007474  C009  F057         	movff	SDcard_write_block@address+3,_SDcommand+1
  4241                           
  4242                           ;sdcard.c: 120: SDcommand[2] = (address>>16) & 0xFF;
  4243  007478  C008  F058         	movff	SDcard_write_block@address+2,_SDcommand+2
  4244                           
  4245                           ;sdcard.c: 121: SDcommand[3] = (address>>8) & 0xFF;
  4246  00747C  C007  F059         	movff	SDcard_write_block@address+1,_SDcommand+3
  4247                           
  4248                           ;sdcard.c: 122: SDcommand[4] = address & 0xFF;
  4249  007480  C006  F05A         	movff	SDcard_write_block@address,_SDcommand+4
  4250                           
  4251                           ;sdcard.c: 123: SDcommand[5] = 0xFF;
  4252  007484  685B               	setf	_SDcommand+5,c
  4253                           
  4254                           ;sdcard.c: 126: spi_send(SDcommand, 6);
  4255  007486  0E56               	movlw	low _SDcommand
  4256  007488  6E01               	movwf	spi_send@data,c
  4257  00748A  0E00               	movlw	high _SDcommand
  4258  00748C  6E02               	movwf	spi_send@data+1,c
  4259  00748E  0E00               	movlw	0
  4260  007490  6E04               	movwf	spi_send@length+1,c
  4261  007492  0E06               	movlw	6
  4262  007494  6E03               	movwf	spi_send@length,c
  4263  007496  EC29  F036         	call	_spi_send	;wreg free
  4264                           
  4265                           ;sdcard.c: 129: SDcard_get_response(0x00);
  4266  00749A  0E00               	movlw	0
  4267  00749C  EC56  F036         	call	_SDcard_get_response
  4268                           
  4269                           ;sdcard.c: 130: uart_puts("success!\n");
  4270  0074A0  0EE5               	movlw	low STR_14
  4271  0074A2  6E02               	movwf	uart_puts@s,c
  4272  0074A4  0E7F               	movlw	high STR_14
  4273  0074A6  6E03               	movwf	uart_puts@s+1,c
  4274  0074A8  ECFF  F036         	call	_uart_puts	;wreg free
  4275                           
  4276                           ;sdcard.c: 133: spi_single_send(0xFF);
  4277  0074AC  0EFF               	movlw	255
  4278  0074AE  ECF0  F035         	call	_spi_single_send
  4279                           
  4280                           ;sdcard.c: 135: uart_puts("Sending data block...");
  4281  0074B2  0E4D               	movlw	low STR_22
  4282  0074B4  6E02               	movwf	uart_puts@s,c
  4283  0074B6  0E7F               	movlw	high STR_22
  4284  0074B8  6E03               	movwf	uart_puts@s+1,c
  4285  0074BA  ECFF  F036         	call	_uart_puts	;wreg free
  4286                           
  4287                           ;sdcard.c: 138: spi_single_send(0xFE);
  4288  0074BE  0EFE               	movlw	254
  4289  0074C0  ECF0  F035         	call	_spi_single_send
  4290                           
  4291                           ;sdcard.c: 140: spi_send(SDdata, 512);
  4292  0074C4  0E76               	movlw	low _SDdata
  4293  0074C6  6E01               	movwf	spi_send@data,c
  4294  0074C8  0E00               	movlw	high _SDdata
  4295  0074CA  6E02               	movwf	spi_send@data+1,c
  4296  0074CC  0E02               	movlw	2
  4297  0074CE  6E04               	movwf	spi_send@length+1,c
  4298  0074D0  0E00               	movlw	0
  4299  0074D2  6E03               	movwf	spi_send@length,c
  4300  0074D4  EC29  F036         	call	_spi_send	;wreg free
  4301                           
  4302                           ;sdcard.c: 142: spi_single_send(0xFF);
  4303  0074D8  0EFF               	movlw	255
  4304  0074DA  ECF0  F035         	call	_spi_single_send
  4305                           
  4306                           ;sdcard.c: 143: spi_single_send(0xFF);
  4307  0074DE  0EFF               	movlw	255
  4308  0074E0  ECF0  F035         	call	_spi_single_send
  4309                           
  4310                           ;sdcard.c: 146: card_response = spi_single_receive();
  4311  0074E4  ECE8  F035         	call	_spi_single_receive	;wreg free
  4312  0074E8  6E52               	movwf	_card_response,c
  4313                           
  4314                           ;sdcard.c: 148: if( (card_response & 0x0F) == 0x0D ) uart_puts("write error occured!\n")
      +                          ;
  4315  0074EA  5052               	movf	_card_response,w,c
  4316  0074EC  0B0F               	andlw	15
  4317  0074EE  0A0D               	xorlw	13
  4318  0074F0  A4D8               	btfss	status,2,c
  4319  0074F2  D006               	goto	l157
  4320  0074F4  0E37               	movlw	low STR_23
  4321  0074F6  6E02               	movwf	uart_puts@s,c
  4322  0074F8  0E7F               	movlw	high STR_23
  4323  0074FA  6E03               	movwf	uart_puts@s+1,c
  4324  0074FC  ECFF  F036         	call	_uart_puts	;wreg free
  4325  007500                     l157:
  4326                           
  4327                           ;sdcard.c: 149: if( (card_response & 0x0F) == 0x0B ) uart_puts("CRC error occured!\n");
  4328  007500  5052               	movf	_card_response,w,c
  4329  007502  0B0F               	andlw	15
  4330  007504  0A0B               	xorlw	11
  4331  007506  A4D8               	btfss	status,2,c
  4332  007508  D006               	goto	l158
  4333  00750A  0E63               	movlw	low STR_24
  4334  00750C  6E02               	movwf	uart_puts@s,c
  4335  00750E  0E7F               	movlw	high STR_24
  4336  007510  6E03               	movwf	uart_puts@s+1,c
  4337  007512  ECFF  F036         	call	_uart_puts	;wreg free
  4338  007516                     l158:
  4339                           
  4340                           ;sdcard.c: 150: if( (card_response & 0x0F) == 0x05 ){
  4341  007516  5052               	movf	_card_response,w,c
  4342  007518  0B0F               	andlw	15
  4343  00751A  0A05               	xorlw	5
  4344  00751C  A4D8               	btfss	status,2,c
  4345  00751E  D01E               	goto	l159
  4346                           
  4347                           ;sdcard.c: 151: uart_puts("success!\n");
  4348  007520  0EE5               	movlw	low STR_14
  4349  007522  6E02               	movwf	uart_puts@s,c
  4350  007524  0E7F               	movlw	high STR_14
  4351  007526  6E03               	movwf	uart_puts@s+1,c
  4352  007528  ECFF  F036         	call	_uart_puts	;wreg free
  4353                           
  4354                           ;sdcard.c: 152: uart_puts("Wating for card to finish write process...");
  4355  00752C  0E1B               	movlw	low STR_26
  4356  00752E  6E02               	movwf	uart_puts@s,c
  4357  007530  0E7E               	movlw	high STR_26
  4358  007532  6E03               	movwf	uart_puts@s+1,c
  4359  007534  ECFF  F036         	call	_uart_puts	;wreg free
  4360                           
  4361                           ;sdcard.c: 154: if(SDcard_get_response(0xFF)) uart_puts("timeout!");
  4362  007538  0EFF               	movlw	255
  4363  00753A  EC56  F036         	call	_SDcard_get_response
  4364  00753E  0900               	iorlw	0
  4365  007540  B4D8               	btfsc	status,2,c
  4366  007542  D006               	goto	l160
  4367  007544  0EEF               	movlw	low STR_27
  4368  007546  6E02               	movwf	uart_puts@s,c
  4369  007548  0E7F               	movlw	high STR_27
  4370  00754A  6E03               	movwf	uart_puts@s+1,c
  4371  00754C  ECFF  F036         	call	_uart_puts	;wreg free
  4372  007550                     l160:
  4373                           
  4374                           ;sdcard.c: 155: uart_puts("done!\n");
  4375  007550  0EF8               	movlw	low STR_2
  4376  007552  6E02               	movwf	uart_puts@s,c
  4377  007554  0E7F               	movlw	high STR_2
  4378  007556  6E03               	movwf	uart_puts@s+1,c
  4379  007558  ECFF  F036         	call	_uart_puts	;wreg free
  4380  00755C                     l159:
  4381                           
  4382                           ;sdcard.c: 156: }
  4383                           ;sdcard.c: 159: (LATC |= 0x02);
  4384  00755C  828B               	bsf	3979,1,c	;volatile
  4385  00755E  0012               	return		;funcret
  4386  007560                     __end_of_SDcard_write_block:
  4387                           	opt stack 0
  4388                           tblptru	equ	0xFF8
  4389                           tblptrh	equ	0xFF7
  4390                           tblptrl	equ	0xFF6
  4391                           tablat	equ	0xFF5
  4392                           prodh	equ	0xFF4
  4393                           prodl	equ	0xFF3
  4394                           postinc0	equ	0xFEE
  4395                           wreg	equ	0xFE8
  4396                           postdec1	equ	0xFE5
  4397                           fsr1h	equ	0xFE2
  4398                           fsr1l	equ	0xFE1
  4399                           indf2	equ	0xFDF
  4400                           postinc2	equ	0xFDE
  4401                           fsr2h	equ	0xFDA
  4402                           fsr2l	equ	0xFD9
  4403                           status	equ	0xFD8
  4404                           
  4405 ;; *************** function _spi_single_send *****************
  4406 ;; Defined at:
  4407 ;;		line 63 in file "../../picSD-master/spi.c"
  4408 ;; Parameters:    Size  Location     Type
  4409 ;;  data            1    wreg     unsigned char 
  4410 ;; Auto vars:     Size  Location     Type
  4411 ;;  data            1    1[COMRAM] unsigned char 
  4412 ;;  tmp             1    0[COMRAM] unsigned char 
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  1    wreg      void 
  4415 ;; Registers used:
  4416 ;;		wreg
  4417 ;; Tracked objects:
  4418 ;;		On entry : 0/0
  4419 ;;		On exit  : 0/0
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4422 ;;      Params:         0       0       0       0       0       0       0
  4423 ;;      Locals:         2       0       0       0       0       0       0
  4424 ;;      Temps:          0       0       0       0       0       0       0
  4425 ;;      Totals:         2       0       0       0       0       0       0
  4426 ;;Total ram usage:        2 bytes
  4427 ;; Hardware stack levels used:    1
  4428 ;; This function calls:
  4429 ;;		Nothing
  4430 ;; This function is called by:
  4431 ;;		_SDcard_read_block
  4432 ;;		_SDcard_write_block
  4433 ;; This function uses a non-reentrant model
  4434 ;;
  4435                           
  4436                           	psect	text21
  4437  006BE0                     __ptext21:
  4438                           	opt stack 0
  4439  006BE0                     _spi_single_send:
  4440                           	opt stack 28
  4441                           
  4442                           ;incstack = 0
  4443                           ;spi_single_send@data stored from wreg
  4444  006BE0  6E02               	movwf	spi_single_send@data,c
  4445                           
  4446                           ;spi.c: 64: unsigned char tmp;
  4447                           ;spi.c: 65: SSP1BUF = data;
  4448  006BE2  C002  FFC9         	movff	spi_single_send@data,4041	;volatile
  4449  006BE6  A69E               	btfss	3998,3,c	;volatile
  4450  006BE8  D7FE               	goto	l219
  4451                           
  4452                           ;spi.c: 67: PIR1bits.SSP1IF = 0;
  4453  006BEA  969E               	bcf	3998,3,c	;volatile
  4454                           
  4455                           ;spi.c: 68: tmp = SSP1BUF;
  4456  006BEC  CFC9 F001          	movff	4041,spi_single_send@tmp	;volatile
  4457  006BF0  0012               	return		;funcret
  4458  006BF2                     __end_of_spi_single_send:
  4459                           	opt stack 0
  4460                           tblptru	equ	0xFF8
  4461                           tblptrh	equ	0xFF7
  4462                           tblptrl	equ	0xFF6
  4463                           tablat	equ	0xFF5
  4464                           prodh	equ	0xFF4
  4465                           prodl	equ	0xFF3
  4466                           postinc0	equ	0xFEE
  4467                           wreg	equ	0xFE8
  4468                           postdec1	equ	0xFE5
  4469                           fsr1h	equ	0xFE2
  4470                           fsr1l	equ	0xFE1
  4471                           indf2	equ	0xFDF
  4472                           postinc2	equ	0xFDE
  4473                           fsr2h	equ	0xFDA
  4474                           fsr2l	equ	0xFD9
  4475                           status	equ	0xFD8
  4476                           
  4477 ;; *************** function _SDcard_init *****************
  4478 ;; Defined at:
  4479 ;;		line 21 in file "../../picSD-master/sdcard.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;		None
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;  b               1    6[COMRAM] unsigned char 
  4484 ;;  i               1    5[COMRAM] unsigned char 
  4485 ;; Return value:  Size  Location     Type
  4486 ;;                  1    wreg      void 
  4487 ;; Registers used:
  4488 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4489 ;; Tracked objects:
  4490 ;;		On entry : 0/0
  4491 ;;		On exit  : 0/0
  4492 ;;		Unchanged: 0/0
  4493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4494 ;;      Params:         0       0       0       0       0       0       0
  4495 ;;      Locals:         2       0       0       0       0       0       0
  4496 ;;      Temps:          0       0       0       0       0       0       0
  4497 ;;      Totals:         2       0       0       0       0       0       0
  4498 ;;Total ram usage:        2 bytes
  4499 ;; Hardware stack levels used:    1
  4500 ;; Hardware stack levels required when called:    2
  4501 ;; This function calls:
  4502 ;;		_SDcard_get_response
  4503 ;;		_spi_receive
  4504 ;;		_spi_send
  4505 ;;		_uart_puts
  4506 ;; This function is called by:
  4507 ;;		_main
  4508 ;; This function uses a non-reentrant model
  4509 ;;
  4510                           
  4511                           	psect	text22
  4512  007560                     __ptext22:
  4513                           	opt stack 0
  4514  007560                     _SDcard_init:
  4515                           	opt stack 28
  4516                           
  4517                           ;sdcard.c: 23: uart_puts("Starting SD card initialization...\n");
  4518                           
  4519                           ;incstack = 0
  4520  007560  0E6D               	movlw	low STR_12
  4521  007562  6E02               	movwf	uart_puts@s,c
  4522  007564  0E7E               	movlw	high STR_12
  4523  007566  6E03               	movwf	uart_puts@s+1,c
  4524  007568  ECFF  F036         	call	_uart_puts	;wreg free
  4525                           
  4526                           ;sdcard.c: 25: TRISC &= ~0x02;
  4527  00756C  9294               	bcf	3988,1,c	;volatile
  4528                           
  4529                           ;sdcard.c: 26: (LATC |= 0x02);
  4530  00756E  828B               	bsf	3979,1,c	;volatile
  4531                           
  4532                           ;sdcard.c: 30: for(unsigned char i = 0; i < 10; i++){
  4533  007570  0E00               	movlw	0
  4534  007572  6E06               	movwf	SDcard_init@i,c
  4535  007574                     l2065:
  4536  007574  0E09               	movlw	9
  4537  007576  6406               	cpfsgt	SDcard_init@i,c
  4538  007578  D001               	goto	l143
  4539  00757A  D00C               	goto	u1210
  4540  00757C                     l143:
  4541                           
  4542                           ;sdcard.c: 31: SDdata[i] = 0xFF;
  4543  00757C  5006               	movf	SDcard_init@i,w,c
  4544  00757E  0D01               	mullw	1
  4545  007580  0E76               	movlw	low _SDdata
  4546  007582  24F3               	addwf	prodl,w,c
  4547  007584  6ED9               	movwf	fsr2l,c
  4548  007586  0E00               	movlw	high _SDdata
  4549  007588  20F4               	addwfc	prodh,w,c
  4550  00758A  6EDA               	movwf	fsr2h,c
  4551  00758C  0EFF               	movlw	255
  4552  00758E  6EDF               	movwf	indf2,c
  4553  007590  2A06               	incf	SDcard_init@i,f,c
  4554  007592  D7F0               	goto	l2065
  4555  007594                     u1210:
  4556                           
  4557                           ;sdcard.c: 32: }
  4558                           ;sdcard.c: 33: spi_send(SDdata, 10);
  4559  007594  0E76               	movlw	low _SDdata
  4560  007596  6E01               	movwf	spi_send@data,c
  4561  007598  0E00               	movlw	high _SDdata
  4562  00759A  6E02               	movwf	spi_send@data+1,c
  4563  00759C  0E00               	movlw	0
  4564  00759E  6E04               	movwf	spi_send@length+1,c
  4565  0075A0  0E0A               	movlw	10
  4566  0075A2  6E03               	movwf	spi_send@length,c
  4567  0075A4  EC29  F036         	call	_spi_send	;wreg free
  4568                           
  4569                           ;sdcard.c: 36: (LATC &= ~(0x02));
  4570  0075A8  928B               	bcf	3979,1,c	;volatile
  4571                           
  4572                           ;sdcard.c: 38: uart_puts("Sending CMD0, awaiting response...");
  4573  0075AA  0EB4               	movlw	low STR_13
  4574  0075AC  6E02               	movwf	uart_puts@s,c
  4575  0075AE  0E7E               	movlw	high STR_13
  4576  0075B0  6E03               	movwf	uart_puts@s+1,c
  4577  0075B2  ECFF  F036         	call	_uart_puts	;wreg free
  4578                           
  4579                           ;sdcard.c: 40: SDcommand[0] = 0x40;
  4580  0075B6  0E40               	movlw	64
  4581  0075B8  6E56               	movwf	_SDcommand,c
  4582                           
  4583                           ;sdcard.c: 41: SDcommand[1] = 0x00;
  4584  0075BA  0E00               	movlw	0
  4585  0075BC  6E57               	movwf	_SDcommand+1,c
  4586                           
  4587                           ;sdcard.c: 42: SDcommand[2] = 0x00;
  4588  0075BE  0E00               	movlw	0
  4589  0075C0  6E58               	movwf	_SDcommand+2,c
  4590                           
  4591                           ;sdcard.c: 43: SDcommand[3] = 0x00;
  4592  0075C2  0E00               	movlw	0
  4593  0075C4  6E59               	movwf	_SDcommand+3,c
  4594                           
  4595                           ;sdcard.c: 44: SDcommand[4] = 0x00;
  4596  0075C6  0E00               	movlw	0
  4597  0075C8  6E5A               	movwf	_SDcommand+4,c
  4598                           
  4599                           ;sdcard.c: 45: SDcommand[5] = 0x95;
  4600  0075CA  0E95               	movlw	149
  4601  0075CC  6E5B               	movwf	_SDcommand+5,c
  4602                           
  4603                           ;sdcard.c: 46: spi_send(SDcommand, 6);
  4604  0075CE  0E56               	movlw	low _SDcommand
  4605  0075D0  6E01               	movwf	spi_send@data,c
  4606  0075D2  0E00               	movlw	high _SDcommand
  4607  0075D4  6E02               	movwf	spi_send@data+1,c
  4608  0075D6  0E00               	movlw	0
  4609  0075D8  6E04               	movwf	spi_send@length+1,c
  4610  0075DA  0E06               	movlw	6
  4611  0075DC  6E03               	movwf	spi_send@length,c
  4612  0075DE  EC29  F036         	call	_spi_send	;wreg free
  4613                           
  4614                           ;sdcard.c: 49: SDcard_get_response(0x01);
  4615  0075E2  0E01               	movlw	1
  4616  0075E4  EC56  F036         	call	_SDcard_get_response
  4617                           
  4618                           ;sdcard.c: 50: uart_puts("success!\n");
  4619  0075E8  0EE5               	movlw	low STR_14
  4620  0075EA  6E02               	movwf	uart_puts@s,c
  4621  0075EC  0E7F               	movlw	high STR_14
  4622  0075EE  6E03               	movwf	uart_puts@s+1,c
  4623  0075F0  ECFF  F036         	call	_uart_puts	;wreg free
  4624                           
  4625                           ;sdcard.c: 52: uart_puts("Sending CMD1, awaiting response...");
  4626  0075F4  0ED7               	movlw	low STR_15
  4627  0075F6  6E02               	movwf	uart_puts@s,c
  4628  0075F8  0E7E               	movlw	high STR_15
  4629  0075FA  6E03               	movwf	uart_puts@s+1,c
  4630  0075FC  ECFF  F036         	call	_uart_puts	;wreg free
  4631                           
  4632                           ;sdcard.c: 54: SDcommand[0] = 0x41;
  4633  007600  0E41               	movlw	65
  4634  007602  6E56               	movwf	_SDcommand,c
  4635                           
  4636                           ;sdcard.c: 55: SDcommand[1] = 0x00;
  4637  007604  0E00               	movlw	0
  4638  007606  6E57               	movwf	_SDcommand+1,c
  4639                           
  4640                           ;sdcard.c: 56: SDcommand[2] = 0x00;
  4641  007608  0E00               	movlw	0
  4642  00760A  6E58               	movwf	_SDcommand+2,c
  4643                           
  4644                           ;sdcard.c: 57: SDcommand[3] = 0x00;
  4645  00760C  0E00               	movlw	0
  4646  00760E  6E59               	movwf	_SDcommand+3,c
  4647                           
  4648                           ;sdcard.c: 58: SDcommand[4] = 0x00;
  4649  007610  0E00               	movlw	0
  4650  007612  6E5A               	movwf	_SDcommand+4,c
  4651                           
  4652                           ;sdcard.c: 59: SDcommand[5] = 0x95;
  4653  007614  0E95               	movlw	149
  4654  007616  6E5B               	movwf	_SDcommand+5,c
  4655                           
  4656                           ;sdcard.c: 61: no_response = 1;
  4657  007618  0E01               	movlw	1
  4658  00761A  6E53               	movwf	_no_response,c
  4659                           
  4660                           ;sdcard.c: 62: while(no_response){
  4661  00761C  D029               	goto	u1240
  4662  00761E                     
  4663                           ;sdcard.c: 64: spi_send(SDcommand, 6);
  4664  00761E  0E56               	movlw	low _SDcommand
  4665  007620  6E01               	movwf	spi_send@data,c
  4666  007622  0E00               	movlw	high _SDcommand
  4667  007624  6E02               	movwf	spi_send@data+1,c
  4668  007626  0E00               	movlw	0
  4669  007628  6E04               	movwf	spi_send@length+1,c
  4670  00762A  0E06               	movlw	6
  4671  00762C  6E03               	movwf	spi_send@length,c
  4672  00762E  EC29  F036         	call	_spi_send	;wreg free
  4673                           
  4674                           ;sdcard.c: 67: spi_receive(SDdata, 8);
  4675  007632  0E76               	movlw	low _SDdata
  4676  007634  6E01               	movwf	spi_receive@data,c
  4677  007636  0E00               	movlw	high _SDdata
  4678  007638  6E02               	movwf	spi_receive@data+1,c
  4679  00763A  0E00               	movlw	0
  4680  00763C  6E04               	movwf	spi_receive@length+1,c
  4681  00763E  0E08               	movlw	8
  4682  007640  6E03               	movwf	spi_receive@length,c
  4683  007642  EC3F  F036         	call	_spi_receive	;wreg free
  4684                           
  4685                           ;sdcard.c: 68: for(unsigned char b = 0; b < 7; b++){
  4686  007646  0E00               	movlw	0
  4687  007648  6E07               	movwf	SDcard_init@b,c
  4688  00764A                     l2119:
  4689  00764A  0E06               	movlw	6
  4690  00764C  6407               	cpfsgt	SDcard_init@b,c
  4691  00764E  D001               	goto	l147
  4692  007650  D00F               	goto	u1240
  4693  007652                     l147:
  4694                           
  4695                           ;sdcard.c: 69: if(SDdata[b] == 0x00) no_response = 0;
  4696  007652  5007               	movf	SDcard_init@b,w,c
  4697  007654  0D01               	mullw	1
  4698  007656  0E76               	movlw	low _SDdata
  4699  007658  24F3               	addwf	prodl,w,c
  4700  00765A  6ED9               	movwf	fsr2l,c
  4701  00765C  0E00               	movlw	high _SDdata
  4702  00765E  20F4               	addwfc	prodh,w,c
  4703  007660  6EDA               	movwf	fsr2h,c
  4704  007662  50DF               	movf	indf2,w,c
  4705  007664  A4D8               	btfss	status,2,c
  4706  007666  D002               	goto	l149
  4707  007668  0E00               	movlw	0
  4708  00766A  6E53               	movwf	_no_response,c
  4709  00766C                     l149:
  4710  00766C  2A07               	incf	SDcard_init@b,f,c
  4711  00766E  D7ED               	goto	l2119
  4712  007670                     u1240:
  4713  007670  5053               	movf	_no_response,w,c
  4714  007672  A4D8               	btfss	status,2,c
  4715  007674  D7D4               	goto	l146
  4716                           
  4717                           ;sdcard.c: 70: }
  4718                           ;sdcard.c: 71: }
  4719                           ;sdcard.c: 72: uart_puts("success!\n");
  4720  007676  0EE5               	movlw	low STR_14
  4721  007678  6E02               	movwf	uart_puts@s,c
  4722  00767A  0E7F               	movlw	high STR_14
  4723  00767C  6E03               	movwf	uart_puts@s+1,c
  4724  00767E  ECFF  F036         	call	_uart_puts	;wreg free
  4725                           
  4726                           ;sdcard.c: 74: (LATC |= 0x02);
  4727  007682  828B               	bsf	3979,1,c	;volatile
  4728                           
  4729                           ;sdcard.c: 75: uart_puts("SD card initialized successfully!\n");
  4730  007684  0E91               	movlw	low STR_17
  4731  007686  6E02               	movwf	uart_puts@s,c
  4732  007688  0E7E               	movlw	high STR_17
  4733  00768A  6E03               	movwf	uart_puts@s+1,c
  4734  00768C  ECFF  F036         	call	_uart_puts	;wreg free
  4735  007690  0012               	return		;funcret
  4736  007692                     __end_of_SDcard_init:
  4737                           	opt stack 0
  4738                           tblptru	equ	0xFF8
  4739                           tblptrh	equ	0xFF7
  4740                           tblptrl	equ	0xFF6
  4741                           tablat	equ	0xFF5
  4742                           prodh	equ	0xFF4
  4743                           prodl	equ	0xFF3
  4744                           postinc0	equ	0xFEE
  4745                           wreg	equ	0xFE8
  4746                           postdec1	equ	0xFE5
  4747                           fsr1h	equ	0xFE2
  4748                           fsr1l	equ	0xFE1
  4749                           indf2	equ	0xFDF
  4750                           postinc2	equ	0xFDE
  4751                           fsr2h	equ	0xFDA
  4752                           fsr2l	equ	0xFD9
  4753                           status	equ	0xFD8
  4754                           
  4755 ;; *************** function _uart_puts *****************
  4756 ;; Defined at:
  4757 ;;		line 27 in file "../../picSD-master/uart.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;  s               2    1[COMRAM] PTR const unsigned char 
  4760 ;;		 -> STR_28(7), STR_27(9), STR_26(43), STR_25(10), 
  4761 ;;		 -> STR_24(20), STR_23(22), STR_22(22), STR_21(10), 
  4762 ;;		 -> STR_20(17), STR_19(10), STR_18(17), STR_17(35), 
  4763 ;;		 -> STR_16(10), STR_15(35), STR_14(10), STR_13(35), 
  4764 ;;		 -> STR_12(36), STR_9(12), STR_8(28), STR_7(15), 
  4765 ;;		 -> STR_6(7), STR_5(48), STR_4(19), STR_3(17), 
  4766 ;;		 -> address_buffer(10), STR_2(7), STR_1(39), 
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;		None
  4769 ;; Return value:  Size  Location     Type
  4770 ;;                  1    wreg      void 
  4771 ;; Registers used:
  4772 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4778 ;;      Params:         2       0       0       0       0       0       0
  4779 ;;      Locals:         0       0       0       0       0       0       0
  4780 ;;      Temps:          0       0       0       0       0       0       0
  4781 ;;      Totals:         2       0       0       0       0       0       0
  4782 ;;Total ram usage:        2 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; Hardware stack levels required when called:    1
  4785 ;; This function calls:
  4786 ;;		_uart_putc
  4787 ;; This function is called by:
  4788 ;;		_file_create
  4789 ;;		_sector_open
  4790 ;;		_file_update_size
  4791 ;;		_SDcard_init
  4792 ;;		_SDcard_read_block
  4793 ;;		_SDcard_write_block
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           	psect	text23
  4798  006DFE                     __ptext23:
  4799                           	opt stack 0
  4800  006DFE                     _uart_puts:
  4801                           	opt stack 28
  4802                           
  4803                           ;uart.c: 28: while(*s){
  4804                           
  4805                           ;incstack = 0
  4806  006DFE  D014               	goto	l256
  4807  006E00                     
  4808                           ;uart.c: 29: uart_putc(*s);
  4809  006E00  C002  FFF6         	movff	uart_puts@s,tblptrl
  4810  006E04  C003  FFF7         	movff	uart_puts@s+1,tblptrh
  4811  006E08  6AF8               	clrf	tblptru,c
  4812  006E0A  0E05               	movlw	(high __ramtop+-1)
  4813  006E0C  64F7               	cpfsgt	tblptrh,c
  4814  006E0E  D003               	bra	u737
  4815  006E10  0008               	tblrd		*
  4816  006E12  50F5               	movf	tablat,w,c
  4817  006E14  D005               	bra	u730
  4818  006E16                     u737:
  4819  006E16  CFF6 FFE9          	movff	tblptrl,fsr0l
  4820  006E1A  CFF7 FFEA          	movff	tblptrh,fsr0h
  4821  006E1E  50EF               	movf	indf0,w,c
  4822  006E20                     u730:
  4823  006E20  ECE2  F035         	call	_uart_putc
  4824                           
  4825                           ;uart.c: 30: s++;
  4826  006E24  4A02               	infsnz	uart_puts@s,f,c
  4827  006E26  2A03               	incf	uart_puts@s+1,f,c
  4828  006E28                     l256:
  4829  006E28  C002  FFF6         	movff	uart_puts@s,tblptrl
  4830  006E2C  C003  FFF7         	movff	uart_puts@s+1,tblptrh
  4831  006E30  6AF8               	clrf	tblptru,c
  4832  006E32  0E05               	movlw	(high __ramtop+-1)
  4833  006E34  64F7               	cpfsgt	tblptrh,c
  4834  006E36  D003               	bra	u747
  4835  006E38  0008               	tblrd		*
  4836  006E3A  50F5               	movf	tablat,w,c
  4837  006E3C  D005               	bra	u740
  4838  006E3E                     u747:
  4839  006E3E  CFF6 FFE9          	movff	tblptrl,fsr0l
  4840  006E42  CFF7 FFEA          	movff	tblptrh,fsr0h
  4841  006E46  50EF               	movf	indf0,w,c
  4842  006E48                     u740:
  4843  006E48  0900               	iorlw	0
  4844  006E4A  B4D8               	btfsc	status,2,c
  4845  006E4C  0012               	return	
  4846  006E4E  D7D8               	goto	l257
  4847  006E50                     __end_of_uart_puts:
  4848                           	opt stack 0
  4849                           tblptru	equ	0xFF8
  4850                           tblptrh	equ	0xFF7
  4851                           tblptrl	equ	0xFF6
  4852                           tablat	equ	0xFF5
  4853                           prodh	equ	0xFF4
  4854                           prodl	equ	0xFF3
  4855                           indf0	equ	0xFEF
  4856                           postinc0	equ	0xFEE
  4857                           fsr0h	equ	0xFEA
  4858                           fsr0l	equ	0xFE9
  4859                           wreg	equ	0xFE8
  4860                           postdec1	equ	0xFE5
  4861                           fsr1h	equ	0xFE2
  4862                           fsr1l	equ	0xFE1
  4863                           indf2	equ	0xFDF
  4864                           postinc2	equ	0xFDE
  4865                           fsr2h	equ	0xFDA
  4866                           fsr2l	equ	0xFD9
  4867                           status	equ	0xFD8
  4868                           
  4869 ;; *************** function _uart_putc *****************
  4870 ;; Defined at:
  4871 ;;		line 22 in file "../../picSD-master/uart.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;  c               1    wreg     unsigned char 
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;  c               1    0[COMRAM] unsigned char 
  4876 ;; Return value:  Size  Location     Type
  4877 ;;                  1    wreg      void 
  4878 ;; Registers used:
  4879 ;;		wreg
  4880 ;; Tracked objects:
  4881 ;;		On entry : 0/0
  4882 ;;		On exit  : 0/0
  4883 ;;		Unchanged: 0/0
  4884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4885 ;;      Params:         0       0       0       0       0       0       0
  4886 ;;      Locals:         1       0       0       0       0       0       0
  4887 ;;      Temps:          0       0       0       0       0       0       0
  4888 ;;      Totals:         1       0       0       0       0       0       0
  4889 ;;Total ram usage:        1 bytes
  4890 ;; Hardware stack levels used:    1
  4891 ;; This function calls:
  4892 ;;		Nothing
  4893 ;; This function is called by:
  4894 ;;		_file_create
  4895 ;;		_sector_open
  4896 ;;		_file_update_size
  4897 ;;		_uart_puts
  4898 ;; This function uses a non-reentrant model
  4899 ;;
  4900                           
  4901                           	psect	text24
  4902  006BC4                     __ptext24:
  4903                           	opt stack 0
  4904  006BC4                     _uart_putc:
  4905                           	opt stack 28
  4906                           
  4907                           ;incstack = 0
  4908                           ;uart_putc@c stored from wreg
  4909  006BC4  6E01               	movwf	uart_putc@c,c
  4910  006BC6                     
  4911                           ;uart.c: 23: while(!TXSTAbits.TRMT);
  4912  006BC6  A2AC               	btfss	4012,1,c	;volatile
  4913  006BC8  D7FE               	goto	l1537
  4914                           
  4915                           ;uart.c: 24: TXREG1 = c;
  4916  006BCA  C001  FFAD         	movff	uart_putc@c,4013	;volatile
  4917  006BCE  0012               	return		;funcret
  4918  006BD0                     __end_of_uart_putc:
  4919                           	opt stack 0
  4920                           tblptru	equ	0xFF8
  4921                           tblptrh	equ	0xFF7
  4922                           tblptrl	equ	0xFF6
  4923                           tablat	equ	0xFF5
  4924                           prodh	equ	0xFF4
  4925                           prodl	equ	0xFF3
  4926                           indf0	equ	0xFEF
  4927                           postinc0	equ	0xFEE
  4928                           fsr0h	equ	0xFEA
  4929                           fsr0l	equ	0xFE9
  4930                           wreg	equ	0xFE8
  4931                           postdec1	equ	0xFE5
  4932                           fsr1h	equ	0xFE2
  4933                           fsr1l	equ	0xFE1
  4934                           indf2	equ	0xFDF
  4935                           postinc2	equ	0xFDE
  4936                           fsr2h	equ	0xFDA
  4937                           fsr2l	equ	0xFD9
  4938                           status	equ	0xFD8
  4939                           
  4940 ;; *************** function _spi_send *****************
  4941 ;; Defined at:
  4942 ;;		line 39 in file "../../picSD-master/spi.c"
  4943 ;; Parameters:    Size  Location     Type
  4944 ;;  data            2    0[COMRAM] PTR unsigned char 
  4945 ;;		 -> SDcommand(6), SDdata(512), 
  4946 ;;  length          2    2[COMRAM] unsigned int 
  4947 ;; Auto vars:     Size  Location     Type
  4948 ;;  tmp             1    4[COMRAM] unsigned char 
  4949 ;; Return value:  Size  Location     Type
  4950 ;;                  1    wreg      void 
  4951 ;; Registers used:
  4952 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4953 ;; Tracked objects:
  4954 ;;		On entry : 0/0
  4955 ;;		On exit  : 0/0
  4956 ;;		Unchanged: 0/0
  4957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4958 ;;      Params:         4       0       0       0       0       0       0
  4959 ;;      Locals:         1       0       0       0       0       0       0
  4960 ;;      Temps:          0       0       0       0       0       0       0
  4961 ;;      Totals:         5       0       0       0       0       0       0
  4962 ;;Total ram usage:        5 bytes
  4963 ;; Hardware stack levels used:    1
  4964 ;; This function calls:
  4965 ;;		Nothing
  4966 ;; This function is called by:
  4967 ;;		_SDcard_init
  4968 ;;		_SDcard_read_block
  4969 ;;		_SDcard_write_block
  4970 ;; This function uses a non-reentrant model
  4971 ;;
  4972                           
  4973                           	psect	text25
  4974  006C52                     __ptext25:
  4975                           	opt stack 0
  4976  006C52                     _spi_send:
  4977                           	opt stack 28
  4978                           
  4979                           ;spi.c: 40: unsigned char tmp;
  4980                           ;spi.c: 41: while(length != 0){
  4981                           
  4982                           ;incstack = 0
  4983  006C52  D010               	goto	l197
  4984  006C54                     
  4985                           ;spi.c: 42: SSP1BUF = *data;
  4986  006C54  C001  FFD9         	movff	spi_send@data,fsr2l
  4987  006C58  C002  FFDA         	movff	spi_send@data+1,fsr2h
  4988  006C5C  50DF               	movf	indf2,w,c
  4989  006C5E  6EC9               	movwf	4041,c	;volatile
  4990  006C60  A69E               	btfss	3998,3,c	;volatile
  4991  006C62  D7FE               	goto	l200
  4992                           
  4993                           ;spi.c: 44: PIR1bits.SSP1IF = 0;
  4994  006C64  969E               	bcf	3998,3,c	;volatile
  4995                           
  4996                           ;spi.c: 45: tmp = SSP1BUF;
  4997  006C66  CFC9 F005          	movff	4041,spi_send@tmp	;volatile
  4998                           
  4999                           ;spi.c: 46: length--;
  5000  006C6A  0603               	decf	spi_send@length,f,c
  5001  006C6C  A0D8               	btfss	status,0,c
  5002  006C6E  0604               	decf	spi_send@length+1,f,c
  5003                           
  5004                           ;spi.c: 47: data++;
  5005  006C70  4A01               	infsnz	spi_send@data,f,c
  5006  006C72  2A02               	incf	spi_send@data+1,f,c
  5007  006C74                     l197:
  5008  006C74  5003               	movf	spi_send@length,w,c
  5009  006C76  1004               	iorwf	spi_send@length+1,w,c
  5010  006C78  B4D8               	btfsc	status,2,c
  5011  006C7A  0012               	return	
  5012  006C7C  D7EB               	goto	l198
  5013  006C7E                     __end_of_spi_send:
  5014                           	opt stack 0
  5015                           tblptru	equ	0xFF8
  5016                           tblptrh	equ	0xFF7
  5017                           tblptrl	equ	0xFF6
  5018                           tablat	equ	0xFF5
  5019                           prodh	equ	0xFF4
  5020                           prodl	equ	0xFF3
  5021                           indf0	equ	0xFEF
  5022                           postinc0	equ	0xFEE
  5023                           fsr0h	equ	0xFEA
  5024                           fsr0l	equ	0xFE9
  5025                           wreg	equ	0xFE8
  5026                           postdec1	equ	0xFE5
  5027                           fsr1h	equ	0xFE2
  5028                           fsr1l	equ	0xFE1
  5029                           indf2	equ	0xFDF
  5030                           postinc2	equ	0xFDE
  5031                           fsr2h	equ	0xFDA
  5032                           fsr2l	equ	0xFD9
  5033                           status	equ	0xFD8
  5034                           
  5035 ;; *************** function _spi_receive *****************
  5036 ;; Defined at:
  5037 ;;		line 51 in file "../../picSD-master/spi.c"
  5038 ;; Parameters:    Size  Location     Type
  5039 ;;  data            2    0[COMRAM] PTR unsigned char 
  5040 ;;		 -> SDdata(512), 
  5041 ;;  length          2    2[COMRAM] unsigned int 
  5042 ;; Auto vars:     Size  Location     Type
  5043 ;;		None
  5044 ;; Return value:  Size  Location     Type
  5045 ;;                  1    wreg      void 
  5046 ;; Registers used:
  5047 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5048 ;; Tracked objects:
  5049 ;;		On entry : 0/0
  5050 ;;		On exit  : 0/0
  5051 ;;		Unchanged: 0/0
  5052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5053 ;;      Params:         4       0       0       0       0       0       0
  5054 ;;      Locals:         0       0       0       0       0       0       0
  5055 ;;      Temps:          0       0       0       0       0       0       0
  5056 ;;      Totals:         4       0       0       0       0       0       0
  5057 ;;Total ram usage:        4 bytes
  5058 ;; Hardware stack levels used:    1
  5059 ;; This function calls:
  5060 ;;		Nothing
  5061 ;; This function is called by:
  5062 ;;		_SDcard_init
  5063 ;;		_SDcard_read_block
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           	psect	text26
  5068  006C7E                     __ptext26:
  5069                           	opt stack 0
  5070  006C7E                     _spi_receive:
  5071                           	opt stack 28
  5072                           
  5073                           ;spi.c: 52: while(length != 0){
  5074                           
  5075                           ;incstack = 0
  5076  006C7E  D011               	goto	l206
  5077  006C80                     l207:
  5078                           
  5079                           ;spi.c: 53: SSP1BUF = 0xFF;
  5080  006C80  68C9               	setf	4041,c	;volatile
  5081  006C82  A69E               	btfss	3998,3,c	;volatile
  5082  006C84  D7FE               	goto	l209
  5083  006C86                     u820:
  5084                           
  5085                           ;spi.c: 55: while( !SSP1STATbits.BF );
  5086  006C86  A0C7               	btfss	4039,0,c	;volatile
  5087  006C88  D7FE               	goto	u820
  5088                           
  5089                           ;spi.c: 56: PIR1bits.SSP1IF = 0;
  5090  006C8A  969E               	bcf	3998,3,c	;volatile
  5091                           
  5092                           ;spi.c: 57: *data = SSP1BUF;
  5093  006C8C  C001  FFD9         	movff	spi_receive@data,fsr2l
  5094  006C90  C002  FFDA         	movff	spi_receive@data+1,fsr2h
  5095  006C94  CFC9 FFDF          	movff	4041,indf2	;volatile
  5096                           
  5097                           ;spi.c: 58: length--;
  5098  006C98  0603               	decf	spi_receive@length,f,c
  5099  006C9A  A0D8               	btfss	status,0,c
  5100  006C9C  0604               	decf	spi_receive@length+1,f,c
  5101                           
  5102                           ;spi.c: 59: data++;
  5103  006C9E  4A01               	infsnz	spi_receive@data,f,c
  5104  006CA0  2A02               	incf	spi_receive@data+1,f,c
  5105  006CA2                     l206:
  5106  006CA2  5003               	movf	spi_receive@length,w,c
  5107  006CA4  1004               	iorwf	spi_receive@length+1,w,c
  5108  006CA6  B4D8               	btfsc	status,2,c
  5109  006CA8  0012               	return	
  5110  006CAA  D7EA               	goto	l207
  5111  006CAC                     __end_of_spi_receive:
  5112                           	opt stack 0
  5113                           tblptru	equ	0xFF8
  5114                           tblptrh	equ	0xFF7
  5115                           tblptrl	equ	0xFF6
  5116                           tablat	equ	0xFF5
  5117                           prodh	equ	0xFF4
  5118                           prodl	equ	0xFF3
  5119                           indf0	equ	0xFEF
  5120                           postinc0	equ	0xFEE
  5121                           fsr0h	equ	0xFEA
  5122                           fsr0l	equ	0xFE9
  5123                           wreg	equ	0xFE8
  5124                           postdec1	equ	0xFE5
  5125                           fsr1h	equ	0xFE2
  5126                           fsr1l	equ	0xFE1
  5127                           indf2	equ	0xFDF
  5128                           postinc2	equ	0xFDE
  5129                           fsr2h	equ	0xFDA
  5130                           fsr2l	equ	0xFD9
  5131                           status	equ	0xFD8
  5132                           
  5133 ;; *************** function _SDcard_get_response *****************
  5134 ;; Defined at:
  5135 ;;		line 162 in file "../../picSD-master/sdcard.c"
  5136 ;; Parameters:    Size  Location     Type
  5137 ;;  response        1    wreg     unsigned char 
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;  response        1    0[COMRAM] unsigned char 
  5140 ;; Return value:  Size  Location     Type
  5141 ;;                  1    wreg      unsigned char 
  5142 ;; Registers used:
  5143 ;;		wreg, status,2, status,0, cstack
  5144 ;; Tracked objects:
  5145 ;;		On entry : 0/0
  5146 ;;		On exit  : 0/0
  5147 ;;		Unchanged: 0/0
  5148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5149 ;;      Params:         0       0       0       0       0       0       0
  5150 ;;      Locals:         1       0       0       0       0       0       0
  5151 ;;      Temps:          0       0       0       0       0       0       0
  5152 ;;      Totals:         1       0       0       0       0       0       0
  5153 ;;Total ram usage:        1 bytes
  5154 ;; Hardware stack levels used:    1
  5155 ;; Hardware stack levels required when called:    1
  5156 ;; This function calls:
  5157 ;;		_spi_single_receive
  5158 ;; This function is called by:
  5159 ;;		_SDcard_init
  5160 ;;		_SDcard_read_block
  5161 ;;		_SDcard_write_block
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           	psect	text27
  5166  006CAC                     __ptext27:
  5167                           	opt stack 0
  5168  006CAC                     _SDcard_get_response:
  5169                           	opt stack 27
  5170                           
  5171                           ;incstack = 0
  5172                           ;SDcard_get_response@response stored from wreg
  5173  006CAC  6E01               	movwf	SDcard_get_response@response,c
  5174                           
  5175                           ;sdcard.c: 165: no_response = 1;
  5176  006CAE  0E01               	movlw	1
  5177  006CB0  6E53               	movwf	_no_response,c
  5178                           
  5179                           ;sdcard.c: 166: while(no_response && timeout){
  5180  006CB2  D00A               	goto	l164
  5181  006CB4                     
  5182                           ;sdcard.c: 167: if(spi_single_receive() == response) no_response = 0;
  5183  006CB4  ECE8  F035         	call	_spi_single_receive	;wreg free
  5184  006CB8  1801               	xorwf	SDcard_get_response@response,w,c
  5185  006CBA  A4D8               	btfss	status,2,c
  5186  006CBC  D002               	goto	l166
  5187  006CBE  0E00               	movlw	0
  5188  006CC0  6E53               	movwf	_no_response,c
  5189  006CC2                     l166:
  5190                           
  5191                           ;sdcard.c: 168: timeout--;
  5192  006CC2  065D               	decf	_timeout,f,c
  5193  006CC4  A0D8               	btfss	status,0,c
  5194  006CC6  065E               	decf	_timeout+1,f,c
  5195  006CC8                     l164:
  5196  006CC8  5053               	movf	_no_response,w,c
  5197  006CCA  B4D8               	btfsc	status,2,c
  5198  006CCC  D004               	goto	u800
  5199  006CCE  505D               	movf	_timeout,w,c
  5200  006CD0  105E               	iorwf	_timeout+1,w,c
  5201  006CD2  A4D8               	btfss	status,2,c
  5202  006CD4  D7EF               	goto	l165
  5203  006CD6                     u800:
  5204                           
  5205                           ;sdcard.c: 169: }
  5206                           ;sdcard.c: 170: if(timeout == 0){
  5207  006CD6  505D               	movf	_timeout,w,c
  5208  006CD8  105E               	iorwf	_timeout+1,w,c
  5209  006CDA  A4D8               	btfss	status,2,c
  5210  006CDC  D002               	goto	l170
  5211                           
  5212                           ;sdcard.c: 171: return 1;
  5213  006CDE  0E01               	movlw	1
  5214  006CE0  0012               	return	
  5215  006CE2                     l170:
  5216                           
  5217                           ;sdcard.c: 172: }
  5218                           ;sdcard.c: 174: return 0;
  5219  006CE2  0E00               	movlw	0
  5220  006CE4  0012               	return	
  5221  006CE6                     __end_of_SDcard_get_response:
  5222                           	opt stack 0
  5223                           tblptru	equ	0xFF8
  5224                           tblptrh	equ	0xFF7
  5225                           tblptrl	equ	0xFF6
  5226                           tablat	equ	0xFF5
  5227                           prodh	equ	0xFF4
  5228                           prodl	equ	0xFF3
  5229                           indf0	equ	0xFEF
  5230                           postinc0	equ	0xFEE
  5231                           fsr0h	equ	0xFEA
  5232                           fsr0l	equ	0xFE9
  5233                           wreg	equ	0xFE8
  5234                           postdec1	equ	0xFE5
  5235                           fsr1h	equ	0xFE2
  5236                           fsr1l	equ	0xFE1
  5237                           indf2	equ	0xFDF
  5238                           postinc2	equ	0xFDE
  5239                           fsr2h	equ	0xFDA
  5240                           fsr2l	equ	0xFD9
  5241                           status	equ	0xFD8
  5242                           
  5243 ;; *************** function _spi_single_receive *****************
  5244 ;; Defined at:
  5245 ;;		line 71 in file "../../picSD-master/spi.c"
  5246 ;; Parameters:    Size  Location     Type
  5247 ;;		None
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;		None
  5250 ;; Return value:  Size  Location     Type
  5251 ;;                  1    wreg      unsigned char 
  5252 ;; Registers used:
  5253 ;;		wreg, status,2
  5254 ;; Tracked objects:
  5255 ;;		On entry : 0/0
  5256 ;;		On exit  : 0/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5259 ;;      Params:         0       0       0       0       0       0       0
  5260 ;;      Locals:         0       0       0       0       0       0       0
  5261 ;;      Temps:          0       0       0       0       0       0       0
  5262 ;;      Totals:         0       0       0       0       0       0       0
  5263 ;;Total ram usage:        0 bytes
  5264 ;; Hardware stack levels used:    1
  5265 ;; This function calls:
  5266 ;;		Nothing
  5267 ;; This function is called by:
  5268 ;;		_SDcard_write_block
  5269 ;;		_SDcard_get_response
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text28
  5274  006BD0                     __ptext28:
  5275                           	opt stack 0
  5276  006BD0                     _spi_single_receive:
  5277                           	opt stack 27
  5278                           
  5279                           ;spi.c: 72: SSP1BUF = 0xFF;
  5280                           
  5281                           ;incstack = 0
  5282  006BD0  68C9               	setf	4041,c	;volatile
  5283  006BD2  A69E               	btfss	3998,3,c	;volatile
  5284  006BD4  D7FE               	goto	l225
  5285  006BD6                     u650:
  5286                           
  5287                           ;spi.c: 74: while( !SSP1STATbits.BF );
  5288  006BD6  A0C7               	btfss	4039,0,c	;volatile
  5289  006BD8  D7FE               	goto	u650
  5290                           
  5291                           ;spi.c: 75: PIR1bits.SSP1IF = 0;
  5292  006BDA  969E               	bcf	3998,3,c	;volatile
  5293                           
  5294                           ;spi.c: 76: return SSP1BUF;
  5295  006BDC  50C9               	movf	4041,w,c	;volatile
  5296  006BDE  0012               	return	
  5297  006BE0                     __end_of_spi_single_receive:
  5298                           	opt stack 0
  5299                           tblptru	equ	0xFF8
  5300                           tblptrh	equ	0xFF7
  5301                           tblptrl	equ	0xFF6
  5302                           tablat	equ	0xFF5
  5303                           prodh	equ	0xFF4
  5304                           prodl	equ	0xFF3
  5305                           indf0	equ	0xFEF
  5306                           postinc0	equ	0xFEE
  5307                           fsr0h	equ	0xFEA
  5308                           fsr0l	equ	0xFE9
  5309                           wreg	equ	0xFE8
  5310                           postdec1	equ	0xFE5
  5311                           fsr1h	equ	0xFE2
  5312                           fsr1l	equ	0xFE1
  5313                           indf2	equ	0xFDF
  5314                           postinc2	equ	0xFDE
  5315                           fsr2h	equ	0xFDA
  5316                           fsr2l	equ	0xFD9
  5317                           status	equ	0xFD8
  5318                           tblptru	equ	0xFF8
  5319                           tblptrh	equ	0xFF7
  5320                           tblptrl	equ	0xFF6
  5321                           tablat	equ	0xFF5
  5322                           prodh	equ	0xFF4
  5323                           prodl	equ	0xFF3
  5324                           indf0	equ	0xFEF
  5325                           postinc0	equ	0xFEE
  5326                           fsr0h	equ	0xFEA
  5327                           fsr0l	equ	0xFE9
  5328                           wreg	equ	0xFE8
  5329                           postdec1	equ	0xFE5
  5330                           fsr1h	equ	0xFE2
  5331                           fsr1l	equ	0xFE1
  5332                           indf2	equ	0xFDF
  5333                           postinc2	equ	0xFDE
  5334                           fsr2h	equ	0xFDA
  5335                           fsr2l	equ	0xFD9
  5336                           status	equ	0xFD8
  5337                           
  5338                           	psect	rparam
  5339  0000                     tblptru	equ	0xFF8
  5340                           tblptrh	equ	0xFF7
  5341                           tblptrl	equ	0xFF6
  5342                           tablat	equ	0xFF5
  5343                           prodh	equ	0xFF4
  5344                           prodl	equ	0xFF3
  5345                           indf0	equ	0xFEF
  5346                           postinc0	equ	0xFEE
  5347                           fsr0h	equ	0xFEA
  5348                           fsr0l	equ	0xFE9
  5349                           wreg	equ	0xFE8
  5350                           postdec1	equ	0xFE5
  5351                           fsr1h	equ	0xFE2
  5352                           fsr1l	equ	0xFE1
  5353                           indf2	equ	0xFDF
  5354                           postinc2	equ	0xFDE
  5355                           fsr2h	equ	0xFDA
  5356                           fsr2l	equ	0xFD9
  5357                           status	equ	0xFD8


Data Sizes:
    Strings     532
    Constant    0
    Data        2
    BSS         579
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      94
    BANK0           160      0      22
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ultoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> address_buffer(BANK0[10]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 10
		 -> address_buffer(BANK0[10]), 

    ltoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> address_buffer(BANK0[10]), 

    ltoa@cp	PTR unsigned char  size(2) Largest target is 10
		 -> address_buffer(BANK0[10]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> address_buffer(BANK0[10]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 10
		 -> address_buffer(BANK0[10]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> address_buffer(BANK0[10]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 10
		 -> address_buffer(BANK0[10]), 

    uart_puts@s	PTR const unsigned char  size(2) Largest target is 48
		 -> STR_28(CODE[7]), STR_27(CODE[9]), STR_26(CODE[43]), STR_25(CODE[10]), 
		 -> STR_24(CODE[20]), STR_23(CODE[22]), STR_22(CODE[22]), STR_21(CODE[10]), 
		 -> STR_20(CODE[17]), STR_19(CODE[10]), STR_18(CODE[17]), STR_17(CODE[35]), 
		 -> STR_16(CODE[10]), STR_15(CODE[35]), STR_14(CODE[10]), STR_13(CODE[35]), 
		 -> STR_12(CODE[36]), STR_9(CODE[12]), STR_8(CODE[28]), STR_7(CODE[15]), 
		 -> STR_6(CODE[7]), STR_5(CODE[48]), STR_4(CODE[19]), STR_3(CODE[17]), 
		 -> address_buffer(BANK0[10]), STR_2(CODE[7]), STR_1(CODE[39]), 

    spi_receive@data	PTR unsigned char  size(2) Largest target is 512
		 -> SDdata(BIGRAM[512]), 

    spi_send@data	PTR unsigned char  size(2) Largest target is 512
		 -> SDcommand(COMRAM[6]), SDdata(BIGRAM[512]), 

    file_append@string	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_11(CODE[33]), 

    file_create@filename	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_10(CODE[13]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 10
		 -> address_buffer(BANK0[10]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 10
		 -> address_buffer(BANK0[10]), 


Critical Paths under _main in COMRAM

    _main->_file_create
    _uart_init->___lldiv
    _mount_disk->___lmul
    _file_update_size->_ltoa
    _file_create->_ltoa
    _itoa->_utoa
    _utoa->___lwdiv
    _sector_open->_ltoa
    _ltoa->_ultoa
    _ultoa->___lldiv
    _SDcard_read_block->_spi_send
    _sector_close->_SDcard_write_block
    _SDcard_write_block->_spi_send
    _SDcard_init->_spi_send
    _uart_puts->_uart_putc

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   64101
                        _SDcard_init
                        _file_append
                        _file_create
                   _file_update_size
                         _mount_disk
                        _sector_open
                           _spi_init
                          _uart_init
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            8     6      2     761
                                             13 COMRAM     8     6      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _spi_init                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _mount_disk                                           5     5      0    5610
                                             12 COMRAM     5     5      0
                  _SDcard_read_block
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _file_update_size                                     2     2      0   13194
                                             36 COMRAM     2     2      0
                  _SDcard_read_block
                 _SDcard_write_block
                               _ltoa
                          _uart_putc
                          _uart_puts
 ---------------------------------------------------------------------------------
 (1) _file_create                                         11     9      2   16061
                                             36 COMRAM    11     9      2
                  _SDcard_read_block
                 _SDcard_write_block
                             ___lmul
                               _itoa
                               _ltoa
                          _uart_putc
                          _uart_puts
 ---------------------------------------------------------------------------------
 (2) _itoa                                                 8     2      6    1698
                                             16 COMRAM     8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (3) _utoa                                                 9     3      6    1307
                                              7 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     466
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _file_append                                          2     0      2   14293
                                             36 COMRAM     2     0      2
                       _sector_close
                        _sector_open
 ---------------------------------------------------------------------------------
 (1) _sector_open                                          0     0      0   10277
                  _SDcard_read_block
                             ___lmul
                               _ltoa
                          _uart_putc
                          _uart_puts
 ---------------------------------------------------------------------------------
 (2) _ltoa                                                10     2      8    2533
                                             26 COMRAM    10     2      8
                              _ultoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8    1458
                                             13 COMRAM    13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     311
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     978
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _SDcard_read_block                                    4     0      4    4321
                                              5 COMRAM     4     0      4
                _SDcard_get_response
                        _spi_receive
                           _spi_send
                    _spi_single_send
                          _uart_puts
 ---------------------------------------------------------------------------------
 (2) _sector_close                                         0     0      0    3895
                 _SDcard_write_block
 ---------------------------------------------------------------------------------
 (2) _SDcard_write_block                                   4     0      4    3895
                                              5 COMRAM     4     0      4
                _SDcard_get_response
                           _spi_send
                 _spi_single_receive
                    _spi_single_send
                          _uart_puts
 ---------------------------------------------------------------------------------
 (3) _spi_single_send                                      2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SDcard_init                                          2     2      0    3890
                                              5 COMRAM     2     2      0
                _SDcard_get_response
                        _spi_receive
                           _spi_send
                          _uart_puts
 ---------------------------------------------------------------------------------
 (2) _uart_puts                                            2     0      2    2423
                                              1 COMRAM     2     0      2
                          _uart_putc
 ---------------------------------------------------------------------------------
 (3) _uart_putc                                            1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _spi_send                                             5     1      4     959
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _spi_receive                                          4     0      4     350
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _SDcard_get_response                                  1     1      0      22
                                              0 COMRAM     1     1      0
                 _spi_single_receive
 ---------------------------------------------------------------------------------
 (4) _spi_single_receive                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SDcard_init
     _SDcard_get_response
       _spi_single_receive
     _spi_receive
     _spi_send
     _uart_puts
       _uart_putc
   _file_append
     _sector_close
       _SDcard_write_block
         _SDcard_get_response
           _spi_single_receive
         _spi_send
         _spi_single_receive
         _spi_single_send
         _uart_puts
           _uart_putc
     _sector_open
       _SDcard_read_block
         _SDcard_get_response
           _spi_single_receive
         _spi_receive
         _spi_send
         _spi_single_send
         _uart_puts
           _uart_putc
       ___lmul
       _ltoa
         _ultoa
           ___lldiv
           ___llmod
       _uart_putc
       _uart_puts
         _uart_putc
   _file_create
     _SDcard_read_block
       _SDcard_get_response
         _spi_single_receive
       _spi_receive
       _spi_send
       _spi_single_send
       _uart_puts
         _uart_putc
     _SDcard_write_block
       _SDcard_get_response
         _spi_single_receive
       _spi_send
       _spi_single_receive
       _spi_single_send
       _uart_puts
         _uart_putc
     ___lmul
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
     _ltoa
       _ultoa
         ___lldiv
         ___llmod
     _uart_putc
     _uart_puts
       _uart_putc
   _file_update_size
     _SDcard_read_block
       _SDcard_get_response
         _spi_single_receive
       _spi_receive
       _spi_send
       _spi_single_send
       _uart_puts
         _uart_putc
     _SDcard_write_block
       _SDcard_get_response
         _spi_single_receive
       _spi_send
       _spi_single_receive
       _spi_single_send
       _uart_puts
         _uart_putc
     _ltoa
       _ultoa
         ___lldiv
         ___llmod
     _uart_putc
     _uart_puts
       _uart_putc
   _mount_disk
     _SDcard_read_block
       _SDcard_get_response
         _spi_single_receive
       _spi_receive
       _spi_send
       _spi_single_send
       _uart_puts
         _uart_putc
     ___lmul
     ___wmul
   _sector_open
     _SDcard_read_block
       _SDcard_get_response
         _spi_single_receive
       _spi_receive
       _spi_send
       _spi_single_send
       _uart_puts
         _uart_putc
     ___lmul
     _ltoa
       _ultoa
         ___lldiv
         ___llmod
     _uart_putc
     _uart_puts
       _uart_putc
   _spi_init
   _uart_init
     ___lldiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     200      16       33.4%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      16       4       13.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2F      5E       1       98.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      74       9        0.0%
DATA                 0      0     274      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Jan 12 13:12:33 2018

                          l80 6FD8                            l81 6FEA                            l65 7B32  
                          l66 7B72                            l58 7910                            l67 7B76  
                          l79 6FA0           ___wmul@multiplicand 0003                           l111 6DAE  
                         l200 6C60                           l206 6CA2                           l207 6C80  
                         l143 757C                           l160 7550                           l225 6BD2  
                         l209 6C82                           l170 6CE2                           l146 761E  
                         l147 7652                           l219 6BE6                           l164 6CC8  
                         l165 6CB4                           l149 766C                           l157 7500  
                         l166 6CC2                           l158 7516                           l159 755C  
                         l271 6F58                           l256 6E28                           l272 6F6C  
                         l257 6E00                           l197 6C74                           l701 6CFC  
                         l198 6C54                           l702 6CF4                           l624 710C  
                         l625 7100                           l705 6D14                           l634 701C  
                         l706 6D1E                           l635 7010                           l628 7140  
                         l629 714E                           l638 7044                           l590 6D4C  
                         l639 7052                           l680 743E                           l673 6E7C  
                         l594 71F4                           l691 6EC0                           l692 6EB8  
                         l596 722E                           l677 737C                           l597 726C  
                         l679 73D4                           l695 6EE0                           l696 6EEA  
                         u710 7020                           u800 6CD6                           u650 6BD6  
                         u730 6E20                           u820 6C86                           u740 6E48  
                         u900 6EC4                           u680 7110                           u737 6E16  
                         u930 6D00                           u747 6E3E                  _root_entries 004C  
                         prod 000FF3                           wreg 000FE8                    _TXSTA1bits 000FAC  
                        l2119 764A                          l2065 7574                          l1537 6BC6  
                        l1913 78D0                          l1909 78C6                          l1961 7AAA  
                        STR_1 7E46                          STR_2 7FF8                          STR_3 7FAC  
                        STR_4 7F77                          STR_5 7DEB                          STR_6 7FF8  
                        STR_7 7FBD                          STR_8 7F1B                          STR_9 7FD9  
                        u1110 7916                          u1210 7594                          u1150 7AE2  
                        u1240 7670                          u1065 7736                          u1075 7874  
                        _LATC 000F8B                   _SDcard_init 7560                 __CFG_FCMEN$ON 000000  
                        _main 6D6A                          _itoa 6D28                          _ltoa 6E50  
                        fsr0h 000FEA                          fsr1h 000FE2                          indf0 000FEF  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          _utoa 71EC  
               __CFG_BORV$190 000000                          prodh 000FF4                          prodl 000FF3  
                        start 0000                 __CFG_IESO$OFF 000000             _SDcard_read_block 7064  
         _SDcard_get_response 6CAC                  ___param_bank 000000            ?_SDcard_read_block 0006  
    SDcard_read_block@address 0006                  spi_send@data 0001              _file_update_size 7290  
               _rootdir_start 0040            spi_single_send@tmp 0001                         ?_main 0001  
         ??_SDcard_read_block 000A                         ?_itoa 0011                         STR_10 7FCC  
                       ?_ltoa 001B                         STR_11 7EFA                         STR_20 7F8A  
                       STR_12 7E6D                         STR_21 7FE5                         STR_13 7EB4  
                       STR_14 7FE5                         STR_22 7F4D                         STR_23 7F37  
                       STR_15 7ED7                         STR_16 7FE5                         STR_24 7F63  
                       STR_25 7FE5                         STR_17 7E91                         STR_18 7F9B  
                       STR_26 7E1B                         STR_19 7FE5                         STR_27 7FEF  
                       STR_28 7FF8               __end_of___lldiv 7160                         ?_utoa 0008  
             __end_of___llmod 7064               __end_of___lwdiv 6EF4               __end_of___lwmod 6D28  
            ?_spi_single_send 0001                         _TRISC 000F94    __end_of_SDcard_write_block 7560  
         ___lmul@multiplicand 0005          ?_SDcard_get_response 0001   __size_of_spi_single_receive 0010  
          __CFG_MCLRE$INTMCLR 000000                         _ultoa 736C                         tablat 000FF5  
                       utoa@c 0010                         utoa@v 000E                         status 000FD8  
   __end_of_SDcard_read_block 70DE                __CFG_FOSC$HSMP 000000               __initialization 6DB0  
                __end_of_main 6DB0                  __end_of_itoa 6D6A                  __end_of_ltoa 6EA2  
                __end_of_utoa 7290                        ??_main 0030                        ??_itoa 0017  
                      ??_ltoa 0023                        ??_utoa 000E           spi_single_send@data 0002  
               __activetblptr 000002         ??_SDcard_get_response 0001              ___llmod@dividend 0001  
                      ?_ultoa 000E                  ?_sector_open 0001                __CFG_WDTEN$OFF 000000  
                      _SPBRG1 000FAF          __size_of_file_append 0060          __size_of_file_create 054C  
                      _TXREG1 000FAD                        _SDdata 0076                __CFG_PWRTEN$ON 000000  
      _current_sector_address 003C                        ___lmul 6F48                        ___wmul 6C2C  
                   ??___lldiv 0009                     ??___llmod 0009                     ??___lwdiv 0005  
                   ??___lwmod 0005                        clear_0 6DD0                        clear_1 6DE2  
                      clear_2 6DEE                _cluster_number 0048                        itoa@cp 0017  
                __pdataCOMRAM 005D                        ltoa@cp 0023                  __mediumconst 7DEA  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
            __end_of_spi_init 6C2C              __end_of_spi_send 6C7E             spi_receive@length 0003  
                      ultoa@c 001A                        ultoa@v 0016                  ?_spi_receive 0001  
                  __accesstop 0060       __end_of__initialization 6DF4    __size_of_SDcard_read_block 007A  
               ___rparam_used 000001                __pcstackCOMRAM 0001   SDcard_get_response@response 0001  
               __end_of_ultoa 7462                spi_send@length 0003                       ??_ultoa 0016  
    __end_of_file_update_size 736C                    __pbssBANK0 0060                  ?_SDcard_init 0001  
             __CFG_PLLCFG$OFF 000000                  SDcard_init@b 0007                  SDcard_init@i 0006  
                     ?___lmul 0001                       ?___wmul 0001                ___lmul@product 0009  
               ?_sector_close 0001              _sectors_reserved 004E            __size_of_uart_init 0054  
          __size_of_uart_putc 000C            __size_of_uart_puts 0052             __CFG_PRICLKEN$OFF 000000  
                     _SPBRGH1 000FB0                       _SSP1BUF 000FC9          __size_of_sector_open 008C  
          _SDcard_write_block 7462                       __Hparam 0000                       __Lparam 0000  
            uart_init@BRG_val 0014           ?_SDcard_write_block 0006                     ?_spi_init 0001  
                   ?_spi_send 0001               __size_of___lmul 0056                    _part1_addr 0068  
                     ___lldiv 70DE               __size_of___wmul 0026                       ___llmod 6FFE  
                     ___lwdiv 6EA2                    _entry_addr 0046                       ___lwmod 6CE6  
                     __pcinit 6DB0                       __ramtop 0600                       __ptext0 6D6A  
                     __ptext1 6EF4                       __ptext2 6C08                       __ptext3 7692  
                     __ptext4 6C2C                       __ptext5 7290                       __ptext6 789E  
                     __ptext7 6D28                       __ptext8 71EC                       __ptext9 6CE6  
              ??_sector_close 000A    __end_of_spi_single_receive 6BE0                       _timeout 005D  
        ??_SDcard_write_block 000A          end_of_initialization 6DF4      __size_of_spi_single_send 0012  
                     itoa@buf 0011                       itoa@val 0013                 __Lmediumconst 7DEA  
           file_append@string 0025                       ltoa@buf 001B                       ltoa@val 001D  
        __size_of_spi_receive 002E             __end_of_uart_init 6F48             file_create@offset 002F  
             ___lldiv@divisor 0005             __end_of_uart_putc 6BD0             __end_of_uart_puts 6E50  
             ___lldiv@counter 000D                       postdec1 000FE5                    ??_spi_init 0001  
                     postinc0 000FEE                       postinc2 000FDE                    ??_spi_send 0005  
                     utoa@buf 0008                       utoa@val 000A                    _mount_disk 7692  
 __end_of_SDcard_get_response 6CE6                 _card_response 0052                     _TRISAbits 000F92  
                   _TRISCbits 000F94                 ??_file_append 0027                 ??_file_create 0027  
                   _SDcommand 0056                     _TXSTAbits 000FAC          __size_of_SDcard_init 0132  
                 spi_send@tmp 0005                __end_of___lmul 6F9E                __end_of___wmul 6C52  
               __pidataCOMRAM 6BC2               spi_receive@data 0001           start_initialization 6DB0  
          spi_init@speed_mode 0001             ?_file_update_size 0001     SDcard_write_block@address 0006  
             ___llmod@divisor 0005          __end_of_sector_close 6C08            ??_file_update_size 0025  
             ___llmod@counter 0009           __end_of_file_append 6FFE           __end_of_file_create 7DEA  
           ??_spi_single_send 0001                      ??___lmul 0009                      ??___wmul 0005  
                 ?_mount_disk 0001                 _datareg_start 0064                   __pbssBIGRAM 0076  
                 __pbssCOMRAM 0030                _current_sector 0054              ___lwdiv@dividend 0001  
             _sectors_cluster 005C                 __pmediumconst 7DEA                      ?___lldiv 0001  
                    ?___llmod 0001                      ?___lwdiv 0001                      ?___lwmod 0001  
           __size_of_spi_init 0024             __size_of_spi_send 002C              ___lwdiv@quotient 0005  
               ??_sector_open 0025                __size_of_ultoa 00F6                   _file_append 6F9E  
                 _file_create 789E                   _file_length 0038           __size_of_mount_disk 020C  
          _spi_single_receive 6BD0                   _FAT_address 0030                ___wmul@product 0005  
                    _LATCbits 000F8B                      _PIR1bits 000F9E           ?_spi_single_receive 0001  
                   _uart_init 6EF4                     _uart_putc 6BC4                     _uart_puts 6DFE  
              _address_buffer 006C                    uart_putc@c 0001                    uart_puts@s 0002  
           ___wmul@multiplier 0001              _file_create$1476 002B          ??_spi_single_receive 0001  
 __size_of_SDcard_write_block 00FE             ___lmul@multiplier 0001         __size_of_sector_close 0016  
               ??_spi_receive 0005                      __Hrparam 0000           __end_of_sector_open 71EC  
                    __Lrparam 0000            __CFG_BOREN$SBORDIS 000000                    ?_uart_init 000E  
                  ?_uart_putc 0001                    ?_uart_puts 0002              __size_of___lldiv 0082  
            __size_of___llmod 0066              __size_of___lwdiv 0052              __size_of___lwmod 0042  
                 _byte_number 0044                    _ANSELCbits 000F3A                  _sector_close 6BF2  
         file_create@filename 0025               ___lwdiv@divisor 0003  __size_of_SDcard_get_response 003A  
             ___lwdiv@counter 0007                      __ptext10 6EA2                      __ptext11 6F9E  
                    __ptext20 7462                      __ptext12 7160                      __ptext21 6BE0  
                    __ptext13 6E50                      __ptext22 7560                      __ptext14 736C  
                    __ptext23 6DFE                      __ptext15 6FFE                      __ptext24 6BC4  
                    __ptext16 70DE                      __ptext25 6C52                      __ptext17 6F48  
                    __ptext26 6C7E                      __ptext18 7064                      __ptext27 6CAC  
                    __ptext19 6BF2                      __ptext28 6BD0                  _SSP1CON1bits 000FC6  
             _spi_single_send 6BE0                 ??_SDcard_init 0006                 __size_of_main 0046  
               __size_of_itoa 0042                 __size_of_ltoa 0052                 __size_of_utoa 00A4  
                  _FAT_copies 0055           __end_of_spi_receive 6CAC                      _spi_init 6C08  
                    _spi_send 6C52                  ??_mount_disk 000D     __size_of_file_update_size 00DC  
                _SSP1STATbits 000FC7                   _no_response 0053          _start_sector_address 0060  
                    itoa@base 0015                     ultoa@base 0014                   _sectors_FAT 004A  
                 _sector_open 7160                   _sector_size 0050                      ltoa@base 0021  
            ___lwmod@dividend 0001             uart_init@baudrate 000E            __end_of_mount_disk 789E  
            ___lldiv@dividend 0001                    _RCSTA1bits 000FAB           __end_of_SDcard_init 7692  
                 ??_uart_init 0010                   ??_uart_putc 0001                   ??_uart_puts 0004  
                    utoa@base 000C                      ultoa@buf 000E                      ultoa@val 0010  
     __end_of_spi_single_send 6BF2              ___lldiv@quotient 0009               ___lwmod@divisor 0003  
             ___lwmod@counter 0005                  ?_file_append 0025                  ?_file_create 0025  
                 _spi_receive 6C7E  
