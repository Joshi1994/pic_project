

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Dec 23 10:22:10 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F767
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	text9,local,class=CODE,merge=1,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 1.44
    20                           ; Generated 14/09/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F767 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  008F                     	;# 
    95  0090                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0095                     	;# 
   101  0095                     	;# 
   102  0096                     	;# 
   103  0097                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009B                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  0105                     	;# 
   112  0109                     	;# 
   113  010C                     	;# 
   114  010D                     	;# 
   115  010E                     	;# 
   116  010F                     	;# 
   117  018C                     	;# 
   118  0037                     _RB7	set	55
   119  0036                     _RB6	set	54
   120  003F                     _RC7	set	63
   121  003E                     _RC6	set	62
   122  003D                     _RC5	set	61
   123  003C                     _RC4	set	60
   124  003B                     _RC3	set	59
   125  003A                     _RC2	set	58
   126  0039                     _RC1	set	57
   127  0038                     _RC0	set	56
   128  0087                     _TRISC	set	135
   129  0086                     _TRISB	set	134
   130                           
   131                           	psect	strings
   132  0003                     __pstrings:	
   133  0003                     stringtab:	
   134  0003                     __stringtab:	
   135  0003                     stringcode:	
   136                           ;	String table - string pointers are 1 byte each
   137                           
   138  0003                     stringdir:	
   139  0003  3000               	movlw	high stringdir
   140  0004  008A               	movwf	10
   141  0005  0804               	movf	4,w
   142  0006  0A84               	incf	4,f
   143  0007  0782               	addwf	2,f
   144  0008                     __stringbase:	
   145  0008  3400               	retlw	0
   146  0009                     __end_of__stringtab:	
   147  0009                     STR_1:	
   148  0009  3465               	retlw	101	;'e'
   149  000A  346C               	retlw	108	;'l'
   150  000B  3465               	retlw	101	;'e'
   151  000C  3463               	retlw	99	;'c'
   152  000D  3474               	retlw	116	;'t'
   153  000E  3472               	retlw	114	;'r'
   154  000F  346F               	retlw	111	;'o'
   155  0010  3453               	retlw	83	;'S'
   156  0011  346F               	retlw	111	;'o'
   157  0012  346D               	retlw	109	;'m'
   158  0013  3465               	retlw	101	;'e'
   159  0014  3420               	retlw	32	;' '
   160  0015  344C               	retlw	76	;'L'
   161  0016  3443               	retlw	67	;'C'
   162  0017  3444               	retlw	68	;'D'
   163  0018  3420               	retlw	32	;' '
   164  0019  3448               	retlw	72	;'H'
   165  001A  3465               	retlw	101	;'e'
   166  001B  346C               	retlw	108	;'l'
   167  001C  346C               	retlw	108	;'l'
   168  001D  346F               	retlw	111	;'o'
   169  001E  3420               	retlw	32	;' '
   170  001F  3457               	retlw	87	;'W'
   171  0020  346F               	retlw	111	;'o'
   172  0021  3472               	retlw	114	;'r'
   173  0022  346C               	retlw	108	;'l'
   174  0023  3464               	retlw	100	;'d'
   175  0024  3400               	retlw	0
   176                           
   177                           	psect	cinit
   178  07FC                     start_initialization:	
   179                           ; #config settings
   180                           
   181  07FC                     __initialization:	
   182  07FC                     end_of_initialization:	
   183                           ;End of C runtime variable initialization code
   184                           
   185  07FC                     __end_of__initialization:	
   186  07FC  0183               	clrf	3
   187  07FD  120A  118A  2F5E   	ljmp	_main	;jump to C main() function
   188                           
   189                           	psect	cstackCOMMON
   190  0070                     __pcstackCOMMON:	
   191  0070                     ?_Lcd8_Port:	
   192  0070                     ??_Lcd8_Port:	
   193                           ; 1 bytes @ 0x0
   194                           
   195  0070                     ?_Lcd8_Cmd:	
   196                           ; 1 bytes @ 0x0
   197                           
   198  0070                     ?_Lcd8_Init:	
   199                           ; 1 bytes @ 0x0
   200                           
   201  0070                     ?_Lcd8_Write_Char:	
   202                           ; 1 bytes @ 0x0
   203                           
   204  0070                     ?_Lcd8_Write_String:	
   205                           ; 1 bytes @ 0x0
   206                           
   207  0070                     ?_Lcd8_Shift_Right:	
   208                           ; 1 bytes @ 0x0
   209                           
   210  0070                     ?_Lcd8_Shift_Left:	
   211                           ; 1 bytes @ 0x0
   212                           
   213  0070                     ?_main:	
   214                           ; 1 bytes @ 0x0
   215                           
   216  0070                     ?_Lcd8_Clear:	
   217                           ; 1 bytes @ 0x0
   218                           
   219  0070                     Lcd8_Port@a:	
   220                           ; 2 bytes @ 0x0
   221                           
   222                           
   223                           ; 1 bytes @ 0x0
   224  0070                     	ds	1
   225  0071                     ??_Lcd8_Cmd:	
   226  0071                     ??_Lcd8_Write_Char:	
   227                           ; 1 bytes @ 0x1
   228                           
   229                           
   230                           ; 1 bytes @ 0x1
   231  0071                     	ds	2
   232  0073                     Lcd8_Cmd@a:	
   233  0073                     Lcd8_Write_Char@a:	
   234                           ; 1 bytes @ 0x3
   235                           
   236                           
   237                           ; 1 bytes @ 0x3
   238  0073                     	ds	1
   239  0074                     ??_Lcd8_Clear:	
   240  0074                     ?_Lcd8_Set_Cursor:	
   241                           ; 1 bytes @ 0x4
   242                           
   243  0074                     ??_Lcd8_Init:	
   244                           ; 1 bytes @ 0x4
   245                           
   246  0074                     ??_Lcd8_Write_String:	
   247                           ; 1 bytes @ 0x4
   248                           
   249  0074                     ??_Lcd8_Shift_Right:	
   250                           ; 1 bytes @ 0x4
   251                           
   252  0074                     ??_Lcd8_Shift_Left:	
   253                           ; 1 bytes @ 0x4
   254                           
   255  0074                     Lcd8_Set_Cursor@b:	
   256                           ; 1 bytes @ 0x4
   257                           
   258  0074                     Lcd8_Write_String@i:	
   259                           ; 1 bytes @ 0x4
   260                           
   261                           
   262                           ; 2 bytes @ 0x4
   263  0074                     	ds	1
   264  0075                     ??_Lcd8_Set_Cursor:	
   265  0075                     Lcd8_Set_Cursor@a:	
   266                           ; 1 bytes @ 0x5
   267                           
   268                           
   269                           ; 1 bytes @ 0x5
   270  0075                     	ds	1
   271  0076                     Lcd8_Write_String@a:	
   272                           
   273                           ; 1 bytes @ 0x6
   274  0076                     	ds	1
   275  0077                     ??_main:	
   276                           
   277                           ; 1 bytes @ 0x7
   278  0077                     	ds	3
   279  007A                     main@i:	
   280                           
   281                           ; 2 bytes @ 0xA
   282  007A                     	ds	2
   283                           
   284                           	psect	maintext
   285  075E                     __pmaintext:	
   286 ;;
   287 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   288 ;;
   289 ;; *************** function _main *****************
   290 ;; Defined at:
   291 ;;		line 20 in file "LCDCHECK.c"
   292 ;; Parameters:    Size  Location     Type
   293 ;;		None
   294 ;; Auto vars:     Size  Location     Type
   295 ;;  i               2   10[COMMON] int 
   296 ;; Return value:  Size  Location     Type
   297 ;;                  1    wreg      void 
   298 ;; Registers used:
   299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   300 ;; Tracked objects:
   301 ;;		On entry : B00/0
   302 ;;		On exit  : 0/0
   303 ;;		Unchanged: 0/0
   304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   305 ;;      Params:         0       0       0       0       0
   306 ;;      Locals:         2       0       0       0       0
   307 ;;      Temps:          3       0       0       0       0
   308 ;;      Totals:         5       0       0       0       0
   309 ;;Total ram usage:        5 bytes
   310 ;; Hardware stack levels required when called:    3
   311 ;; This function calls:
   312 ;;		_Lcd8_Clear
   313 ;;		_Lcd8_Init
   314 ;;		_Lcd8_Set_Cursor
   315 ;;		_Lcd8_Shift_Left
   316 ;;		_Lcd8_Shift_Right
   317 ;;		_Lcd8_Write_Char
   318 ;;		_Lcd8_Write_String
   319 ;; This function is called by:
   320 ;;		Startup code after reset
   321 ;; This function uses a non-reentrant model
   322 ;;
   323                           
   324                           
   325                           ;psect for function _main
   326  075E                     _main:	
   327                           
   328                           ;LCDCHECK.c: 22: int i;
   329                           ;LCDCHECK.c: 23: TRISB = 0x00;
   330                           
   331                           ;incstack = 0
   332                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   333  075E  1683               	bsf	3,5	;RP0=1, select bank1
   334  075F  1303               	bcf	3,6	;RP1=0, select bank1
   335  0760  0186               	clrf	6	;volatile
   336                           
   337                           ;LCDCHECK.c: 24: TRISC = 0x00;
   338  0761  0187               	clrf	7	;volatile
   339                           
   340                           ;LCDCHECK.c: 25: Lcd8_Init();
   341  0762  120A  118A  2712  120A  118A  	fcall	_Lcd8_Init
   342  0767                     l720:	
   343                           ;LCDCHECK.c: 26: while(1)
   344                           
   345                           
   346                           ;LCDCHECK.c: 27: {
   347                           ;LCDCHECK.c: 28: Lcd8_Set_Cursor(1,1);
   348  0767  01F4               	clrf	Lcd8_Set_Cursor@b
   349  0768  0AF4               	incf	Lcd8_Set_Cursor@b,f
   350  0769  3001               	movlw	1
   351  076A  120A  118A  267A  120A  118A  	fcall	_Lcd8_Set_Cursor
   352                           
   353                           ;LCDCHECK.c: 29: Lcd8_Write_String("electroSome LCD Hello World");
   354  076F  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   355  0770  120A  118A  26C2  120A  118A  	fcall	_Lcd8_Write_String
   356                           
   357                           ;LCDCHECK.c: 30: for(i=0;i<15;i++)
   358  0775  01FA               	clrf	main@i
   359  0776  01FB               	clrf	main@i+1
   360  0777  087B               	movf	main@i+1,w
   361  0778  3A80               	xorlw	128
   362  0779  00FF               	movwf	127
   363  077A  3080               	movlw	128
   364  077B  027F               	subwf	127,w
   365  077C  1D03               	skipz
   366  077D  2F80               	goto	u295
   367  077E  300F               	movlw	15
   368  077F  027A               	subwf	main@i,w
   369  0780                     u295:	
   370  0780  1803               	btfsc	3,0
   371  0781  2FA5               	goto	l738
   372  0782                     l730:	
   373                           
   374                           ;LCDCHECK.c: 31: {
   375                           ;LCDCHECK.c: 32: _delay((unsigned long)((100)*(8000000/4000.0)));
   376  0782  3002               	movlw	2
   377  0783  00F9               	movwf	??_main+2
   378  0784  3004               	movlw	4
   379  0785  00F8               	movwf	??_main+1
   380  0786  30BA               	movlw	186
   381  0787  00F7               	movwf	??_main
   382  0788                     u337:	
   383  0788  0BF7               	decfsz	??_main,f
   384  0789  2F88               	goto	u337
   385  078A  0BF8               	decfsz	??_main+1,f
   386  078B  2F88               	goto	u337
   387  078C  0BF9               	decfsz	??_main+2,f
   388  078D  2F88               	goto	u337
   389  078E  0000               	nop
   390                           
   391                           ;LCDCHECK.c: 33: Lcd8_Shift_Left();
   392  078F  120A  118A  2670  120A  118A  	fcall	_Lcd8_Shift_Left
   393  0794  3001               	movlw	1
   394  0795  07FA               	addwf	main@i,f
   395  0796  1803               	skipnc
   396  0797  0AFB               	incf	main@i+1,f
   397  0798  3000               	movlw	0
   398  0799  07FB               	addwf	main@i+1,f
   399  079A  087B               	movf	main@i+1,w
   400  079B  3A80               	xorlw	128
   401  079C  00FF               	movwf	127
   402  079D  3080               	movlw	128
   403  079E  027F               	subwf	127,w
   404  079F  1D03               	skipz
   405  07A0  2FA3               	goto	u305
   406  07A1  300F               	movlw	15
   407  07A2  027A               	subwf	main@i,w
   408  07A3                     u305:	
   409  07A3  1C03               	skipc
   410  07A4  2F82               	goto	l730
   411  07A5                     l738:	
   412                           
   413                           ;LCDCHECK.c: 34: }
   414                           ;LCDCHECK.c: 35: for(i=0;i<15;i++)
   415  07A5  01FA               	clrf	main@i
   416  07A6  01FB               	clrf	main@i+1
   417  07A7  087B               	movf	main@i+1,w
   418  07A8  3A80               	xorlw	128
   419  07A9  00FF               	movwf	127
   420  07AA  3080               	movlw	128
   421  07AB  027F               	subwf	127,w
   422  07AC  1D03               	skipz
   423  07AD  2FB0               	goto	u315
   424  07AE  300F               	movlw	15
   425  07AF  027A               	subwf	main@i,w
   426  07B0                     u315:	
   427  07B0  1803               	btfsc	3,0
   428  07B1  2FD5               	goto	l752
   429  07B2                     l744:	
   430                           
   431                           ;LCDCHECK.c: 36: {
   432                           ;LCDCHECK.c: 37: _delay((unsigned long)((100)*(8000000/4000.0)));
   433  07B2  3002               	movlw	2
   434  07B3  00F9               	movwf	??_main+2
   435  07B4  3004               	movlw	4
   436  07B5  00F8               	movwf	??_main+1
   437  07B6  30BA               	movlw	186
   438  07B7  00F7               	movwf	??_main
   439  07B8                     u347:	
   440  07B8  0BF7               	decfsz	??_main,f
   441  07B9  2FB8               	goto	u347
   442  07BA  0BF8               	decfsz	??_main+1,f
   443  07BB  2FB8               	goto	u347
   444  07BC  0BF9               	decfsz	??_main+2,f
   445  07BD  2FB8               	goto	u347
   446  07BE  0000               	nop
   447                           
   448                           ;LCDCHECK.c: 38: Lcd8_Shift_Right();
   449  07BF  120A  118A  2675  120A  118A  	fcall	_Lcd8_Shift_Right
   450  07C4  3001               	movlw	1
   451  07C5  07FA               	addwf	main@i,f
   452  07C6  1803               	skipnc
   453  07C7  0AFB               	incf	main@i+1,f
   454  07C8  3000               	movlw	0
   455  07C9  07FB               	addwf	main@i+1,f
   456  07CA  087B               	movf	main@i+1,w
   457  07CB  3A80               	xorlw	128
   458  07CC  00FF               	movwf	127
   459  07CD  3080               	movlw	128
   460  07CE  027F               	subwf	127,w
   461  07CF  1D03               	skipz
   462  07D0  2FD3               	goto	u325
   463  07D1  300F               	movlw	15
   464  07D2  027A               	subwf	main@i,w
   465  07D3                     u325:	
   466  07D3  1C03               	skipc
   467  07D4  2FB2               	goto	l744
   468  07D5                     l752:	
   469                           
   470                           ;LCDCHECK.c: 39: }
   471                           ;LCDCHECK.c: 40: Lcd8_Clear();
   472  07D5  120A  118A  266B  120A  118A  	fcall	_Lcd8_Clear
   473                           
   474                           ;LCDCHECK.c: 41: Lcd8_Set_Cursor(2,1);
   475  07DA  01F4               	clrf	Lcd8_Set_Cursor@b
   476  07DB  0AF4               	incf	Lcd8_Set_Cursor@b,f
   477  07DC  3002               	movlw	2
   478  07DD  120A  118A  267A  120A  118A  	fcall	_Lcd8_Set_Cursor
   479                           
   480                           ;LCDCHECK.c: 42: Lcd8_Write_Char('e');
   481  07E2  3065               	movlw	101
   482  07E3  120A  118A  26A8  120A  118A  	fcall	_Lcd8_Write_Char
   483                           
   484                           ;LCDCHECK.c: 43: Lcd8_Write_Char('S');
   485  07E8  3053               	movlw	83
   486  07E9  120A  118A  26A8  120A  118A  	fcall	_Lcd8_Write_Char
   487                           
   488                           ;LCDCHECK.c: 44: _delay((unsigned long)((2000)*(8000000/4000.0)));
   489  07EE  3015               	movlw	21
   490  07EF  00F9               	movwf	??_main+2
   491  07F0  304B               	movlw	75
   492  07F1  00F8               	movwf	??_main+1
   493  07F2  30BE               	movlw	190
   494  07F3  00F7               	movwf	??_main
   495  07F4                     u357:	
   496  07F4  0BF7               	decfsz	??_main,f
   497  07F5  2FF4               	goto	u357
   498  07F6  0BF8               	decfsz	??_main+1,f
   499  07F7  2FF4               	goto	u357
   500  07F8  0BF9               	decfsz	??_main+2,f
   501  07F9  2FF4               	goto	u357
   502  07FA  0000               	nop
   503  07FB  2F67               	goto	l720
   504  07FC                     __end_of_main:	
   505                           
   506                           	psect	text1
   507  06C2                     __ptext1:	
   508 ;; *************** function _Lcd8_Write_String *****************
   509 ;; Defined at:
   510 ;;		line 105 in file "lcd.h"
   511 ;; Parameters:    Size  Location     Type
   512 ;;  a               1    wreg     PTR unsigned char 
   513 ;;		 -> STR_1(28), 
   514 ;; Auto vars:     Size  Location     Type
   515 ;;  a               1    6[COMMON] PTR unsigned char 
   516 ;;		 -> STR_1(28), 
   517 ;;  i               2    4[COMMON] int 
   518 ;; Return value:  Size  Location     Type
   519 ;;                  1    wreg      void 
   520 ;; Registers used:
   521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   522 ;; Tracked objects:
   523 ;;		On entry : 0/0
   524 ;;		On exit  : 0/0
   525 ;;		Unchanged: 0/0
   526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   527 ;;      Params:         0       0       0       0       0
   528 ;;      Locals:         3       0       0       0       0
   529 ;;      Temps:          0       0       0       0       0
   530 ;;      Totals:         3       0       0       0       0
   531 ;;Total ram usage:        3 bytes
   532 ;; Hardware stack levels used:    1
   533 ;; Hardware stack levels required when called:    2
   534 ;; This function calls:
   535 ;;		_Lcd8_Write_Char
   536 ;; This function is called by:
   537 ;;		_main
   538 ;; This function uses a non-reentrant model
   539 ;;
   540                           
   541                           
   542                           ;psect for function _Lcd8_Write_String
   543  06C2                     _Lcd8_Write_String:	
   544                           
   545                           ;incstack = 0
   546                           ; Regs used in _Lcd8_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   547                           ;Lcd8_Write_String@a stored from wreg
   548  06C2  00F6               	movwf	Lcd8_Write_String@a
   549                           
   550                           ;lcd.h: 107: int i;
   551                           ;lcd.h: 108: for(i=0;a[i]!='\0';i++)
   552  06C3  01F4               	clrf	Lcd8_Write_String@i
   553  06C4  01F5               	clrf	Lcd8_Write_String@i+1
   554  06C5                     l714:	
   555  06C5  0874               	movf	Lcd8_Write_String@i,w
   556  06C6  0776               	addwf	Lcd8_Write_String@a,w
   557  06C7  0084               	movwf	4
   558  06C8  120A  118A  2003  120A  118A  	fcall	stringdir
   559  06CD  3A00               	xorlw	0
   560  06CE  1903               	btfsc	3,2
   561  06CF  0008               	return
   562                           
   563                           ;lcd.h: 109: Lcd8_Write_Char(a[i]);
   564  06D0  0874               	movf	Lcd8_Write_String@i,w
   565  06D1  0776               	addwf	Lcd8_Write_String@a,w
   566  06D2  0084               	movwf	4
   567  06D3  120A  118A  2003  120A  118A  	fcall	stringdir
   568  06D8  120A  118A  26A8  120A  118A  	fcall	_Lcd8_Write_Char
   569  06DD  3001               	movlw	1
   570  06DE  07F4               	addwf	Lcd8_Write_String@i,f
   571  06DF  1803               	skipnc
   572  06E0  0AF5               	incf	Lcd8_Write_String@i+1,f
   573  06E1  3000               	movlw	0
   574  06E2  07F5               	addwf	Lcd8_Write_String@i+1,f
   575  06E3  2EC5               	goto	l714
   576  06E4                     __end_of_Lcd8_Write_String:	
   577                           
   578                           	psect	text2
   579  06A8                     __ptext2:	
   580 ;; *************** function _Lcd8_Write_Char *****************
   581 ;; Defined at:
   582 ;;		line 96 in file "lcd.h"
   583 ;; Parameters:    Size  Location     Type
   584 ;;  a               1    wreg     unsigned char 
   585 ;; Auto vars:     Size  Location     Type
   586 ;;  a               1    3[COMMON] unsigned char 
   587 ;; Return value:  Size  Location     Type
   588 ;;                  1    wreg      void 
   589 ;; Registers used:
   590 ;;		wreg, status,2, status,0, pclath, cstack
   591 ;; Tracked objects:
   592 ;;		On entry : 0/0
   593 ;;		On exit  : 0/0
   594 ;;		Unchanged: 0/0
   595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   596 ;;      Params:         0       0       0       0       0
   597 ;;      Locals:         1       0       0       0       0
   598 ;;      Temps:          2       0       0       0       0
   599 ;;      Totals:         3       0       0       0       0
   600 ;;Total ram usage:        3 bytes
   601 ;; Hardware stack levels used:    1
   602 ;; Hardware stack levels required when called:    1
   603 ;; This function calls:
   604 ;;		_Lcd8_Port
   605 ;; This function is called by:
   606 ;;		_Lcd8_Write_String
   607 ;;		_main
   608 ;; This function uses a non-reentrant model
   609 ;;
   610                           
   611                           
   612                           ;psect for function _Lcd8_Write_Char
   613  06A8                     _Lcd8_Write_Char:	
   614                           
   615                           ;incstack = 0
   616                           ; Regs used in _Lcd8_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   617                           ;Lcd8_Write_Char@a stored from wreg
   618  06A8  00F3               	movwf	Lcd8_Write_Char@a
   619                           
   620                           ;lcd.h: 98: RB6 = 1;
   621  06A9  1283               	bcf	3,5	;RP0=0, select bank0
   622  06AA  1303               	bcf	3,6	;RP1=0, select bank0
   623  06AB  1706               	bsf	6,6	;volatile
   624                           
   625                           ;lcd.h: 99: Lcd8_Port(a);
   626  06AC  0873               	movf	Lcd8_Write_Char@a,w
   627  06AD  120A  118A  26E4  120A  118A  	fcall	_Lcd8_Port
   628                           
   629                           ;lcd.h: 100: RB7 = 1;
   630  06B2  1283               	bcf	3,5	;RP0=0, select bank0
   631  06B3  1303               	bcf	3,6	;RP1=0, select bank0
   632  06B4  1786               	bsf	6,7	;volatile
   633                           
   634                           ;lcd.h: 101: _delay((unsigned long)((4)*(8000000/4000.0)));
   635  06B5  300B               	movlw	11
   636  06B6  00F2               	movwf	??_Lcd8_Write_Char+1
   637  06B7  3062               	movlw	98
   638  06B8  00F1               	movwf	??_Lcd8_Write_Char
   639  06B9                     u367:	
   640  06B9  0BF1               	decfsz	??_Lcd8_Write_Char,f
   641  06BA  2EB9               	goto	u367
   642  06BB  0BF2               	decfsz	??_Lcd8_Write_Char+1,f
   643  06BC  2EB9               	goto	u367
   644  06BD  0000               	nop
   645                           
   646                           ;lcd.h: 102: RB7 = 0;
   647  06BE  1283               	bcf	3,5	;RP0=0, select bank0
   648  06BF  1303               	bcf	3,6	;RP1=0, select bank0
   649  06C0  1386               	bcf	6,7	;volatile
   650  06C1  0008               	return
   651  06C2                     __end_of_Lcd8_Write_Char:	
   652                           
   653                           	psect	text3
   654  0675                     __ptext3:	
   655 ;; *************** function _Lcd8_Shift_Right *****************
   656 ;; Defined at:
   657 ;;		line 112 in file "lcd.h"
   658 ;; Parameters:    Size  Location     Type
   659 ;;		None
   660 ;; Auto vars:     Size  Location     Type
   661 ;;		None
   662 ;; Return value:  Size  Location     Type
   663 ;;                  1    wreg      void 
   664 ;; Registers used:
   665 ;;		wreg, status,2, status,0, pclath, cstack
   666 ;; Tracked objects:
   667 ;;		On entry : 0/0
   668 ;;		On exit  : 0/0
   669 ;;		Unchanged: 0/0
   670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   671 ;;      Params:         0       0       0       0       0
   672 ;;      Locals:         0       0       0       0       0
   673 ;;      Temps:          0       0       0       0       0
   674 ;;      Totals:         0       0       0       0       0
   675 ;;Total ram usage:        0 bytes
   676 ;; Hardware stack levels used:    1
   677 ;; Hardware stack levels required when called:    2
   678 ;; This function calls:
   679 ;;		_Lcd8_Cmd
   680 ;; This function is called by:
   681 ;;		_main
   682 ;; This function uses a non-reentrant model
   683 ;;
   684                           
   685                           
   686                           ;psect for function _Lcd8_Shift_Right
   687  0675                     _Lcd8_Shift_Right:	
   688                           
   689                           ;lcd.h: 114: Lcd8_Cmd(0x1C);
   690                           
   691                           ;incstack = 0
   692                           ; Regs used in _Lcd8_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
   693  0675  301C               	movlw	28
   694  0676  120A  118A  268E   	fcall	_Lcd8_Cmd
   695  0679  0008               	return
   696  067A                     __end_of_Lcd8_Shift_Right:	
   697                           
   698                           	psect	text4
   699  0670                     __ptext4:	
   700 ;; *************** function _Lcd8_Shift_Left *****************
   701 ;; Defined at:
   702 ;;		line 117 in file "lcd.h"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;		None
   707 ;; Return value:  Size  Location     Type
   708 ;;                  1    wreg      void 
   709 ;; Registers used:
   710 ;;		wreg, status,2, status,0, pclath, cstack
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   716 ;;      Params:         0       0       0       0       0
   717 ;;      Locals:         0       0       0       0       0
   718 ;;      Temps:          0       0       0       0       0
   719 ;;      Totals:         0       0       0       0       0
   720 ;;Total ram usage:        0 bytes
   721 ;; Hardware stack levels used:    1
   722 ;; Hardware stack levels required when called:    2
   723 ;; This function calls:
   724 ;;		_Lcd8_Cmd
   725 ;; This function is called by:
   726 ;;		_main
   727 ;; This function uses a non-reentrant model
   728 ;;
   729                           
   730                           
   731                           ;psect for function _Lcd8_Shift_Left
   732  0670                     _Lcd8_Shift_Left:	
   733                           
   734                           ;lcd.h: 119: Lcd8_Cmd(0x18);
   735                           
   736                           ;incstack = 0
   737                           ; Regs used in _Lcd8_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
   738  0670  3018               	movlw	24
   739  0671  120A  118A  268E   	fcall	_Lcd8_Cmd
   740  0674  0008               	return
   741  0675                     __end_of_Lcd8_Shift_Left:	
   742                           
   743                           	psect	text5
   744  067A                     __ptext5:	
   745 ;; *************** function _Lcd8_Set_Cursor *****************
   746 ;; Defined at:
   747 ;;		line 70 in file "lcd.h"
   748 ;; Parameters:    Size  Location     Type
   749 ;;  a               1    wreg     unsigned char 
   750 ;;  b               1    4[COMMON] unsigned char 
   751 ;; Auto vars:     Size  Location     Type
   752 ;;  a               1    5[COMMON] unsigned char 
   753 ;; Return value:  Size  Location     Type
   754 ;;                  1    wreg      void 
   755 ;; Registers used:
   756 ;;		wreg, status,2, status,0, pclath, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   762 ;;      Params:         1       0       0       0       0
   763 ;;      Locals:         1       0       0       0       0
   764 ;;      Temps:          0       0       0       0       0
   765 ;;      Totals:         2       0       0       0       0
   766 ;;Total ram usage:        2 bytes
   767 ;; Hardware stack levels used:    1
   768 ;; Hardware stack levels required when called:    2
   769 ;; This function calls:
   770 ;;		_Lcd8_Cmd
   771 ;; This function is called by:
   772 ;;		_main
   773 ;; This function uses a non-reentrant model
   774 ;;
   775                           
   776                           
   777                           ;psect for function _Lcd8_Set_Cursor
   778  067A                     _Lcd8_Set_Cursor:	
   779                           
   780                           ;incstack = 0
   781                           ; Regs used in _Lcd8_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   782                           ;Lcd8_Set_Cursor@a stored from wreg
   783  067A  00F5               	movwf	Lcd8_Set_Cursor@a
   784                           
   785                           ;lcd.h: 72: if(a == 1)
   786  067B  0375               	decf	Lcd8_Set_Cursor@a,w
   787  067C  1D03               	btfss	3,2
   788  067D  2E84               	goto	l704
   789                           
   790                           ;lcd.h: 73: Lcd8_Cmd(0x80 + b);
   791  067E  0874               	movf	Lcd8_Set_Cursor@b,w
   792  067F  3E80               	addlw	128
   793  0680  120A  118A  268E   	fcall	_Lcd8_Cmd
   794  0683  0008               	return
   795  0684                     l704:	
   796                           
   797                           ;lcd.h: 74: else if(a == 2)
   798  0684  3002               	movlw	2
   799  0685  0675               	xorwf	Lcd8_Set_Cursor@a,w
   800  0686  1D03               	btfss	3,2
   801  0687  0008               	return
   802                           
   803                           ;lcd.h: 75: Lcd8_Cmd(0xC0 + b);
   804  0688  0874               	movf	Lcd8_Set_Cursor@b,w
   805  0689  3EC0               	addlw	192
   806  068A  120A  118A  268E   	fcall	_Lcd8_Cmd
   807  068D  0008               	return
   808  068E                     __end_of_Lcd8_Set_Cursor:	
   809                           
   810                           	psect	text6
   811  0712                     __ptext6:	
   812 ;; *************** function _Lcd8_Init *****************
   813 ;; Defined at:
   814 ;;		line 78 in file "lcd.h"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		wreg, status,2, status,0, pclath, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   828 ;;      Params:         0       0       0       0       0
   829 ;;      Locals:         0       0       0       0       0
   830 ;;      Temps:          2       0       0       0       0
   831 ;;      Totals:         2       0       0       0       0
   832 ;;Total ram usage:        2 bytes
   833 ;; Hardware stack levels used:    1
   834 ;; Hardware stack levels required when called:    2
   835 ;; This function calls:
   836 ;;		_Lcd8_Cmd
   837 ;;		_Lcd8_Port
   838 ;; This function is called by:
   839 ;;		_main
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           
   844                           ;psect for function _Lcd8_Init
   845  0712                     _Lcd8_Init:	
   846                           
   847                           ;lcd.h: 80: Lcd8_Port(0x00);
   848                           
   849                           ;incstack = 0
   850                           ; Regs used in _Lcd8_Init: [wreg+status,2+status,0+pclath+cstack]
   851  0712  3000               	movlw	0
   852  0713  120A  118A  26E4  120A  118A  	fcall	_Lcd8_Port
   853                           
   854                           ;lcd.h: 81: RB6 = 0;
   855  0718  1283               	bcf	3,5	;RP0=0, select bank0
   856  0719  1303               	bcf	3,6	;RP1=0, select bank0
   857  071A  1306               	bcf	6,6	;volatile
   858                           
   859                           ;lcd.h: 82: _delay((unsigned long)((25)*(8000000/4000.0)));
   860  071B  3041               	movlw	65
   861  071C  00F5               	movwf	??_Lcd8_Init+1
   862  071D  30EE               	movlw	238
   863  071E  00F4               	movwf	??_Lcd8_Init
   864  071F                     u377:	
   865  071F  0BF4               	decfsz	??_Lcd8_Init,f
   866  0720  2F1F               	goto	u377
   867  0721  0BF5               	decfsz	??_Lcd8_Init+1,f
   868  0722  2F1F               	goto	u377
   869  0723  0000               	nop
   870                           
   871                           ;lcd.h: 84: Lcd8_Cmd(0x30);
   872  0724  3030               	movlw	48
   873  0725  120A  118A  268E  120A  118A  	fcall	_Lcd8_Cmd
   874                           
   875                           ;lcd.h: 85: _delay((unsigned long)((5)*(8000000/4000.0)));
   876  072A  300D               	movlw	13
   877  072B  00F5               	movwf	??_Lcd8_Init+1
   878  072C  30FB               	movlw	251
   879  072D  00F4               	movwf	??_Lcd8_Init
   880  072E                     u387:	
   881  072E  0BF4               	decfsz	??_Lcd8_Init,f
   882  072F  2F2E               	goto	u387
   883  0730  0BF5               	decfsz	??_Lcd8_Init+1,f
   884  0731  2F2E               	goto	u387
   885  0732  2F33               	nop2
   886                           
   887                           ;lcd.h: 86: Lcd8_Cmd(0x30);
   888  0733  3030               	movlw	48
   889  0734  120A  118A  268E  120A  118A  	fcall	_Lcd8_Cmd
   890                           
   891                           ;lcd.h: 87: _delay((unsigned long)((15)*(8000000/4000.0)));
   892  0739  3027               	movlw	39
   893  073A  00F5               	movwf	??_Lcd8_Init+1
   894  073B  30F5               	movlw	245
   895  073C  00F4               	movwf	??_Lcd8_Init
   896  073D                     u397:	
   897  073D  0BF4               	decfsz	??_Lcd8_Init,f
   898  073E  2F3D               	goto	u397
   899  073F  0BF5               	decfsz	??_Lcd8_Init+1,f
   900  0740  2F3D               	goto	u397
   901                           
   902                           ;lcd.h: 88: Lcd8_Cmd(0x30);
   903  0741  3030               	movlw	48
   904  0742  120A  118A  268E  120A  118A  	fcall	_Lcd8_Cmd
   905                           
   906                           ;lcd.h: 90: Lcd8_Cmd(0x38);
   907  0747  3038               	movlw	56
   908  0748  120A  118A  268E  120A  118A  	fcall	_Lcd8_Cmd
   909                           
   910                           ;lcd.h: 91: Lcd8_Cmd(0x0C);
   911  074D  300C               	movlw	12
   912  074E  120A  118A  268E  120A  118A  	fcall	_Lcd8_Cmd
   913                           
   914                           ;lcd.h: 92: Lcd8_Cmd(0x01);
   915  0753  3001               	movlw	1
   916  0754  120A  118A  268E  120A  118A  	fcall	_Lcd8_Cmd
   917                           
   918                           ;lcd.h: 93: Lcd8_Cmd(0x06);
   919  0759  3006               	movlw	6
   920  075A  120A  118A  268E   	fcall	_Lcd8_Cmd
   921  075D  0008               	return
   922  075E                     __end_of_Lcd8_Init:	
   923                           
   924                           	psect	text7
   925  066B                     __ptext7:	
   926 ;; *************** function _Lcd8_Clear *****************
   927 ;; Defined at:
   928 ;;		line 65 in file "lcd.h"
   929 ;; Parameters:    Size  Location     Type
   930 ;;		None
   931 ;; Auto vars:     Size  Location     Type
   932 ;;		None
   933 ;; Return value:  Size  Location     Type
   934 ;;                  2   50[None  ] int 
   935 ;; Registers used:
   936 ;;		wreg, status,2, status,0, pclath, cstack
   937 ;; Tracked objects:
   938 ;;		On entry : 0/0
   939 ;;		On exit  : 0/0
   940 ;;		Unchanged: 0/0
   941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   942 ;;      Params:         0       0       0       0       0
   943 ;;      Locals:         0       0       0       0       0
   944 ;;      Temps:          0       0       0       0       0
   945 ;;      Totals:         0       0       0       0       0
   946 ;;Total ram usage:        0 bytes
   947 ;; Hardware stack levels used:    1
   948 ;; Hardware stack levels required when called:    2
   949 ;; This function calls:
   950 ;;		_Lcd8_Cmd
   951 ;; This function is called by:
   952 ;;		_main
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956                           
   957                           ;psect for function _Lcd8_Clear
   958  066B                     _Lcd8_Clear:	
   959                           
   960                           ;lcd.h: 67: Lcd8_Cmd(1);
   961                           
   962                           ;incstack = 0
   963                           ; Regs used in _Lcd8_Clear: [wreg+status,2+status,0+pclath+cstack]
   964  066B  3001               	movlw	1
   965  066C  120A  118A  268E   	fcall	_Lcd8_Cmd
   966  066F  0008               	return
   967  0670                     __end_of_Lcd8_Clear:	
   968                           
   969                           	psect	text8
   970  068E                     __ptext8:	
   971 ;; *************** function _Lcd8_Cmd *****************
   972 ;; Defined at:
   973 ;;		line 56 in file "lcd.h"
   974 ;; Parameters:    Size  Location     Type
   975 ;;  a               1    wreg     unsigned char 
   976 ;; Auto vars:     Size  Location     Type
   977 ;;  a               1    3[COMMON] unsigned char 
   978 ;; Return value:  Size  Location     Type
   979 ;;                  1    wreg      void 
   980 ;; Registers used:
   981 ;;		wreg, status,2, status,0, pclath, cstack
   982 ;; Tracked objects:
   983 ;;		On entry : 0/0
   984 ;;		On exit  : 0/0
   985 ;;		Unchanged: 0/0
   986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   987 ;;      Params:         0       0       0       0       0
   988 ;;      Locals:         1       0       0       0       0
   989 ;;      Temps:          2       0       0       0       0
   990 ;;      Totals:         3       0       0       0       0
   991 ;;Total ram usage:        3 bytes
   992 ;; Hardware stack levels used:    1
   993 ;; Hardware stack levels required when called:    1
   994 ;; This function calls:
   995 ;;		_Lcd8_Port
   996 ;; This function is called by:
   997 ;;		_Lcd8_Clear
   998 ;;		_Lcd8_Set_Cursor
   999 ;;		_Lcd8_Init
  1000 ;;		_Lcd8_Shift_Right
  1001 ;;		_Lcd8_Shift_Left
  1002 ;; This function uses a non-reentrant model
  1003 ;;
  1004                           
  1005                           
  1006                           ;psect for function _Lcd8_Cmd
  1007  068E                     _Lcd8_Cmd:	
  1008                           
  1009                           ;incstack = 0
  1010                           ; Regs used in _Lcd8_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1011                           ;Lcd8_Cmd@a stored from wreg
  1012  068E  00F3               	movwf	Lcd8_Cmd@a
  1013                           
  1014                           ;lcd.h: 58: RB6 = 0;
  1015  068F  1283               	bcf	3,5	;RP0=0, select bank0
  1016  0690  1303               	bcf	3,6	;RP1=0, select bank0
  1017  0691  1306               	bcf	6,6	;volatile
  1018                           
  1019                           ;lcd.h: 59: Lcd8_Port(a);
  1020  0692  0873               	movf	Lcd8_Cmd@a,w
  1021  0693  120A  118A  26E4  120A  118A  	fcall	_Lcd8_Port
  1022                           
  1023                           ;lcd.h: 60: RB7 = 1;
  1024  0698  1283               	bcf	3,5	;RP0=0, select bank0
  1025  0699  1303               	bcf	3,6	;RP1=0, select bank0
  1026  069A  1786               	bsf	6,7	;volatile
  1027                           
  1028                           ;lcd.h: 61: _delay((unsigned long)((5)*(8000000/4000.0)));
  1029  069B  300D               	movlw	13
  1030  069C  00F2               	movwf	??_Lcd8_Cmd+1
  1031  069D  30FB               	movlw	251
  1032  069E  00F1               	movwf	??_Lcd8_Cmd
  1033  069F                     u407:	
  1034  069F  0BF1               	decfsz	??_Lcd8_Cmd,f
  1035  06A0  2E9F               	goto	u407
  1036  06A1  0BF2               	decfsz	??_Lcd8_Cmd+1,f
  1037  06A2  2E9F               	goto	u407
  1038  06A3  2EA4               	nop2
  1039                           
  1040                           ;lcd.h: 62: RB7 = 0;
  1041  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  1042  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  1043  06A6  1386               	bcf	6,7	;volatile
  1044  06A7  0008               	return
  1045  06A8                     __end_of_Lcd8_Cmd:	
  1046                           
  1047                           	psect	text9
  1048  06E4                     __ptext9:	
  1049 ;; *************** function _Lcd8_Port *****************
  1050 ;; Defined at:
  1051 ;;		line 14 in file "lcd.h"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;  a               1    wreg     unsigned char 
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;  a               1    0[COMMON] unsigned char 
  1056 ;; Return value:  Size  Location     Type
  1057 ;;                  1    wreg      void 
  1058 ;; Registers used:
  1059 ;;		wreg
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1065 ;;      Params:         0       0       0       0       0
  1066 ;;      Locals:         1       0       0       0       0
  1067 ;;      Temps:          0       0       0       0       0
  1068 ;;      Totals:         1       0       0       0       0
  1069 ;;Total ram usage:        1 bytes
  1070 ;; Hardware stack levels used:    1
  1071 ;; This function calls:
  1072 ;;		Nothing
  1073 ;; This function is called by:
  1074 ;;		_Lcd8_Cmd
  1075 ;;		_Lcd8_Init
  1076 ;;		_Lcd8_Write_Char
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           
  1081                           ;psect for function _Lcd8_Port
  1082  06E4                     _Lcd8_Port:	
  1083                           
  1084                           ;incstack = 0
  1085                           ; Regs used in _Lcd8_Port: [wreg]
  1086                           ;Lcd8_Port@a stored from wreg
  1087  06E4  00F0               	movwf	Lcd8_Port@a
  1088                           
  1089                           ;lcd.h: 16: if(a & 1)
  1090  06E5  1C70               	btfss	Lcd8_Port@a,0
  1091  06E6  2EEB               	goto	l29
  1092                           
  1093                           ;lcd.h: 17: RC0 = 1;
  1094  06E7  1283               	bcf	3,5	;RP0=0, select bank0
  1095  06E8  1303               	bcf	3,6	;RP1=0, select bank0
  1096  06E9  1407               	bsf	7,0	;volatile
  1097  06EA  2EEE               	goto	l30
  1098  06EB                     l29:	
  1099                           
  1100                           ;lcd.h: 18: else
  1101                           ;lcd.h: 19: RC0 = 0;
  1102  06EB  1283               	bcf	3,5	;RP0=0, select bank0
  1103  06EC  1303               	bcf	3,6	;RP1=0, select bank0
  1104  06ED  1007               	bcf	7,0	;volatile
  1105  06EE                     l30:	
  1106                           
  1107                           ;lcd.h: 21: if(a & 2)
  1108  06EE  1CF0               	btfss	Lcd8_Port@a,1
  1109  06EF  2EF2               	goto	l31
  1110                           
  1111                           ;lcd.h: 22: RC1 = 1;
  1112  06F0  1487               	bsf	7,1	;volatile
  1113  06F1  2EF3               	goto	l32
  1114  06F2                     l31:	
  1115                           
  1116                           ;lcd.h: 23: else
  1117                           ;lcd.h: 24: RC1 = 0;
  1118  06F2  1087               	bcf	7,1	;volatile
  1119  06F3                     l32:	
  1120                           
  1121                           ;lcd.h: 26: if(a & 4)
  1122  06F3  1D70               	btfss	Lcd8_Port@a,2
  1123  06F4  2EF7               	goto	l33
  1124                           
  1125                           ;lcd.h: 27: RC2 = 1;
  1126  06F5  1507               	bsf	7,2	;volatile
  1127  06F6  2EF8               	goto	l34
  1128  06F7                     l33:	
  1129                           
  1130                           ;lcd.h: 28: else
  1131                           ;lcd.h: 29: RC2 = 0;
  1132  06F7  1107               	bcf	7,2	;volatile
  1133  06F8                     l34:	
  1134                           
  1135                           ;lcd.h: 31: if(a & 8)
  1136  06F8  1DF0               	btfss	Lcd8_Port@a,3
  1137  06F9  2EFC               	goto	l35
  1138                           
  1139                           ;lcd.h: 32: RC3 = 1;
  1140  06FA  1587               	bsf	7,3	;volatile
  1141  06FB  2EFD               	goto	l36
  1142  06FC                     l35:	
  1143                           
  1144                           ;lcd.h: 33: else
  1145                           ;lcd.h: 34: RC3 = 0;
  1146  06FC  1187               	bcf	7,3	;volatile
  1147  06FD                     l36:	
  1148                           
  1149                           ;lcd.h: 36: if(a & 16)
  1150  06FD  1E70               	btfss	Lcd8_Port@a,4
  1151  06FE  2F01               	goto	l37
  1152                           
  1153                           ;lcd.h: 37: RC4 = 1;
  1154  06FF  1607               	bsf	7,4	;volatile
  1155  0700  2F02               	goto	l38
  1156  0701                     l37:	
  1157                           
  1158                           ;lcd.h: 38: else
  1159                           ;lcd.h: 39: RC4 = 0;
  1160  0701  1207               	bcf	7,4	;volatile
  1161  0702                     l38:	
  1162                           
  1163                           ;lcd.h: 41: if(a & 32)
  1164  0702  1EF0               	btfss	Lcd8_Port@a,5
  1165  0703  2F06               	goto	l39
  1166                           
  1167                           ;lcd.h: 42: RC5 = 1;
  1168  0704  1687               	bsf	7,5	;volatile
  1169  0705  2F07               	goto	l40
  1170  0706                     l39:	
  1171                           
  1172                           ;lcd.h: 43: else
  1173                           ;lcd.h: 44: RC5 = 0;
  1174  0706  1287               	bcf	7,5	;volatile
  1175  0707                     l40:	
  1176                           
  1177                           ;lcd.h: 46: if(a & 64)
  1178  0707  1F70               	btfss	Lcd8_Port@a,6
  1179  0708  2F0B               	goto	l41
  1180                           
  1181                           ;lcd.h: 47: RC6 = 1;
  1182  0709  1707               	bsf	7,6	;volatile
  1183  070A  2F0C               	goto	l42
  1184  070B                     l41:	
  1185                           
  1186                           ;lcd.h: 48: else
  1187                           ;lcd.h: 49: RC6 = 0;
  1188  070B  1307               	bcf	7,6	;volatile
  1189  070C                     l42:	
  1190                           
  1191                           ;lcd.h: 51: if(a & 128)
  1192  070C  1FF0               	btfss	Lcd8_Port@a,7
  1193  070D  2F10               	goto	l43
  1194                           
  1195                           ;lcd.h: 52: RC7 = 1;
  1196  070E  1787               	bsf	7,7	;volatile
  1197  070F  0008               	return
  1198  0710                     l43:	
  1199                           
  1200                           ;lcd.h: 53: else
  1201                           ;lcd.h: 54: RC7 = 0;
  1202  0710  1387               	bcf	7,7	;volatile
  1203  0711  0008               	return
  1204  0712                     __end_of_Lcd8_Port:	
  1205  007E                     btemp	set	126	;btemp
  1206  007E                     wtemp0	set	126


Data Sizes:
    Strings     28
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd8_Write_String@a	PTR unsigned char  size(1) Largest target is 28
		 -> STR_1(CODE[28]), 


Critical Paths under _main in COMMON

    _main->_Lcd8_Write_String
    _Lcd8_Write_String->_Lcd8_Write_Char
    _Lcd8_Write_Char->_Lcd8_Port
    _Lcd8_Shift_Right->_Lcd8_Cmd
    _Lcd8_Shift_Left->_Lcd8_Cmd
    _Lcd8_Set_Cursor->_Lcd8_Cmd
    _Lcd8_Init->_Lcd8_Cmd
    _Lcd8_Clear->_Lcd8_Cmd
    _Lcd8_Cmd->_Lcd8_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    1468
                                              7 COMMON     5     5      0
                         _Lcd8_Clear
                          _Lcd8_Init
                    _Lcd8_Set_Cursor
                    _Lcd8_Shift_Left
                   _Lcd8_Shift_Right
                    _Lcd8_Write_Char
                  _Lcd8_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd8_Write_String                                    3     3      0     252
                                              4 COMMON     3     3      0
                    _Lcd8_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd8_Write_Char                                      3     3      0     135
                                              1 COMMON     3     3      0
                          _Lcd8_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd8_Shift_Right                                     0     0      0     135
                           _Lcd8_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd8_Shift_Left                                      0     0      0     135
                           _Lcd8_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd8_Set_Cursor                                      2     1      1     329
                                              4 COMMON     2     1      1
                           _Lcd8_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd8_Init                                            2     2      0     255
                                              4 COMMON     2     2      0
                           _Lcd8_Cmd
                          _Lcd8_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd8_Clear                                           0     0      0     135
                           _Lcd8_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd8_Cmd                                             3     3      0     135
                                              1 COMMON     3     3      0
                          _Lcd8_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd8_Port                                            1     1      0     120
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd8_Clear
     _Lcd8_Cmd
       _Lcd8_Port
   _Lcd8_Init
     _Lcd8_Cmd
       _Lcd8_Port
     _Lcd8_Port
   _Lcd8_Set_Cursor
     _Lcd8_Cmd
       _Lcd8_Port
   _Lcd8_Shift_Left
     _Lcd8_Cmd
       _Lcd8_Port
   _Lcd8_Shift_Right
     _Lcd8_Cmd
       _Lcd8_Port
   _Lcd8_Write_Char
     _Lcd8_Port
   _Lcd8_Write_String
     _Lcd8_Write_Char
       _Lcd8_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
DATA                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITBANK3            60      0       0       9        0.0%
BANK3               60      0       0      10        0.0%
BITBANK2            60      0       0      11        0.0%
BANK2               60      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Dec 23 10:22:10 2017

                         pc 0002                          l30 06EE                          l31 06F2  
                        l40 0707                          l32 06F3                          l41 070B  
                        l33 06F7                          l42 070C                          l34 06F8  
                        l43 0710                          l35 06FC                          l36 06FD  
                        l37 0701                          l29 06EB                          l38 0702  
                        l39 0706                          fsr 0004                         l704 0684  
                       l720 0767                         l714 06C5                         l730 0782  
                       l752 07D5                         l744 07B2                         l738 07A5  
                       _RC0 0038                         _RC1 0039                         _RC2 003A  
                       _RC3 003B                         _RC4 003C                         _RB6 0036  
                       _RC5 003D                         _RB7 0037                         _RC6 003E  
                       _RC7 003F                         u305 07A3                         u315 07B0  
                       u325 07D3                         u407 069F                         u337 0788  
                       u347 07B8                         u357 07F4                         u367 06B9  
                       u295 0780                         u377 071F                         u387 072E  
                       u397 073D                         fsr0 0004                  _Lcd8_Clear 066B  
                      STR_1 0009                        _main 075E           ??_Lcd8_Set_Cursor 0075  
                      btemp 007E                        start 0000           ??_Lcd8_Shift_Left 0074  
                     ?_main 0070                       _TRISB 0086                       _TRISC 0087  
                     main@i 007A                       pclath 000A                       status 0003  
          __end_of_Lcd8_Cmd 06A8                       wtemp0 007E           ?_Lcd8_Shift_Right 0070  
        ??_Lcd8_Shift_Right 0074             __initialization 07FC                __end_of_main 07FC  
        __size_of_Lcd8_Init 004C          __size_of_Lcd8_Port 002E           ??_Lcd8_Write_Char 0071  
                    ??_main 0077                 ?_Lcd8_Clear 0070           __end_of_Lcd8_Init 075E  
         __end_of_Lcd8_Port 0712     __end_of__initialization 07FC              __pcstackCOMMON 0070  
       __size_of_Lcd8_Clear 0005                   ?_Lcd8_Cmd 0070             _Lcd8_Set_Cursor 067A  
           _Lcd8_Shift_Left 0670                  __pmaintext 075E            Lcd8_Set_Cursor@a 0075  
          Lcd8_Set_Cursor@b 0074                  ??_Lcd8_Cmd 0071                  __stringtab 0003  
           _Lcd8_Write_Char 06A8     __end_of_Lcd8_Set_Cursor 068E                     __ptext1 06C2  
                   __ptext2 06A8                     __ptext3 0675                     __ptext4 0670  
                   __ptext5 067A                     __ptext6 0712                     __ptext7 066B  
                   __ptext8 068E                     __ptext9 06E4   __size_of_Lcd8_Shift_Right 0005  
   __end_of_Lcd8_Shift_Left 0675                   Lcd8_Cmd@a 0073                ??_Lcd8_Clear 0074  
      end_of_initialization 07FC          __end_of_Lcd8_Clear 0670     __end_of_Lcd8_Write_Char 06C2  
                 _Lcd8_Init 0712                   _Lcd8_Port 06E4            ?_Lcd8_Set_Cursor 0074  
          ?_Lcd8_Shift_Left 0070         start_initialization 07FC           __size_of_Lcd8_Cmd 001A  
         _Lcd8_Write_String 06C2          ?_Lcd8_Write_String 0070                  ?_Lcd8_Init 0070  
                ?_Lcd8_Port 0070         ??_Lcd8_Write_String 0074            _Lcd8_Shift_Right 0675  
                 ___latbits 0002   __end_of_Lcd8_Write_String 06E4            ?_Lcd8_Write_Char 0070  
                 __pstrings 0003                 ??_Lcd8_Init 0074            Lcd8_Write_Char@a 0073  
               ??_Lcd8_Port 0070                 __stringbase 0008                    _Lcd8_Cmd 068E  
__size_of_Lcd8_Write_String 0022          __end_of__stringtab 0009    __end_of_Lcd8_Shift_Right 067A  
             __size_of_main 009E                  Lcd8_Port@a 0070    __size_of_Lcd8_Set_Cursor 0014  
  __size_of_Lcd8_Shift_Left 0005                   stringcode 0003          Lcd8_Write_String@a 0076  
        Lcd8_Write_String@i 0074                    stringdir 0003                    stringtab 0003  
  __size_of_Lcd8_Write_Char 001A  
