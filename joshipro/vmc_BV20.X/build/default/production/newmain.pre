
# 1 "newmain.c"

# 26 "C:\Program Files\Microchip\xc8\v1.44\include\htc.h"
extern const char __xc8_OPTIM_SPEED;

extern double __fpnormalize(double);


# 13 "C:\Program Files\Microchip\xc8\v1.44\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 50 "C:\Program Files\Microchip\xc8\v1.44\include\pic16f887.h"
extern volatile unsigned char INDF @ 0x000;

asm("INDF equ 00h");




extern volatile unsigned char TMR0 @ 0x001;

asm("TMR0 equ 01h");




extern volatile unsigned char PCL @ 0x002;

asm("PCL equ 02h");




extern volatile unsigned char STATUS @ 0x003;

asm("STATUS equ 03h");


typedef union {
struct {
unsigned C :1;
unsigned DC :1;
unsigned Z :1;
unsigned nPD :1;
unsigned nTO :1;
unsigned RP :2;
unsigned IRP :1;
};
struct {
unsigned :5;
unsigned RP0 :1;
unsigned RP1 :1;
};
struct {
unsigned CARRY :1;
unsigned :1;
unsigned ZERO :1;
};
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits @ 0x003;

# 157
extern volatile unsigned char FSR @ 0x004;

asm("FSR equ 04h");




extern volatile unsigned char PORTA @ 0x005;

asm("PORTA equ 05h");


typedef union {
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
unsigned RA6 :1;
unsigned RA7 :1;
};
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits @ 0x005;

# 226
extern volatile unsigned char PORTB @ 0x006;

asm("PORTB equ 06h");


typedef union {
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits @ 0x006;

# 288
extern volatile unsigned char PORTC @ 0x007;

asm("PORTC equ 07h");


typedef union {
struct {
unsigned RC0 :1;
unsigned RC1 :1;
unsigned RC2 :1;
unsigned RC3 :1;
unsigned RC4 :1;
unsigned RC5 :1;
unsigned RC6 :1;
unsigned RC7 :1;
};
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits @ 0x007;

# 350
extern volatile unsigned char PORTD @ 0x008;

asm("PORTD equ 08h");


typedef union {
struct {
unsigned RD0 :1;
unsigned RD1 :1;
unsigned RD2 :1;
unsigned RD3 :1;
unsigned RD4 :1;
unsigned RD5 :1;
unsigned RD6 :1;
unsigned RD7 :1;
};
} PORTDbits_t;
extern volatile PORTDbits_t PORTDbits @ 0x008;

# 412
extern volatile unsigned char PORTE @ 0x009;

asm("PORTE equ 09h");


typedef union {
struct {
unsigned RE0 :1;
unsigned RE1 :1;
unsigned RE2 :1;
unsigned RE3 :1;
};
} PORTEbits_t;
extern volatile PORTEbits_t PORTEbits @ 0x009;

# 450
extern volatile unsigned char PCLATH @ 0x00A;

asm("PCLATH equ 0Ah");




extern volatile unsigned char INTCON @ 0x00B;

asm("INTCON equ 0Bh");


typedef union {
struct {
unsigned RBIF :1;
unsigned INTF :1;
unsigned T0IF :1;
unsigned RBIE :1;
unsigned INTE :1;
unsigned T0IE :1;
unsigned PEIE :1;
unsigned GIE :1;
};
struct {
unsigned :2;
unsigned TMR0IF :1;
unsigned :2;
unsigned TMR0IE :1;
};
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits @ 0x00B;

# 535
extern volatile unsigned char PIR1 @ 0x00C;

asm("PIR1 equ 0Ch");


typedef union {
struct {
unsigned TMR1IF :1;
unsigned TMR2IF :1;
unsigned CCP1IF :1;
unsigned SSPIF :1;
unsigned TXIF :1;
unsigned RCIF :1;
unsigned ADIF :1;
};
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits @ 0x00C;

# 591
extern volatile unsigned char PIR2 @ 0x00D;

asm("PIR2 equ 0Dh");


typedef union {
struct {
unsigned CCP2IF :1;
unsigned :1;
unsigned ULPWUIF :1;
unsigned BCLIF :1;
unsigned EEIF :1;
unsigned C1IF :1;
unsigned C2IF :1;
unsigned OSFIF :1;
};
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits @ 0x00D;

# 648
extern volatile unsigned short TMR1 @ 0x00E;

asm("TMR1 equ 0Eh");




extern volatile unsigned char TMR1L @ 0x00E;

asm("TMR1L equ 0Eh");




extern volatile unsigned char TMR1H @ 0x00F;

asm("TMR1H equ 0Fh");




extern volatile unsigned char T1CON @ 0x010;

asm("T1CON equ 010h");


typedef union {
struct {
unsigned TMR1ON :1;
unsigned TMR1CS :1;
unsigned nT1SYNC :1;
unsigned T1OSCEN :1;
unsigned T1CKPS :2;
unsigned TMR1GE :1;
unsigned T1GINV :1;
};
struct {
unsigned :2;
unsigned T1INSYNC :1;
unsigned :1;
unsigned T1CKPS0 :1;
unsigned T1CKPS1 :1;
unsigned :1;
unsigned T1GIV :1;
};
struct {
unsigned :2;
unsigned T1SYNC :1;
};
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits @ 0x010;

# 763
extern volatile unsigned char TMR2 @ 0x011;

asm("TMR2 equ 011h");




extern volatile unsigned char T2CON @ 0x012;

asm("T2CON equ 012h");


typedef union {
struct {
unsigned T2CKPS :2;
unsigned TMR2ON :1;
unsigned TOUTPS :4;
};
struct {
unsigned T2CKPS0 :1;
unsigned T2CKPS1 :1;
unsigned :1;
unsigned TOUTPS0 :1;
unsigned TOUTPS1 :1;
unsigned TOUTPS2 :1;
unsigned TOUTPS3 :1;
};
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits @ 0x012;

# 841
extern volatile unsigned char SSPBUF @ 0x013;

asm("SSPBUF equ 013h");




extern volatile unsigned char SSPCON @ 0x014;

asm("SSPCON equ 014h");


typedef union {
struct {
unsigned SSPM :4;
unsigned CKP :1;
unsigned SSPEN :1;
unsigned SSPOV :1;
unsigned WCOL :1;
};
struct {
unsigned SSPM0 :1;
unsigned SSPM1 :1;
unsigned SSPM2 :1;
unsigned SSPM3 :1;
};
} SSPCONbits_t;
extern volatile SSPCONbits_t SSPCONbits @ 0x014;

# 918
extern volatile unsigned short CCPR1 @ 0x015;

asm("CCPR1 equ 015h");




extern volatile unsigned char CCPR1L @ 0x015;

asm("CCPR1L equ 015h");




extern volatile unsigned char CCPR1H @ 0x016;

asm("CCPR1H equ 016h");




extern volatile unsigned char CCP1CON @ 0x017;

asm("CCP1CON equ 017h");


typedef union {
struct {
unsigned CCP1M :4;
unsigned DC1B :2;
unsigned P1M :2;
};
struct {
unsigned CCP1M0 :1;
unsigned CCP1M1 :1;
unsigned CCP1M2 :1;
unsigned CCP1M3 :1;
unsigned DC1B0 :1;
unsigned DC1B1 :1;
unsigned P1M0 :1;
unsigned P1M1 :1;
};
struct {
unsigned :4;
unsigned CCP1Y :1;
unsigned CCP1X :1;
};
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits @ 0x017;

# 1036
extern volatile unsigned char RCSTA @ 0x018;

asm("RCSTA equ 018h");


typedef union {
struct {
unsigned RX9D :1;
unsigned OERR :1;
unsigned FERR :1;
unsigned ADDEN :1;
unsigned CREN :1;
unsigned SREN :1;
unsigned RX9 :1;
unsigned SPEN :1;
};
struct {
unsigned RCD8 :1;
unsigned :5;
unsigned RC9 :1;
};
struct {
unsigned :6;
unsigned nRC8 :1;
};
struct {
unsigned :6;
unsigned RC8_9 :1;
};
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits @ 0x018;

# 1131
extern volatile unsigned char TXREG @ 0x019;

asm("TXREG equ 019h");




extern volatile unsigned char RCREG @ 0x01A;

asm("RCREG equ 01Ah");




extern volatile unsigned short CCPR2 @ 0x01B;

asm("CCPR2 equ 01Bh");




extern volatile unsigned char CCPR2L @ 0x01B;

asm("CCPR2L equ 01Bh");




extern volatile unsigned char CCPR2H @ 0x01C;

asm("CCPR2H equ 01Ch");




extern volatile unsigned char CCP2CON @ 0x01D;

asm("CCP2CON equ 01Dh");


typedef union {
struct {
unsigned CCP2M :4;
unsigned DC2B0 :1;
unsigned DC2B1 :1;
};
struct {
unsigned CCP2M0 :1;
unsigned CCP2M1 :1;
unsigned CCP2M2 :1;
unsigned CCP2M3 :1;
unsigned CCP2Y :1;
unsigned CCP2X :1;
};
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits @ 0x01D;

# 1236
extern volatile unsigned char ADRESH @ 0x01E;

asm("ADRESH equ 01Eh");




extern volatile unsigned char ADCON0 @ 0x01F;

asm("ADCON0 equ 01Fh");


typedef union {
struct {
unsigned ADON :1;
unsigned GO_nDONE :1;
unsigned CHS :4;
unsigned ADCS :2;
};
struct {
unsigned :1;
unsigned GO :1;
unsigned CHS0 :1;
unsigned CHS1 :1;
unsigned CHS2 :1;
unsigned CHS3 :1;
unsigned ADCS0 :1;
unsigned ADCS1 :1;
};
struct {
unsigned :1;
unsigned nDONE :1;
};
struct {
unsigned :1;
unsigned GO_DONE :1;
};
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits @ 0x01F;

# 1344
extern volatile unsigned char OPTION_REG @ 0x081;

asm("OPTION_REG equ 081h");


typedef union {
struct {
unsigned PS :3;
unsigned PSA :1;
unsigned T0SE :1;
unsigned T0CS :1;
unsigned INTEDG :1;
unsigned nRBPU :1;
};
struct {
unsigned PS0 :1;
unsigned PS1 :1;
unsigned PS2 :1;
};
} OPTION_REGbits_t;
extern volatile OPTION_REGbits_t OPTION_REGbits @ 0x081;

# 1414
extern volatile unsigned char TRISA @ 0x085;

asm("TRISA equ 085h");


typedef union {
struct {
unsigned TRISA0 :1;
unsigned TRISA1 :1;
unsigned TRISA2 :1;
unsigned TRISA3 :1;
unsigned TRISA4 :1;
unsigned TRISA5 :1;
unsigned TRISA6 :1;
unsigned TRISA7 :1;
};
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits @ 0x085;

# 1476
extern volatile unsigned char TRISB @ 0x086;

asm("TRISB equ 086h");


typedef union {
struct {
unsigned TRISB0 :1;
unsigned TRISB1 :1;
unsigned TRISB2 :1;
unsigned TRISB3 :1;
unsigned TRISB4 :1;
unsigned TRISB5 :1;
unsigned TRISB6 :1;
unsigned TRISB7 :1;
};
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits @ 0x086;

# 1538
extern volatile unsigned char TRISC @ 0x087;

asm("TRISC equ 087h");


typedef union {
struct {
unsigned TRISC0 :1;
unsigned TRISC1 :1;
unsigned TRISC2 :1;
unsigned TRISC3 :1;
unsigned TRISC4 :1;
unsigned TRISC5 :1;
unsigned TRISC6 :1;
unsigned TRISC7 :1;
};
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits @ 0x087;

# 1600
extern volatile unsigned char TRISD @ 0x088;

asm("TRISD equ 088h");


typedef union {
struct {
unsigned TRISD0 :1;
unsigned TRISD1 :1;
unsigned TRISD2 :1;
unsigned TRISD3 :1;
unsigned TRISD4 :1;
unsigned TRISD5 :1;
unsigned TRISD6 :1;
unsigned TRISD7 :1;
};
} TRISDbits_t;
extern volatile TRISDbits_t TRISDbits @ 0x088;

# 1662
extern volatile unsigned char TRISE @ 0x089;

asm("TRISE equ 089h");


typedef union {
struct {
unsigned TRISE0 :1;
unsigned TRISE1 :1;
unsigned TRISE2 :1;
unsigned TRISE3 :1;
};
} TRISEbits_t;
extern volatile TRISEbits_t TRISEbits @ 0x089;

# 1700
extern volatile unsigned char PIE1 @ 0x08C;

asm("PIE1 equ 08Ch");


typedef union {
struct {
unsigned TMR1IE :1;
unsigned TMR2IE :1;
unsigned CCP1IE :1;
unsigned SSPIE :1;
unsigned TXIE :1;
unsigned RCIE :1;
unsigned ADIE :1;
};
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits @ 0x08C;

# 1756
extern volatile unsigned char PIE2 @ 0x08D;

asm("PIE2 equ 08Dh");


typedef union {
struct {
unsigned CCP2IE :1;
unsigned :1;
unsigned ULPWUIE :1;
unsigned BCLIE :1;
unsigned EEIE :1;
unsigned C1IE :1;
unsigned C2IE :1;
unsigned OSFIE :1;
};
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits @ 0x08D;

# 1813
extern volatile unsigned char PCON @ 0x08E;

asm("PCON equ 08Eh");


typedef union {
struct {
unsigned nBOR :1;
unsigned nPOR :1;
unsigned :2;
unsigned SBOREN :1;
unsigned ULPWUE :1;
};
struct {
unsigned nBO :1;
};
} PCONbits_t;
extern volatile PCONbits_t PCONbits @ 0x08E;

# 1860
extern volatile unsigned char OSCCON @ 0x08F;

asm("OSCCON equ 08Fh");


typedef union {
struct {
unsigned SCS :1;
unsigned LTS :1;
unsigned HTS :1;
unsigned OSTS :1;
unsigned IRCF :3;
};
struct {
unsigned :4;
unsigned IRCF0 :1;
unsigned IRCF1 :1;
unsigned IRCF2 :1;
};
} OSCCONbits_t;
extern volatile OSCCONbits_t OSCCONbits @ 0x08F;

# 1925
extern volatile unsigned char OSCTUNE @ 0x090;

asm("OSCTUNE equ 090h");


typedef union {
struct {
unsigned TUN :5;
};
struct {
unsigned TUN0 :1;
unsigned TUN1 :1;
unsigned TUN2 :1;
unsigned TUN3 :1;
unsigned TUN4 :1;
};
} OSCTUNEbits_t;
extern volatile OSCTUNEbits_t OSCTUNEbits @ 0x090;

# 1977
extern volatile unsigned char SSPCON2 @ 0x091;

asm("SSPCON2 equ 091h");


typedef union {
struct {
unsigned SEN :1;
unsigned RSEN :1;
unsigned PEN :1;
unsigned RCEN :1;
unsigned ACKEN :1;
unsigned ACKDT :1;
unsigned ACKSTAT :1;
unsigned GCEN :1;
};
} SSPCON2bits_t;
extern volatile SSPCON2bits_t SSPCON2bits @ 0x091;

# 2039
extern volatile unsigned char PR2 @ 0x092;

asm("PR2 equ 092h");




extern volatile unsigned char SSPADD @ 0x093;

asm("SSPADD equ 093h");




extern volatile unsigned char SSPMSK @ 0x093;

asm("SSPMSK equ 093h");


extern volatile unsigned char MSK @ 0x093;

asm("MSK equ 093h");


typedef union {
struct {
unsigned MSK0 :1;
unsigned MSK1 :1;
unsigned MSK2 :1;
unsigned MSK3 :1;
unsigned MSK4 :1;
unsigned MSK5 :1;
unsigned MSK6 :1;
unsigned MSK7 :1;
};
} SSPMSKbits_t;
extern volatile SSPMSKbits_t SSPMSKbits @ 0x093;

# 2118
typedef union {
struct {
unsigned MSK0 :1;
unsigned MSK1 :1;
unsigned MSK2 :1;
unsigned MSK3 :1;
unsigned MSK4 :1;
unsigned MSK5 :1;
unsigned MSK6 :1;
unsigned MSK7 :1;
};
} MSKbits_t;
extern volatile MSKbits_t MSKbits @ 0x093;

# 2175
extern volatile unsigned char SSPSTAT @ 0x094;

asm("SSPSTAT equ 094h");


typedef union {
struct {
unsigned BF :1;
unsigned UA :1;
unsigned R_nW :1;
unsigned S :1;
unsigned P :1;
unsigned D_nA :1;
unsigned CKE :1;
unsigned SMP :1;
};
struct {
unsigned :2;
unsigned R :1;
unsigned :2;
unsigned D :1;
};
struct {
unsigned :2;
unsigned I2C_READ :1;
unsigned I2C_START :1;
unsigned I2C_STOP :1;
unsigned I2C_DATA :1;
};
struct {
unsigned :2;
unsigned nW :1;
unsigned :2;
unsigned nA :1;
};
struct {
unsigned :2;
unsigned nWRITE :1;
unsigned :2;
unsigned nADDRESS :1;
};
struct {
unsigned :2;
unsigned R_W :1;
unsigned :2;
unsigned D_A :1;
};
struct {
unsigned :2;
unsigned READ_WRITE :1;
unsigned :2;
unsigned DATA_ADDRESS :1;
};
} SSPSTATbits_t;
extern volatile SSPSTATbits_t SSPSTATbits @ 0x094;

# 2344
extern volatile unsigned char WPUB @ 0x095;

asm("WPUB equ 095h");


typedef union {
struct {
unsigned WPUB :8;
};
struct {
unsigned WPUB0 :1;
unsigned WPUB1 :1;
unsigned WPUB2 :1;
unsigned WPUB3 :1;
unsigned WPUB4 :1;
unsigned WPUB5 :1;
unsigned WPUB6 :1;
unsigned WPUB7 :1;
};
} WPUBbits_t;
extern volatile WPUBbits_t WPUBbits @ 0x095;

# 2414
extern volatile unsigned char IOCB @ 0x096;

asm("IOCB equ 096h");


typedef union {
struct {
unsigned IOCB :8;
};
struct {
unsigned IOCB0 :1;
unsigned IOCB1 :1;
unsigned IOCB2 :1;
unsigned IOCB3 :1;
unsigned IOCB4 :1;
unsigned IOCB5 :1;
unsigned IOCB6 :1;
unsigned IOCB7 :1;
};
} IOCBbits_t;
extern volatile IOCBbits_t IOCBbits @ 0x096;

# 2484
extern volatile unsigned char VRCON @ 0x097;

asm("VRCON equ 097h");


typedef union {
struct {
unsigned VR :4;
unsigned VRSS :1;
unsigned VRR :1;
unsigned VROE :1;
unsigned VREN :1;
};
struct {
unsigned VR0 :1;
unsigned VR1 :1;
unsigned VR2 :1;
unsigned VR3 :1;
};
} VRCONbits_t;
extern volatile VRCONbits_t VRCONbits @ 0x097;

# 2554
extern volatile unsigned char TXSTA @ 0x098;

asm("TXSTA equ 098h");


typedef union {
struct {
unsigned TX9D :1;
unsigned TRMT :1;
unsigned BRGH :1;
unsigned SENDB :1;
unsigned SYNC :1;
unsigned TXEN :1;
unsigned TX9 :1;
unsigned CSRC :1;
};
struct {
unsigned TXD8 :1;
unsigned :5;
unsigned nTX8 :1;
};
struct {
unsigned :6;
unsigned TX8_9 :1;
};
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits @ 0x098;

# 2640
extern volatile unsigned char SPBRG @ 0x099;

asm("SPBRG equ 099h");


typedef union {
struct {
unsigned BRG0 :1;
unsigned BRG1 :1;
unsigned BRG2 :1;
unsigned BRG3 :1;
unsigned BRG4 :1;
unsigned BRG5 :1;
unsigned BRG6 :1;
unsigned BRG7 :1;
};
} SPBRGbits_t;
extern volatile SPBRGbits_t SPBRGbits @ 0x099;

# 2702
extern volatile unsigned char SPBRGH @ 0x09A;

asm("SPBRGH equ 09Ah");


typedef union {
struct {
unsigned SPBRGH :8;
};
struct {
unsigned BRG8 :1;
unsigned BRG9 :1;
unsigned BRG10 :1;
unsigned BRG11 :1;
unsigned BRG12 :1;
unsigned BRG13 :1;
unsigned BRG14 :1;
unsigned BRG15 :1;
};
} SPBRGHbits_t;
extern volatile SPBRGHbits_t SPBRGHbits @ 0x09A;

# 2772
extern volatile unsigned char PWM1CON @ 0x09B;

asm("PWM1CON equ 09Bh");


typedef union {
struct {
unsigned PDC :7;
unsigned PRSEN :1;
};
struct {
unsigned PDC0 :1;
unsigned PDC1 :1;
unsigned PDC2 :1;
unsigned PDC3 :1;
unsigned PDC4 :1;
unsigned PDC5 :1;
unsigned PDC6 :1;
};
} PWM1CONbits_t;
extern volatile PWM1CONbits_t PWM1CONbits @ 0x09B;

# 2842
extern volatile unsigned char ECCPAS @ 0x09C;

asm("ECCPAS equ 09Ch");


typedef union {
struct {
unsigned PSSBD :2;
unsigned PSSAC :2;
unsigned ECCPAS :3;
unsigned ECCPASE :1;
};
struct {
unsigned PSSBD0 :1;
unsigned PSSBD1 :1;
unsigned PSSAC0 :1;
unsigned PSSAC1 :1;
unsigned ECCPAS0 :1;
unsigned ECCPAS1 :1;
unsigned ECCPAS2 :1;
};
} ECCPASbits_t;
extern volatile ECCPASbits_t ECCPASbits @ 0x09C;

# 2924
extern volatile unsigned char PSTRCON @ 0x09D;

asm("PSTRCON equ 09Dh");


typedef union {
struct {
unsigned STRA :1;
unsigned STRB :1;
unsigned STRC :1;
unsigned STRD :1;
unsigned STRSYNC :1;
};
} PSTRCONbits_t;
extern volatile PSTRCONbits_t PSTRCONbits @ 0x09D;

# 2968
extern volatile unsigned char ADRESL @ 0x09E;

asm("ADRESL equ 09Eh");




extern volatile unsigned char ADCON1 @ 0x09F;

asm("ADCON1 equ 09Fh");


typedef union {
struct {
unsigned :4;
unsigned VCFG0 :1;
unsigned VCFG1 :1;
unsigned :1;
unsigned ADFM :1;
};
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits @ 0x09F;

# 3009
extern volatile unsigned char WDTCON @ 0x105;

asm("WDTCON equ 0105h");


typedef union {
struct {
unsigned SWDTEN :1;
unsigned WDTPS :4;
};
struct {
unsigned :1;
unsigned WDTPS0 :1;
unsigned WDTPS1 :1;
unsigned WDTPS2 :1;
unsigned WDTPS3 :1;
};
} WDTCONbits_t;
extern volatile WDTCONbits_t WDTCONbits @ 0x105;

# 3062
extern volatile unsigned char CM1CON0 @ 0x107;

asm("CM1CON0 equ 0107h");


typedef union {
struct {
unsigned C1CH :2;
unsigned C1R :1;
unsigned :1;
unsigned C1POL :1;
unsigned C1OE :1;
unsigned C1OUT :1;
unsigned C1ON :1;
};
struct {
unsigned C1CH0 :1;
unsigned C1CH1 :1;
};
} CM1CON0bits_t;
extern volatile CM1CON0bits_t CM1CON0bits @ 0x107;

# 3127
extern volatile unsigned char CM2CON0 @ 0x108;

asm("CM2CON0 equ 0108h");


typedef union {
struct {
unsigned C2CH :2;
unsigned C2R :1;
unsigned :1;
unsigned C2POL :1;
unsigned C2OE :1;
unsigned C2OUT :1;
unsigned C2ON :1;
};
struct {
unsigned C2CH0 :1;
unsigned C2CH1 :1;
};
} CM2CON0bits_t;
extern volatile CM2CON0bits_t CM2CON0bits @ 0x108;

# 3192
extern volatile unsigned char CM2CON1 @ 0x109;

asm("CM2CON1 equ 0109h");


typedef union {
struct {
unsigned C2SYNC :1;
unsigned T1GSS :1;
unsigned :2;
unsigned C2RSEL :1;
unsigned C1RSEL :1;
unsigned MC2OUT :1;
unsigned MC1OUT :1;
};
} CM2CON1bits_t;
extern volatile CM2CON1bits_t CM2CON1bits @ 0x109;

# 3243
extern volatile unsigned char EEDATA @ 0x10C;

asm("EEDATA equ 010Ch");


extern volatile unsigned char EEDAT @ 0x10C;

asm("EEDAT equ 010Ch");




extern volatile unsigned char EEADR @ 0x10D;

asm("EEADR equ 010Dh");




extern volatile unsigned char EEDATH @ 0x10E;

asm("EEDATH equ 010Eh");




extern volatile unsigned char EEADRH @ 0x10F;

asm("EEADRH equ 010Fh");




extern volatile unsigned char SRCON @ 0x185;

asm("SRCON equ 0185h");


typedef union {
struct {
unsigned FVREN :1;
unsigned :1;
unsigned PULSR :1;
unsigned PULSS :1;
unsigned C2REN :1;
unsigned C1SEN :1;
unsigned SR0 :1;
unsigned SR1 :1;
};
} SRCONbits_t;
extern volatile SRCONbits_t SRCONbits @ 0x185;

# 3333
extern volatile unsigned char BAUDCTL @ 0x187;

asm("BAUDCTL equ 0187h");


typedef union {
struct {
unsigned ABDEN :1;
unsigned WUE :1;
unsigned :1;
unsigned BRG16 :1;
unsigned SCKP :1;
unsigned :1;
unsigned RCIDL :1;
unsigned ABDOVF :1;
};
} BAUDCTLbits_t;
extern volatile BAUDCTLbits_t BAUDCTLbits @ 0x187;

# 3385
extern volatile unsigned char ANSEL @ 0x188;

asm("ANSEL equ 0188h");


typedef union {
struct {
unsigned ANS0 :1;
unsigned ANS1 :1;
unsigned ANS2 :1;
unsigned ANS3 :1;
unsigned ANS4 :1;
unsigned ANS5 :1;
unsigned ANS6 :1;
unsigned ANS7 :1;
};
} ANSELbits_t;
extern volatile ANSELbits_t ANSELbits @ 0x188;

# 3447
extern volatile unsigned char ANSELH @ 0x189;

asm("ANSELH equ 0189h");


typedef union {
struct {
unsigned ANS8 :1;
unsigned ANS9 :1;
unsigned ANS10 :1;
unsigned ANS11 :1;
unsigned ANS12 :1;
unsigned ANS13 :1;
};
} ANSELHbits_t;
extern volatile ANSELHbits_t ANSELHbits @ 0x189;

# 3497
extern volatile unsigned char EECON1 @ 0x18C;

asm("EECON1 equ 018Ch");


typedef union {
struct {
unsigned RD :1;
unsigned WR :1;
unsigned WREN :1;
unsigned WRERR :1;
unsigned :3;
unsigned EEPGD :1;
};
} EECON1bits_t;
extern volatile EECON1bits_t EECON1bits @ 0x18C;

# 3542
extern volatile unsigned char EECON2 @ 0x18D;

asm("EECON2 equ 018Dh");

# 3554
extern volatile __bit ABDEN @ (((unsigned) &BAUDCTL)*8) + 0;

extern volatile __bit ABDOVF @ (((unsigned) &BAUDCTL)*8) + 7;

extern volatile __bit ACKDT @ (((unsigned) &SSPCON2)*8) + 5;

extern volatile __bit ACKEN @ (((unsigned) &SSPCON2)*8) + 4;

extern volatile __bit ACKSTAT @ (((unsigned) &SSPCON2)*8) + 6;

extern volatile __bit ADCS0 @ (((unsigned) &ADCON0)*8) + 6;

extern volatile __bit ADCS1 @ (((unsigned) &ADCON0)*8) + 7;

extern volatile __bit ADDEN @ (((unsigned) &RCSTA)*8) + 3;

extern volatile __bit ADFM @ (((unsigned) &ADCON1)*8) + 7;

extern volatile __bit ADIE @ (((unsigned) &PIE1)*8) + 6;

extern volatile __bit ADIF @ (((unsigned) &PIR1)*8) + 6;

extern volatile __bit ADON @ (((unsigned) &ADCON0)*8) + 0;

extern volatile __bit ANS0 @ (((unsigned) &ANSEL)*8) + 0;

extern volatile __bit ANS1 @ (((unsigned) &ANSEL)*8) + 1;

extern volatile __bit ANS10 @ (((unsigned) &ANSELH)*8) + 2;

extern volatile __bit ANS11 @ (((unsigned) &ANSELH)*8) + 3;

extern volatile __bit ANS12 @ (((unsigned) &ANSELH)*8) + 4;

extern volatile __bit ANS13 @ (((unsigned) &ANSELH)*8) + 5;

extern volatile __bit ANS2 @ (((unsigned) &ANSEL)*8) + 2;

extern volatile __bit ANS3 @ (((unsigned) &ANSEL)*8) + 3;

extern volatile __bit ANS4 @ (((unsigned) &ANSEL)*8) + 4;

extern volatile __bit ANS5 @ (((unsigned) &ANSEL)*8) + 5;

extern volatile __bit ANS6 @ (((unsigned) &ANSEL)*8) + 6;

extern volatile __bit ANS7 @ (((unsigned) &ANSEL)*8) + 7;

extern volatile __bit ANS8 @ (((unsigned) &ANSELH)*8) + 0;

extern volatile __bit ANS9 @ (((unsigned) &ANSELH)*8) + 1;

extern volatile __bit BCLIE @ (((unsigned) &PIE2)*8) + 3;

extern volatile __bit BCLIF @ (((unsigned) &PIR2)*8) + 3;

extern volatile __bit BF @ (((unsigned) &SSPSTAT)*8) + 0;

extern volatile __bit BRG0 @ (((unsigned) &SPBRG)*8) + 0;

extern volatile __bit BRG1 @ (((unsigned) &SPBRG)*8) + 1;

extern volatile __bit BRG10 @ (((unsigned) &SPBRGH)*8) + 2;

extern volatile __bit BRG11 @ (((unsigned) &SPBRGH)*8) + 3;

extern volatile __bit BRG12 @ (((unsigned) &SPBRGH)*8) + 4;

extern volatile __bit BRG13 @ (((unsigned) &SPBRGH)*8) + 5;

extern volatile __bit BRG14 @ (((unsigned) &SPBRGH)*8) + 6;

extern volatile __bit BRG15 @ (((unsigned) &SPBRGH)*8) + 7;

extern volatile __bit BRG16 @ (((unsigned) &BAUDCTL)*8) + 3;

extern volatile __bit BRG2 @ (((unsigned) &SPBRG)*8) + 2;

extern volatile __bit BRG3 @ (((unsigned) &SPBRG)*8) + 3;

extern volatile __bit BRG4 @ (((unsigned) &SPBRG)*8) + 4;

extern volatile __bit BRG5 @ (((unsigned) &SPBRG)*8) + 5;

extern volatile __bit BRG6 @ (((unsigned) &SPBRG)*8) + 6;

extern volatile __bit BRG7 @ (((unsigned) &SPBRG)*8) + 7;

extern volatile __bit BRG8 @ (((unsigned) &SPBRGH)*8) + 0;

extern volatile __bit BRG9 @ (((unsigned) &SPBRGH)*8) + 1;

extern volatile __bit BRGH @ (((unsigned) &TXSTA)*8) + 2;

extern volatile __bit C1CH0 @ (((unsigned) &CM1CON0)*8) + 0;

extern volatile __bit C1CH1 @ (((unsigned) &CM1CON0)*8) + 1;

extern volatile __bit C1IE @ (((unsigned) &PIE2)*8) + 5;

extern volatile __bit C1IF @ (((unsigned) &PIR2)*8) + 5;

extern volatile __bit C1OE @ (((unsigned) &CM1CON0)*8) + 5;

extern volatile __bit C1ON @ (((unsigned) &CM1CON0)*8) + 7;

extern volatile __bit C1OUT @ (((unsigned) &CM1CON0)*8) + 6;

extern volatile __bit C1POL @ (((unsigned) &CM1CON0)*8) + 4;

extern volatile __bit C1R @ (((unsigned) &CM1CON0)*8) + 2;

extern volatile __bit C1RSEL @ (((unsigned) &CM2CON1)*8) + 5;

extern volatile __bit C1SEN @ (((unsigned) &SRCON)*8) + 5;

extern volatile __bit C2CH0 @ (((unsigned) &CM2CON0)*8) + 0;

extern volatile __bit C2CH1 @ (((unsigned) &CM2CON0)*8) + 1;

extern volatile __bit C2IE @ (((unsigned) &PIE2)*8) + 6;

extern volatile __bit C2IF @ (((unsigned) &PIR2)*8) + 6;

extern volatile __bit C2OE @ (((unsigned) &CM2CON0)*8) + 5;

extern volatile __bit C2ON @ (((unsigned) &CM2CON0)*8) + 7;

extern volatile __bit C2OUT @ (((unsigned) &CM2CON0)*8) + 6;

extern volatile __bit C2POL @ (((unsigned) &CM2CON0)*8) + 4;

extern volatile __bit C2R @ (((unsigned) &CM2CON0)*8) + 2;

extern volatile __bit C2REN @ (((unsigned) &SRCON)*8) + 4;

extern volatile __bit C2RSEL @ (((unsigned) &CM2CON1)*8) + 4;

extern volatile __bit C2SYNC @ (((unsigned) &CM2CON1)*8) + 0;

extern volatile __bit CARRY @ (((unsigned) &STATUS)*8) + 0;

extern volatile __bit CCP1IE @ (((unsigned) &PIE1)*8) + 2;

extern volatile __bit CCP1IF @ (((unsigned) &PIR1)*8) + 2;

extern volatile __bit CCP1M0 @ (((unsigned) &CCP1CON)*8) + 0;

extern volatile __bit CCP1M1 @ (((unsigned) &CCP1CON)*8) + 1;

extern volatile __bit CCP1M2 @ (((unsigned) &CCP1CON)*8) + 2;

extern volatile __bit CCP1M3 @ (((unsigned) &CCP1CON)*8) + 3;

extern volatile __bit CCP1X @ (((unsigned) &CCP1CON)*8) + 5;

extern volatile __bit CCP1Y @ (((unsigned) &CCP1CON)*8) + 4;

extern volatile __bit CCP2IE @ (((unsigned) &PIE2)*8) + 0;

extern volatile __bit CCP2IF @ (((unsigned) &PIR2)*8) + 0;

extern volatile __bit CCP2M0 @ (((unsigned) &CCP2CON)*8) + 0;

extern volatile __bit CCP2M1 @ (((unsigned) &CCP2CON)*8) + 1;

extern volatile __bit CCP2M2 @ (((unsigned) &CCP2CON)*8) + 2;

extern volatile __bit CCP2M3 @ (((unsigned) &CCP2CON)*8) + 3;

extern volatile __bit CCP2X @ (((unsigned) &CCP2CON)*8) + 5;

extern volatile __bit CCP2Y @ (((unsigned) &CCP2CON)*8) + 4;

extern volatile __bit CHS0 @ (((unsigned) &ADCON0)*8) + 2;

extern volatile __bit CHS1 @ (((unsigned) &ADCON0)*8) + 3;

extern volatile __bit CHS2 @ (((unsigned) &ADCON0)*8) + 4;

extern volatile __bit CHS3 @ (((unsigned) &ADCON0)*8) + 5;

extern volatile __bit CKE @ (((unsigned) &SSPSTAT)*8) + 6;

extern volatile __bit CKP @ (((unsigned) &SSPCON)*8) + 4;

extern volatile __bit CREN @ (((unsigned) &RCSTA)*8) + 4;

extern volatile __bit CSRC @ (((unsigned) &TXSTA)*8) + 7;

extern volatile __bit DATA_ADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit DC @ (((unsigned) &STATUS)*8) + 1;

extern volatile __bit DC1B0 @ (((unsigned) &CCP1CON)*8) + 4;

extern volatile __bit DC1B1 @ (((unsigned) &CCP1CON)*8) + 5;

extern volatile __bit DC2B0 @ (((unsigned) &CCP2CON)*8) + 4;

extern volatile __bit DC2B1 @ (((unsigned) &CCP2CON)*8) + 5;

extern volatile __bit D_A @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit D_nA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit ECCPAS0 @ (((unsigned) &ECCPAS)*8) + 4;

extern volatile __bit ECCPAS1 @ (((unsigned) &ECCPAS)*8) + 5;

extern volatile __bit ECCPAS2 @ (((unsigned) &ECCPAS)*8) + 6;

extern volatile __bit ECCPASE @ (((unsigned) &ECCPAS)*8) + 7;

extern volatile __bit EEIE @ (((unsigned) &PIE2)*8) + 4;

extern volatile __bit EEIF @ (((unsigned) &PIR2)*8) + 4;

extern volatile __bit EEPGD @ (((unsigned) &EECON1)*8) + 7;

extern volatile __bit FERR @ (((unsigned) &RCSTA)*8) + 2;

extern volatile __bit FVREN @ (((unsigned) &SRCON)*8) + 0;

extern volatile __bit GCEN @ (((unsigned) &SSPCON2)*8) + 7;

extern volatile __bit GIE @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit GO @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit GO_DONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit GO_nDONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit HTS @ (((unsigned) &OSCCON)*8) + 2;

extern volatile __bit I2C_DATA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit I2C_READ @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit I2C_START @ (((unsigned) &SSPSTAT)*8) + 3;

extern volatile __bit I2C_STOP @ (((unsigned) &SSPSTAT)*8) + 4;

extern volatile __bit INTE @ (((unsigned) &INTCON)*8) + 4;

extern volatile __bit INTEDG @ (((unsigned) &OPTION_REG)*8) + 6;

extern volatile __bit INTF @ (((unsigned) &INTCON)*8) + 1;

extern volatile __bit IOCB0 @ (((unsigned) &IOCB)*8) + 0;

extern volatile __bit IOCB1 @ (((unsigned) &IOCB)*8) + 1;

extern volatile __bit IOCB2 @ (((unsigned) &IOCB)*8) + 2;

extern volatile __bit IOCB3 @ (((unsigned) &IOCB)*8) + 3;

extern volatile __bit IOCB4 @ (((unsigned) &IOCB)*8) + 4;

extern volatile __bit IOCB5 @ (((unsigned) &IOCB)*8) + 5;

extern volatile __bit IOCB6 @ (((unsigned) &IOCB)*8) + 6;

extern volatile __bit IOCB7 @ (((unsigned) &IOCB)*8) + 7;

extern volatile __bit IRCF0 @ (((unsigned) &OSCCON)*8) + 4;

extern volatile __bit IRCF1 @ (((unsigned) &OSCCON)*8) + 5;

extern volatile __bit IRCF2 @ (((unsigned) &OSCCON)*8) + 6;

extern volatile __bit IRP @ (((unsigned) &STATUS)*8) + 7;

extern volatile __bit LTS @ (((unsigned) &OSCCON)*8) + 1;

extern volatile __bit MC1OUT @ (((unsigned) &CM2CON1)*8) + 7;

extern volatile __bit MC2OUT @ (((unsigned) &CM2CON1)*8) + 6;

extern volatile __bit MSK0 @ (((unsigned) &SSPMSK)*8) + 0;

extern volatile __bit MSK1 @ (((unsigned) &SSPMSK)*8) + 1;

extern volatile __bit MSK2 @ (((unsigned) &SSPMSK)*8) + 2;

extern volatile __bit MSK3 @ (((unsigned) &SSPMSK)*8) + 3;

extern volatile __bit MSK4 @ (((unsigned) &SSPMSK)*8) + 4;

extern volatile __bit MSK5 @ (((unsigned) &SSPMSK)*8) + 5;

extern volatile __bit MSK6 @ (((unsigned) &SSPMSK)*8) + 6;

extern volatile __bit MSK7 @ (((unsigned) &SSPMSK)*8) + 7;

extern volatile __bit OERR @ (((unsigned) &RCSTA)*8) + 1;

extern volatile __bit OSFIE @ (((unsigned) &PIE2)*8) + 7;

extern volatile __bit OSFIF @ (((unsigned) &PIR2)*8) + 7;

extern volatile __bit OSTS @ (((unsigned) &OSCCON)*8) + 3;

extern volatile __bit P1M0 @ (((unsigned) &CCP1CON)*8) + 6;

extern volatile __bit P1M1 @ (((unsigned) &CCP1CON)*8) + 7;

extern volatile __bit PDC0 @ (((unsigned) &PWM1CON)*8) + 0;

extern volatile __bit PDC1 @ (((unsigned) &PWM1CON)*8) + 1;

extern volatile __bit PDC2 @ (((unsigned) &PWM1CON)*8) + 2;

extern volatile __bit PDC3 @ (((unsigned) &PWM1CON)*8) + 3;

extern volatile __bit PDC4 @ (((unsigned) &PWM1CON)*8) + 4;

extern volatile __bit PDC5 @ (((unsigned) &PWM1CON)*8) + 5;

extern volatile __bit PDC6 @ (((unsigned) &PWM1CON)*8) + 6;

extern volatile __bit PEIE @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit PEN @ (((unsigned) &SSPCON2)*8) + 2;

extern volatile __bit PRSEN @ (((unsigned) &PWM1CON)*8) + 7;

extern volatile __bit PS0 @ (((unsigned) &OPTION_REG)*8) + 0;

extern volatile __bit PS1 @ (((unsigned) &OPTION_REG)*8) + 1;

extern volatile __bit PS2 @ (((unsigned) &OPTION_REG)*8) + 2;

extern volatile __bit PSA @ (((unsigned) &OPTION_REG)*8) + 3;

extern volatile __bit PSSAC0 @ (((unsigned) &ECCPAS)*8) + 2;

extern volatile __bit PSSAC1 @ (((unsigned) &ECCPAS)*8) + 3;

extern volatile __bit PSSBD0 @ (((unsigned) &ECCPAS)*8) + 0;

extern volatile __bit PSSBD1 @ (((unsigned) &ECCPAS)*8) + 1;

extern volatile __bit PULSR @ (((unsigned) &SRCON)*8) + 2;

extern volatile __bit PULSS @ (((unsigned) &SRCON)*8) + 3;

extern volatile __bit RA0 @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit RA1 @ (((unsigned) &PORTA)*8) + 1;

extern volatile __bit RA2 @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit RA3 @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit RA4 @ (((unsigned) &PORTA)*8) + 4;

extern volatile __bit RA5 @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit RA6 @ (((unsigned) &PORTA)*8) + 6;

extern volatile __bit RA7 @ (((unsigned) &PORTA)*8) + 7;

extern volatile __bit RB0 @ (((unsigned) &PORTB)*8) + 0;

extern volatile __bit RB1 @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit RB2 @ (((unsigned) &PORTB)*8) + 2;

extern volatile __bit RB3 @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit RB4 @ (((unsigned) &PORTB)*8) + 4;

extern volatile __bit RB5 @ (((unsigned) &PORTB)*8) + 5;

extern volatile __bit RB6 @ (((unsigned) &PORTB)*8) + 6;

extern volatile __bit RB7 @ (((unsigned) &PORTB)*8) + 7;

extern volatile __bit RBIE @ (((unsigned) &INTCON)*8) + 3;

extern volatile __bit RBIF @ (((unsigned) &INTCON)*8) + 0;

extern volatile __bit RC0 @ (((unsigned) &PORTC)*8) + 0;

extern volatile __bit RC1 @ (((unsigned) &PORTC)*8) + 1;

extern volatile __bit RC2 @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit RC3 @ (((unsigned) &PORTC)*8) + 3;

extern volatile __bit RC4 @ (((unsigned) &PORTC)*8) + 4;

extern volatile __bit RC5 @ (((unsigned) &PORTC)*8) + 5;

extern volatile __bit RC6 @ (((unsigned) &PORTC)*8) + 6;

extern volatile __bit RC7 @ (((unsigned) &PORTC)*8) + 7;

extern volatile __bit RC8_9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RC9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RCD8 @ (((unsigned) &RCSTA)*8) + 0;

extern volatile __bit RCEN @ (((unsigned) &SSPCON2)*8) + 3;

extern volatile __bit RCIDL @ (((unsigned) &BAUDCTL)*8) + 6;

extern volatile __bit RCIE @ (((unsigned) &PIE1)*8) + 5;

extern volatile __bit RCIF @ (((unsigned) &PIR1)*8) + 5;

extern volatile __bit RD @ (((unsigned) &EECON1)*8) + 0;

extern volatile __bit RD0 @ (((unsigned) &PORTD)*8) + 0;

extern volatile __bit RD1 @ (((unsigned) &PORTD)*8) + 1;

extern volatile __bit RD2 @ (((unsigned) &PORTD)*8) + 2;

extern volatile __bit RD3 @ (((unsigned) &PORTD)*8) + 3;

extern volatile __bit RD4 @ (((unsigned) &PORTD)*8) + 4;

extern volatile __bit RD5 @ (((unsigned) &PORTD)*8) + 5;

extern volatile __bit RD6 @ (((unsigned) &PORTD)*8) + 6;

extern volatile __bit RD7 @ (((unsigned) &PORTD)*8) + 7;

extern volatile __bit RE0 @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit RE1 @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit RE2 @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit RE3 @ (((unsigned) &PORTE)*8) + 3;

extern volatile __bit READ_WRITE @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit RP0 @ (((unsigned) &STATUS)*8) + 5;

extern volatile __bit RP1 @ (((unsigned) &STATUS)*8) + 6;

extern volatile __bit RSEN @ (((unsigned) &SSPCON2)*8) + 1;

extern volatile __bit RX9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RX9D @ (((unsigned) &RCSTA)*8) + 0;

extern volatile __bit R_W @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit R_nW @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit SBOREN @ (((unsigned) &PCON)*8) + 4;

extern volatile __bit SCKP @ (((unsigned) &BAUDCTL)*8) + 4;

extern volatile __bit SCS @ (((unsigned) &OSCCON)*8) + 0;

extern volatile __bit SEN @ (((unsigned) &SSPCON2)*8) + 0;

extern volatile __bit SENDB @ (((unsigned) &TXSTA)*8) + 3;

extern volatile __bit SMP @ (((unsigned) &SSPSTAT)*8) + 7;

extern volatile __bit SPEN @ (((unsigned) &RCSTA)*8) + 7;

extern volatile __bit SR0 @ (((unsigned) &SRCON)*8) + 6;

extern volatile __bit SR1 @ (((unsigned) &SRCON)*8) + 7;

extern volatile __bit SREN @ (((unsigned) &RCSTA)*8) + 5;

extern volatile __bit SSPEN @ (((unsigned) &SSPCON)*8) + 5;

extern volatile __bit SSPIE @ (((unsigned) &PIE1)*8) + 3;

extern volatile __bit SSPIF @ (((unsigned) &PIR1)*8) + 3;

extern volatile __bit SSPM0 @ (((unsigned) &SSPCON)*8) + 0;

extern volatile __bit SSPM1 @ (((unsigned) &SSPCON)*8) + 1;

extern volatile __bit SSPM2 @ (((unsigned) &SSPCON)*8) + 2;

extern volatile __bit SSPM3 @ (((unsigned) &SSPCON)*8) + 3;

extern volatile __bit SSPOV @ (((unsigned) &SSPCON)*8) + 6;

extern volatile __bit STRA @ (((unsigned) &PSTRCON)*8) + 0;

extern volatile __bit STRB @ (((unsigned) &PSTRCON)*8) + 1;

extern volatile __bit STRC @ (((unsigned) &PSTRCON)*8) + 2;

extern volatile __bit STRD @ (((unsigned) &PSTRCON)*8) + 3;

extern volatile __bit STRSYNC @ (((unsigned) &PSTRCON)*8) + 4;

extern volatile __bit SWDTEN @ (((unsigned) &WDTCON)*8) + 0;

extern volatile __bit SYNC @ (((unsigned) &TXSTA)*8) + 4;

extern volatile __bit T0CS @ (((unsigned) &OPTION_REG)*8) + 5;

extern volatile __bit T0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit T0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit T0SE @ (((unsigned) &OPTION_REG)*8) + 4;

extern volatile __bit T1CKPS0 @ (((unsigned) &T1CON)*8) + 4;

extern volatile __bit T1CKPS1 @ (((unsigned) &T1CON)*8) + 5;

extern volatile __bit T1GINV @ (((unsigned) &T1CON)*8) + 7;

extern volatile __bit T1GIV @ (((unsigned) &T1CON)*8) + 7;

extern volatile __bit T1GSS @ (((unsigned) &CM2CON1)*8) + 1;

extern volatile __bit T1INSYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit T1OSCEN @ (((unsigned) &T1CON)*8) + 3;

extern volatile __bit T1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit T2CKPS0 @ (((unsigned) &T2CON)*8) + 0;

extern volatile __bit T2CKPS1 @ (((unsigned) &T2CON)*8) + 1;

extern volatile __bit TMR0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit TMR0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit TMR1CS @ (((unsigned) &T1CON)*8) + 1;

extern volatile __bit TMR1GE @ (((unsigned) &T1CON)*8) + 6;

extern volatile __bit TMR1IE @ (((unsigned) &PIE1)*8) + 0;

extern volatile __bit TMR1IF @ (((unsigned) &PIR1)*8) + 0;

extern volatile __bit TMR1ON @ (((unsigned) &T1CON)*8) + 0;

extern volatile __bit TMR2IE @ (((unsigned) &PIE1)*8) + 1;

extern volatile __bit TMR2IF @ (((unsigned) &PIR1)*8) + 1;

extern volatile __bit TMR2ON @ (((unsigned) &T2CON)*8) + 2;

extern volatile __bit TOUTPS0 @ (((unsigned) &T2CON)*8) + 3;

extern volatile __bit TOUTPS1 @ (((unsigned) &T2CON)*8) + 4;

extern volatile __bit TOUTPS2 @ (((unsigned) &T2CON)*8) + 5;

extern volatile __bit TOUTPS3 @ (((unsigned) &T2CON)*8) + 6;

extern volatile __bit TRISA0 @ (((unsigned) &TRISA)*8) + 0;

extern volatile __bit TRISA1 @ (((unsigned) &TRISA)*8) + 1;

extern volatile __bit TRISA2 @ (((unsigned) &TRISA)*8) + 2;

extern volatile __bit TRISA3 @ (((unsigned) &TRISA)*8) + 3;

extern volatile __bit TRISA4 @ (((unsigned) &TRISA)*8) + 4;

extern volatile __bit TRISA5 @ (((unsigned) &TRISA)*8) + 5;

extern volatile __bit TRISA6 @ (((unsigned) &TRISA)*8) + 6;

extern volatile __bit TRISA7 @ (((unsigned) &TRISA)*8) + 7;

extern volatile __bit TRISB0 @ (((unsigned) &TRISB)*8) + 0;

extern volatile __bit TRISB1 @ (((unsigned) &TRISB)*8) + 1;

extern volatile __bit TRISB2 @ (((unsigned) &TRISB)*8) + 2;

extern volatile __bit TRISB3 @ (((unsigned) &TRISB)*8) + 3;

extern volatile __bit TRISB4 @ (((unsigned) &TRISB)*8) + 4;

extern volatile __bit TRISB5 @ (((unsigned) &TRISB)*8) + 5;

extern volatile __bit TRISB6 @ (((unsigned) &TRISB)*8) + 6;

extern volatile __bit TRISB7 @ (((unsigned) &TRISB)*8) + 7;

extern volatile __bit TRISC0 @ (((unsigned) &TRISC)*8) + 0;

extern volatile __bit TRISC1 @ (((unsigned) &TRISC)*8) + 1;

extern volatile __bit TRISC2 @ (((unsigned) &TRISC)*8) + 2;

extern volatile __bit TRISC3 @ (((unsigned) &TRISC)*8) + 3;

extern volatile __bit TRISC4 @ (((unsigned) &TRISC)*8) + 4;

extern volatile __bit TRISC5 @ (((unsigned) &TRISC)*8) + 5;

extern volatile __bit TRISC6 @ (((unsigned) &TRISC)*8) + 6;

extern volatile __bit TRISC7 @ (((unsigned) &TRISC)*8) + 7;

extern volatile __bit TRISD0 @ (((unsigned) &TRISD)*8) + 0;

extern volatile __bit TRISD1 @ (((unsigned) &TRISD)*8) + 1;

extern volatile __bit TRISD2 @ (((unsigned) &TRISD)*8) + 2;

extern volatile __bit TRISD3 @ (((unsigned) &TRISD)*8) + 3;

extern volatile __bit TRISD4 @ (((unsigned) &TRISD)*8) + 4;

extern volatile __bit TRISD5 @ (((unsigned) &TRISD)*8) + 5;

extern volatile __bit TRISD6 @ (((unsigned) &TRISD)*8) + 6;

extern volatile __bit TRISD7 @ (((unsigned) &TRISD)*8) + 7;

extern volatile __bit TRISE0 @ (((unsigned) &TRISE)*8) + 0;

extern volatile __bit TRISE1 @ (((unsigned) &TRISE)*8) + 1;

extern volatile __bit TRISE2 @ (((unsigned) &TRISE)*8) + 2;

extern volatile __bit TRISE3 @ (((unsigned) &TRISE)*8) + 3;

extern volatile __bit TRMT @ (((unsigned) &TXSTA)*8) + 1;

extern volatile __bit TUN0 @ (((unsigned) &OSCTUNE)*8) + 0;

extern volatile __bit TUN1 @ (((unsigned) &OSCTUNE)*8) + 1;

extern volatile __bit TUN2 @ (((unsigned) &OSCTUNE)*8) + 2;

extern volatile __bit TUN3 @ (((unsigned) &OSCTUNE)*8) + 3;

extern volatile __bit TUN4 @ (((unsigned) &OSCTUNE)*8) + 4;

extern volatile __bit TX8_9 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX9 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX9D @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TXD8 @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TXEN @ (((unsigned) &TXSTA)*8) + 5;

extern volatile __bit TXIE @ (((unsigned) &PIE1)*8) + 4;

extern volatile __bit TXIF @ (((unsigned) &PIR1)*8) + 4;

extern volatile __bit UA @ (((unsigned) &SSPSTAT)*8) + 1;

extern volatile __bit ULPWUE @ (((unsigned) &PCON)*8) + 5;

extern volatile __bit ULPWUIE @ (((unsigned) &PIE2)*8) + 2;

extern volatile __bit ULPWUIF @ (((unsigned) &PIR2)*8) + 2;

extern volatile __bit VCFG0 @ (((unsigned) &ADCON1)*8) + 4;

extern volatile __bit VCFG1 @ (((unsigned) &ADCON1)*8) + 5;

extern volatile __bit VR0 @ (((unsigned) &VRCON)*8) + 0;

extern volatile __bit VR1 @ (((unsigned) &VRCON)*8) + 1;

extern volatile __bit VR2 @ (((unsigned) &VRCON)*8) + 2;

extern volatile __bit VR3 @ (((unsigned) &VRCON)*8) + 3;

extern volatile __bit VREN @ (((unsigned) &VRCON)*8) + 7;

extern volatile __bit VROE @ (((unsigned) &VRCON)*8) + 6;

extern volatile __bit VRR @ (((unsigned) &VRCON)*8) + 5;

extern volatile __bit VRSS @ (((unsigned) &VRCON)*8) + 4;

extern volatile __bit WCOL @ (((unsigned) &SSPCON)*8) + 7;

extern volatile __bit WDTPS0 @ (((unsigned) &WDTCON)*8) + 1;

extern volatile __bit WDTPS1 @ (((unsigned) &WDTCON)*8) + 2;

extern volatile __bit WDTPS2 @ (((unsigned) &WDTCON)*8) + 3;

extern volatile __bit WDTPS3 @ (((unsigned) &WDTCON)*8) + 4;

extern volatile __bit WPUB0 @ (((unsigned) &WPUB)*8) + 0;

extern volatile __bit WPUB1 @ (((unsigned) &WPUB)*8) + 1;

extern volatile __bit WPUB2 @ (((unsigned) &WPUB)*8) + 2;

extern volatile __bit WPUB3 @ (((unsigned) &WPUB)*8) + 3;

extern volatile __bit WPUB4 @ (((unsigned) &WPUB)*8) + 4;

extern volatile __bit WPUB5 @ (((unsigned) &WPUB)*8) + 5;

extern volatile __bit WPUB6 @ (((unsigned) &WPUB)*8) + 6;

extern volatile __bit WPUB7 @ (((unsigned) &WPUB)*8) + 7;

extern volatile __bit WR @ (((unsigned) &EECON1)*8) + 1;

extern volatile __bit WREN @ (((unsigned) &EECON1)*8) + 2;

extern volatile __bit WRERR @ (((unsigned) &EECON1)*8) + 3;

extern volatile __bit WUE @ (((unsigned) &BAUDCTL)*8) + 1;

extern volatile __bit ZERO @ (((unsigned) &STATUS)*8) + 2;

extern volatile __bit nA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit nADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit nBO @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nBOR @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nDONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit nPD @ (((unsigned) &STATUS)*8) + 3;

extern volatile __bit nPOR @ (((unsigned) &PCON)*8) + 1;

extern volatile __bit nRBPU @ (((unsigned) &OPTION_REG)*8) + 7;

extern volatile __bit nRC8 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit nT1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit nTO @ (((unsigned) &STATUS)*8) + 4;

extern volatile __bit nTX8 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit nW @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit nWRITE @ (((unsigned) &SSPSTAT)*8) + 2;


# 28 "C:\Program Files\Microchip\xc8\v1.44\include\pic.h"
#pragma intrinsic(__nop)
extern void __nop(void);

# 78
extern unsigned int flash_read(unsigned short addr);

# 114 "C:\Program Files\Microchip\xc8\v1.44\include\eeprom_routines.h"
extern void eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, __eeprom unsigned char *from, unsigned char size);
extern void memcpyee(__eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 152 "C:\Program Files\Microchip\xc8\v1.44\include\pic.h"
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);
#pragma intrinsic(_delaywdt)
extern __nonreentrant void _delaywdt(unsigned long);

# 193
extern __bank0 unsigned char __resetbits;
extern __bank0 __bit __powerdown;
extern __bank0 __bit __timeout;

# 4 "C:\Program Files\Microchip\xc8\v1.44\include\__size_t.h"
typedef unsigned size_t;

# 7 "C:\Program Files\Microchip\xc8\v1.44\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 43 "C:\Program Files\Microchip\xc8\v1.44\include\stdio.h"
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 29 "C:\Program Files\Microchip\xc8\v1.44\include\errno.h"
extern int errno;

# 12 "C:\Program Files\Microchip\xc8\v1.44\include\conio.h"
extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 23
extern char * cgets(char *);
extern void cputs(const char *);

# 88 "C:\Program Files\Microchip\xc8\v1.44\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 180
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);


# 7 "newmain.c"
#pragma config FOSC = INTRC_NOCLKOUT
#pragma config WDTE = OFF
#pragma config PWRTE = OFF
#pragma config MCLRE = OFF
#pragma config CP = OFF
#pragma config CPD = OFF
#pragma config BOREN = ON
#pragma config IESO = OFF
#pragma config FCMEN = OFF
#pragma config LVP = OFF


#pragma config BOR4V = BOR40V
#pragma config WRT = OFF

# 96
asm("\tpsect eeprom_data,class=EEDATA,delta=2,space=3,noexec"); asm("\tdb\t" "0X03" "," "0X00" "," "0X03" "," "0X00" "," "0X03" "," "0X00" "," "0X03" "," "0X00");
asm("\tpsect eeprom_data,class=EEDATA,delta=2,space=3,noexec"); asm("\tdb\t" "0X03" "," "0X00" "," "0X03" "," "0X00" "," "0X03" "," "0X00" "," "0X03" "," "0X00");
asm("\tpsect eeprom_data,class=EEDATA,delta=2,space=3,noexec"); asm("\tdb\t" "0X03" "," "0X00" "," "0X03" "," "0X00" "," "0X00" "," "0X01" "," "0X00" "," "0X00");
asm("\tpsect eeprom_data,class=EEDATA,delta=2,space=3,noexec"); asm("\tdb\t" "0X02" "," "0X00" "," "0X00" "," "0X03" "," "0X00" "," "0X00" "," "0X05" "," "0X00");
asm("\tpsect eeprom_data,class=EEDATA,delta=2,space=3,noexec"); asm("\tdb\t" "0X01" "," "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00");

void ToggleEpinOfLCD(void);
void LCD_CmdWrite(unsigned char Command) ;
void LCD_DataWrite(char LCDChar);
void LCD_Init(void);
void LCD_DisplayString(const char *s);
void LCD_Clear(void) ;

void PORT_Init();
void displaypass(int data);
void display(int data);
void display_price(int data);

void buzzer(unsigned int a);
void LCD_BuildChar(unsigned char loc,unsigned char *p);
void Write_EEPROM(unsigned char a1,unsigned char a2,unsigned int data_value);
void Write_EEPROM_Price(unsigned char a1,unsigned char a2,unsigned char a3,unsigned int data_value);
unsigned int Read_EEPROM(unsigned char b1,unsigned char b2);
unsigned int Read_EEPROM_Price(unsigned char b1,unsigned char b2,unsigned char b3);
void STOCK_EMPTY_ROUTINE();
void Set_Channel(unsigned int data);
void Monitor_Balance(unsigned int amount);

void escprocess();

unsigned int padcount1=0,rupee1=0,padcount2=0,rupee2=0,balance=0,padcount=0,rupee=0;
unsigned int padcount3=0,rupee3=0,padcount4=0,rupee4=0,padcount5=0,rupee5=0;
unsigned int value=0,error_count=0,count=0,num=0;
unsigned int stock=0;
unsigned char stock_data=0;
bit status=0,menu=0,set=0,check=0,pad=0,coin=0,run=0,coin_input=0,motor=0,Qflag=0;
unsigned char RupeeSymbol[8]={0X1F,0X02,0X0F,0X02,0X1C,0X08,0X04,0X02};

void interrupt COINCOUNTER()
{
if(INTF==1)
{
INTF=0;
coin_input=1;
count=count+10;
balance=rupee-count;
Monitor_Balance(balance);

if(count==rupee)
{
INTE=0;
count=0;
balance=0;
coin_input=0;
RB1=1;
motor=1;
}
}
}
int start = 0;
char dispvalue[10];
void main()

{
_delay((unsigned long)((50)*(4000000/4000.0)));
PORT_Init();
LCD_Init();
RB2=0;RB3=0;RB4=0;RB5=0;

if((!RE1)&&(!RE0))
{
LCD_DisplayString(" FACTORY RESET  ");
LCD_CmdWrite(0XC0);
LCD_DisplayString(" INITIALIZING... ");
buzzer(1000);
_delay((unsigned long)((500)*(4000000/4000.0)));
LCD_Clear();
LCD_DisplayString("  FLASHING....  ");
buzzer(100);
_delay((unsigned long)((2500)*(4000000/4000.0)));

asm("\tpsect eeprom_data,class=EEDATA,delta=2,space=3,noexec"); asm("\tdb\t" "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00");
asm("\tpsect eeprom_data,class=EEDATA,delta=2,space=3,noexec"); asm("\tdb\t" "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00");
asm("\tpsect eeprom_data,class=EEDATA,delta=2,space=3,noexec"); asm("\tdb\t" "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00");
asm("\tpsect eeprom_data,class=EEDATA,delta=2,space=3,noexec"); asm("\tdb\t" "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00" "," "0X00");

padcount1=0;padcount2=0;padcount3=0;padcount4=0;padcount5=0;
rupee1=10;rupee2=10;rupee3=10;rupee4=10;rupee5=10;
balance=0;padcount=0;rupee=0;
value=0;error_count=0;count=0;num=0;stock=0;stock_data=0;
status=0;menu=0;set=0;check=0;pad=0;coin=0;run=0;coin_input=0;motor=0;Qflag=0;

Write_EEPROM_Price(0X14,0X15,0X16,rupee1);
Write_EEPROM_Price(0X17,0X18,0X19,rupee2);
Write_EEPROM_Price(0X1A,0X1B,0X1C,rupee3);
Write_EEPROM_Price(0X1D,0X1E,0X1F,rupee4);
Write_EEPROM_Price(0X20,0X21,0X22,rupee5);

LCD_Clear();
LCD_DisplayString(" MEMORY FLASHED! ");
buzzer(1000);
_delay((unsigned long)((1000)*(4000000/4000.0)));
menu=1;run=1;
buzzer(70);
LCD_Clear();
goto flash;
}


RB1=1;INTE=0;

padcount1=Read_EEPROM(0,1);
padcount2=Read_EEPROM(4,5);
padcount3=Read_EEPROM(8,9);
padcount4=Read_EEPROM(0X0C,0X0D);
padcount5=Read_EEPROM(0X10,0X11);

rupee1=Read_EEPROM_Price(0x14,0x15,0X16);
rupee2=Read_EEPROM_Price(0X17,0X18,0X19);
rupee3=Read_EEPROM_Price(0X1A,0X1B,0X1C);
rupee4=Read_EEPROM_Price(0X1D,0X1E,0X1F);
rupee5=Read_EEPROM_Price(0X20,0X21,0X22);



LCD_DisplayString("   WELCOME TO   ");
LCD_CmdWrite(0XC0);
LCD_DisplayString("DHARSAN MACHINES");
buzzer(2000);
_delay((unsigned long)((1000)*(4000000/4000.0)));
buzzer(50);
LCD_Clear();
run=1;

while(run)
{
TRISA1 = 1;
TRISA0 = 1;
TRISA5 = 1;
TRISB6 = 1;
TRISB7 = 1;
while(!status)
{
LCD_CmdWrite(0X80);
LCD_DisplayString("   SELECT ROW  ");
LCD_CmdWrite(0XC0);
LCD_DisplayString("_1__2__3__4__5__");

if(!RA1)
{
while(!RA1);
M1:
if(padcount1==0)
{
STOCK_EMPTY_ROUTINE();
break;
}
INTE=1;status=1;
stock=1;
padcount=padcount1;
rupee=rupee1;
if(RD7==0)
RB1=0;
TRISA1 = 0;
RA1=0;
TRISA0 = 1;
TRISA5 = 1;
TRISB6 = 1;
TRISB7 = 1;
Set_Channel(rupee);
buzzer(50);count=0;coin_input=0;balance=0;
LCD_Clear();
start = 1;
}

if(!RA2)
{
while(!RA2);
M2:
if(padcount2==0)
{
STOCK_EMPTY_ROUTINE();
break;
}
INTE=1;
status=1;
stock=2;
padcount=padcount2;
rupee=rupee2;
if(RD5==0)
RB1=0;
TRISA0 = 0;
RA2=0;
TRISA1 = 1;
TRISA5 = 1;
TRISB6 = 1;
TRISB7 = 1;
Set_Channel(rupee);
buzzer(50);count=0;coin_input=0;balance=0;
LCD_Clear();
start = 2;
}

if(!RA5)
{
while(!RA5);
M3:
if(padcount3==0)
{
STOCK_EMPTY_ROUTINE();break;
}
INTE=1;status=1;
stock=3;
padcount=padcount3;
rupee=rupee3;
if(RC7==0)
RB1=0;
TRISA5 = 0;
RA5=0;
TRISA1 = 1;
TRISA0 = 1;
TRISB6 = 1;
TRISB7 = 1;
Set_Channel(rupee);
buzzer(50);count=0;coin_input=0;balance=0;
LCD_Clear();
start = 3;
}
if(!RB6)
{
while(!RB6);
M4:
if(padcount4==0)
{
STOCK_EMPTY_ROUTINE();break;
}
INTE=1;status=1;
stock=4;
padcount=padcount4;
rupee=rupee4;
if(RC5==0)
RB1=0;
TRISB6 = 0;
RB6=0;

TRISA1 = 1;
TRISA0 = 1;
TRISA5 = 1;
TRISB7 = 1;
Set_Channel(rupee);
buzzer(50);count=0;coin_input=0;balance=0;
LCD_Clear();
start = 4;
}
if(!RB7)
{
while(!RB7);
M5:
if(padcount5==0)
{
STOCK_EMPTY_ROUTINE();break;
}


INTE=1;status=1;
stock=5;
padcount=padcount5;
rupee=rupee5;
if(RD3==0)
RB1=0;
TRISB7 = 0;
RB7=0;
TRISA1 = 1;
TRISA0 = 1;
TRISA5 = 1;
TRISB6 = 1;
Set_Channel(rupee);
buzzer(50);count=0;coin_input=0;balance=0;
LCD_Clear();
start = 5;
}
if(RE3==0)
{
while(RE3==0);
status=0;
menu=1;
buzzer(50);
LCD_Clear();
start = 0;
break;
}
}

while(status)
{

LCD_CmdWrite(0X80);
LCD_DisplayString(" ROW_");
switch(stock)
{
case 1: stock_data='1';break;
case 2: stock_data='2';break;
case 3: stock_data='3';break;
case 4: stock_data='4';break;
case 5: stock_data='5';break;
}
LCD_DataWrite(stock_data);
LCD_DataWrite(':');
display(padcount);
LCD_DisplayString(" / ");
LCD_DataWrite(0x00);
display_price(rupee);
LCD_CmdWrite(0XC0);
LCD_DisplayString(" INSERT NOTES...");


if(!RA4)
{
while(!RA4);
padcount=0;rupee=0;stock=0;
INTE=0;RB1=1;
status=0;
TRISA1 = 1;
TRISA0 = 1;
TRISA5 = 1;
TRISB6 = 1;
TRISB7 = 1;
LCD_Clear();
buzzer(50);
start = 0;
}



if(start == 1)
{
if(RE3==0)
{
while(RE3==0);
status=0;
menu=1;
buzzer(50);
LCD_Clear();
start = 0;
break;
}
if(!RA2)
{
while(!RA2);
escprocess();
goto M2;
}
if(!RA5)
{
while(!RA5);
escprocess();
goto M3;
}
if(!RB6)
{
while(!RB6);
escprocess();
goto M4;
}
if(!RB7)
{
while(!RB7);
escprocess();
goto M5;
}
}
if(start == 2)
{
if(RE3==0)
{
while(RE3==0);
status=0;
menu=1;
buzzer(50);
start = 0;
LCD_Clear();
break;
}

if(!RA1)
{
while(!RA1);
escprocess();
goto M1;
}
if(!RA5)
{
while(!RA5);
escprocess();
goto M3;
}
if(!RB6)
{
while(!RB6);
escprocess();
goto M4;
}
if(!RB7)
{
while(!RB7);
escprocess();
goto M5;
}


}
if(start == 3)
{
if(RE3==0)
{
while(RE3==0);
status=0;
menu=1;
buzzer(50);
LCD_Clear();
start = 0;
break;
}
if(!RA1)
{
while(!RA1);
escprocess();
goto M1;
}
if(!RA2)
{
while(!RA2);
escprocess();
goto M2;
}
if(!RB6)
{
while(!RB6);
escprocess();
goto M4;
}
if(!RB7)
{
while(!RB7);
escprocess();
goto M5;
}
}
if(start == 4)
{
if(RE3==0)
{
while(RE3==0);
status=0;
menu=1;
buzzer(50);
LCD_Clear();
start = 0;
break;
}
if(!RA1)
{
while(!RA1);
escprocess();
goto M1;
}
if(!RA2)
{
while(!RA2);
escprocess();
goto M2;
}
if(!RA5)
{
while(!RA5);
escprocess();
goto M3;
}
if(!RB7)
{
while(!RB7);
escprocess();
goto M5;
}

}
if(start == 5)
{
if(RE3==0)
{
while(RE3==0);
status=0;
menu=1;
buzzer(50);
LCD_Clear();
start = 0;
break;
}
if(!RA1)
{
while(!RA1);
escprocess();
goto M1;
}
if(!RA2)
{
while(!RA2);
escprocess();
goto M2;
}
if(!RA5)
{
while(!RA5);
escprocess();
goto M3;
}
if(!RB6)
{
while(!RB6);
escprocess();
goto M4;
}

}
while(coin_input)
{
LCD_CmdWrite(0X80);
LCD_DisplayString("  BALANCE: ");
LCD_DataWrite(0x00);
display(balance);
LCD_DisplayString("  ");
LCD_CmdWrite(0XC0);
LCD_DisplayString(" INSERT NOTES.. ");
}

if((motor)&&(!coin_input))
{
motor=0;
switch(stock)
{
case 1: while(RD7==1);break;
case 2: while(RD5==1);break;
case 3: while(RC7==1);break;
case 4: while(RC5==1);break;
case 5: while(RD3==1);break;
}

LCD_Clear();
LCD_CmdWrite(0X80);
LCD_DisplayString("  PROCESSING...");
LCD_CmdWrite(0XC0);
LCD_DisplayString(" PLEASE WAIT...");
buzzer(50);

switch(stock)
{
case 1: RD6=1;break;
case 2: RD4=1;break;
case 3: RC6=1;break;
case 4: RC4=1;break;
case 5: RD2=1;break;
}

_delay((unsigned long)((2000)*(4000000/4000.0)));

switch(stock)
{
case 1: while(RD7==0);break;
case 2: while(RD5==0);break;
case 3: while(RC7==0);break;
case 4: while(RC5==0);break;
case 5: while(RD3==0);break;
}

switch(stock)
{
case 1: RD6=0;break;
case 2: RD4=0;break;
case 3: RC6=0;break;
case 4: RC4=0;break;
case 5: RD2=0;break;
}

switch(stock)
{
case 1: while(RD7==1);break;
case 2: while(RD5==1);break;
case 3: while(RC7==1);break;
case 4: while(RC5==1);break;
case 5: while(RD3==1);break;
}

padcount--;

switch(stock)
{
case 1: padcount1=padcount; Write_EEPROM(2,3,padcount1);break;
case 2: padcount2=padcount; Write_EEPROM(6,7,padcount2);break;
case 3: padcount3=padcount; Write_EEPROM(0X0A,0X0B,padcount3);break;
case 4: padcount4=padcount; Write_EEPROM(0X0E,0X0F,padcount4);break;
case 5: padcount5=padcount; Write_EEPROM(0X12,0X13,padcount5);break;

}

LCD_CmdWrite(0X80);
LCD_DisplayString(" PLEASE COLLECT ");
LCD_CmdWrite(0XC0);
LCD_DisplayString("   THANK YOU !   ");


buzzer(2000);
_delay((unsigned long)((700)*(4000000/4000.0)));


if(padcount1==0 && padcount2==0 && padcount3==0 && padcount4==0 && padcount5==0 )
{
LCD_Clear();
LCD_CmdWrite(0X80);
LCD_DisplayString(" STOCK EMPTY !!! ");
LCD_CmdWrite(0XC0);
LCD_DisplayString("  PLEASE LOAD.. ");
buzzer(3000);
while(RE2==1)
{
RA3=~RA3;
_delay((unsigned long)((75)*(4000000/4000.0)));

}
while(!RE2);
RA3=0;

padcount1=Read_EEPROM(0,1);
padcount2=Read_EEPROM(4,5);
padcount3=Read_EEPROM(8,9);
padcount4=Read_EEPROM(0X0C,0X0D);
padcount5=Read_EEPROM(0X10,0X11);
Write_EEPROM(2,3,padcount1);
Write_EEPROM(6,7,padcount2);
Write_EEPROM(0X0A,0X0B,padcount3);
Write_EEPROM(0X0E,0X0F,padcount4);
Write_EEPROM(0X12,0X13,padcount5);

LCD_Clear();
LCD_DisplayString("     STOCKS     ");
LCD_CmdWrite(0XC0);
LCD_DisplayString("    RELOADED..  ");
buzzer(2000);
_delay((unsigned long)((700)*(4000000/4000.0)));

}
status=0;
TRISA1 = 1;
TRISA0 = 1;
TRISA5 = 1;
TRISB6 = 1;
TRISB7 = 1;
buzzer(70);
LCD_Clear();
}

}

flash:
while(menu)
{
LCD_CmdWrite(0X02);
LCD_DisplayString("ENTER PASSWORD ?");
LCD_CmdWrite(0XC7);
if(check==0)
LCD_DisplayString("**");

if(check==1)
displaypass(value);

if(!RE1)
{

check=1;
if(value==99)
{
value=0;
goto loop;
}
value++;
loop:
value=value;
while(!RE1);
}

if(!RE0)
{

check=1;
if(value==0)
{
value=99;
goto jump;
}
value--;
jump:
value=value;
while(!RE0);
}

if(!RE3)
{
while(!RE3);
if(value==05)
{
LCD_Clear();
value=0;
check=0;menu=0;set=1;pad=0;coin=0;

padcount1=Read_EEPROM(0,1);
padcount2=Read_EEPROM(4,5);
padcount3=Read_EEPROM(8,9);
padcount4=Read_EEPROM(0X0C,0X0D);
padcount5=Read_EEPROM(0X10,0X11);

rupee1=Read_EEPROM_Price(0x14,0x15,0X16);
rupee2=Read_EEPROM_Price(0X17,0X18,0X19);
rupee3=Read_EEPROM_Price(0X1A,0X1B,0X1C);
rupee4=Read_EEPROM_Price(0X1D,0X1E,0X1F);
rupee5=Read_EEPROM_Price(0X20,0X21,0X22);

buzzer(50);
break;
}
else
{
LCD_Clear();
LCD_CmdWrite(0X02);
LCD_DisplayString("    WRONG !!    ");
LCD_CmdWrite(0XC0);
LCD_DisplayString("  TRY AGAIN....  ");
buzzer(50);
_delay((unsigned long)((50)*(4000000/4000.0)));
buzzer(50);
_delay((unsigned long)((750)*(4000000/4000.0)));
LCD_Clear();
value=0;check=0;
error_count++;
if(error_count==3)
{
LCD_Clear();
LCD_CmdWrite(0X02);
LCD_DisplayString("Processor RESET");
buzzer(1000);
_delay((unsigned long)((650)*(4000000/4000.0)));
value=0;
error_count=0;
check=0;status=0;menu=0,run=0;
LCD_Clear();
break;

}
}

}

}

while(set)
{

if((!pad)&&(!coin))
{
LCD_CmdWrite(0X02);
LCD_DisplayString("ENTER PARAMETERS");
_delay((unsigned long)((1500)*(4000000/4000.0)));
stock=1;pad=1;coin=0;num=padcount1;
LCD_Clear();
LCD_CmdWrite(0X02);
LCD_DisplayString("  ROW_");
}

switch(stock)
{
case 1: stock_data='1';break;
case 2: stock_data='2';break;
case 3: stock_data='3';break;
case 4: stock_data='4';break;
case 5: stock_data='5';break;
}
LCD_CmdWrite(0X86);
LCD_DataWrite(stock_data);
LCD_DisplayString("  STOCK  ");
if(pad && !coin)
{
LCD_CmdWrite(0XC0);
LCD_DisplayString("   QTY: ");
switch(stock)
{
case 1: padcount=padcount1;Qflag=1;break;
case 2: padcount=padcount2;Qflag=1;break;
case 3: padcount=padcount3;Qflag=1;break;
case 4: padcount=padcount4;Qflag=1;break;
case 5: padcount=padcount5;Qflag=1;break;
}
display(padcount);
LCD_DisplayString(" Nos");
}
if(coin && !pad)
{
LCD_CmdWrite(0XC0);
LCD_DisplayString("   PRICE: ");
LCD_DataWrite(0x00);
switch(stock)
{
case 1: rupee=rupee1;break;
case 2: rupee=rupee2;break;
case 3: rupee=rupee3;break;
case 4: rupee=rupee4;break;
case 5: rupee=rupee5;break;
}
LCD_CmdWrite(0XCB);
display_price(rupee);
LCD_DataWrite(' ');
}

if(!RE1)
{
_delay((unsigned long)((100)*(4000000/4000.0)));

if(num==99 && pad)
{
num=0;
if(pad)
goto label1;
}
if(num==990 && coin)
num=0;

if(coin)num=num+10;
if(pad) num++;

label1:
if(pad && !coin)
{
switch(stock)
{
case 1: padcount1=num;break;
case 2: padcount2=num;break;
case 3: padcount3=num;break;
case 4: padcount4=num;break;
case 5: padcount5=num;break;
}
}
if(!pad && coin)
{
switch(stock)
{
case 1: rupee1=num;break;
case 2: rupee2=num;break;
case 3: rupee3=num;break;
case 4: rupee4=num;break;
case 5: rupee5=num;break;
}
}
}

if(RE0==0)
{
_delay((unsigned long)((100)*(4000000/4000.0)));

if(num==0 && pad)
{
num=99;
goto label2;
}
if(num==10 && coin)
{
num=990;
goto label2;
}

if(coin)num=num-10;
if(pad) num--;

label2:
if(pad && !coin)
{
switch(stock)
{
case 1: padcount1=num;break;
case 2: padcount2=num;break;
case 3: padcount3=num;break;
case 4: padcount4=num;break;
case 5: padcount5=num;break;

}
}
if(!pad && coin)
{
switch(stock)
{
case 1: rupee1=num;break;
case 2: rupee2=num;break;
case 3: rupee3=num;break;
case 4: rupee4=num;break;
case 5: rupee5=num;break;
}
}
}

if(!RE3)
{
while(!RE3);
if(!pad && coin)
{
switch(stock)
{
case 1: Write_EEPROM_Price(0X14,0X15,0X16,rupee1);pad=1;coin=0;stock=2;num=padcount2;Qflag=0;buzzer(50);break;
case 2: Write_EEPROM_Price(0X17,0X18,0X19,rupee2);pad=1;coin=0;stock=3;num=padcount3;Qflag=0;buzzer(50);break;
case 3: Write_EEPROM_Price(0X1A,0X1B,0X1C,rupee3);pad=1;coin=0;stock=4;num=padcount4;Qflag=0;buzzer(50);break;
case 4: Write_EEPROM_Price(0X1D,0X1E,0X1F,rupee4);pad=1;coin=0;stock=5;num=padcount5;Qflag=0;buzzer(50);break;
case 5: Write_EEPROM_Price(0X20,0X21,0X22,rupee5);pad=0;coin=0;stock=1;num=0;status=0;set=0;Qflag=0;
buzzer(50);
LCD_Clear();
LCD_DisplayString("  DATAS STORED..");
buzzer(1000);
LCD_Clear();
break;
}
}

if(pad && !coin && Qflag)
{
switch(stock)
{
case 1: Write_EEPROM(0,1,padcount1);Write_EEPROM(2,3,padcount1);pad=0;coin=1;num=rupee1;buzzer(50);break;
case 2: Write_EEPROM(4,5,padcount2);Write_EEPROM(6,7,padcount2);pad=0;coin=1;num=rupee2;buzzer(50);break;
case 3: Write_EEPROM(8,9,padcount3);Write_EEPROM(0X0A,0X0B,padcount3);pad=0;coin=1;num=rupee3;buzzer(50);break;
case 4: Write_EEPROM(0X0C,0X0D,padcount4);Write_EEPROM(0X0E,0X0F,padcount4);pad=0;coin=1;num=rupee4;buzzer(50);break;
case 5: Write_EEPROM(0X10,0X11,padcount5);Write_EEPROM(0X12,0X13,padcount5);pad=0;coin=1;num=rupee5;buzzer(50);break;
}

}
}
}
}
}



void PORT_Init()
{
TRISA = 0X37;
TRISB = 0XC1;
TRISC = 0XA0;
TRISD = 0XA8;
TRISE = 0X0F;
PORTB = 0X00;
PORTC = 0X00;
PORTA = 0X00;
PORTD = 0X00;
PORTE = 0X00;
OPTION_REG = 0X87;
INTCON = 0X90;
ANSEL = 0X00;
ANSELH = 0X00;
WPUB = 0XC1;
IOCB = 0X00;
OSCCON = 0X65;
}

void ToggleEpinOfLCD(void)
{
RA6 = 1;
_delay((unsigned long)((1)*(4000000/4000.0)));
RA6 = 0;
_delay((unsigned long)((1)*(4000000/4000.0)));
}


void LCD_CmdWrite(unsigned char Command)
{
RA7 = 0;


PORTC = ((Command>>4)&0x0F);
ToggleEpinOfLCD();


PORTC = (Command&0x0F);
ToggleEpinOfLCD();


}

void LCD_DataWrite(char LCDChar)
{
RA7 = 1;

PORTC = ((LCDChar>>4)&0x0F);
ToggleEpinOfLCD();


PORTC = (LCDChar&0x0F);
ToggleEpinOfLCD();


}


void LCD_Init(void)
{


RA6 = 0;
RA7 = 0;
RC0 = 0;
RC1 = 0;
RC2 = 0;
RC3 = 0;
TRISA6 = 0;
TRISA7 = 0;
TRISC0 = 0;
TRISC1 = 0;
TRISC2 = 0;
TRISC3 = 0;

LCD_CmdWrite(0x02);
LCD_CmdWrite(0x28);
LCD_CmdWrite(0x0c);
LCD_CmdWrite(0x01);
LCD_CmdWrite(0x06);

LCD_BuildChar(0,RupeeSymbol);

}


void LCD_DisplayString(const char *s)
{
while(*s)
LCD_DataWrite(*s++);
}


void LCD_Clear(void)
{
LCD_CmdWrite(0x01);
_delay((unsigned long)((2)*(4000000/4000.0)));
}

void displaypass(int data)
{
LCD_DataWrite((data/10)+0x30);
LCD_DataWrite((data%10)+0x30);
}
void display(int data)
{
sprintf(dispvalue,"%d",data);
LCD_DisplayString(dispvalue);


}

void display_price(int data)
{
sprintf(dispvalue,"%d",data);
LCD_DisplayString(dispvalue);

}

void LCD_BuildChar(unsigned char loc,unsigned char *p)
{
unsigned char i;
if(loc<8)
{
LCD_CmdWrite(0X40+(loc*8));
for(i=0;i<=8;i++)
LCD_DataWrite(p[i]);
}
LCD_CmdWrite(0x80);
}
void buzzer(unsigned int a)
{
RD1=1;
for(int i=0;i<=a;i++)
_delay((unsigned long)((1)*(4000000/4000.0)));
RD1=0;
}


void Write_EEPROM(unsigned char a1,unsigned char a2,unsigned int data_value)
{
eeprom_write(a1,(data_value/10));
eeprom_write(a2,(data_value%10));
}

unsigned int Read_EEPROM(unsigned char b1,unsigned char b2)
{
unsigned int c1=0,c2=0;
c1=eeprom_read(b1);
c2=eeprom_read(b2);
return ((c1*10)+c2);
}
void Write_EEPROM_Price(unsigned char a1,unsigned char a2,unsigned char a3,unsigned int data_value)
{
eeprom_write(a1,(data_value/100));
eeprom_write(a2,((data_value/10)%10));
eeprom_write(a3,(data_value%10));
}

unsigned int Read_EEPROM_Price(unsigned char b1,unsigned char b2,unsigned char b3)
{
unsigned int c1=0,c2=0,c3=0;
c1=eeprom_read(b1);
c2=eeprom_read(b2);
c3=eeprom_read(b3);
return ((c1*100)+(c2*10)+c3);
}


void STOCK_EMPTY_ROUTINE()
{
LCD_Clear();
LCD_DisplayString("  STOCK EMPTY!!  ");
LCD_CmdWrite(0XC0);
LCD_DisplayString(" CHOOSE AGAIN...  ");
buzzer(70);
_delay((unsigned long)((60)*(4000000/4000.0)));
buzzer(70);
_delay((unsigned long)((1500)*(4000000/4000.0)));
buzzer(50);
LCD_Clear();
}

void Set_Channel(unsigned int data)
{
if(data==10)
{
RB2=0;RB3=1;RB4=1;RB5=1;
}
else if(data>=20 && data<=40)
{
RB2=0;RB3=0;RB4=1;RB5=1;
}
else if(data>=50 && data<=90)
{
RB2=0;RB3=0;RB4=0;RB5=1;
}
else if(data>=100)
{
RB2=0;RB3=0;RB4=0;RB5=0;
}
else
{
RB2=1;RB3=1;RB4=1;RB5=1;
}
}

void Monitor_Balance(unsigned int amount)
{
if(amount<= 90) { RB5 = 1;}
if(amount<= 40) { RB5 = 1; RB4=1; }
if(amount<= 10) { RB5 = 1; RB4=1; RB3=1; }
if(amount==0) { RB5 = 1; RB4=1; RB3=1; RB2=1; }
}

void escprocess()
{

padcount=0;rupee=0;stock=0;
INTE=0;RB1=1;
status=0;
TRISA1 = 1;
TRISA0 = 1;
TRISA5 = 1;
TRISB6 = 1;
TRISB7 = 1;
LCD_Clear();
buzzer(50);

}
