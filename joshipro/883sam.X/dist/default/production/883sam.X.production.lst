

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Dec 26 16:08:13 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F883
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 1.44
    18                           ; Generated 14/09/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F883 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  0087                     	;# 
    89  0089                     	;# 
    90  008C                     	;# 
    91  008D                     	;# 
    92  008E                     	;# 
    93  008F                     	;# 
    94  0090                     	;# 
    95  0091                     	;# 
    96  0092                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0095                     	;# 
   102  0096                     	;# 
   103  0097                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009A                     	;# 
   107  009B                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  009F                     	;# 
   112  0105                     	;# 
   113  0107                     	;# 
   114  0108                     	;# 
   115  0109                     	;# 
   116  010C                     	;# 
   117  010C                     	;# 
   118  010D                     	;# 
   119  010E                     	;# 
   120  010F                     	;# 
   121  0185                     	;# 
   122  0187                     	;# 
   123  0188                     	;# 
   124  0189                     	;# 
   125  018C                     	;# 
   126  018D                     	;# 
   127  000B                     _INTCON	set	11
   128  0009                     _PORTE	set	9
   129  0005                     _PORTA	set	5
   130  0007                     _PORTC	set	7
   131  0006                     _PORTB	set	6
   132  0033                     _RB3	set	51
   133  0032                     _RB2	set	50
   134  0031                     _RB1	set	49
   135  0030                     _RB0	set	48
   136  003C                     _RC4	set	60
   137  003D                     _RC5	set	61
   138  008F                     _OSCCON	set	143
   139  0096                     _IOCB	set	150
   140  0095                     _WPUB	set	149
   141  0081                     _OPTION_REG	set	129
   142  0089                     _TRISE	set	137
   143  0087                     _TRISC	set	135
   144  0086                     _TRISB	set	134
   145  0085                     _TRISA	set	133
   146  0433                     _TRISB3	set	1075
   147  0432                     _TRISB2	set	1074
   148  0431                     _TRISB1	set	1073
   149  0430                     _TRISB0	set	1072
   150  043E                     _TRISC6	set	1086
   151  043F                     _TRISC7	set	1087
   152  0189                     _ANSELH	set	393
   153  0188                     _ANSEL	set	392
   154                           
   155                           	psect	strings
   156  0002                     __pstrings:	
   157  0002                     stringtab:	
   158  0002                     __stringtab:	
   159  0002                     stringcode:	
   160                           ;	String table - string pointers are 1 byte each
   161                           
   162  0002                     stringdir:	
   163  0002  3000               	movlw	high stringdir
   164  0003  008A               	movwf	10
   165  0004  0804               	movf	4,w
   166  0005  0A84               	incf	4,f
   167  0006  0782               	addwf	2,f
   168  0007                     __stringbase:	
   169  0007  3400               	retlw	0
   170  0008                     __end_of__stringtab:	
   171  0008                     STR_2:	
   172  0008  3457               	retlw	87	;'W'
   173  0009  3445               	retlw	69	;'E'
   174  000A  344C               	retlw	76	;'L'
   175  000B  3443               	retlw	67	;'C'
   176  000C  344F               	retlw	79	;'O'
   177  000D  344D               	retlw	77	;'M'
   178  000E  3445               	retlw	69	;'E'
   179  000F  342E               	retlw	46	;'.'
   180  0010  342E               	retlw	46	;'.'
   181  0011  342E               	retlw	46	;'.'
   182  0012  342E               	retlw	46	;'.'
   183  0013  342E               	retlw	46	;'.'
   184  0014  342E               	retlw	46	;'.'
   185  0015  3400               	retlw	0
   186  0016                     STR_1:	
   187  0016  3442               	retlw	66	;'B'
   188  0017  3441               	retlw	65	;'A'
   189  0018  344C               	retlw	76	;'L'
   190  0019  3441               	retlw	65	;'A'
   191  001A  344A               	retlw	74	;'J'
   192  001B  3449               	retlw	73	;'I'
   193  001C  342E               	retlw	46	;'.'
   194  001D  3450               	retlw	80	;'P'
   195  001E  3400               	retlw	0
   196                           
   197                           ; #config settings
   198  0000                     
   199                           	psect	cinit
   200  07FD                     start_initialization:	
   201  07FD                     __initialization:	
   202  07FD                     end_of_initialization:	
   203                           ;End of C runtime variable initialization code
   204                           
   205  07FD                     __end_of__initialization:	
   206  07FD  0183               	clrf	3
   207  07FE  118A  2FB6         	ljmp	_main	;jump to C main() function
   208                           
   209                           	psect	cstackCOMMON
   210  0070                     __pcstackCOMMON:	
   211  0070                     ?_PORT_Config:	
   212  0070                     ??_PORT_Config:	
   213                           ; 1 bytes @ 0x0
   214                           
   215  0070                     ?_ToggleEpinOfLCD:	
   216                           ; 1 bytes @ 0x0
   217                           
   218  0070                     ??_ToggleEpinOfLCD:	
   219                           ; 1 bytes @ 0x0
   220                           
   221  0070                     ?_LCD_CmdWrite:	
   222                           ; 1 bytes @ 0x0
   223                           
   224  0070                     ?_LCD_DataWrite:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0070                     ?_LCD_Init:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0070                     ?_LCD_DisplayString:	
   231                           ; 1 bytes @ 0x0
   232                           
   233  0070                     ?_LCD_Clear:	
   234                           ; 1 bytes @ 0x0
   235                           
   236  0070                     ?_main:	
   237                           ; 1 bytes @ 0x0
   238                           
   239                           
   240                           ; 1 bytes @ 0x0
   241  0070                     	ds	1
   242  0071                     ??_LCD_CmdWrite:	
   243  0071                     ??_LCD_DataWrite:	
   244                           ; 1 bytes @ 0x1
   245                           
   246                           
   247                           ; 1 bytes @ 0x1
   248  0071                     	ds	1
   249  0072                     LCD_CmdWrite@Command:	
   250  0072                     LCD_DataWrite@LCDChar:	
   251                           ; 1 bytes @ 0x2
   252                           
   253                           
   254                           ; 1 bytes @ 0x2
   255  0072                     	ds	1
   256  0073                     ??_LCD_Init:	
   257  0073                     ??_LCD_DisplayString:	
   258                           ; 1 bytes @ 0x3
   259                           
   260  0073                     ??_LCD_Clear:	
   261                           ; 1 bytes @ 0x3
   262                           
   263                           
   264                           ; 1 bytes @ 0x3
   265  0073                     	ds	1
   266  0074                     LCD_DisplayString@s:	
   267                           
   268                           ; 1 bytes @ 0x4
   269  0074                     	ds	1
   270  0075                     ??_main:	
   271                           
   272                           ; 1 bytes @ 0x5
   273  0075                     	ds	3
   274                           
   275                           	psect	maintext
   276  07B6                     __pmaintext:	
   277 ;;
   278 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   279 ;;
   280 ;; *************** function _main *****************
   281 ;; Defined at:
   282 ;;		line 186 in file "newmain.c"
   283 ;; Parameters:    Size  Location     Type
   284 ;;		None
   285 ;; Auto vars:     Size  Location     Type
   286 ;;		None
   287 ;; Return value:  Size  Location     Type
   288 ;;                  1    wreg      void 
   289 ;; Registers used:
   290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   291 ;; Tracked objects:
   292 ;;		On entry : B00/0
   293 ;;		On exit  : 0/0
   294 ;;		Unchanged: 0/0
   295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   296 ;;      Params:         0       0       0       0
   297 ;;      Locals:         0       0       0       0
   298 ;;      Temps:          3       0       0       0
   299 ;;      Totals:         3       0       0       0
   300 ;;Total ram usage:        3 bytes
   301 ;; Hardware stack levels required when called:    3
   302 ;; This function calls:
   303 ;;		_LCD_Clear
   304 ;;		_LCD_CmdWrite
   305 ;;		_LCD_DisplayString
   306 ;;		_LCD_Init
   307 ;;		_PORT_Config
   308 ;; This function is called by:
   309 ;;		Startup code after reset
   310 ;; This function uses a non-reentrant model
   311 ;;
   312                           
   313                           
   314                           ;psect for function _main
   315  07B6                     _main:	
   316                           
   317                           ;newmain.c: 188: PORT_Config();
   318                           
   319                           ;incstack = 0
   320                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   321  07B6  118A  2770  118A   	fcall	_PORT_Config
   322                           
   323                           ;newmain.c: 189: LCD_Init();
   324  07B9  118A  2792  118A   	fcall	_LCD_Init
   325                           
   326                           ;newmain.c: 190: _delay((unsigned long)((100)*(4000000/4000.0)));
   327  07BC  3082               	movlw	130
   328  07BD  00F6               	movwf	??_main+1
   329  07BE  30DD               	movlw	221
   330  07BF  00F5               	movwf	??_main
   331  07C0                     u57:	
   332  07C0  0BF5               	decfsz	??_main,f
   333  07C1  2FC0               	goto	u57
   334  07C2  0BF6               	decfsz	??_main+1,f
   335  07C3  2FC0               	goto	u57
   336  07C4  2FC5               	nop2
   337  07C5                     l644:	
   338                           ;newmain.c: 191: while(1)
   339                           
   340                           
   341                           ;newmain.c: 192: {
   342                           ;newmain.c: 193: LCD_Clear();
   343  07C5  118A  2703  118A   	fcall	_LCD_Clear
   344                           
   345                           ;newmain.c: 194: LCD_CmdWrite(0x80);
   346  07C8  3080               	movlw	128
   347  07C9  118A  273C  118A   	fcall	_LCD_CmdWrite
   348                           
   349                           ;newmain.c: 195: LCD_DisplayString("BALAJI.P");
   350  07CC  300F               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   351  07CD  118A  2726  118A   	fcall	_LCD_DisplayString
   352                           
   353                           ;newmain.c: 196: PORTC=0XFF;
   354  07D0  30FF               	movlw	255
   355  07D1  1283               	bcf	3,5	;RP0=0, select bank0
   356  07D2  1303               	bcf	3,6	;RP1=0, select bank0
   357  07D3  0087               	movwf	7	;volatile
   358                           
   359                           ;newmain.c: 197: _delay((unsigned long)((1000)*(4000000/4000.0)));
   360  07D4  3006               	movlw	6
   361  07D5  00F7               	movwf	??_main+2
   362  07D6  3013               	movlw	19
   363  07D7  00F6               	movwf	??_main+1
   364  07D8  30AD               	movlw	173
   365  07D9  00F5               	movwf	??_main
   366  07DA                     u67:	
   367  07DA  0BF5               	decfsz	??_main,f
   368  07DB  2FDA               	goto	u67
   369  07DC  0BF6               	decfsz	??_main+1,f
   370  07DD  2FDA               	goto	u67
   371  07DE  0BF7               	decfsz	??_main+2,f
   372  07DF  2FDA               	goto	u67
   373  07E0  2FE1               	nop2
   374                           
   375                           ;newmain.c: 198: LCD_Clear();
   376  07E1  118A  2703  118A   	fcall	_LCD_Clear
   377                           
   378                           ;newmain.c: 199: LCD_CmdWrite(0x80);
   379  07E4  3080               	movlw	128
   380  07E5  118A  273C  118A   	fcall	_LCD_CmdWrite
   381                           
   382                           ;newmain.c: 200: LCD_DisplayString("WELCOME......");
   383  07E8  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   384  07E9  118A  2726  118A   	fcall	_LCD_DisplayString
   385                           
   386                           ;newmain.c: 201: PORTC=0X00;
   387  07EC  1283               	bcf	3,5	;RP0=0, select bank0
   388  07ED  1303               	bcf	3,6	;RP1=0, select bank0
   389  07EE  0187               	clrf	7	;volatile
   390                           
   391                           ;newmain.c: 202: _delay((unsigned long)((1000)*(4000000/4000.0)));
   392  07EF  3006               	movlw	6
   393  07F0  00F7               	movwf	??_main+2
   394  07F1  3013               	movlw	19
   395  07F2  00F6               	movwf	??_main+1
   396  07F3  30AD               	movlw	173
   397  07F4  00F5               	movwf	??_main
   398  07F5                     u77:	
   399  07F5  0BF5               	decfsz	??_main,f
   400  07F6  2FF5               	goto	u77
   401  07F7  0BF6               	decfsz	??_main+1,f
   402  07F8  2FF5               	goto	u77
   403  07F9  0BF7               	decfsz	??_main+2,f
   404  07FA  2FF5               	goto	u77
   405  07FB  2FFC               	nop2
   406  07FC  2FC5               	goto	l644
   407  07FD                     __end_of_main:	
   408                           
   409                           	psect	text1
   410  0770                     __ptext1:	
   411 ;; *************** function _PORT_Config *****************
   412 ;; Defined at:
   413 ;;		line 89 in file "newmain.c"
   414 ;; Parameters:    Size  Location     Type
   415 ;;		None
   416 ;; Auto vars:     Size  Location     Type
   417 ;;		None
   418 ;; Return value:  Size  Location     Type
   419 ;;                  1    wreg      void 
   420 ;; Registers used:
   421 ;;		wreg, status,2
   422 ;; Tracked objects:
   423 ;;		On entry : 0/0
   424 ;;		On exit  : 0/0
   425 ;;		Unchanged: 0/0
   426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   427 ;;      Params:         0       0       0       0
   428 ;;      Locals:         0       0       0       0
   429 ;;      Temps:          0       0       0       0
   430 ;;      Totals:         0       0       0       0
   431 ;;Total ram usage:        0 bytes
   432 ;; Hardware stack levels used:    1
   433 ;; This function calls:
   434 ;;		Nothing
   435 ;; This function is called by:
   436 ;;		_main
   437 ;; This function uses a non-reentrant model
   438 ;;
   439                           
   440                           
   441                           ;psect for function _PORT_Config
   442  0770                     _PORT_Config:	
   443                           
   444                           ;newmain.c: 91: TRISA = 0XF8;
   445                           
   446                           ;incstack = 0
   447                           ; Regs used in _PORT_Config: [wreg+status,2]
   448  0770  30F8               	movlw	248
   449  0771  1683               	bsf	3,5	;RP0=1, select bank1
   450  0772  1303               	bcf	3,6	;RP1=0, select bank1
   451  0773  0085               	movwf	5	;volatile
   452                           
   453                           ;newmain.c: 92: TRISB = 0XF0;
   454  0774  30F0               	movlw	240
   455  0775  0086               	movwf	6	;volatile
   456                           
   457                           ;newmain.c: 93: TRISC = 0X01;
   458  0776  3001               	movlw	1
   459  0777  0087               	movwf	7	;volatile
   460                           
   461                           ;newmain.c: 94: TRISE = 0X08;
   462  0778  3008               	movlw	8
   463  0779  0089               	movwf	9	;volatile
   464                           
   465                           ;newmain.c: 95: PORTB = 0X00;
   466  077A  1283               	bcf	3,5	;RP0=0, select bank0
   467  077B  1303               	bcf	3,6	;RP1=0, select bank0
   468  077C  0186               	clrf	6	;volatile
   469                           
   470                           ;newmain.c: 96: PORTC = 0X00;
   471  077D  0187               	clrf	7	;volatile
   472                           
   473                           ;newmain.c: 97: PORTA = 0X00;
   474  077E  0185               	clrf	5	;volatile
   475                           
   476                           ;newmain.c: 98: PORTE = 0X00;
   477  077F  0189               	clrf	9	;volatile
   478                           
   479                           ;newmain.c: 99: OPTION_REG = 0X07;
   480  0780  3007               	movlw	7
   481  0781  1683               	bsf	3,5	;RP0=1, select bank1
   482  0782  1303               	bcf	3,6	;RP1=0, select bank1
   483  0783  0081               	movwf	1	;volatile
   484                           
   485                           ;newmain.c: 100: INTCON = 0X80;
   486  0784  3080               	movlw	128
   487  0785  008B               	movwf	11	;volatile
   488                           
   489                           ;newmain.c: 101: ANSEL = 0X00;
   490  0786  1683               	bsf	3,5	;RP0=1, select bank3
   491  0787  1703               	bsf	3,6	;RP1=1, select bank3
   492  0788  0188               	clrf	8	;volatile
   493                           
   494                           ;newmain.c: 102: ANSELH = 0X00;
   495  0789  0189               	clrf	9	;volatile
   496                           
   497                           ;newmain.c: 103: WPUB = 0XF0;
   498  078A  30F0               	movlw	240
   499  078B  1683               	bsf	3,5	;RP0=1, select bank1
   500  078C  1303               	bcf	3,6	;RP1=0, select bank1
   501  078D  0095               	movwf	21	;volatile
   502                           
   503                           ;newmain.c: 104: IOCB = 0X00;
   504  078E  0196               	clrf	22	;volatile
   505                           
   506                           ;newmain.c: 105: OSCCON = 0X65;
   507  078F  3065               	movlw	101
   508  0790  008F               	movwf	15	;volatile
   509  0791  0008               	return
   510  0792                     __end_of_PORT_Config:	
   511                           
   512                           	psect	text2
   513  0792                     __ptext2:	
   514 ;; *************** function _LCD_Init *****************
   515 ;; Defined at:
   516 ;;		line 147 in file "newmain.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;		None
   519 ;; Auto vars:     Size  Location     Type
   520 ;;		None
   521 ;; Return value:  Size  Location     Type
   522 ;;                  1    wreg      void 
   523 ;; Registers used:
   524 ;;		wreg, status,2, status,0, pclath, cstack
   525 ;; Tracked objects:
   526 ;;		On entry : 0/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   530 ;;      Params:         0       0       0       0
   531 ;;      Locals:         0       0       0       0
   532 ;;      Temps:          0       0       0       0
   533 ;;      Totals:         0       0       0       0
   534 ;;Total ram usage:        0 bytes
   535 ;; Hardware stack levels used:    1
   536 ;; Hardware stack levels required when called:    2
   537 ;; This function calls:
   538 ;;		_LCD_CmdWrite
   539 ;; This function is called by:
   540 ;;		_main
   541 ;; This function uses a non-reentrant model
   542 ;;
   543                           
   544                           
   545                           ;psect for function _LCD_Init
   546  0792                     _LCD_Init:	
   547                           
   548                           ;newmain.c: 150: RC5 = 0;
   549                           
   550                           ;incstack = 0
   551                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
   552  0792  1283               	bcf	3,5	;RP0=0, select bank0
   553  0793  1303               	bcf	3,6	;RP1=0, select bank0
   554  0794  1287               	bcf	7,5	;volatile
   555                           
   556                           ;newmain.c: 151: RC4 = 0;
   557  0795  1207               	bcf	7,4	;volatile
   558                           
   559                           ;newmain.c: 152: RB0 = 0;
   560  0796  1006               	bcf	6,0	;volatile
   561                           
   562                           ;newmain.c: 153: RB1 = 0;
   563  0797  1086               	bcf	6,1	;volatile
   564                           
   565                           ;newmain.c: 154: RB2 = 0;
   566  0798  1106               	bcf	6,2	;volatile
   567                           
   568                           ;newmain.c: 155: RB3 = 0;
   569  0799  1186               	bcf	6,3	;volatile
   570                           
   571                           ;newmain.c: 156: TRISC7 = 0;
   572  079A  1683               	bsf	3,5	;RP0=1, select bank1
   573  079B  1303               	bcf	3,6	;RP1=0, select bank1
   574  079C  1387               	bcf	7,7	;volatile
   575                           
   576                           ;newmain.c: 157: TRISC6 = 0;
   577  079D  1307               	bcf	7,6	;volatile
   578                           
   579                           ;newmain.c: 158: TRISB0 = 0;
   580  079E  1006               	bcf	6,0	;volatile
   581                           
   582                           ;newmain.c: 159: TRISB1 = 0;
   583  079F  1086               	bcf	6,1	;volatile
   584                           
   585                           ;newmain.c: 160: TRISB2 = 0;
   586  07A0  1106               	bcf	6,2	;volatile
   587                           
   588                           ;newmain.c: 161: TRISB3 = 0;
   589  07A1  1186               	bcf	6,3	;volatile
   590                           
   591                           ;newmain.c: 163: LCD_CmdWrite(0x02);
   592  07A2  3002               	movlw	2
   593  07A3  118A  273C  118A   	fcall	_LCD_CmdWrite
   594                           
   595                           ;newmain.c: 164: LCD_CmdWrite(0x28);
   596  07A6  3028               	movlw	40
   597  07A7  118A  273C  118A   	fcall	_LCD_CmdWrite
   598                           
   599                           ;newmain.c: 165: LCD_CmdWrite(0x0c);
   600  07AA  300C               	movlw	12
   601  07AB  118A  273C  118A   	fcall	_LCD_CmdWrite
   602                           
   603                           ;newmain.c: 166: LCD_CmdWrite(0x01);
   604  07AE  3001               	movlw	1
   605  07AF  118A  273C  118A   	fcall	_LCD_CmdWrite
   606                           
   607                           ;newmain.c: 167: LCD_CmdWrite(0x06);
   608  07B2  3006               	movlw	6
   609  07B3  118A  273C         	fcall	_LCD_CmdWrite
   610  07B5  0008               	return
   611  07B6                     __end_of_LCD_Init:	
   612                           
   613                           	psect	text3
   614  0726                     __ptext3:	
   615 ;; *************** function _LCD_DisplayString *****************
   616 ;; Defined at:
   617 ;;		line 172 in file "newmain.c"
   618 ;; Parameters:    Size  Location     Type
   619 ;;  s               1    wreg     PTR const unsigned char 
   620 ;;		 -> STR_2(14), STR_1(9), 
   621 ;; Auto vars:     Size  Location     Type
   622 ;;  s               1    4[COMMON] PTR const unsigned char 
   623 ;;		 -> STR_2(14), STR_1(9), 
   624 ;; Return value:  Size  Location     Type
   625 ;;                  1    wreg      void 
   626 ;; Registers used:
   627 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   628 ;; Tracked objects:
   629 ;;		On entry : 0/0
   630 ;;		On exit  : 0/0
   631 ;;		Unchanged: 0/0
   632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   633 ;;      Params:         0       0       0       0
   634 ;;      Locals:         1       0       0       0
   635 ;;      Temps:          1       0       0       0
   636 ;;      Totals:         2       0       0       0
   637 ;;Total ram usage:        2 bytes
   638 ;; Hardware stack levels used:    1
   639 ;; Hardware stack levels required when called:    2
   640 ;; This function calls:
   641 ;;		_LCD_DataWrite
   642 ;; This function is called by:
   643 ;;		_main
   644 ;; This function uses a non-reentrant model
   645 ;;
   646                           
   647                           
   648                           ;psect for function _LCD_DisplayString
   649  0726                     _LCD_DisplayString:	
   650                           
   651                           ;incstack = 0
   652                           ; Regs used in _LCD_DisplayString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   653                           ;LCD_DisplayString@s stored from wreg
   654  0726  00F4               	movwf	LCD_DisplayString@s
   655  0727                     l638:	
   656                           ;newmain.c: 174: while(*s)
   657                           
   658  0727  0874               	movf	LCD_DisplayString@s,w
   659  0728  0084               	movwf	4
   660  0729  118A  2002  118A   	fcall	stringdir
   661  072C  3A00               	xorlw	0
   662  072D  1903               	btfsc	3,2
   663  072E  0008               	return
   664                           
   665                           ;newmain.c: 175: LCD_DataWrite(*s++);
   666  072F  0874               	movf	LCD_DisplayString@s,w
   667  0730  0084               	movwf	4
   668  0731  118A  2002  118A   	fcall	stringdir
   669  0734  118A  2756  118A   	fcall	_LCD_DataWrite
   670  0737  3001               	movlw	1
   671  0738  00F3               	movwf	??_LCD_DisplayString
   672  0739  0873               	movf	??_LCD_DisplayString,w
   673  073A  07F4               	addwf	LCD_DisplayString@s,f
   674  073B  2F27               	goto	l638
   675  073C                     __end_of_LCD_DisplayString:	
   676                           
   677                           	psect	text4
   678  0756                     __ptext4:	
   679 ;; *************** function _LCD_DataWrite *****************
   680 ;; Defined at:
   681 ;;		line 132 in file "newmain.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;  LCDChar         1    wreg     unsigned char 
   684 ;; Auto vars:     Size  Location     Type
   685 ;;  LCDChar         1    2[COMMON] unsigned char 
   686 ;; Return value:  Size  Location     Type
   687 ;;                  1    wreg      void 
   688 ;; Registers used:
   689 ;;		wreg, status,2, status,0, pclath, cstack
   690 ;; Tracked objects:
   691 ;;		On entry : 0/0
   692 ;;		On exit  : 0/0
   693 ;;		Unchanged: 0/0
   694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   695 ;;      Params:         0       0       0       0
   696 ;;      Locals:         1       0       0       0
   697 ;;      Temps:          1       0       0       0
   698 ;;      Totals:         2       0       0       0
   699 ;;Total ram usage:        2 bytes
   700 ;; Hardware stack levels used:    1
   701 ;; Hardware stack levels required when called:    1
   702 ;; This function calls:
   703 ;;		_ToggleEpinOfLCD
   704 ;; This function is called by:
   705 ;;		_LCD_DisplayString
   706 ;; This function uses a non-reentrant model
   707 ;;
   708                           
   709                           
   710                           ;psect for function _LCD_DataWrite
   711  0756                     _LCD_DataWrite:	
   712                           
   713                           ;incstack = 0
   714                           ; Regs used in _LCD_DataWrite: [wreg+status,2+status,0+pclath+cstack]
   715                           ;LCD_DataWrite@LCDChar stored from wreg
   716  0756  00F2               	movwf	LCD_DataWrite@LCDChar
   717                           
   718                           ;newmain.c: 134: RC4 = 1;
   719  0757  1283               	bcf	3,5	;RP0=0, select bank0
   720  0758  1303               	bcf	3,6	;RP1=0, select bank0
   721  0759  1607               	bsf	7,4	;volatile
   722                           
   723                           ;newmain.c: 136: PORTB = ((LCDChar>>4)&0x0F);
   724  075A  0872               	movf	LCD_DataWrite@LCDChar,w
   725  075B  00F1               	movwf	??_LCD_DataWrite
   726  075C  3004               	movlw	4
   727  075D                     u25:	
   728  075D  1003               	clrc
   729  075E  0CF1               	rrf	??_LCD_DataWrite,f
   730  075F  3EFF               	addlw	-1
   731  0760  1D03               	skipz
   732  0761  2F5D               	goto	u25
   733  0762  0871               	movf	??_LCD_DataWrite,w
   734  0763  390F               	andlw	15
   735  0764  0086               	movwf	6	;volatile
   736                           
   737                           ;newmain.c: 137: ToggleEpinOfLCD();
   738  0765  118A  2711  118A   	fcall	_ToggleEpinOfLCD
   739                           
   740                           ;newmain.c: 140: PORTB = (LCDChar&0x0F);
   741  0768  0872               	movf	LCD_DataWrite@LCDChar,w
   742  0769  390F               	andlw	15
   743  076A  1283               	bcf	3,5	;RP0=0, select bank0
   744  076B  1303               	bcf	3,6	;RP1=0, select bank0
   745  076C  0086               	movwf	6	;volatile
   746                           
   747                           ;newmain.c: 141: ToggleEpinOfLCD();
   748  076D  118A  2711         	fcall	_ToggleEpinOfLCD
   749  076F  0008               	return
   750  0770                     __end_of_LCD_DataWrite:	
   751                           
   752                           	psect	text5
   753  0703                     __ptext5:	
   754 ;; *************** function _LCD_Clear *****************
   755 ;; Defined at:
   756 ;;		line 179 in file "newmain.c"
   757 ;; Parameters:    Size  Location     Type
   758 ;;		None
   759 ;; Auto vars:     Size  Location     Type
   760 ;;		None
   761 ;; Return value:  Size  Location     Type
   762 ;;                  1    wreg      void 
   763 ;; Registers used:
   764 ;;		wreg, status,2, status,0, pclath, cstack
   765 ;; Tracked objects:
   766 ;;		On entry : 0/0
   767 ;;		On exit  : 0/0
   768 ;;		Unchanged: 0/0
   769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   770 ;;      Params:         0       0       0       0
   771 ;;      Locals:         0       0       0       0
   772 ;;      Temps:          2       0       0       0
   773 ;;      Totals:         2       0       0       0
   774 ;;Total ram usage:        2 bytes
   775 ;; Hardware stack levels used:    1
   776 ;; Hardware stack levels required when called:    2
   777 ;; This function calls:
   778 ;;		_LCD_CmdWrite
   779 ;; This function is called by:
   780 ;;		_main
   781 ;; This function uses a non-reentrant model
   782 ;;
   783                           
   784                           
   785                           ;psect for function _LCD_Clear
   786  0703                     _LCD_Clear:	
   787                           
   788                           ;newmain.c: 181: LCD_CmdWrite(0x01);
   789                           
   790                           ;incstack = 0
   791                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
   792  0703  3001               	movlw	1
   793  0704  118A  273C  118A   	fcall	_LCD_CmdWrite
   794                           
   795                           ;newmain.c: 182: _delay((unsigned long)((2)*(4000000/4000.0)));
   796  0707  3003               	movlw	3
   797  0708  00F4               	movwf	??_LCD_Clear+1
   798  0709  3097               	movlw	151
   799  070A  00F3               	movwf	??_LCD_Clear
   800  070B                     u87:	
   801  070B  0BF3               	decfsz	??_LCD_Clear,f
   802  070C  2F0B               	goto	u87
   803  070D  0BF4               	decfsz	??_LCD_Clear+1,f
   804  070E  2F0B               	goto	u87
   805  070F  2F10               	nop2
   806  0710  0008               	return
   807  0711                     __end_of_LCD_Clear:	
   808                           
   809                           	psect	text6
   810  073C                     __ptext6:	
   811 ;; *************** function _LCD_CmdWrite *****************
   812 ;; Defined at:
   813 ;;		line 117 in file "newmain.c"
   814 ;; Parameters:    Size  Location     Type
   815 ;;  Command         1    wreg     unsigned char 
   816 ;; Auto vars:     Size  Location     Type
   817 ;;  Command         1    2[COMMON] unsigned char 
   818 ;; Return value:  Size  Location     Type
   819 ;;                  1    wreg      void 
   820 ;; Registers used:
   821 ;;		wreg, status,2, status,0, pclath, cstack
   822 ;; Tracked objects:
   823 ;;		On entry : 0/0
   824 ;;		On exit  : 0/0
   825 ;;		Unchanged: 0/0
   826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   827 ;;      Params:         0       0       0       0
   828 ;;      Locals:         1       0       0       0
   829 ;;      Temps:          1       0       0       0
   830 ;;      Totals:         2       0       0       0
   831 ;;Total ram usage:        2 bytes
   832 ;; Hardware stack levels used:    1
   833 ;; Hardware stack levels required when called:    1
   834 ;; This function calls:
   835 ;;		_ToggleEpinOfLCD
   836 ;; This function is called by:
   837 ;;		_LCD_Init
   838 ;;		_LCD_Clear
   839 ;;		_main
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           
   844                           ;psect for function _LCD_CmdWrite
   845  073C                     _LCD_CmdWrite:	
   846                           
   847                           ;incstack = 0
   848                           ; Regs used in _LCD_CmdWrite: [wreg+status,2+status,0+pclath+cstack]
   849                           ;LCD_CmdWrite@Command stored from wreg
   850  073C  00F2               	movwf	LCD_CmdWrite@Command
   851                           
   852                           ;newmain.c: 119: RC4 = 0;
   853  073D  1283               	bcf	3,5	;RP0=0, select bank0
   854  073E  1303               	bcf	3,6	;RP1=0, select bank0
   855  073F  1207               	bcf	7,4	;volatile
   856                           
   857                           ;newmain.c: 122: PORTB = ((Command>>4)&0x0F);
   858  0740  0872               	movf	LCD_CmdWrite@Command,w
   859  0741  00F1               	movwf	??_LCD_CmdWrite
   860  0742  3004               	movlw	4
   861  0743                     u15:	
   862  0743  1003               	clrc
   863  0744  0CF1               	rrf	??_LCD_CmdWrite,f
   864  0745  3EFF               	addlw	-1
   865  0746  1D03               	skipz
   866  0747  2F43               	goto	u15
   867  0748  0871               	movf	??_LCD_CmdWrite,w
   868  0749  390F               	andlw	15
   869  074A  0086               	movwf	6	;volatile
   870                           
   871                           ;newmain.c: 123: ToggleEpinOfLCD();
   872  074B  118A  2711  118A   	fcall	_ToggleEpinOfLCD
   873                           
   874                           ;newmain.c: 126: PORTB = (Command&0x0F);
   875  074E  0872               	movf	LCD_CmdWrite@Command,w
   876  074F  390F               	andlw	15
   877  0750  1283               	bcf	3,5	;RP0=0, select bank0
   878  0751  1303               	bcf	3,6	;RP1=0, select bank0
   879  0752  0086               	movwf	6	;volatile
   880                           
   881                           ;newmain.c: 127: ToggleEpinOfLCD();
   882  0753  118A  2711         	fcall	_ToggleEpinOfLCD
   883  0755  0008               	return
   884  0756                     __end_of_LCD_CmdWrite:	
   885                           
   886                           	psect	text7
   887  0711                     __ptext7:	
   888 ;; *************** function _ToggleEpinOfLCD *****************
   889 ;; Defined at:
   890 ;;		line 108 in file "newmain.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;		None
   893 ;; Auto vars:     Size  Location     Type
   894 ;;		None
   895 ;; Return value:  Size  Location     Type
   896 ;;                  1    wreg      void 
   897 ;; Registers used:
   898 ;;		wreg
   899 ;; Tracked objects:
   900 ;;		On entry : 0/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   904 ;;      Params:         0       0       0       0
   905 ;;      Locals:         0       0       0       0
   906 ;;      Temps:          1       0       0       0
   907 ;;      Totals:         1       0       0       0
   908 ;;Total ram usage:        1 bytes
   909 ;; Hardware stack levels used:    1
   910 ;; This function calls:
   911 ;;		Nothing
   912 ;; This function is called by:
   913 ;;		_LCD_CmdWrite
   914 ;;		_LCD_DataWrite
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918                           
   919                           ;psect for function _ToggleEpinOfLCD
   920  0711                     _ToggleEpinOfLCD:	
   921                           
   922                           ;newmain.c: 110: RC5 = 1;
   923                           
   924                           ;incstack = 0
   925                           ; Regs used in _ToggleEpinOfLCD: [wreg]
   926  0711  1283               	bcf	3,5	;RP0=0, select bank0
   927  0712  1303               	bcf	3,6	;RP1=0, select bank0
   928  0713  1687               	bsf	7,5	;volatile
   929                           
   930                           ;newmain.c: 111: _delay((unsigned long)((1)*(4000000/4000.0)));
   931  0714  30C7               	movlw	199
   932  0715  00F0               	movwf	??_ToggleEpinOfLCD
   933  0716                     u97:	
   934  0716  2F17               	nop2
   935  0717  0BF0               	decfsz	??_ToggleEpinOfLCD,f
   936  0718  2F16               	goto	u97
   937  0719  2F1A               	nop2
   938  071A  2F1B               	nop2
   939                           
   940                           ;newmain.c: 112: RC5 = 0;
   941  071B  1283               	bcf	3,5	;RP0=0, select bank0
   942  071C  1303               	bcf	3,6	;RP1=0, select bank0
   943  071D  1287               	bcf	7,5	;volatile
   944                           
   945                           ;newmain.c: 113: _delay((unsigned long)((1)*(4000000/4000.0)));
   946  071E  30C7               	movlw	199
   947  071F  00F0               	movwf	??_ToggleEpinOfLCD
   948  0720                     u107:	
   949  0720  2F21               	nop2
   950  0721  0BF0               	decfsz	??_ToggleEpinOfLCD,f
   951  0722  2F20               	goto	u107
   952  0723  2F24               	nop2
   953  0724  2F25               	nop2
   954  0725  0008               	return
   955  0726                     __end_of_ToggleEpinOfLCD:	
   956  007E                     btemp	set	126	;btemp
   957  007E                     wtemp0	set	126


Data Sizes:
    Strings     23
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    LCD_DisplayString@s	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_2(CODE[14]), STR_1(CODE[9]), 


Critical Paths under _main in COMMON

    _main->_LCD_Clear
    _main->_LCD_DisplayString
    _LCD_Init->_LCD_CmdWrite
    _LCD_DisplayString->_LCD_DataWrite
    _LCD_DataWrite->_ToggleEpinOfLCD
    _LCD_Clear->_LCD_CmdWrite
    _LCD_CmdWrite->_ToggleEpinOfLCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     219
                                              5 COMMON     3     3      0
                          _LCD_Clear
                       _LCD_CmdWrite
                  _LCD_DisplayString
                           _LCD_Init
                        _PORT_Config
 ---------------------------------------------------------------------------------
 (1) _PORT_Config                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0      30
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (1) _LCD_DisplayString                                    2     2      0     129
                                              3 COMMON     2     2      0
                      _LCD_DataWrite
 ---------------------------------------------------------------------------------
 (2) _LCD_DataWrite                                        2     2      0      30
                                              1 COMMON     2     2      0
                    _ToggleEpinOfLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            2     2      0      30
                                              3 COMMON     2     2      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (2) _LCD_CmdWrite                                         2     2      0      30
                                              1 COMMON     2     2      0
                    _ToggleEpinOfLCD
 ---------------------------------------------------------------------------------
 (3) _ToggleEpinOfLCD                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
     _LCD_CmdWrite
       _ToggleEpinOfLCD
   _LCD_CmdWrite
     _ToggleEpinOfLCD
   _LCD_DisplayString
     _LCD_DataWrite
       _ToggleEpinOfLCD
   _LCD_Init
     _LCD_CmdWrite
       _ToggleEpinOfLCD
   _PORT_Config

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0       0       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Dec 26 16:08:13 2017

                         pc 0002                 __CFG_CP$OFF 0000               ?_LCD_CmdWrite 0070  
                        u15 0743                          u25 075D                          u57 07C0  
                        u67 07DA                          u77 07F5                          u87 070B  
                        u97 0716                          fsr 0004              ?_LCD_DataWrite 0070  
                       l644 07C5                         l638 0727                         _RB0 0030  
                       _RB1 0031                         _RB2 0032                         _RB3 0033  
                       _RC4 003C                         _RC5 003D                         u107 0720  
              __CFG_CPD$OFF 0000                         fsr0 0004                __CFG_LVP$OFF 0000  
                      STR_1 0016                        STR_2 0008                        _IOCB 0096  
                      _WPUB 0095                __CFG_WRT$OFF 0000                        _main 07B6  
        __size_of_LCD_Clear 000E                        btemp 007E               __CFG_BOREN$ON 0000  
                      start 0000               __CFG_IESO$OFF 0000              ??_LCD_CmdWrite 0071  
          __end_of_LCD_Init 07B6                       ?_main 0070               __CFG_WDTE$OFF 0000  
                     _ANSEL 0188                       _PORTA 0005                       _PORTB 0006  
                     _PORTC 0007                       _PORTE 0009                       _TRISA 0085  
                     _TRISB 0086                       _TRISC 0087                       _TRISE 0089  
            __CFG_FCMEN$OFF 0000                       pclath 000A                       status 0003  
                     wtemp0 007E             _ToggleEpinOfLCD 0711              __CFG_MCLRE$OFF 0000  
           __initialization 07FD                __end_of_main 07FD             ??_LCD_DataWrite 0071  
                    ??_main 0075           __end_of_LCD_Clear 0711                      _ANSELH 0189  
                    _INTCON 000B                      _OSCCON 008F                      _TRISB0 0430  
                    _TRISB1 0431                      _TRISB2 0432                      _TRISB3 0433  
                    _TRISC6 043E                      _TRISC7 043F              __CFG_PWRTE$OFF 0000  
              ?_PORT_Config 0070        __end_of_LCD_CmdWrite 0756     __end_of_ToggleEpinOfLCD 0726  
   __end_of__initialization 07FD                   ?_LCD_Init 0070              __pcstackCOMMON 0070  
                ??_LCD_Init 0073                  __pmaintext 07B6                  __stringtab 0002  
          ?_ToggleEpinOfLCD 0070                     __ptext1 0770                     __ptext2 0792  
                   __ptext3 0726                     __ptext4 0756                     __ptext5 0703  
                   __ptext6 073C                     __ptext7 0711       __size_of_LCD_CmdWrite 001A  
        LCD_DisplayString@s 0074        __size_of_PORT_Config 0022                   _LCD_Clear 0703  
      end_of_initialization 07FD                _LCD_CmdWrite 073C       __end_of_LCD_DataWrite 0770  
                ?_LCD_Clear 0070           __size_of_LCD_Init 0024         start_initialization 07FD  
      LCD_DataWrite@LCDChar 0072    __CFG_FOSC$INTRC_NOCLKOUT 0000                   ___latbits 0001  
               ??_LCD_Clear 0073                   __pstrings 0002           _LCD_DisplayString 0726  
        ?_LCD_DisplayString 0070                    _LCD_Init 0792         ??_LCD_DisplayString 0073  
  __size_of_ToggleEpinOfLCD 0015                 __stringbase 0007               ??_PORT_Config 0070  
 __end_of_LCD_DisplayString 073C          __end_of__stringtab 0008           __CFG_BOR4V$BOR40V 0000  
       __end_of_PORT_Config 0792               __size_of_main 0047      __size_of_LCD_DataWrite 001A  
         ??_ToggleEpinOfLCD 0070  __size_of_LCD_DisplayString 0016         LCD_CmdWrite@Command 0072  
                 stringcode 0002               _LCD_DataWrite 0756                  _OPTION_REG 0081  
               _PORT_Config 0770                    stringdir 0002                    stringtab 0002  
