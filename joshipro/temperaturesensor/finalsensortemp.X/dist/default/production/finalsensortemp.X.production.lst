

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon Nov 27 11:57:29 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F676
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	psect	text14,local,class=CODE,merge=1,delta=2
    23                           	dabs	1,0x5E,2
    24  0000                     
    25                           ; Version 1.44
    26                           ; Generated 14/09/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F676 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0007                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0019                     	;# 
    74  001E                     	;# 
    75  001F                     	;# 
    76  0081                     	;# 
    77  0085                     	;# 
    78  0087                     	;# 
    79  008C                     	;# 
    80  008E                     	;# 
    81  0090                     	;# 
    82  0091                     	;# 
    83  0095                     	;# 
    84  0095                     	;# 
    85  0096                     	;# 
    86  0096                     	;# 
    87  0099                     	;# 
    88  009A                     	;# 
    89  009A                     	;# 
    90  009B                     	;# 
    91  009C                     	;# 
    92  009D                     	;# 
    93  009E                     	;# 
    94  009F                     	;# 
    95  0019                     _CMCON	set	25
    96  002D                     _RA5	set	45
    97  002C                     _RA4	set	44
    98  003C                     _RC4	set	60
    99  0028                     _RA0	set	40
   100  002A                     _RA2	set	42
   101  0029                     _RA1	set	41
   102  003B                     _RC3	set	59
   103  003A                     _RC2	set	58
   104  0039                     _RC1	set	57
   105  0038                     _RC0	set	56
   106  0087                     _TRISC	set	135
   107  0091                     _ANSEL	set	145
   108  042D                     _TRISA5	set	1069
   109  042C                     _TRISA4	set	1068
   110  042B                     _TRISA3	set	1067
   111  042A                     _TRISA2	set	1066
   112  0429                     _TRISA1	set	1065
   113  0428                     _TRISA0	set	1064
   114                           
   115                           	psect	strings
   116  0000'                    __pstrings:	
   117  0000'                    stringtab:	
   118  0000'                    __stringtab:	
   119  0000'                    stringcode:	
   120                           ;	String table - string pointers are 1 byte each
   121                           
   122  0000'                    stringdir:	
   123  0000' 3000'              	movlw	high stringdir
   124  0001' 008A               	movwf	10
   125  0002' 0804               	movf	4,w
   126  0003' 0A84               	incf	4,f
   127  0004' 0782               	addwf	2,f
   128  0005'                    __stringbase:	
   129  0005' 3400               	retlw	0
   130  0006'                    __end_of__stringtab:	
   131  0006'                    STR_14:	
   132  0006' 3463               	retlw	99	;'c'
   133  0007' 3475               	retlw	117	;'u'
   134  0008' 3472               	retlw	114	;'r'
   135  0009' 3472               	retlw	114	;'r'
   136  000A' 3465               	retlw	101	;'e'
   137  000B' 346E               	retlw	110	;'n'
   138  000C' 3474               	retlw	116	;'t'
   139  000D' 3420               	retlw	32	;' '
   140  000E' 3474               	retlw	116	;'t'
   141  000F' 3465               	retlw	101	;'e'
   142  0010' 346D               	retlw	109	;'m'
   143  0011' 3470               	retlw	112	;'p'
   144  0012' 343A               	retlw	58	;':'
   145  0013' 3400               	retlw	0
   146  0014'                    STR_2:	
   147  0014' 3473               	retlw	115	;'s'
   148  0015' 3474               	retlw	116	;'t'
   149  0016' 3461               	retlw	97	;'a'
   150  0017' 3474               	retlw	116	;'t'
   151  0018' 3475               	retlw	117	;'u'
   152  0019' 3473               	retlw	115	;'s'
   153  001A' 3420               	retlw	32	;' '
   154  001B' 343A               	retlw	58	;':'
   155  001C' 3420               	retlw	32	;' '
   156  001D' 344F               	retlw	79	;'O'
   157  001E' 3446               	retlw	70	;'F'
   158  001F' 3446               	retlw	70	;'F'
   159  0020' 3400               	retlw	0
   160  0021'                    STR_3:	
   161  0021' 3465               	retlw	101	;'e'
   162  0022' 346E               	retlw	110	;'n'
   163  0023' 3474               	retlw	116	;'t'
   164  0024' 3472               	retlw	114	;'r'
   165  0025' 3469               	retlw	105	;'i'
   166  0026' 346E               	retlw	110	;'n'
   167  0027' 3467               	retlw	103	;'g'
   168  0028' 3420               	retlw	32	;' '
   169  0029' 346D               	retlw	109	;'m'
   170  002A' 346F               	retlw	111	;'o'
   171  002B' 3464               	retlw	100	;'d'
   172  002C' 3465               	retlw	101	;'e'
   173  002D' 3400               	retlw	0
   174  002E'                    STR_1:	
   175  002E' 3473               	retlw	115	;'s'
   176  002F' 3474               	retlw	116	;'t'
   177  0030' 3461               	retlw	97	;'a'
   178  0031' 3474               	retlw	116	;'t'
   179  0032' 3475               	retlw	117	;'u'
   180  0033' 3473               	retlw	115	;'s'
   181  0034' 3420               	retlw	32	;' '
   182  0035' 343A               	retlw	58	;':'
   183  0036' 3420               	retlw	32	;' '
   184  0037' 344F               	retlw	79	;'O'
   185  0038' 344E               	retlw	78	;'N'
   186  0039' 3400               	retlw	0
   187  003A'                    STR_15:	
   188  003A' 3473               	retlw	115	;'s'
   189  003B' 3474               	retlw	116	;'t'
   190  003C' 3461               	retlw	97	;'a'
   191  003D' 3474               	retlw	116	;'t'
   192  003E' 3475               	retlw	117	;'u'
   193  003F' 3473               	retlw	115	;'s'
   194  0040' 3420               	retlw	32	;' '
   195  0041' 344F               	retlw	79	;'O'
   196  0042' 3446               	retlw	70	;'F'
   197  0043' 3446               	retlw	70	;'F'
   198  0044' 3400               	retlw	0
   199  0045'                    STR_4:	
   200  0045' 344F               	retlw	79	;'O'
   201  0046' 346E               	retlw	110	;'n'
   202  0047' 3420               	retlw	32	;' '
   203  0048' 3474               	retlw	116	;'t'
   204  0049' 3465               	retlw	101	;'e'
   205  004A' 346D               	retlw	109	;'m'
   206  004B' 3470               	retlw	112	;'p'
   207  004C' 343A               	retlw	58	;':'
   208  004D' 3420               	retlw	32	;' '
   209  004E' 3400               	retlw	0
   210  004F'                    STR_5:	
   211  004F' 344F               	retlw	79	;'O'
   212  0050' 3446               	retlw	70	;'F'
   213  0051' 3446               	retlw	70	;'F'
   214  0052' 3420               	retlw	32	;' '
   215  0053' 3474               	retlw	116	;'t'
   216  0054' 3465               	retlw	101	;'e'
   217  0055' 346D               	retlw	109	;'m'
   218  0056' 3470               	retlw	112	;'p'
   219  0057' 343A               	retlw	58	;':'
   220  0058' 3400               	retlw	0
   221  0059'                    STR_13:	
   222  0059' 344F               	retlw	79	;'O'
   223  005A' 3466               	retlw	102	;'f'
   224  005B' 3466               	retlw	102	;'f'
   225  005C' 345F               	retlw	95	;'_'
   226  005D' 3474               	retlw	116	;'t'
   227  005E' 3465               	retlw	101	;'e'
   228  005F' 346D               	retlw	109	;'m'
   229  0060' 3470               	retlw	112	;'p'
   230  0061' 343A               	retlw	58	;':'
   231  0062' 3400               	retlw	0
   232  0063'                    STR_16:	
   233  0063' 3473               	retlw	115	;'s'
   234  0064' 3474               	retlw	116	;'t'
   235  0065' 3461               	retlw	97	;'a'
   236  0066' 3474               	retlw	116	;'t'
   237  0067' 3475               	retlw	117	;'u'
   238  0068' 3473               	retlw	115	;'s'
   239  0069' 3420               	retlw	32	;' '
   240  006A' 344F               	retlw	79	;'O'
   241  006B' 344E               	retlw	78	;'N'
   242  006C' 3400               	retlw	0
   243  006D'                    STR_12:	
   244  006D' 344F               	retlw	79	;'O'
   245  006E' 346E               	retlw	110	;'n'
   246  006F' 345F               	retlw	95	;'_'
   247  0070' 3474               	retlw	116	;'t'
   248  0071' 3465               	retlw	101	;'e'
   249  0072' 346D               	retlw	109	;'m'
   250  0073' 3470               	retlw	112	;'p'
   251  0074' 343A               	retlw	58	;':'
   252  0075' 3400               	retlw	0
   253  0076'                    STR_6:	
   254  0076' 344F               	retlw	79	;'O'
   255  0077' 346E               	retlw	110	;'n'
   256  0078' 343A               	retlw	58	;':'
   257  0079' 3420               	retlw	32	;' '
   258  007A' 3400               	retlw	0
   259  007B'                    STR_7:	
   260  007B' 344F               	retlw	79	;'O'
   261  007C' 3446               	retlw	70	;'F'
   262  007D' 3446               	retlw	70	;'F'
   263  007E' 343A               	retlw	58	;':'
   264  007F' 3400               	retlw	0
   265  0080'                    STR_8:	
   266  0080' 343C               	retlw	60	;'<'
   267  0081' 343C               	retlw	60	;'<'
   268  0082' 3400               	retlw	0
   269  0076'                    
   270                           ; #config settings
   271  0000                     
   272                           	psect	cinit
   273  0000'                    start_initialization:	
   274  0000'                    __initialization:	
   275  0000'                    end_of_initialization:	
   276                           ;End of C runtime variable initialization code
   277                           
   278  0000'                    __end_of__initialization:	
   279  0000' 0183               	clrf	3
   280  0001' 2800'              	ljmp	_main	;jump to C main() function
   281                           
   282                           	psect	cstackCOMMON
   283  0000'                    __pcstackCOMMON:	
   284  0000'                    ??_Lcd_Port:	
   285  0000'                    ??_Lcd_Clear:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0000'                    ??_Lcd_Write_String:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0000'                    ??_lcddisplay:	
   292                           ; 1 bytes @ 0x0
   293                           
   294                           
   295                           	psect	cstackBANK0
   296  0000'                    __pcstackBANK0:	
   297                           ; 1 bytes @ 0x0
   298                           
   299  0000'                    ?_Lcd_Port:	
   300  0000'                    ?_Lcd_Cmd:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0000'                    ?_Lcd_Init:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0000'                    ?_Lcd_Write_Char:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0000'                    ?_Lcd_Write_String:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0000'                    ?_reset:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0000'                    ??_reset:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0000'                    ?_write:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0000'                    ??_write:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0000'                    ?_read:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0000'                    ??_read:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0000'                    ?_Lcd_Clear:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0000'                    ?_main:	
   334                           ; 2 bytes @ 0x0
   335                           
   336  0000'                    ?___awdiv:	
   337                           ; 2 bytes @ 0x0
   338                           
   339  0000'                    ?___awmod:	
   340                           ; 2 bytes @ 0x0
   341                           
   342  0000'                    Lcd_Port@a:	
   343                           ; 2 bytes @ 0x0
   344                           
   345  0000'                    ___awdiv@divisor:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0000'                    ___awmod@divisor:	
   349                           ; 2 bytes @ 0x0
   350                           
   351                           
   352                           ; 2 bytes @ 0x0
   353  0000'                    	ds	1
   354  0001'                    ??_Lcd_Cmd:	
   355  0001'                    ??_Lcd_Write_Char:	
   356                           ; 1 bytes @ 0x1
   357                           
   358  0001'                    write@WRT:	
   359                           ; 1 bytes @ 0x1
   360                           
   361                           
   362                           ; 1 bytes @ 0x1
   363  0001'                    	ds	1
   364  0002'                    Lcd_Write_Char@temp:	
   365  0002'                    write@Cmd:	
   366                           ; 1 bytes @ 0x2
   367                           
   368  0002'                    read@result:	
   369                           ; 1 bytes @ 0x2
   370                           
   371  0002'                    ___awdiv@dividend:	
   372                           ; 1 bytes @ 0x2
   373                           
   374  0002'                    ___awmod@dividend:	
   375                           ; 2 bytes @ 0x2
   376                           
   377                           
   378                           ; 2 bytes @ 0x2
   379  0002'                    	ds	1
   380  0003'                    Lcd_Cmd@a:	
   381  0003'                    Lcd_Write_Char@y:	
   382                           ; 1 bytes @ 0x3
   383                           
   384  0003'                    write@i:	
   385                           ; 1 bytes @ 0x3
   386                           
   387  0003'                    read@i:	
   388                           ; 1 bytes @ 0x3
   389                           
   390                           
   391                           ; 1 bytes @ 0x3
   392  0003'                    	ds	1
   393  0004'                    ?_Lcd_Set_Cursor:	
   394  0004'                    ??_Lcd_Init:	
   395                           ; 1 bytes @ 0x4
   396                           
   397  0004'                    ??___awdiv:	
   398                           ; 1 bytes @ 0x4
   399                           
   400  0004'                    ??___awmod:	
   401                           ; 1 bytes @ 0x4
   402                           
   403  0004'                    ?_checktemp:	
   404                           ; 1 bytes @ 0x4
   405                           
   406  0004'                    Lcd_Set_Cursor@b:	
   407                           ; 2 bytes @ 0x4
   408                           
   409  0004'                    Lcd_Write_Char@a:	
   410                           ; 1 bytes @ 0x4
   411                           
   412                           
   413                           ; 1 bytes @ 0x4
   414  0004'                    	ds	1
   415  0005'                    ??_Lcd_Set_Cursor:	
   416  0005'                    ___awdiv@counter:	
   417                           ; 1 bytes @ 0x5
   418                           
   419  0005'                    ___awmod@counter:	
   420                           ; 1 bytes @ 0x5
   421                           
   422  0005'                    Lcd_Write_String@i:	
   423                           ; 1 bytes @ 0x5
   424                           
   425                           
   426                           ; 2 bytes @ 0x5
   427  0005'                    	ds	1
   428  0006'                    ??_checktemp:	
   429  0006'                    ___awdiv@sign:	
   430                           ; 1 bytes @ 0x6
   431                           
   432  0006'                    ___awmod@sign:	
   433                           ; 1 bytes @ 0x6
   434                           
   435                           
   436                           ; 1 bytes @ 0x6
   437  0006'                    	ds	1
   438  0007'                    Lcd_Set_Cursor@a:	
   439  0007'                    Lcd_Write_String@a:	
   440                           ; 1 bytes @ 0x7
   441                           
   442  0007'                    ___awdiv@quotient:	
   443                           ; 1 bytes @ 0x7
   444                           
   445                           
   446                           ; 2 bytes @ 0x7
   447  0007'                    	ds	1
   448  0008'                    Lcd_Set_Cursor@z:	
   449  0008'                    checktemp@tempL:	
   450                           ; 1 bytes @ 0x8
   451                           
   452                           
   453                           ; 2 bytes @ 0x8
   454  0008'                    	ds	1
   455  0009'                    ?_lcddisplay:	
   456  0009'                    Lcd_Set_Cursor@y:	
   457                           ; 1 bytes @ 0x9
   458                           
   459  0009'                    lcddisplay@data:	
   460                           ; 1 bytes @ 0x9
   461                           
   462                           
   463                           ; 2 bytes @ 0x9
   464  0009'                    	ds	1
   465  000A'                    Lcd_Set_Cursor@temp:	
   466  000A'                    checktemp@tempH:	
   467                           ; 1 bytes @ 0xA
   468                           
   469                           
   470                           ; 2 bytes @ 0xA
   471  000A'                    	ds	2
   472  000C'                    checktemp@temp:	
   473                           
   474                           ; 2 bytes @ 0xC
   475  000C'                    	ds	2
   476  000E'                    ??_main:	
   477                           
   478                           ; 1 bytes @ 0xE
   479  000E'                    	ds	3
   480  0011'                    main@tempL:	
   481                           
   482                           ; 2 bytes @ 0x11
   483  0011'                    	ds	2
   484  0013'                    main@tempH:	
   485                           
   486                           ; 2 bytes @ 0x13
   487  0013'                    	ds	2
   488  0015'                    main@temp:	
   489                           
   490                           ; 2 bytes @ 0x15
   491  0015'                    	ds	2
   492  0017'                    main@b:	
   493                           
   494                           ; 2 bytes @ 0x17
   495  0017'                    	ds	2
   496  0019'                    main@c:	
   497                           
   498                           ; 2 bytes @ 0x19
   499  0019'                    	ds	2
   500  001B'                    main@curs:	
   501                           
   502                           ; 2 bytes @ 0x1B
   503  001B'                    	ds	2
   504  001D'                    main@c_115:	
   505                           
   506                           ; 2 bytes @ 0x1D
   507  001D'                    	ds	2
   508  001F'                    main@tempval:	
   509                           
   510                           ; 2 bytes @ 0x1F
   511  001F'                    	ds	2
   512  0021'                    main@highval:	
   513                           
   514                           ; 2 bytes @ 0x21
   515  0021'                    	ds	2
   516  0023'                    main@lowval:	
   517                           
   518                           ; 2 bytes @ 0x23
   519  0023'                    	ds	2
   520  0025'                    main@switchsel:	
   521                           
   522                           ; 2 bytes @ 0x25
   523  0025'                    	ds	2
   524                           
   525                           	psect	maintext
   526  0000'                    __pmaintext:	
   527 ;;
   528 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   529 ;;
   530 ;; *************** function _main *****************
   531 ;; Defined at:
   532 ;;		line 158 in file "newmain.c"
   533 ;; Parameters:    Size  Location     Type
   534 ;;		None
   535 ;; Auto vars:     Size  Location     Type
   536 ;;  c               2   29[BANK0 ] int 
   537 ;;  switchsel       2   37[BANK0 ] int 
   538 ;;  lowval          2   35[BANK0 ] int 
   539 ;;  highval         2   33[BANK0 ] int 
   540 ;;  tempval         2   31[BANK0 ] int 
   541 ;;  curs            2   27[BANK0 ] int 
   542 ;;  c               2   25[BANK0 ] int 
   543 ;;  b               2   23[BANK0 ] int 
   544 ;;  temp            2   21[BANK0 ] unsigned int 
   545 ;;  tempH           2   19[BANK0 ] unsigned short 
   546 ;;  tempL           2   17[BANK0 ] unsigned short 
   547 ;;  data            2    0        unsigned short 
   548 ;;  a               2    0        unsigned int 
   549 ;; Return value:  Size  Location     Type
   550 ;;                  2  115[None  ] int 
   551 ;; Registers used:
   552 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   553 ;; Tracked objects:
   554 ;;		On entry : B00/0
   555 ;;		On exit  : 0/0
   556 ;;		Unchanged: 0/0
   557 ;; Data sizes:     COMMON   BANK0
   558 ;;      Params:         0       0
   559 ;;      Locals:         0      22
   560 ;;      Temps:          0       3
   561 ;;      Totals:         0      25
   562 ;;Total ram usage:       25 bytes
   563 ;; Hardware stack levels required when called:    3
   564 ;; This function calls:
   565 ;;		_Lcd_Clear
   566 ;;		_Lcd_Init
   567 ;;		_Lcd_Set_Cursor
   568 ;;		_Lcd_Write_String
   569 ;;		_checktemp
   570 ;;		_lcddisplay
   571 ;; This function is called by:
   572 ;;		Startup code after reset
   573 ;; This function uses a non-reentrant model
   574 ;;
   575                           
   576                           
   577                           ;psect for function _main
   578  0000'                    _main:	
   579                           
   580                           ;newmain.c: 161: ANSEL = 0x00;
   581                           
   582                           ;incstack = 0
   583                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   584  0000' 1683               	bsf	3,5	;RP0=1, select bank1
   585  0001' 0191               	clrf	17	;volatile
   586                           
   587                           ;newmain.c: 162: CMCON = 0x07;
   588  0002' 3007               	movlw	7
   589  0003' 1283               	bcf	3,5	;RP0=0, select bank0
   590  0004' 0099               	movwf	25	;volatile
   591                           
   592                           ;newmain.c: 164: unsigned int a;
   593                           ;newmain.c: 165: unsigned short tempL = 0,tempH = 0;
   594  0005' 0191'              	clrf	main@tempL
   595  0006' 0192'              	clrf	main@tempL+1
   596  0007' 0193'              	clrf	main@tempH
   597  0008' 0194'              	clrf	main@tempH+1
   598                           
   599                           ;newmain.c: 166: unsigned int temp = 0;
   600  0009' 0195'              	clrf	main@temp
   601  000A' 0196'              	clrf	main@temp+1
   602                           
   603                           ;newmain.c: 167: unsigned short int data;
   604                           ;newmain.c: 168: int highval=96;
   605  000B' 3060               	movlw	96
   606  000C' 00A1'              	movwf	main@highval
   607  000D' 3000               	movlw	0
   608  000E' 00A2'              	movwf	main@highval+1
   609                           
   610                           ;newmain.c: 169: int lowval=92;
   611  000F' 305C               	movlw	92
   612  0010' 00A3'              	movwf	main@lowval
   613  0011' 3000               	movlw	0
   614  0012' 00A4'              	movwf	main@lowval+1
   615                           
   616                           ;newmain.c: 171: int b=0;
   617  0013' 0197'              	clrf	main@b
   618  0014' 0198'              	clrf	main@b+1
   619                           
   620                           ;newmain.c: 172: int tempval;
   621                           ;newmain.c: 175: int curs;
   622                           ;newmain.c: 176: int switchsel =0;
   623  0015' 01A5'              	clrf	main@switchsel
   624  0016' 01A6'              	clrf	main@switchsel+1
   625                           
   626                           ;newmain.c: 179: int c;
   627                           ;newmain.c: 181: TRISC = 0x30;
   628  0017' 3030               	movlw	48
   629  0018' 1683               	bsf	3,5	;RP0=1, select bank1
   630  0019' 0087               	movwf	7	;volatile
   631                           
   632                           ;newmain.c: 182: TRISA1 = 0;
   633  001A' 1085               	bcf	5,1	;volatile
   634                           
   635                           ;newmain.c: 183: TRISA2 = 0;
   636  001B' 1105               	bcf	5,2	;volatile
   637                           
   638                           ;newmain.c: 184: TRISA3 = 1;
   639  001C' 1585               	bsf	5,3	;volatile
   640                           
   641                           ;newmain.c: 185: TRISA4 = 1;
   642  001D' 1605               	bsf	5,4	;volatile
   643                           
   644                           ;newmain.c: 186: TRISA5 = 0;
   645  001E' 1285               	bcf	5,5	;volatile
   646                           
   647                           ;newmain.c: 187: _delay((unsigned long)((100)*(4000000/4000.0)));
   648  001F' 3082               	movlw	130
   649  0020' 1283               	bcf	3,5	;RP0=0, select bank0
   650  0021' 008F'              	movwf	??_main+1
   651  0022' 30DD               	movlw	221
   652  0023' 008E'              	movwf	??_main
   653  0024'                    u1137:	
   654  0024' 0B8E'              	decfsz	??_main,f
   655  0025' 2824'              	goto	u1137
   656  0026' 0B8F'              	decfsz	??_main+1,f
   657  0027' 2824'              	goto	u1137
   658  0028' 2829'              	nop2
   659                           
   660                           ;newmain.c: 188: Lcd_Init();
   661  0029' 2000'              	fcall	_Lcd_Init
   662  002A'                    L1:	
   663                           
   664                           ;newmain.c: 189: Lcd_Clear();
   665  002A' 2000'              	fcall	_Lcd_Clear
   666                           
   667                           ;newmain.c: 192: {
   668                           ;newmain.c: 193: tempval = checktemp();
   669                           
   670                           ;newmain.c: 191: while(1)
   671  002B' 2000'              	fcall	_checktemp
   672  002C' 1283               	bcf	3,5	;RP0=0, select bank0
   673  002D' 0805'              	movf	?_checktemp+1,w
   674  002E' 00A0'              	movwf	main@tempval+1
   675  002F' 0804'              	movf	?_checktemp,w
   676  0030' 009F'              	movwf	main@tempval
   677                           
   678                           ;newmain.c: 194: if(!RC4)
   679  0031' 1A07               	btfsc	7,4	;volatile
   680  0032' 2917'              	goto	l1393
   681                           
   682                           ;newmain.c: 195: {
   683                           ;newmain.c: 197: Lcd_Clear();
   684  0033' 2000'              	fcall	_Lcd_Clear
   685                           
   686                           ;newmain.c: 198: Lcd_Set_Cursor(1,1);
   687  0034' 1283               	bcf	3,5	;RP0=0, select bank0
   688  0035' 0184'              	clrf	Lcd_Set_Cursor@b
   689  0036' 0A84'              	incf	Lcd_Set_Cursor@b,f
   690  0037' 3001               	movlw	1
   691  0038' 2000'              	fcall	_Lcd_Set_Cursor
   692                           
   693                           ;newmain.c: 199: Lcd_Write_String("entring mode");
   694  0039' 301C               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   695  003A' 2000'              	fcall	_Lcd_Write_String
   696                           
   697                           ;newmain.c: 200: _delay((unsigned long)((1000)*(4000000/4000.0)));
   698  003B' 3006               	movlw	6
   699  003C' 1283               	bcf	3,5	;RP0=0, select bank0
   700  003D' 0090'              	movwf	??_main+2
   701  003E' 3013               	movlw	19
   702  003F' 008F'              	movwf	??_main+1
   703  0040' 30AD               	movlw	173
   704  0041' 008E'              	movwf	??_main
   705  0042'                    u1147:	
   706  0042' 0B8E'              	decfsz	??_main,f
   707  0043' 2842'              	goto	u1147
   708  0044' 0B8F'              	decfsz	??_main+1,f
   709  0045' 2842'              	goto	u1147
   710  0046' 0B90'              	decfsz	??_main+2,f
   711  0047' 2842'              	goto	u1147
   712  0048' 2849'              	nop2
   713                           
   714                           ;newmain.c: 201: Lcd_Clear();
   715  0049' 2000'              	fcall	_Lcd_Clear
   716                           
   717                           ;newmain.c: 202: Lcd_Write_String("On temp: ");
   718  004A' 3040               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   719  004B' 2000'              	fcall	_Lcd_Write_String
   720                           
   721                           ;newmain.c: 203: lcddisplay(lowval);
   722  004C' 1283               	bcf	3,5	;RP0=0, select bank0
   723  004D' 0824'              	movf	main@lowval+1,w
   724  004E' 008A'              	movwf	lcddisplay@data+1
   725  004F' 0823'              	movf	main@lowval,w
   726  0050' 0089'              	movwf	lcddisplay@data
   727  0051' 2000'              	fcall	_lcddisplay
   728                           
   729                           ;newmain.c: 204: Lcd_Set_Cursor(2,1);
   730  0052' 1283               	bcf	3,5	;RP0=0, select bank0
   731  0053' 0184'              	clrf	Lcd_Set_Cursor@b
   732  0054' 0A84'              	incf	Lcd_Set_Cursor@b,f
   733  0055' 3002               	movlw	2
   734  0056' 2000'              	fcall	_Lcd_Set_Cursor
   735                           
   736                           ;newmain.c: 205: Lcd_Write_String("OFF temp:");
   737  0057' 304A               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   738  0058' 2000'              	fcall	_Lcd_Write_String
   739                           
   740                           ;newmain.c: 206: lcddisplay(highval);
   741  0059' 1283               	bcf	3,5	;RP0=0, select bank0
   742  005A' 0822'              	movf	main@highval+1,w
   743  005B' 008A'              	movwf	lcddisplay@data+1
   744  005C' 0821'              	movf	main@highval,w
   745  005D' 0089'              	movwf	lcddisplay@data
   746  005E' 2000'              	fcall	_lcddisplay
   747                           
   748                           ;newmain.c: 207: int c = 0;
   749  005F' 1283               	bcf	3,5	;RP0=0, select bank0
   750  0060' 019D'              	clrf	main@c_115
   751  0061' 019E'              	clrf	main@c_115+1
   752                           
   753                           ;newmain.c: 209: for(c=0;c<=100;)
   754  0062' 019D'              	clrf	main@c_115
   755  0063' 019E'              	clrf	main@c_115+1
   756  0064' 081E'              	movf	main@c_115+1,w
   757  0065' 3A80               	xorlw	128
   758  0066' 00DF               	movwf	95
   759  0067' 3080               	movlw	128
   760  0068' 025F               	subwf	95,w
   761  0069' 1D03               	skipz
   762  006A' 286D'              	goto	u985
   763  006B' 3065               	movlw	101
   764  006C' 021D'              	subwf	main@c_115,w
   765  006D'                    u985:	
   766  006D' 1803               	btfsc	3,0
   767  006E' 2917'              	goto	l1393
   768  006F'                    l118:	
   769                           
   770                           ;newmain.c: 210: {
   771                           ;newmain.c: 212: if(!RA4)
   772  006F' 1283               	bcf	3,5	;RP0=0, select bank0
   773  0070' 1A05               	btfsc	5,4	;volatile
   774  0071' 28EA'              	goto	l1379
   775                           
   776                           ;newmain.c: 213: {
   777                           ;newmain.c: 215: switchsel++;
   778  0072' 3001               	movlw	1
   779  0073' 07A5'              	addwf	main@switchsel,f
   780  0074' 1803               	skipnc
   781  0075' 0AA6'              	incf	main@switchsel+1,f
   782  0076' 3000               	movlw	0
   783  0077' 07A6'              	addwf	main@switchsel+1,f
   784                           
   785                           ;newmain.c: 216: Lcd_Clear();
   786  0078' 2000'              	fcall	_Lcd_Clear
   787                           
   788                           ;newmain.c: 218: if((switchsel == 1)&&(switchsel<=2))
   789  0079' 1283               	bcf	3,5	;RP0=0, select bank0
   790  007A' 0325'              	decf	main@switchsel,w
   791  007B' 0426'              	iorwf	main@switchsel+1,w
   792  007C' 1D03               	btfss	3,2
   793  007D' 28AE'              	goto	l1357
   794  007E' 0826'              	movf	main@switchsel+1,w
   795  007F' 3A80               	xorlw	128
   796  0080' 00DF               	movwf	95
   797  0081' 3080               	movlw	128
   798  0082' 025F               	subwf	95,w
   799  0083' 1D03               	skipz
   800  0084' 2887'              	goto	u1015
   801  0085' 3003               	movlw	3
   802  0086' 0225'              	subwf	main@switchsel,w
   803  0087'                    u1015:	
   804  0087' 1803               	skipnc
   805  0088' 28AE'              	goto	l1357
   806                           
   807                           ;newmain.c: 219: {
   808                           ;newmain.c: 221: Lcd_Clear();
   809  0089' 2000'              	fcall	_Lcd_Clear
   810                           
   811                           ;newmain.c: 222: Lcd_Write_String("On: ");
   812  008A' 3071               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   813  008B' 2000'              	fcall	_Lcd_Write_String
   814                           
   815                           ;newmain.c: 223: lcddisplay(lowval);
   816  008C' 1283               	bcf	3,5	;RP0=0, select bank0
   817  008D' 0824'              	movf	main@lowval+1,w
   818  008E' 008A'              	movwf	lcddisplay@data+1
   819  008F' 0823'              	movf	main@lowval,w
   820  0090' 0089'              	movwf	lcddisplay@data
   821  0091' 2000'              	fcall	_lcddisplay
   822                           
   823                           ;newmain.c: 224: Lcd_Set_Cursor(2,1);
   824  0092' 1283               	bcf	3,5	;RP0=0, select bank0
   825  0093' 0184'              	clrf	Lcd_Set_Cursor@b
   826  0094' 0A84'              	incf	Lcd_Set_Cursor@b,f
   827  0095' 3002               	movlw	2
   828  0096' 2000'              	fcall	_Lcd_Set_Cursor
   829                           
   830                           ;newmain.c: 225: Lcd_Write_String("OFF:");
   831  0097' 3076               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   832  0098' 2000'              	fcall	_Lcd_Write_String
   833                           
   834                           ;newmain.c: 226: lcddisplay(highval);
   835  0099' 1283               	bcf	3,5	;RP0=0, select bank0
   836  009A' 0822'              	movf	main@highval+1,w
   837  009B' 008A'              	movwf	lcddisplay@data+1
   838  009C' 0821'              	movf	main@highval,w
   839  009D' 0089'              	movwf	lcddisplay@data
   840  009E' 2000'              	fcall	_lcddisplay
   841                           
   842                           ;newmain.c: 228: Lcd_Set_Cursor(1,15);
   843  009F' 300F               	movlw	15
   844  00A0' 1283               	bcf	3,5	;RP0=0, select bank0
   845  00A1' 008E'              	movwf	??_main
   846  00A2' 080E'              	movf	??_main,w
   847  00A3' 0084'              	movwf	Lcd_Set_Cursor@b
   848  00A4' 3001               	movlw	1
   849  00A5' 2000'              	fcall	_Lcd_Set_Cursor
   850                           
   851                           ;newmain.c: 229: Lcd_Write_String("<<");
   852  00A6' 307B               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
   853  00A7' 2000'              	fcall	_Lcd_Write_String
   854                           
   855                           ;newmain.c: 230: curs = 1;
   856  00A8' 3001               	movlw	1
   857  00A9' 1283               	bcf	3,5	;RP0=0, select bank0
   858  00AA' 009B'              	movwf	main@curs
   859  00AB' 3000               	movlw	0
   860  00AC' 009C'              	movwf	main@curs+1
   861                           
   862                           ;newmain.c: 232: }
   863  00AD' 28EA'              	goto	l1379
   864  00AE'                    l1357:	
   865                           
   866                           ;newmain.c: 233: else if((switchsel == 2) && (switchsel<=2))
   867  00AE' 3002               	movlw	2
   868  00AF' 1283               	bcf	3,5	;RP0=0, select bank0
   869  00B0' 0625'              	xorwf	main@switchsel,w
   870  00B1' 0426'              	iorwf	main@switchsel+1,w
   871  00B2' 1D03               	btfss	3,2
   872  00B3' 28EA'              	goto	l1379
   873  00B4' 0826'              	movf	main@switchsel+1,w
   874  00B5' 3A80               	xorlw	128
   875  00B6' 00DF               	movwf	95
   876  00B7' 3080               	movlw	128
   877  00B8' 025F               	subwf	95,w
   878  00B9' 1D03               	skipz
   879  00BA' 28BD'              	goto	u1035
   880  00BB' 3003               	movlw	3
   881  00BC' 0225'              	subwf	main@switchsel,w
   882  00BD'                    u1035:	
   883  00BD' 1803               	skipnc
   884  00BE' 28EA'              	goto	l1379
   885                           
   886                           ;newmain.c: 235: {
   887                           ;newmain.c: 236: Lcd_Clear();
   888  00BF' 2000'              	fcall	_Lcd_Clear
   889                           
   890                           ;newmain.c: 237: Lcd_Write_String("On: ");
   891  00C0' 3071               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   892  00C1' 2000'              	fcall	_Lcd_Write_String
   893                           
   894                           ;newmain.c: 238: lcddisplay(lowval);
   895  00C2' 1283               	bcf	3,5	;RP0=0, select bank0
   896  00C3' 0824'              	movf	main@lowval+1,w
   897  00C4' 008A'              	movwf	lcddisplay@data+1
   898  00C5' 0823'              	movf	main@lowval,w
   899  00C6' 0089'              	movwf	lcddisplay@data
   900  00C7' 2000'              	fcall	_lcddisplay
   901                           
   902                           ;newmain.c: 239: Lcd_Set_Cursor(2,1);
   903  00C8' 1283               	bcf	3,5	;RP0=0, select bank0
   904  00C9' 0184'              	clrf	Lcd_Set_Cursor@b
   905  00CA' 0A84'              	incf	Lcd_Set_Cursor@b,f
   906  00CB' 3002               	movlw	2
   907  00CC' 2000'              	fcall	_Lcd_Set_Cursor
   908                           
   909                           ;newmain.c: 240: Lcd_Write_String("OFF:");
   910  00CD' 3076               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   911  00CE' 2000'              	fcall	_Lcd_Write_String
   912                           
   913                           ;newmain.c: 241: lcddisplay(highval);
   914  00CF' 1283               	bcf	3,5	;RP0=0, select bank0
   915  00D0' 0822'              	movf	main@highval+1,w
   916  00D1' 008A'              	movwf	lcddisplay@data+1
   917  00D2' 0821'              	movf	main@highval,w
   918  00D3' 0089'              	movwf	lcddisplay@data
   919  00D4' 2000'              	fcall	_lcddisplay
   920                           
   921                           ;newmain.c: 242: Lcd_Set_Cursor(2,15);
   922  00D5' 300F               	movlw	15
   923  00D6' 1283               	bcf	3,5	;RP0=0, select bank0
   924  00D7' 008E'              	movwf	??_main
   925  00D8' 080E'              	movf	??_main,w
   926  00D9' 0084'              	movwf	Lcd_Set_Cursor@b
   927  00DA' 3002               	movlw	2
   928  00DB' 2000'              	fcall	_Lcd_Set_Cursor
   929                           
   930                           ;newmain.c: 243: Lcd_Write_String("<<");
   931  00DC' 307B               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
   932  00DD' 2000'              	fcall	_Lcd_Write_String
   933                           
   934                           ;newmain.c: 244: curs = 2;
   935  00DE' 3002               	movlw	2
   936  00DF' 1283               	bcf	3,5	;RP0=0, select bank0
   937  00E0' 009B'              	movwf	main@curs
   938  00E1' 3000               	movlw	0
   939  00E2' 009C'              	movwf	main@curs+1
   940                           
   941                           ;newmain.c: 248: if(switchsel == 2)
   942  00E3' 3002               	movlw	2
   943  00E4' 0625'              	xorwf	main@switchsel,w
   944  00E5' 0426'              	iorwf	main@switchsel+1,w
   945  00E6' 1D03               	btfss	3,2
   946  00E7' 28EA'              	goto	l1379
   947                           
   948                           ;newmain.c: 249: {
   949                           ;newmain.c: 250: switchsel=0;
   950  00E8' 01A5'              	clrf	main@switchsel
   951  00E9' 01A6'              	clrf	main@switchsel+1
   952  00EA'                    l1379:	
   953                           
   954                           ;newmain.c: 251: }
   955                           ;newmain.c: 252: }
   956                           ;newmain.c: 254: }
   957                           ;newmain.c: 256: if((!RC4)&&(curs == 1))
   958  00EA' 1283               	bcf	3,5	;RP0=0, select bank0
   959  00EB' 1A07               	btfsc	7,4	;volatile
   960  00EC' 28F1'              	goto	l125
   961  00ED' 031B'              	decf	main@curs,w
   962  00EE' 041C'              	iorwf	main@curs+1,w
   963  00EF' 1903               	btfsc	3,2
   964  00F0' 2917'              	goto	l1393
   965  00F1'                    l125:	
   966                           ;newmain.c: 257: {
   967                           ;newmain.c: 258: break;
   968                           
   969                           
   970                           ;newmain.c: 259: }
   971                           ;newmain.c: 260: if((!RC4)&&(curs == 2))
   972  00F1' 1A07               	btfsc	7,4	;volatile
   973  00F2' 28F8'              	goto	l1389
   974  00F3' 3002               	movlw	2
   975  00F4' 061B'              	xorwf	main@curs,w
   976  00F5' 041C'              	iorwf	main@curs+1,w
   977  00F6' 1903               	btfsc	3,2
   978  00F7' 2917'              	goto	l1393
   979  00F8'                    l1389:	
   980                           ;newmain.c: 261: {
   981                           ;newmain.c: 262: break;
   982                           
   983                           
   984                           ;newmain.c: 263: }
   985                           ;newmain.c: 264: _delay((unsigned long)((500)*(4000000/4000.0)));
   986  00F8' 3003               	movlw	3
   987  00F9' 0090'              	movwf	??_main+2
   988  00FA' 308A               	movlw	138
   989  00FB' 008F'              	movwf	??_main+1
   990  00FC' 3055               	movlw	85
   991  00FD' 008E'              	movwf	??_main
   992  00FE'                    u1157:	
   993  00FE' 0B8E'              	decfsz	??_main,f
   994  00FF' 28FE'              	goto	u1157
   995  0100' 0B8F'              	decfsz	??_main+1,f
   996  0101' 28FE'              	goto	u1157
   997  0102' 0B90'              	decfsz	??_main+2,f
   998  0103' 28FE'              	goto	u1157
   999  0104' 2905'              	nop2
  1000                           
  1001                           ;newmain.c: 265: c++;
  1002  0105' 3001               	movlw	1
  1003  0106' 1283               	bcf	3,5	;RP0=0, select bank0
  1004  0107' 079D'              	addwf	main@c_115,f
  1005  0108' 1803               	skipnc
  1006  0109' 0A9E'              	incf	main@c_115+1,f
  1007  010A' 3000               	movlw	0
  1008  010B' 079E'              	addwf	main@c_115+1,f
  1009  010C' 081E'              	movf	main@c_115+1,w
  1010  010D' 3A80               	xorlw	128
  1011  010E' 00DF               	movwf	95
  1012  010F' 3080               	movlw	128
  1013  0110' 025F               	subwf	95,w
  1014  0111' 1D03               	skipz
  1015  0112' 2915'              	goto	u1095
  1016  0113' 3065               	movlw	101
  1017  0114' 021D'              	subwf	main@c_115,w
  1018  0115'                    u1095:	
  1019  0115' 1C03               	skipc
  1020  0116' 286F'              	goto	l118
  1021  0117'                    l1393:	
  1022                           
  1023                           ;newmain.c: 266: }
  1024                           ;newmain.c: 269: }
  1025                           ;newmain.c: 324: if((tempval>=lowval)&&(tempval<=highval))
  1026  0117' 1283               	bcf	3,5	;RP0=0, select bank0
  1027  0118' 0820'              	movf	main@tempval+1,w
  1028  0119' 3A80               	xorlw	128
  1029  011A' 008E'              	movwf	??_main
  1030  011B' 0824'              	movf	main@lowval+1,w
  1031  011C' 3A80               	xorlw	128
  1032  011D' 020E'              	subwf	??_main,w
  1033  011E' 1D03               	skipz
  1034  011F' 2922'              	goto	u1105
  1035  0120' 0823'              	movf	main@lowval,w
  1036  0121' 021F'              	subwf	main@tempval,w
  1037  0122'                    u1105:	
  1038  0122' 1C03               	skipc
  1039  0123' 2936'              	goto	l127
  1040  0124' 1283               	bcf	3,5	;RP0=0, select bank0
  1041  0125' 0822'              	movf	main@highval+1,w
  1042  0126' 3A80               	xorlw	128
  1043  0127' 008E'              	movwf	??_main
  1044  0128' 0820'              	movf	main@tempval+1,w
  1045  0129' 3A80               	xorlw	128
  1046  012A' 020E'              	subwf	??_main,w
  1047  012B' 1D03               	skipz
  1048  012C' 292F'              	goto	u1115
  1049  012D' 081F'              	movf	main@tempval,w
  1050  012E' 0221'              	subwf	main@highval,w
  1051  012F'                    u1115:	
  1052  012F' 1C03               	skipc
  1053  0130' 2936'              	goto	l127
  1054                           
  1055                           ;newmain.c: 326: {
  1056                           ;newmain.c: 328: RA5 = 1;
  1057  0131' 1283               	bcf	3,5	;RP0=0, select bank0
  1058  0132' 1685               	bsf	5,5	;volatile
  1059                           
  1060                           ;newmain.c: 329: c = 0;
  1061  0133' 0199'              	clrf	main@c
  1062  0134' 019A'              	clrf	main@c+1
  1063                           
  1064                           ;newmain.c: 330: }
  1065  0135' 293C'              	goto	l1403
  1066  0136'                    l127:	
  1067                           
  1068                           ;newmain.c: 331: else
  1069                           ;newmain.c: 332: {
  1070                           ;newmain.c: 334: RA5 = 0;
  1071  0136' 1283               	bcf	3,5	;RP0=0, select bank0
  1072  0137' 1285               	bcf	5,5	;volatile
  1073                           
  1074                           ;newmain.c: 335: c=1;
  1075  0138' 3001               	movlw	1
  1076  0139' 0099'              	movwf	main@c
  1077  013A' 3000               	movlw	0
  1078  013B' 009A'              	movwf	main@c+1
  1079  013C'                    l1403:	
  1080                           
  1081                           ;newmain.c: 336: }
  1082                           ;newmain.c: 339: Lcd_Set_Cursor(1,1);
  1083  013C' 0184'              	clrf	Lcd_Set_Cursor@b
  1084  013D' 0A84'              	incf	Lcd_Set_Cursor@b,f
  1085  013E' 3001               	movlw	1
  1086  013F' 2000'              	fcall	_Lcd_Set_Cursor
  1087                           
  1088                           ;newmain.c: 340: Lcd_Write_String("On_temp:");
  1089  0140' 3068               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1090  0141' 2000'              	fcall	_Lcd_Write_String
  1091                           
  1092                           ;newmain.c: 341: lcddisplay(lowval);
  1093  0142' 1283               	bcf	3,5	;RP0=0, select bank0
  1094  0143' 0824'              	movf	main@lowval+1,w
  1095  0144' 008A'              	movwf	lcddisplay@data+1
  1096  0145' 0823'              	movf	main@lowval,w
  1097  0146' 0089'              	movwf	lcddisplay@data
  1098  0147' 2000'              	fcall	_lcddisplay
  1099                           
  1100                           ;newmain.c: 342: Lcd_Set_Cursor(2,1);
  1101  0148' 1283               	bcf	3,5	;RP0=0, select bank0
  1102  0149' 0184'              	clrf	Lcd_Set_Cursor@b
  1103  014A' 0A84'              	incf	Lcd_Set_Cursor@b,f
  1104  014B' 3002               	movlw	2
  1105  014C' 2000'              	fcall	_Lcd_Set_Cursor
  1106                           
  1107                           ;newmain.c: 343: Lcd_Write_String("Off_temp:");
  1108  014D' 3054               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1109  014E' 2000'              	fcall	_Lcd_Write_String
  1110                           
  1111                           ;newmain.c: 344: lcddisplay(highval);
  1112  014F' 1283               	bcf	3,5	;RP0=0, select bank0
  1113  0150' 0822'              	movf	main@highval+1,w
  1114  0151' 008A'              	movwf	lcddisplay@data+1
  1115  0152' 0821'              	movf	main@highval,w
  1116  0153' 0089'              	movwf	lcddisplay@data
  1117  0154' 2000'              	fcall	_lcddisplay
  1118                           
  1119                           ;newmain.c: 345: _delay((unsigned long)((1000)*(4000000/4000.0)));
  1120  0155' 3006               	movlw	6
  1121  0156' 1283               	bcf	3,5	;RP0=0, select bank0
  1122  0157' 0090'              	movwf	??_main+2
  1123  0158' 3013               	movlw	19
  1124  0159' 008F'              	movwf	??_main+1
  1125  015A' 30AD               	movlw	173
  1126  015B' 008E'              	movwf	??_main
  1127  015C'                    u1167:	
  1128  015C' 0B8E'              	decfsz	??_main,f
  1129  015D' 295C'              	goto	u1167
  1130  015E' 0B8F'              	decfsz	??_main+1,f
  1131  015F' 295C'              	goto	u1167
  1132  0160' 0B90'              	decfsz	??_main+2,f
  1133  0161' 295C'              	goto	u1167
  1134  0162' 2963'              	nop2
  1135                           
  1136                           ;newmain.c: 346: Lcd_Clear();
  1137  0163' 2000'              	fcall	_Lcd_Clear
  1138                           
  1139                           ;newmain.c: 347: Lcd_Set_Cursor(1,1);
  1140  0164' 1283               	bcf	3,5	;RP0=0, select bank0
  1141  0165' 0184'              	clrf	Lcd_Set_Cursor@b
  1142  0166' 0A84'              	incf	Lcd_Set_Cursor@b,f
  1143  0167' 3001               	movlw	1
  1144  0168' 2000'              	fcall	_Lcd_Set_Cursor
  1145                           
  1146                           ;newmain.c: 348: Lcd_Write_String("current temp:");
  1147  0169' 3001               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  1148  016A' 2000'              	fcall	_Lcd_Write_String
  1149                           
  1150                           ;newmain.c: 349: lcddisplay(tempval);
  1151  016B' 1283               	bcf	3,5	;RP0=0, select bank0
  1152  016C' 0820'              	movf	main@tempval+1,w
  1153  016D' 008A'              	movwf	lcddisplay@data+1
  1154  016E' 081F'              	movf	main@tempval,w
  1155  016F' 0089'              	movwf	lcddisplay@data
  1156  0170' 2000'              	fcall	_lcddisplay
  1157                           
  1158                           ;newmain.c: 351: if(c==1)
  1159  0171' 1283               	bcf	3,5	;RP0=0, select bank0
  1160  0172' 0319'              	decf	main@c,w
  1161  0173' 041A'              	iorwf	main@c+1,w
  1162  0174' 1D03               	btfss	3,2
  1163  0175' 297C'              	goto	l1429
  1164                           
  1165                           ;newmain.c: 352: {
  1166                           ;newmain.c: 353: Lcd_Set_Cursor(2,1);
  1167  0176' 0184'              	clrf	Lcd_Set_Cursor@b
  1168  0177' 0A84'              	incf	Lcd_Set_Cursor@b,f
  1169  0178' 3002               	movlw	2
  1170  0179' 2000'              	fcall	_Lcd_Set_Cursor
  1171                           
  1172                           ;newmain.c: 354: Lcd_Write_String("status OFF");
  1173  017A' 3035               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1174  017B' 2982'              	goto	L2
  1175  017C'                    l1429:	
  1176                           ;newmain.c: 356: }
  1177                           
  1178                           
  1179                           ;newmain.c: 357: else
  1180                           ;newmain.c: 358: {
  1181                           ;newmain.c: 359: Lcd_Set_Cursor(2,1);
  1182  017C' 1283               	bcf	3,5	;RP0=0, select bank0
  1183  017D' 0184'              	clrf	Lcd_Set_Cursor@b
  1184  017E' 0A84'              	incf	Lcd_Set_Cursor@b,f
  1185  017F' 3002               	movlw	2
  1186  0180' 2000'              	fcall	_Lcd_Set_Cursor
  1187                           
  1188                           ;newmain.c: 360: Lcd_Write_String("status ON");
  1189  0181' 305E               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  1190  0182'                    L2:	
  1191  0182' 2000'              	fcall	_Lcd_Write_String
  1192                           
  1193                           ;newmain.c: 362: }
  1194                           ;newmain.c: 363: _delay((unsigned long)((1000)*(4000000/4000.0)));
  1195  0183' 3006               	movlw	6
  1196  0184' 1283               	bcf	3,5	;RP0=0, select bank0
  1197  0185' 0090'              	movwf	??_main+2
  1198  0186' 3013               	movlw	19
  1199  0187' 008F'              	movwf	??_main+1
  1200  0188' 30AD               	movlw	173
  1201  0189' 008E'              	movwf	??_main
  1202  018A'                    u1177:	
  1203  018A' 0B8E'              	decfsz	??_main,f
  1204  018B' 298A'              	goto	u1177
  1205  018C' 0B8F'              	decfsz	??_main+1,f
  1206  018D' 298A'              	goto	u1177
  1207  018E' 0B90'              	decfsz	??_main+2,f
  1208  018F' 298A'              	goto	u1177
  1209  0190' 2991'              	nop2
  1210  0191' 282A'              	goto	L1
  1211  0192'                    __end_of_main:	
  1212                           ;newmain.c: 364: Lcd_Clear();
  1213                           
  1214                           
  1215                           	psect	text1
  1216  0000'                    __ptext1:	
  1217 ;; *************** function _lcddisplay *****************
  1218 ;; Defined at:
  1219 ;;		line 136 in file "newmain.c"
  1220 ;; Parameters:    Size  Location     Type
  1221 ;;  data            2    9[BANK0 ] int 
  1222 ;; Auto vars:     Size  Location     Type
  1223 ;;		None
  1224 ;; Return value:  Size  Location     Type
  1225 ;;                  1    wreg      void 
  1226 ;; Registers used:
  1227 ;;		wreg, status,2, status,0, pclath, cstack
  1228 ;; Tracked objects:
  1229 ;;		On entry : 0/0
  1230 ;;		On exit  : 0/0
  1231 ;;		Unchanged: 0/0
  1232 ;; Data sizes:     COMMON   BANK0
  1233 ;;      Params:         0       2
  1234 ;;      Locals:         0       0
  1235 ;;      Temps:          0       0
  1236 ;;      Totals:         0       2
  1237 ;;Total ram usage:        2 bytes
  1238 ;; Hardware stack levels used:    1
  1239 ;; Hardware stack levels required when called:    2
  1240 ;; This function calls:
  1241 ;;		_Lcd_Write_Char
  1242 ;;		___awdiv
  1243 ;;		___awmod
  1244 ;; This function is called by:
  1245 ;;		_main
  1246 ;; This function uses a non-reentrant model
  1247 ;;
  1248                           
  1249                           
  1250                           ;psect for function _lcddisplay
  1251  0000'                    _lcddisplay:	
  1252                           
  1253                           ;newmain.c: 138: Lcd_Write_Char((data/10) + (0x30));
  1254                           
  1255                           ;incstack = 0
  1256                           ; Regs used in _lcddisplay: [wreg+status,2+status,0+pclath+cstack]
  1257  0000' 300A               	movlw	10
  1258  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  1259  0002' 0080'              	movwf	___awdiv@divisor
  1260  0003' 3000               	movlw	0
  1261  0004' 0081'              	movwf	___awdiv@divisor+1
  1262  0005' 080A'              	movf	lcddisplay@data+1,w
  1263  0006' 0083'              	movwf	___awdiv@dividend+1
  1264  0007' 0809'              	movf	lcddisplay@data,w
  1265  0008' 0082'              	movwf	___awdiv@dividend
  1266  0009' 2000'              	fcall	___awdiv
  1267  000A' 1283               	bcf	3,5	;RP0=0, select bank0
  1268  000B' 0800'              	movf	?___awdiv,w
  1269  000C' 3E30               	addlw	48
  1270  000D' 2000'              	fcall	_Lcd_Write_Char
  1271                           
  1272                           ;newmain.c: 139: Lcd_Write_Char((data%10) + (0x30));
  1273  000E' 300A               	movlw	10
  1274  000F' 1283               	bcf	3,5	;RP0=0, select bank0
  1275  0010' 0080'              	movwf	___awmod@divisor
  1276  0011' 3000               	movlw	0
  1277  0012' 0081'              	movwf	___awmod@divisor+1
  1278  0013' 080A'              	movf	lcddisplay@data+1,w
  1279  0014' 0083'              	movwf	___awmod@dividend+1
  1280  0015' 0809'              	movf	lcddisplay@data,w
  1281  0016' 0082'              	movwf	___awmod@dividend
  1282  0017' 2000'              	fcall	___awmod
  1283  0018' 1283               	bcf	3,5	;RP0=0, select bank0
  1284  0019' 0800'              	movf	?___awmod,w
  1285  001A' 3E30               	addlw	48
  1286  001B' 2000'              	fcall	_Lcd_Write_Char
  1287  001C' 0008               	return
  1288  001D'                    __end_of_lcddisplay:	
  1289                           
  1290                           	psect	text2
  1291  0000'                    __ptext2:	
  1292 ;; *************** function ___awmod *****************
  1293 ;; Defined at:
  1294 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\awmod.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;  divisor         2    0[BANK0 ] int 
  1297 ;;  dividend        2    2[BANK0 ] int 
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;  sign            1    6[BANK0 ] unsigned char 
  1300 ;;  counter         1    5[BANK0 ] unsigned char 
  1301 ;; Return value:  Size  Location     Type
  1302 ;;                  2    0[BANK0 ] int 
  1303 ;; Registers used:
  1304 ;;		wreg, status,2, status,0
  1305 ;; Tracked objects:
  1306 ;;		On entry : 0/0
  1307 ;;		On exit  : 0/0
  1308 ;;		Unchanged: 0/0
  1309 ;; Data sizes:     COMMON   BANK0
  1310 ;;      Params:         0       4
  1311 ;;      Locals:         0       2
  1312 ;;      Temps:          0       1
  1313 ;;      Totals:         0       7
  1314 ;;Total ram usage:        7 bytes
  1315 ;; Hardware stack levels used:    1
  1316 ;; This function calls:
  1317 ;;		Nothing
  1318 ;; This function is called by:
  1319 ;;		_lcddisplay
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           
  1324                           ;psect for function ___awmod
  1325  0000'                    ___awmod:	
  1326                           
  1327                           ;incstack = 0
  1328                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1329  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1330  0001' 0186'              	clrf	___awmod@sign
  1331  0002' 1F83'              	btfss	___awmod@dividend+1,7
  1332  0003' 280B'              	goto	l1167
  1333  0004' 0982'              	comf	___awmod@dividend,f
  1334  0005' 0983'              	comf	___awmod@dividend+1,f
  1335  0006' 0A82'              	incf	___awmod@dividend,f
  1336  0007' 1903               	skipnz
  1337  0008' 0A83'              	incf	___awmod@dividend+1,f
  1338  0009' 0186'              	clrf	___awmod@sign
  1339  000A' 0A86'              	incf	___awmod@sign,f
  1340  000B'                    l1167:	
  1341  000B' 1F81'              	btfss	___awmod@divisor+1,7
  1342  000C' 2812'              	goto	l1171
  1343  000D' 0980'              	comf	___awmod@divisor,f
  1344  000E' 0981'              	comf	___awmod@divisor+1,f
  1345  000F' 0A80'              	incf	___awmod@divisor,f
  1346  0010' 1903               	skipnz
  1347  0011' 0A81'              	incf	___awmod@divisor+1,f
  1348  0012'                    l1171:	
  1349  0012' 0800'              	movf	___awmod@divisor,w
  1350  0013' 0401'              	iorwf	___awmod@divisor+1,w
  1351  0014' 1903               	btfsc	3,2
  1352  0015' 283F'              	goto	l1189
  1353  0016' 0185'              	clrf	___awmod@counter
  1354  0017' 0A85'              	incf	___awmod@counter,f
  1355  0018'                    l1179:	
  1356  0018' 1B81'              	btfsc	___awmod@divisor+1,7
  1357  0019' 2826'              	goto	l1181
  1358  001A' 3001               	movlw	1
  1359  001B'                    u845:	
  1360  001B' 1003               	clrc
  1361  001C' 0D80'              	rlf	___awmod@divisor,f
  1362  001D' 0D81'              	rlf	___awmod@divisor+1,f
  1363  001E' 3EFF               	addlw	-1
  1364  001F' 1D03               	skipz
  1365  0020' 281B'              	goto	u845
  1366  0021' 3001               	movlw	1
  1367  0022' 0084'              	movwf	??___awmod
  1368  0023' 0804'              	movf	??___awmod,w
  1369  0024' 0785'              	addwf	___awmod@counter,f
  1370  0025' 2818'              	goto	l1179
  1371  0026'                    l1181:	
  1372  0026' 0801'              	movf	___awmod@divisor+1,w
  1373  0027' 0203'              	subwf	___awmod@dividend+1,w
  1374  0028' 1D03               	skipz
  1375  0029' 282C'              	goto	u865
  1376  002A' 0800'              	movf	___awmod@divisor,w
  1377  002B' 0202'              	subwf	___awmod@dividend,w
  1378  002C'                    u865:	
  1379  002C' 1C03               	skipc
  1380  002D' 2834'              	goto	l1185
  1381  002E' 0800'              	movf	___awmod@divisor,w
  1382  002F' 0282'              	subwf	___awmod@dividend,f
  1383  0030' 0801'              	movf	___awmod@divisor+1,w
  1384  0031' 1C03               	skipc
  1385  0032' 0383'              	decf	___awmod@dividend+1,f
  1386  0033' 0283'              	subwf	___awmod@dividend+1,f
  1387  0034'                    l1185:	
  1388  0034' 3001               	movlw	1
  1389  0035'                    u875:	
  1390  0035' 1003               	clrc
  1391  0036' 0C81'              	rrf	___awmod@divisor+1,f
  1392  0037' 0C80'              	rrf	___awmod@divisor,f
  1393  0038' 3EFF               	addlw	-1
  1394  0039' 1D03               	skipz
  1395  003A' 2835'              	goto	u875
  1396  003B' 3001               	movlw	1
  1397  003C' 0285'              	subwf	___awmod@counter,f
  1398  003D' 1D03               	btfss	3,2
  1399  003E' 2826'              	goto	l1181
  1400  003F'                    l1189:	
  1401  003F' 0806'              	movf	___awmod@sign,w
  1402  0040' 1903               	btfsc	3,2
  1403  0041' 2847'              	goto	l1193
  1404  0042' 0982'              	comf	___awmod@dividend,f
  1405  0043' 0983'              	comf	___awmod@dividend+1,f
  1406  0044' 0A82'              	incf	___awmod@dividend,f
  1407  0045' 1903               	skipnz
  1408  0046' 0A83'              	incf	___awmod@dividend+1,f
  1409  0047'                    l1193:	
  1410  0047' 0803'              	movf	___awmod@dividend+1,w
  1411  0048' 0081'              	movwf	?___awmod+1
  1412  0049' 0802'              	movf	___awmod@dividend,w
  1413  004A' 0080'              	movwf	?___awmod
  1414  004B' 0008               	return
  1415  004C'                    __end_of___awmod:	
  1416                           
  1417                           	psect	text3
  1418  0000'                    __ptext3:	
  1419 ;; *************** function ___awdiv *****************
  1420 ;; Defined at:
  1421 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\awdiv.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;  divisor         2    0[BANK0 ] int 
  1424 ;;  dividend        2    2[BANK0 ] int 
  1425 ;; Auto vars:     Size  Location     Type
  1426 ;;  quotient        2    7[BANK0 ] int 
  1427 ;;  sign            1    6[BANK0 ] unsigned char 
  1428 ;;  counter         1    5[BANK0 ] unsigned char 
  1429 ;; Return value:  Size  Location     Type
  1430 ;;                  2    0[BANK0 ] int 
  1431 ;; Registers used:
  1432 ;;		wreg, status,2, status,0
  1433 ;; Tracked objects:
  1434 ;;		On entry : 0/0
  1435 ;;		On exit  : 0/0
  1436 ;;		Unchanged: 0/0
  1437 ;; Data sizes:     COMMON   BANK0
  1438 ;;      Params:         0       4
  1439 ;;      Locals:         0       4
  1440 ;;      Temps:          0       1
  1441 ;;      Totals:         0       9
  1442 ;;Total ram usage:        9 bytes
  1443 ;; Hardware stack levels used:    1
  1444 ;; This function calls:
  1445 ;;		Nothing
  1446 ;; This function is called by:
  1447 ;;		_lcddisplay
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451                           
  1452                           ;psect for function ___awdiv
  1453  0000'                    ___awdiv:	
  1454                           
  1455                           ;incstack = 0
  1456                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1457  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1458  0001' 0186'              	clrf	___awdiv@sign
  1459  0002' 1F81'              	btfss	___awdiv@divisor+1,7
  1460  0003' 280B'              	goto	l1123
  1461  0004' 0980'              	comf	___awdiv@divisor,f
  1462  0005' 0981'              	comf	___awdiv@divisor+1,f
  1463  0006' 0A80'              	incf	___awdiv@divisor,f
  1464  0007' 1903               	skipnz
  1465  0008' 0A81'              	incf	___awdiv@divisor+1,f
  1466  0009' 0186'              	clrf	___awdiv@sign
  1467  000A' 0A86'              	incf	___awdiv@sign,f
  1468  000B'                    l1123:	
  1469  000B' 1F83'              	btfss	___awdiv@dividend+1,7
  1470  000C' 2816'              	goto	l1129
  1471  000D' 0982'              	comf	___awdiv@dividend,f
  1472  000E' 0983'              	comf	___awdiv@dividend+1,f
  1473  000F' 0A82'              	incf	___awdiv@dividend,f
  1474  0010' 1903               	skipnz
  1475  0011' 0A83'              	incf	___awdiv@dividend+1,f
  1476  0012' 3001               	movlw	1
  1477  0013' 0084'              	movwf	??___awdiv
  1478  0014' 0804'              	movf	??___awdiv,w
  1479  0015' 0686'              	xorwf	___awdiv@sign,f
  1480  0016'                    l1129:	
  1481  0016' 0187'              	clrf	___awdiv@quotient
  1482  0017' 0188'              	clrf	___awdiv@quotient+1
  1483  0018' 0800'              	movf	___awdiv@divisor,w
  1484  0019' 0401'              	iorwf	___awdiv@divisor+1,w
  1485  001A' 1903               	btfsc	3,2
  1486  001B' 284D'              	goto	l1151
  1487  001C' 0185'              	clrf	___awdiv@counter
  1488  001D' 0A85'              	incf	___awdiv@counter,f
  1489  001E'                    l1139:	
  1490  001E' 1B81'              	btfsc	___awdiv@divisor+1,7
  1491  001F' 282C'              	goto	l1141
  1492  0020' 3001               	movlw	1
  1493  0021'                    u745:	
  1494  0021' 1003               	clrc
  1495  0022' 0D80'              	rlf	___awdiv@divisor,f
  1496  0023' 0D81'              	rlf	___awdiv@divisor+1,f
  1497  0024' 3EFF               	addlw	-1
  1498  0025' 1D03               	skipz
  1499  0026' 2821'              	goto	u745
  1500  0027' 3001               	movlw	1
  1501  0028' 0084'              	movwf	??___awdiv
  1502  0029' 0804'              	movf	??___awdiv,w
  1503  002A' 0785'              	addwf	___awdiv@counter,f
  1504  002B' 281E'              	goto	l1139
  1505  002C'                    l1141:	
  1506  002C' 3001               	movlw	1
  1507  002D'                    u765:	
  1508  002D' 1003               	clrc
  1509  002E' 0D87'              	rlf	___awdiv@quotient,f
  1510  002F' 0D88'              	rlf	___awdiv@quotient+1,f
  1511  0030' 3EFF               	addlw	-1
  1512  0031' 1D03               	skipz
  1513  0032' 282D'              	goto	u765
  1514  0033' 0801'              	movf	___awdiv@divisor+1,w
  1515  0034' 0203'              	subwf	___awdiv@dividend+1,w
  1516  0035' 1D03               	skipz
  1517  0036' 2839'              	goto	u775
  1518  0037' 0800'              	movf	___awdiv@divisor,w
  1519  0038' 0202'              	subwf	___awdiv@dividend,w
  1520  0039'                    u775:	
  1521  0039' 1C03               	skipc
  1522  003A' 2842'              	goto	l1147
  1523  003B' 0800'              	movf	___awdiv@divisor,w
  1524  003C' 0282'              	subwf	___awdiv@dividend,f
  1525  003D' 0801'              	movf	___awdiv@divisor+1,w
  1526  003E' 1C03               	skipc
  1527  003F' 0383'              	decf	___awdiv@dividend+1,f
  1528  0040' 0283'              	subwf	___awdiv@dividend+1,f
  1529  0041' 1407'              	bsf	___awdiv@quotient,0
  1530  0042'                    l1147:	
  1531  0042' 3001               	movlw	1
  1532  0043'                    u785:	
  1533  0043' 1003               	clrc
  1534  0044' 0C81'              	rrf	___awdiv@divisor+1,f
  1535  0045' 0C80'              	rrf	___awdiv@divisor,f
  1536  0046' 3EFF               	addlw	-1
  1537  0047' 1D03               	skipz
  1538  0048' 2843'              	goto	u785
  1539  0049' 3001               	movlw	1
  1540  004A' 0285'              	subwf	___awdiv@counter,f
  1541  004B' 1D03               	btfss	3,2
  1542  004C' 282C'              	goto	l1141
  1543  004D'                    l1151:	
  1544  004D' 0806'              	movf	___awdiv@sign,w
  1545  004E' 1903               	btfsc	3,2
  1546  004F' 2855'              	goto	l1155
  1547  0050' 0987'              	comf	___awdiv@quotient,f
  1548  0051' 0988'              	comf	___awdiv@quotient+1,f
  1549  0052' 0A87'              	incf	___awdiv@quotient,f
  1550  0053' 1903               	skipnz
  1551  0054' 0A88'              	incf	___awdiv@quotient+1,f
  1552  0055'                    l1155:	
  1553  0055' 0808'              	movf	___awdiv@quotient+1,w
  1554  0056' 0081'              	movwf	?___awdiv+1
  1555  0057' 0807'              	movf	___awdiv@quotient,w
  1556  0058' 0080'              	movwf	?___awdiv
  1557  0059' 0008               	return
  1558  005A'                    __end_of___awdiv:	
  1559                           
  1560                           	psect	text4
  1561  0000'                    __ptext4:	
  1562 ;; *************** function _checktemp *****************
  1563 ;; Defined at:
  1564 ;;		line 112 in file "newmain.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;		None
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;  temp            2   12[BANK0 ] unsigned int 
  1569 ;;  tempH           2   10[BANK0 ] unsigned short 
  1570 ;;  tempL           2    8[BANK0 ] unsigned short 
  1571 ;; Return value:  Size  Location     Type
  1572 ;;                  2    4[BANK0 ] int 
  1573 ;; Registers used:
  1574 ;;		wreg, status,2, status,0, pclath, cstack
  1575 ;; Tracked objects:
  1576 ;;		On entry : 0/0
  1577 ;;		On exit  : 0/0
  1578 ;;		Unchanged: 0/0
  1579 ;; Data sizes:     COMMON   BANK0
  1580 ;;      Params:         0       2
  1581 ;;      Locals:         0       6
  1582 ;;      Temps:          0       2
  1583 ;;      Totals:         0      10
  1584 ;;Total ram usage:       10 bytes
  1585 ;; Hardware stack levels used:    1
  1586 ;; Hardware stack levels required when called:    1
  1587 ;; This function calls:
  1588 ;;		_read
  1589 ;;		_reset
  1590 ;;		_write
  1591 ;; This function is called by:
  1592 ;;		_main
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           
  1597                           ;psect for function _checktemp
  1598  0000'                    _checktemp:	
  1599                           
  1600                           ;newmain.c: 114: unsigned short tempL = 0,tempH = 0;
  1601                           
  1602                           ;incstack = 0
  1603                           ; Regs used in _checktemp: [wreg+status,2+status,0+pclath+cstack]
  1604  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1605  0001' 0188'              	clrf	checktemp@tempL
  1606  0002' 0189'              	clrf	checktemp@tempL+1
  1607  0003' 018A'              	clrf	checktemp@tempH
  1608  0004' 018B'              	clrf	checktemp@tempH+1
  1609                           
  1610                           ;newmain.c: 115: unsigned int temp = 0;
  1611  0005' 018C'              	clrf	checktemp@temp
  1612  0006' 018D'              	clrf	checktemp@temp+1
  1613                           
  1614                           ;newmain.c: 117: if(!reset())
  1615  0007' 2000'              	fcall	_reset
  1616  0008' 3A00               	xorlw	0
  1617  0009' 1D03               	skipz
  1618  000A' 283C'              	goto	l1257
  1619                           
  1620                           ;newmain.c: 118: {
  1621                           ;newmain.c: 119: write(0xcc);
  1622  000B' 30CC               	movlw	204
  1623  000C' 2000'              	fcall	_write
  1624                           
  1625                           ;newmain.c: 120: write(0x44);
  1626  000D' 3044               	movlw	68
  1627  000E' 2000'              	fcall	_write
  1628                           
  1629                           ;newmain.c: 121: _delay((unsigned long)((600)*(4000000/4000000.0)));
  1630  000F' 30C7               	movlw	199
  1631  0010' 1283               	bcf	3,5	;RP0=0, select bank0
  1632  0011' 0086'              	movwf	??_checktemp
  1633  0012'                    u1187:	
  1634  0012' 0B86'              	decfsz	??_checktemp,f
  1635  0013' 2812'              	goto	u1187
  1636  0014' 2815'              	nop2
  1637                           
  1638                           ;newmain.c: 123: reset();
  1639  0015' 2000'              	fcall	_reset
  1640                           
  1641                           ;newmain.c: 124: write(0xcc);
  1642  0016' 30CC               	movlw	204
  1643  0017' 2000'              	fcall	_write
  1644                           
  1645                           ;newmain.c: 125: write(0xbe);
  1646  0018' 30BE               	movlw	190
  1647  0019' 2000'              	fcall	_write
  1648                           
  1649                           ;newmain.c: 127: tempL = read();
  1650  001A' 2000'              	fcall	_read
  1651  001B' 1283               	bcf	3,5	;RP0=0, select bank0
  1652  001C' 0086'              	movwf	??_checktemp
  1653  001D' 0187'              	clrf	??_checktemp+1
  1654  001E' 0806'              	movf	??_checktemp,w
  1655  001F' 0088'              	movwf	checktemp@tempL
  1656  0020' 0807'              	movf	??_checktemp+1,w
  1657  0021' 0089'              	movwf	checktemp@tempL+1
  1658                           
  1659                           ;newmain.c: 128: tempH = read();
  1660  0022' 2000'              	fcall	_read
  1661  0023' 1283               	bcf	3,5	;RP0=0, select bank0
  1662  0024' 0086'              	movwf	??_checktemp
  1663  0025' 0187'              	clrf	??_checktemp+1
  1664  0026' 0806'              	movf	??_checktemp,w
  1665  0027' 008A'              	movwf	checktemp@tempH
  1666  0028' 0807'              	movf	??_checktemp+1,w
  1667  0029' 008B'              	movwf	checktemp@tempH+1
  1668                           
  1669                           ;newmain.c: 129: temp=((tempH << 8 )| tempL);
  1670  002A' 080A'              	movf	checktemp@tempH,w
  1671  002B' 0087'              	movwf	??_checktemp+1
  1672  002C' 0186'              	clrf	??_checktemp
  1673  002D' 0808'              	movf	checktemp@tempL,w
  1674  002E' 0406'              	iorwf	??_checktemp,w
  1675  002F' 008C'              	movwf	checktemp@temp
  1676  0030' 0809'              	movf	checktemp@tempL+1,w
  1677  0031' 0407'              	iorwf	??_checktemp+1,w
  1678  0032' 008D'              	movwf	checktemp@temp+1
  1679                           
  1680                           ;newmain.c: 130: temp = temp /16 ;
  1681  0033' 0E0C'              	swapf	checktemp@temp,w
  1682  0034' 390F               	andlw	15
  1683  0035' 008C'              	movwf	checktemp@temp
  1684  0036' 0E0D'              	swapf	checktemp@temp+1,w
  1685  0037' 39F0               	andlw	240
  1686  0038' 048C'              	iorwf	checktemp@temp,f
  1687  0039' 0E0D'              	swapf	checktemp@temp+1,w
  1688  003A' 390F               	andlw	15
  1689  003B' 008D'              	movwf	checktemp@temp+1
  1690  003C'                    l1257:	
  1691                           
  1692                           ;newmain.c: 131: }
  1693                           ;newmain.c: 132: return temp;
  1694  003C' 1283               	bcf	3,5	;RP0=0, select bank0
  1695  003D' 080D'              	movf	checktemp@temp+1,w
  1696  003E' 0085'              	movwf	?_checktemp+1
  1697  003F' 080C'              	movf	checktemp@temp,w
  1698  0040' 0084'              	movwf	?_checktemp
  1699  0041' 0008               	return
  1700  0042'                    __end_of_checktemp:	
  1701                           
  1702                           	psect	text5
  1703  0000'                    __ptext5:	
  1704 ;; *************** function _write *****************
  1705 ;; Defined at:
  1706 ;;		line 64 in file "newmain.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;  WRT             1    wreg     unsigned char 
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;  WRT             1    1[BANK0 ] unsigned char 
  1711 ;;  i               1    3[BANK0 ] unsigned char 
  1712 ;;  Cmd             1    2[BANK0 ] unsigned char 
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      void 
  1715 ;; Registers used:
  1716 ;;		wreg, status,2, status,0
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMMON   BANK0
  1722 ;;      Params:         0       0
  1723 ;;      Locals:         0       3
  1724 ;;      Temps:          0       1
  1725 ;;      Totals:         0       4
  1726 ;;Total ram usage:        4 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; This function calls:
  1729 ;;		Nothing
  1730 ;; This function is called by:
  1731 ;;		_checktemp
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           
  1736                           ;psect for function _write
  1737  0000'                    _write:	
  1738                           
  1739                           ;incstack = 0
  1740                           ; Regs used in _write: [wreg+status,2+status,0]
  1741                           ;write@WRT stored from wreg
  1742  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1743  0001' 0081'              	movwf	write@WRT
  1744                           
  1745                           ;newmain.c: 66: char i,Cmd;
  1746                           ;newmain.c: 67: Cmd=WRT;
  1747  0002' 0801'              	movf	write@WRT,w
  1748  0003' 0080'              	movwf	??_write
  1749  0004' 0800'              	movf	??_write,w
  1750  0005' 0082'              	movwf	write@Cmd
  1751                           
  1752                           ;newmain.c: 68: TRISA0 = 1;
  1753  0006' 1683               	bsf	3,5	;RP0=1, select bank1
  1754  0007' 1405               	bsf	5,0	;volatile
  1755                           
  1756                           ;newmain.c: 70: for(i = 0; i < 8; i++)
  1757  0008' 1283               	bcf	3,5	;RP0=0, select bank0
  1758  0009' 0183'              	clrf	write@i
  1759  000A'                    L3:	
  1760  000A' 3008               	movlw	8
  1761  000B' 0203'              	subwf	write@i,w
  1762  000C' 1803               	btfsc	3,0
  1763  000D' 0008               	return
  1764                           
  1765                           ;newmain.c: 71: {
  1766                           ;newmain.c: 72: if((Cmd & (1<<i))!= 0)
  1767  000E' 3001               	movlw	1
  1768  000F' 0080'              	movwf	??_write
  1769  0010' 0A03'              	incf	write@i,w
  1770  0011' 2814'              	goto	u644
  1771  0012'                    u645:	
  1772  0012' 1003               	clrc
  1773  0013' 0D80'              	rlf	??_write,f
  1774  0014'                    u644:	
  1775  0014' 3EFF               	addlw	-1
  1776  0015' 1D03               	skipz
  1777  0016' 2812'              	goto	u645
  1778  0017' 0800'              	movf	??_write,w
  1779  0018' 0502'              	andwf	write@Cmd,w
  1780  0019' 1903               	btfsc	3,2
  1781  001A' 2829'              	goto	l91
  1782                           
  1783                           ;newmain.c: 73: {
  1784                           ;newmain.c: 75: TRISA0 = 0;
  1785  001B' 1683               	bsf	3,5	;RP0=1, select bank1
  1786  001C' 1005               	bcf	5,0	;volatile
  1787                           
  1788                           ;newmain.c: 76: RA0= 0;
  1789  001D' 1283               	bcf	3,5	;RP0=0, select bank0
  1790  001E' 1005               	bcf	5,0	;volatile
  1791                           
  1792                           ;newmain.c: 77: _delay((unsigned long)((1)*(4000000/4000000.0)));
  1793  001F' 0000               	nop
  1794                           
  1795                           ;newmain.c: 78: TRISA0 = 1;
  1796  0020' 1683               	bsf	3,5	;RP0=1, select bank1
  1797  0021' 1405               	bsf	5,0	;volatile
  1798                           
  1799                           ;newmain.c: 79: _delay((unsigned long)((60)*(4000000/4000000.0)));
  1800  0022' 3013               	movlw	19
  1801  0023' 1283               	bcf	3,5	;RP0=0, select bank0
  1802  0024' 0080'              	movwf	??_write
  1803  0025'                    u1197:	
  1804  0025' 0B80'              	decfsz	??_write,f
  1805  0026' 2825'              	goto	u1197
  1806  0027' 2828'              	nop2
  1807                           
  1808                           ;newmain.c: 80: }
  1809  0028' 2834'              	goto	l1093
  1810  0029'                    l91:	
  1811                           
  1812                           ;newmain.c: 81: else
  1813                           ;newmain.c: 82: {
  1814                           ;newmain.c: 84: TRISA0 = 0;
  1815  0029' 1683               	bsf	3,5	;RP0=1, select bank1
  1816  002A' 1005               	bcf	5,0	;volatile
  1817                           
  1818                           ;newmain.c: 85: RA0= 0;
  1819  002B' 1283               	bcf	3,5	;RP0=0, select bank0
  1820  002C' 1005               	bcf	5,0	;volatile
  1821                           
  1822                           ;newmain.c: 86: _delay((unsigned long)((60)*(4000000/4000000.0)));
  1823  002D' 3013               	movlw	19
  1824  002E' 0080'              	movwf	??_write
  1825  002F'                    u1207:	
  1826  002F' 0B80'              	decfsz	??_write,f
  1827  0030' 282F'              	goto	u1207
  1828  0031' 2832'              	nop2
  1829                           
  1830                           ;newmain.c: 87: TRISA0 = 1;
  1831  0032' 1683               	bsf	3,5	;RP0=1, select bank1
  1832  0033' 1405               	bsf	5,0	;volatile
  1833  0034'                    l1093:	
  1834  0034' 3001               	movlw	1
  1835  0035' 1283               	bcf	3,5	;RP0=0, select bank0
  1836  0036' 0080'              	movwf	??_write
  1837  0037' 0800'              	movf	??_write,w
  1838  0038' 0783'              	addwf	write@i,f
  1839  0039' 280A'              	goto	L3
  1840  003A'                    __end_of_write:	
  1841                           
  1842                           	psect	text6
  1843  0000'                    __ptext6:	
  1844 ;; *************** function _reset *****************
  1845 ;; Defined at:
  1846 ;;		line 42 in file "newmain.c"
  1847 ;; Parameters:    Size  Location     Type
  1848 ;;		None
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;		None
  1851 ;; Return value:  Size  Location     Type
  1852 ;;                  1    wreg      unsigned char 
  1853 ;; Registers used:
  1854 ;;		wreg
  1855 ;; Tracked objects:
  1856 ;;		On entry : 0/0
  1857 ;;		On exit  : 0/0
  1858 ;;		Unchanged: 0/0
  1859 ;; Data sizes:     COMMON   BANK0
  1860 ;;      Params:         0       0
  1861 ;;      Locals:         0       0
  1862 ;;      Temps:          0       1
  1863 ;;      Totals:         0       1
  1864 ;;Total ram usage:        1 bytes
  1865 ;; Hardware stack levels used:    1
  1866 ;; This function calls:
  1867 ;;		Nothing
  1868 ;; This function is called by:
  1869 ;;		_checktemp
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           
  1874                           ;psect for function _reset
  1875  0000'                    _reset:	
  1876                           
  1877                           ;newmain.c: 44: TRISA0 = 0;
  1878                           
  1879                           ;incstack = 0
  1880                           ; Regs used in _reset: [wreg]
  1881  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  1882  0001' 1005               	bcf	5,0	;volatile
  1883                           
  1884                           ;newmain.c: 45: RA0= 0;
  1885  0002' 1283               	bcf	3,5	;RP0=0, select bank0
  1886  0003' 1005               	bcf	5,0	;volatile
  1887                           
  1888                           ;newmain.c: 46: _delay((unsigned long)((480)*(4000000/4000000.0)));
  1889  0004' 309F               	movlw	159
  1890  0005' 0080'              	movwf	??_reset
  1891  0006'                    u1217:	
  1892  0006' 0B80'              	decfsz	??_reset,f
  1893  0007' 2806'              	goto	u1217
  1894  0008' 2809'              	nop2
  1895                           
  1896                           ;newmain.c: 47: TRISA0 = 1;
  1897  0009' 1683               	bsf	3,5	;RP0=1, select bank1
  1898  000A' 1405               	bsf	5,0	;volatile
  1899                           
  1900                           ;newmain.c: 48: _delay((unsigned long)((60)*(4000000/4000000.0)));
  1901  000B' 3013               	movlw	19
  1902  000C' 1283               	bcf	3,5	;RP0=0, select bank0
  1903  000D' 0080'              	movwf	??_reset
  1904  000E'                    u1227:	
  1905  000E' 0B80'              	decfsz	??_reset,f
  1906  000F' 280E'              	goto	u1227
  1907  0010' 2811'              	nop2
  1908                           
  1909                           ;newmain.c: 50: if (RA0== 0)
  1910  0011' 1283               	bcf	3,5	;RP0=0, select bank0
  1911  0012' 1805               	btfsc	5,0	;volatile
  1912  0013' 281B'              	goto	l1069
  1913                           
  1914                           ;newmain.c: 51: {
  1915                           ;newmain.c: 52: _delay((unsigned long)((480)*(4000000/4000000.0)));
  1916  0014' 309F               	movlw	159
  1917  0015' 0080'              	movwf	??_reset
  1918  0016'                    u1237:	
  1919  0016' 0B80'              	decfsz	??_reset,f
  1920  0017' 2816'              	goto	u1237
  1921  0018' 2819'              	nop2
  1922                           
  1923                           ;newmain.c: 53: return 0;
  1924  0019' 3000               	movlw	0
  1925                           
  1926                           ;newmain.c: 54: }
  1927  001A' 0008               	return
  1928  001B'                    l1069:	
  1929                           
  1930                           ;newmain.c: 55: else
  1931                           ;newmain.c: 56: {
  1932                           ;newmain.c: 57: _delay((unsigned long)((480)*(4000000/4000000.0)));
  1933  001B' 309F               	movlw	159
  1934  001C' 1283               	bcf	3,5	;RP0=0, select bank0
  1935  001D' 0080'              	movwf	??_reset
  1936  001E'                    u1247:	
  1937  001E' 0B80'              	decfsz	??_reset,f
  1938  001F' 281E'              	goto	u1247
  1939  0020' 2821'              	nop2
  1940                           
  1941                           ;newmain.c: 58: return 1;
  1942  0021' 3001               	movlw	1
  1943  0022' 0008               	return
  1944  0023'                    __end_of_reset:	
  1945                           
  1946                           	psect	text7
  1947  0000'                    __ptext7:	
  1948 ;; *************** function _read *****************
  1949 ;; Defined at:
  1950 ;;		line 94 in file "newmain.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;		None
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;  i               1    3[BANK0 ] unsigned char 
  1955 ;;  result          1    2[BANK0 ] unsigned char 
  1956 ;; Return value:  Size  Location     Type
  1957 ;;                  1    wreg      unsigned char 
  1958 ;; Registers used:
  1959 ;;		wreg, status,2, status,0
  1960 ;; Tracked objects:
  1961 ;;		On entry : 0/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMMON   BANK0
  1965 ;;      Params:         0       0
  1966 ;;      Locals:         0       2
  1967 ;;      Temps:          0       2
  1968 ;;      Totals:         0       4
  1969 ;;Total ram usage:        4 bytes
  1970 ;; Hardware stack levels used:    1
  1971 ;; This function calls:
  1972 ;;		Nothing
  1973 ;; This function is called by:
  1974 ;;		_checktemp
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           
  1979                           ;psect for function _read
  1980  0000'                    _read:	
  1981                           
  1982                           ;newmain.c: 96: char i,result = 0;
  1983                           
  1984                           ;incstack = 0
  1985                           ; Regs used in _read: [wreg+status,2+status,0]
  1986  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1987  0001' 0182'              	clrf	read@result
  1988                           
  1989                           ;newmain.c: 97: TRISA0 = 1;
  1990  0002' 1683               	bsf	3,5	;RP0=1, select bank1
  1991  0003' 1405               	bsf	5,0	;volatile
  1992                           
  1993                           ;newmain.c: 98: for(i = 0; i < 8; i++)
  1994  0004' 1283               	bcf	3,5	;RP0=0, select bank0
  1995  0005' 0183'              	clrf	read@i
  1996  0006' 3008               	movlw	8
  1997  0007' 0203'              	subwf	read@i,w
  1998  0008' 1803               	btfsc	3,0
  1999  0009' 282F'              	goto	l1111
  2000  000A'                    l96:	
  2001                           
  2002                           ;newmain.c: 99: {
  2003                           ;newmain.c: 100: TRISA0 = 0;
  2004  000A' 1683               	bsf	3,5	;RP0=1, select bank1
  2005  000B' 1005               	bcf	5,0	;volatile
  2006                           
  2007                           ;newmain.c: 101: RA0= 0;
  2008  000C' 1283               	bcf	3,5	;RP0=0, select bank0
  2009  000D' 1005               	bcf	5,0	;volatile
  2010                           
  2011                           ;newmain.c: 102: _delay((unsigned long)((2)*(4000000/4000000.0)));
  2012  000E' 280F'              	nop2	;2 cycle nop
  2013                           
  2014                           ;newmain.c: 103: TRISA0 = 1;
  2015  000F' 1683               	bsf	3,5	;RP0=1, select bank1
  2016  0010' 1405               	bsf	5,0	;volatile
  2017                           
  2018                           ;newmain.c: 104: if(RA0!= 0)
  2019  0011' 1283               	bcf	3,5	;RP0=0, select bank0
  2020  0012' 1C05               	btfss	5,0	;volatile
  2021  0013' 2821'              	goto	l1107
  2022                           
  2023                           ;newmain.c: 105: result |= 1<<i;
  2024  0014' 3001               	movlw	1
  2025  0015' 0080'              	movwf	??_read
  2026  0016' 0A03'              	incf	read@i,w
  2027  0017' 281A'              	goto	u694
  2028  0018'                    u695:	
  2029  0018' 1003               	clrc
  2030  0019' 0D80'              	rlf	??_read,f
  2031  001A'                    u694:	
  2032  001A' 3EFF               	addlw	-1
  2033  001B' 1D03               	skipz
  2034  001C' 2818'              	goto	u695
  2035  001D' 0800'              	movf	??_read,w
  2036  001E' 0081'              	movwf	??_read+1
  2037  001F' 0801'              	movf	??_read+1,w
  2038  0020' 0482'              	iorwf	read@result,f
  2039  0021'                    l1107:	
  2040                           
  2041                           ;newmain.c: 106: _delay((unsigned long)((60)*(4000000/4000000.0)));
  2042  0021' 3013               	movlw	19
  2043  0022' 0080'              	movwf	??_read
  2044  0023'                    u1257:	
  2045  0023' 0B80'              	decfsz	??_read,f
  2046  0024' 2823'              	goto	u1257
  2047  0025' 2826'              	nop2
  2048  0026' 3001               	movlw	1
  2049  0027' 1283               	bcf	3,5	;RP0=0, select bank0
  2050  0028' 0080'              	movwf	??_read
  2051  0029' 0800'              	movf	??_read,w
  2052  002A' 0783'              	addwf	read@i,f
  2053  002B' 3008               	movlw	8
  2054  002C' 0203'              	subwf	read@i,w
  2055  002D' 1C03               	skipc
  2056  002E' 280A'              	goto	l96
  2057  002F'                    l1111:	
  2058                           
  2059                           ;newmain.c: 107: }
  2060                           ;newmain.c: 108: return result;
  2061  002F' 0802'              	movf	read@result,w
  2062  0030' 0008               	return
  2063  0031'                    __end_of_read:	
  2064                           
  2065                           	psect	text8
  2066  0000'                    __ptext8:	
  2067 ;; *************** function _Lcd_Write_String *****************
  2068 ;; Defined at:
  2069 ;;		line 96 in file "lcd.h"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;  a               1    wreg     PTR unsigned char 
  2072 ;;		 -> STR_16(10), STR_15(11), STR_14(14), STR_13(10), 
  2073 ;;		 -> STR_12(9), STR_11(3), STR_10(5), STR_9(5), 
  2074 ;;		 -> STR_8(3), STR_7(5), STR_6(5), STR_5(10), 
  2075 ;;		 -> STR_4(10), STR_3(13), STR_2(13), STR_1(12), 
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;  a               1    7[BANK0 ] PTR unsigned char 
  2078 ;;		 -> STR_16(10), STR_15(11), STR_14(14), STR_13(10), 
  2079 ;;		 -> STR_12(9), STR_11(3), STR_10(5), STR_9(5), 
  2080 ;;		 -> STR_8(3), STR_7(5), STR_6(5), STR_5(10), 
  2081 ;;		 -> STR_4(10), STR_3(13), STR_2(13), STR_1(12), 
  2082 ;;  i               2    5[BANK0 ] int 
  2083 ;; Return value:  Size  Location     Type
  2084 ;;                  1    wreg      void 
  2085 ;; Registers used:
  2086 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2087 ;; Tracked objects:
  2088 ;;		On entry : 0/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: 0/0
  2091 ;; Data sizes:     COMMON   BANK0
  2092 ;;      Params:         0       0
  2093 ;;      Locals:         0       3
  2094 ;;      Temps:          0       0
  2095 ;;      Totals:         0       3
  2096 ;;Total ram usage:        3 bytes
  2097 ;; Hardware stack levels used:    1
  2098 ;; Hardware stack levels required when called:    2
  2099 ;; This function calls:
  2100 ;;		_Lcd_Write_Char
  2101 ;; This function is called by:
  2102 ;;		_main
  2103 ;;		_relaystatus
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           
  2108                           ;psect for function _Lcd_Write_String
  2109  0000'                    _Lcd_Write_String:	
  2110                           
  2111                           ;incstack = 0
  2112                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2113                           ;Lcd_Write_String@a stored from wreg
  2114  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2115  0001' 0087'              	movwf	Lcd_Write_String@a
  2116                           
  2117                           ;lcd.h: 98: int i;
  2118                           ;lcd.h: 99: for(i=0;a[i]!='\0';i++)
  2119  0002' 0185'              	clrf	Lcd_Write_String@i
  2120  0003' 0186'              	clrf	Lcd_Write_String@i+1
  2121  0004'                    l1235:	
  2122  0004' 0805'              	movf	Lcd_Write_String@i,w
  2123  0005' 0707'              	addwf	Lcd_Write_String@a,w
  2124  0006' 0084               	movwf	4
  2125  0007' 2000'              	fcall	stringdir
  2126  0008' 3A00               	xorlw	0
  2127  0009' 1903               	btfsc	3,2
  2128  000A' 0008               	return
  2129                           
  2130                           ;lcd.h: 100: Lcd_Write_Char(a[i]);
  2131  000B' 0805'              	movf	Lcd_Write_String@i,w
  2132  000C' 0707'              	addwf	Lcd_Write_String@a,w
  2133  000D' 0084               	movwf	4
  2134  000E' 2000'              	fcall	stringdir
  2135  000F' 2000'              	fcall	_Lcd_Write_Char
  2136  0010' 3001               	movlw	1
  2137  0011' 1283               	bcf	3,5	;RP0=0, select bank0
  2138  0012' 0785'              	addwf	Lcd_Write_String@i,f
  2139  0013' 1803               	skipnc
  2140  0014' 0A86'              	incf	Lcd_Write_String@i+1,f
  2141  0015' 3000               	movlw	0
  2142  0016' 0786'              	addwf	Lcd_Write_String@i+1,f
  2143  0017' 2804'              	goto	l1235
  2144  0018'                    __end_of_Lcd_Write_String:	
  2145                           
  2146                           	psect	text9
  2147  0000'                    __ptext9:	
  2148 ;; *************** function _Lcd_Write_Char *****************
  2149 ;; Defined at:
  2150 ;;		line 80 in file "lcd.h"
  2151 ;; Parameters:    Size  Location     Type
  2152 ;;  a               1    wreg     unsigned char 
  2153 ;; Auto vars:     Size  Location     Type
  2154 ;;  a               1    4[BANK0 ] unsigned char 
  2155 ;;  y               1    3[BANK0 ] unsigned char 
  2156 ;;  temp            1    2[BANK0 ] unsigned char 
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  1    wreg      void 
  2159 ;; Registers used:
  2160 ;;		wreg, status,2, status,0, pclath, cstack
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMMON   BANK0
  2166 ;;      Params:         0       0
  2167 ;;      Locals:         0       3
  2168 ;;      Temps:          0       1
  2169 ;;      Totals:         0       4
  2170 ;;Total ram usage:        4 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    1
  2173 ;; This function calls:
  2174 ;;		_Lcd_Port
  2175 ;; This function is called by:
  2176 ;;		_Lcd_Write_String
  2177 ;;		_lcddisplay
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181                           
  2182                           ;psect for function _Lcd_Write_Char
  2183  0000'                    _Lcd_Write_Char:	
  2184                           
  2185                           ;incstack = 0
  2186                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2187                           ;Lcd_Write_Char@a stored from wreg
  2188  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2189  0001' 0084'              	movwf	Lcd_Write_Char@a
  2190                           
  2191                           ;lcd.h: 82: char temp,y;
  2192                           ;lcd.h: 83: temp = a&0x0F;
  2193  0002' 0804'              	movf	Lcd_Write_Char@a,w
  2194  0003' 390F               	andlw	15
  2195  0004' 0081'              	movwf	??_Lcd_Write_Char
  2196  0005' 0801'              	movf	??_Lcd_Write_Char,w
  2197  0006' 0082'              	movwf	Lcd_Write_Char@temp
  2198                           
  2199                           ;lcd.h: 84: y = a&0xF0;
  2200  0007' 0804'              	movf	Lcd_Write_Char@a,w
  2201  0008' 39F0               	andlw	240
  2202  0009' 0081'              	movwf	??_Lcd_Write_Char
  2203  000A' 0801'              	movf	??_Lcd_Write_Char,w
  2204  000B' 0083'              	movwf	Lcd_Write_Char@y
  2205                           
  2206                           ;lcd.h: 85: RA1 = 1;
  2207  000C' 1485               	bsf	5,1	;volatile
  2208                           
  2209                           ;lcd.h: 86: Lcd_Port(y>>4);
  2210  000D' 0803'              	movf	Lcd_Write_Char@y,w
  2211  000E' 0081'              	movwf	??_Lcd_Write_Char
  2212  000F' 3004               	movlw	4
  2213  0010'                    u615:	
  2214  0010' 1003               	clrc
  2215  0011' 0C81'              	rrf	??_Lcd_Write_Char,f
  2216  0012' 3EFF               	addlw	-1
  2217  0013' 1D03               	skipz
  2218  0014' 2810'              	goto	u615
  2219  0015' 0801'              	movf	??_Lcd_Write_Char,w
  2220  0016' 2000'              	fcall	_Lcd_Port
  2221                           
  2222                           ;lcd.h: 87: RA2 = 1;
  2223  0017' 1283               	bcf	3,5	;RP0=0, select bank0
  2224  0018' 1505               	bsf	5,2	;volatile
  2225                           
  2226                           ;lcd.h: 88: _delay((unsigned long)((40)*(4000000/4000000.0)));
  2227  0019' 300D               	movlw	13
  2228  001A' 0081'              	movwf	??_Lcd_Write_Char
  2229  001B'                    u1267:	
  2230  001B' 0B81'              	decfsz	??_Lcd_Write_Char,f
  2231  001C' 281B'              	goto	u1267
  2232                           
  2233                           ;lcd.h: 89: RA2 = 0;
  2234  001D' 1283               	bcf	3,5	;RP0=0, select bank0
  2235  001E' 1105               	bcf	5,2	;volatile
  2236                           
  2237                           ;lcd.h: 90: Lcd_Port(temp);
  2238  001F' 0802'              	movf	Lcd_Write_Char@temp,w
  2239  0020' 2000'              	fcall	_Lcd_Port
  2240                           
  2241                           ;lcd.h: 91: RA2 = 1;
  2242  0021' 1283               	bcf	3,5	;RP0=0, select bank0
  2243  0022' 1505               	bsf	5,2	;volatile
  2244                           
  2245                           ;lcd.h: 92: _delay((unsigned long)((40)*(4000000/4000000.0)));
  2246  0023' 300D               	movlw	13
  2247  0024' 0081'              	movwf	??_Lcd_Write_Char
  2248  0025'                    u1277:	
  2249  0025' 0B81'              	decfsz	??_Lcd_Write_Char,f
  2250  0026' 2825'              	goto	u1277
  2251                           
  2252                           ;lcd.h: 93: RA2 = 0;
  2253  0027' 1283               	bcf	3,5	;RP0=0, select bank0
  2254  0028' 1105               	bcf	5,2	;volatile
  2255  0029' 0008               	return
  2256  002A'                    __end_of_Lcd_Write_Char:	
  2257                           
  2258                           	psect	text10
  2259  0000'                    __ptext10:	
  2260 ;; *************** function _Lcd_Set_Cursor *****************
  2261 ;; Defined at:
  2262 ;;		line 40 in file "lcd.h"
  2263 ;; Parameters:    Size  Location     Type
  2264 ;;  a               1    wreg     unsigned char 
  2265 ;;  b               1    4[BANK0 ] unsigned char 
  2266 ;; Auto vars:     Size  Location     Type
  2267 ;;  a               1    7[BANK0 ] unsigned char 
  2268 ;;  temp            1   10[BANK0 ] unsigned char 
  2269 ;;  y               1    9[BANK0 ] unsigned char 
  2270 ;;  z               1    8[BANK0 ] unsigned char 
  2271 ;; Return value:  Size  Location     Type
  2272 ;;                  1    wreg      void 
  2273 ;; Registers used:
  2274 ;;		wreg, status,2, status,0, pclath, cstack
  2275 ;; Tracked objects:
  2276 ;;		On entry : 0/0
  2277 ;;		On exit  : 0/0
  2278 ;;		Unchanged: 0/0
  2279 ;; Data sizes:     COMMON   BANK0
  2280 ;;      Params:         0       1
  2281 ;;      Locals:         0       4
  2282 ;;      Temps:          0       2
  2283 ;;      Totals:         0       7
  2284 ;;Total ram usage:        7 bytes
  2285 ;; Hardware stack levels used:    1
  2286 ;; Hardware stack levels required when called:    2
  2287 ;; This function calls:
  2288 ;;		_Lcd_Cmd
  2289 ;; This function is called by:
  2290 ;;		_main
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           
  2295                           ;psect for function _Lcd_Set_Cursor
  2296  0000'                    _Lcd_Set_Cursor:	
  2297                           
  2298                           ;incstack = 0
  2299                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2300                           ;Lcd_Set_Cursor@a stored from wreg
  2301  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2302  0001' 0087'              	movwf	Lcd_Set_Cursor@a
  2303                           
  2304                           ;lcd.h: 42: char temp,z,y;
  2305                           ;lcd.h: 43: if(a == 1)
  2306  0002' 0307'              	decf	Lcd_Set_Cursor@a,w
  2307  0003' 1D03               	btfss	3,2
  2308  0004' 2821'              	goto	l1209
  2309                           
  2310                           ;lcd.h: 44: {
  2311                           ;lcd.h: 45: temp = 0x80 + b - 1;
  2312  0005' 0804'              	movf	Lcd_Set_Cursor@b,w
  2313  0006' 3E7F               	addlw	127
  2314  0007' 0085'              	movwf	??_Lcd_Set_Cursor
  2315  0008' 0805'              	movf	??_Lcd_Set_Cursor,w
  2316  0009' 008A'              	movwf	Lcd_Set_Cursor@temp
  2317                           
  2318                           ;lcd.h: 46: z = temp>>4;
  2319  000A' 080A'              	movf	Lcd_Set_Cursor@temp,w
  2320  000B' 0085'              	movwf	??_Lcd_Set_Cursor
  2321  000C' 3004               	movlw	4
  2322  000D'                    u915:	
  2323  000D' 1003               	clrc
  2324  000E' 0C85'              	rrf	??_Lcd_Set_Cursor,f
  2325  000F' 3EFF               	addlw	-1
  2326  0010' 1D03               	skipz
  2327  0011' 280D'              	goto	u915
  2328  0012' 0805'              	movf	??_Lcd_Set_Cursor,w
  2329  0013' 0086'              	movwf	??_Lcd_Set_Cursor+1
  2330  0014' 0806'              	movf	??_Lcd_Set_Cursor+1,w
  2331  0015' 0088'              	movwf	Lcd_Set_Cursor@z
  2332                           
  2333                           ;lcd.h: 47: y = temp & 0x0F;
  2334  0016' 080A'              	movf	Lcd_Set_Cursor@temp,w
  2335  0017' 390F               	andlw	15
  2336  0018' 0085'              	movwf	??_Lcd_Set_Cursor
  2337  0019' 0805'              	movf	??_Lcd_Set_Cursor,w
  2338  001A' 0089'              	movwf	Lcd_Set_Cursor@y
  2339                           
  2340                           ;lcd.h: 48: Lcd_Cmd(z);
  2341  001B' 0808'              	movf	Lcd_Set_Cursor@z,w
  2342  001C' 2000'              	fcall	_Lcd_Cmd
  2343                           
  2344                           ;lcd.h: 49: Lcd_Cmd(y);
  2345  001D' 1283               	bcf	3,5	;RP0=0, select bank0
  2346  001E' 0809'              	movf	Lcd_Set_Cursor@y,w
  2347  001F' 2000'              	fcall	_Lcd_Cmd
  2348                           
  2349                           ;lcd.h: 50: }
  2350  0020' 0008               	return
  2351  0021'                    l1209:	
  2352                           
  2353                           ;lcd.h: 51: else if(a == 2)
  2354  0021' 3002               	movlw	2
  2355  0022' 1283               	bcf	3,5	;RP0=0, select bank0
  2356  0023' 0607'              	xorwf	Lcd_Set_Cursor@a,w
  2357  0024' 1D03               	btfss	3,2
  2358  0025' 0008               	return
  2359                           
  2360                           ;lcd.h: 52: {
  2361                           ;lcd.h: 53: temp = 0xC0 + b - 1;
  2362  0026' 0804'              	movf	Lcd_Set_Cursor@b,w
  2363  0027' 3EBF               	addlw	191
  2364  0028' 0085'              	movwf	??_Lcd_Set_Cursor
  2365  0029' 0805'              	movf	??_Lcd_Set_Cursor,w
  2366  002A' 008A'              	movwf	Lcd_Set_Cursor@temp
  2367                           
  2368                           ;lcd.h: 54: z = temp>>4;
  2369  002B' 080A'              	movf	Lcd_Set_Cursor@temp,w
  2370  002C' 0085'              	movwf	??_Lcd_Set_Cursor
  2371  002D' 3004               	movlw	4
  2372  002E'                    u935:	
  2373  002E' 1003               	clrc
  2374  002F' 0C85'              	rrf	??_Lcd_Set_Cursor,f
  2375  0030' 3EFF               	addlw	-1
  2376  0031' 1D03               	skipz
  2377  0032' 282E'              	goto	u935
  2378  0033' 0805'              	movf	??_Lcd_Set_Cursor,w
  2379  0034' 0086'              	movwf	??_Lcd_Set_Cursor+1
  2380  0035' 0806'              	movf	??_Lcd_Set_Cursor+1,w
  2381  0036' 0088'              	movwf	Lcd_Set_Cursor@z
  2382                           
  2383                           ;lcd.h: 55: y = temp & 0x0F;
  2384  0037' 080A'              	movf	Lcd_Set_Cursor@temp,w
  2385  0038' 390F               	andlw	15
  2386  0039' 0085'              	movwf	??_Lcd_Set_Cursor
  2387  003A' 0805'              	movf	??_Lcd_Set_Cursor,w
  2388  003B' 0089'              	movwf	Lcd_Set_Cursor@y
  2389                           
  2390                           ;lcd.h: 56: Lcd_Cmd(z);
  2391  003C' 0808'              	movf	Lcd_Set_Cursor@z,w
  2392  003D' 2000'              	fcall	_Lcd_Cmd
  2393                           
  2394                           ;lcd.h: 57: Lcd_Cmd(y);
  2395  003E' 1283               	bcf	3,5	;RP0=0, select bank0
  2396  003F' 0809'              	movf	Lcd_Set_Cursor@y,w
  2397  0040' 2000'              	fcall	_Lcd_Cmd
  2398  0041' 0008               	return
  2399  0042'                    __end_of_Lcd_Set_Cursor:	
  2400                           
  2401                           	psect	text11
  2402  0000'                    __ptext11:	
  2403 ;; *************** function _Lcd_Init *****************
  2404 ;; Defined at:
  2405 ;;		line 61 in file "lcd.h"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;		None
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;		None
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  1    wreg      void 
  2412 ;; Registers used:
  2413 ;;		wreg, status,2, status,0, pclath, cstack
  2414 ;; Tracked objects:
  2415 ;;		On entry : 0/0
  2416 ;;		On exit  : 0/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMMON   BANK0
  2419 ;;      Params:         0       0
  2420 ;;      Locals:         0       0
  2421 ;;      Temps:          0       2
  2422 ;;      Totals:         0       2
  2423 ;;Total ram usage:        2 bytes
  2424 ;; Hardware stack levels used:    1
  2425 ;; Hardware stack levels required when called:    2
  2426 ;; This function calls:
  2427 ;;		_Lcd_Cmd
  2428 ;;		_Lcd_Port
  2429 ;; This function is called by:
  2430 ;;		_main
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           
  2435                           ;psect for function _Lcd_Init
  2436  0000'                    _Lcd_Init:	
  2437                           
  2438                           ;lcd.h: 63: Lcd_Port(0x00);
  2439                           
  2440                           ;incstack = 0
  2441                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2442  0000' 3000               	movlw	0
  2443  0001' 2000'              	fcall	_Lcd_Port
  2444                           
  2445                           ;lcd.h: 64: _delay((unsigned long)((20)*(4000000/4000.0)));
  2446  0002' 301A               	movlw	26
  2447  0003' 1283               	bcf	3,5	;RP0=0, select bank0
  2448  0004' 0085'              	movwf	??_Lcd_Init+1
  2449  0005' 30F8               	movlw	248
  2450  0006' 0084'              	movwf	??_Lcd_Init
  2451  0007'                    u1287:	
  2452  0007' 0B84'              	decfsz	??_Lcd_Init,f
  2453  0008' 2807'              	goto	u1287
  2454  0009' 0B85'              	decfsz	??_Lcd_Init+1,f
  2455  000A' 2807'              	goto	u1287
  2456  000B' 0000               	nop
  2457                           
  2458                           ;lcd.h: 65: Lcd_Cmd(0x03);
  2459  000C' 3003               	movlw	3
  2460  000D' 2000'              	fcall	_Lcd_Cmd
  2461                           
  2462                           ;lcd.h: 66: _delay((unsigned long)((5)*(4000000/4000.0)));
  2463  000E' 3007               	movlw	7
  2464  000F' 1283               	bcf	3,5	;RP0=0, select bank0
  2465  0010' 0085'              	movwf	??_Lcd_Init+1
  2466  0011' 307D               	movlw	125
  2467  0012' 0084'              	movwf	??_Lcd_Init
  2468  0013'                    u1297:	
  2469  0013' 0B84'              	decfsz	??_Lcd_Init,f
  2470  0014' 2813'              	goto	u1297
  2471  0015' 0B85'              	decfsz	??_Lcd_Init+1,f
  2472  0016' 2813'              	goto	u1297
  2473                           
  2474                           ;lcd.h: 67: Lcd_Cmd(0x03);
  2475  0017' 3003               	movlw	3
  2476  0018' 2000'              	fcall	_Lcd_Cmd
  2477                           
  2478                           ;lcd.h: 68: _delay((unsigned long)((11)*(4000000/4000.0)));
  2479  0019' 300F               	movlw	15
  2480  001A' 1283               	bcf	3,5	;RP0=0, select bank0
  2481  001B' 0085'              	movwf	??_Lcd_Init+1
  2482  001C' 3047               	movlw	71
  2483  001D' 0084'              	movwf	??_Lcd_Init
  2484  001E'                    u1307:	
  2485  001E' 0B84'              	decfsz	??_Lcd_Init,f
  2486  001F' 281E'              	goto	u1307
  2487  0020' 0B85'              	decfsz	??_Lcd_Init+1,f
  2488  0021' 281E'              	goto	u1307
  2489  0022' 2823'              	nop2
  2490                           
  2491                           ;lcd.h: 69: Lcd_Cmd(0x03);
  2492  0023' 3003               	movlw	3
  2493  0024' 2000'              	fcall	_Lcd_Cmd
  2494                           
  2495                           ;lcd.h: 71: Lcd_Cmd(0x02);
  2496  0025' 3002               	movlw	2
  2497  0026' 2000'              	fcall	_Lcd_Cmd
  2498                           
  2499                           ;lcd.h: 72: Lcd_Cmd(0x02);
  2500  0027' 3002               	movlw	2
  2501  0028' 2000'              	fcall	_Lcd_Cmd
  2502                           
  2503                           ;lcd.h: 73: Lcd_Cmd(0x08);
  2504  0029' 3008               	movlw	8
  2505  002A' 2000'              	fcall	_Lcd_Cmd
  2506                           
  2507                           ;lcd.h: 74: Lcd_Cmd(0x00);
  2508  002B' 3000               	movlw	0
  2509  002C' 2000'              	fcall	_Lcd_Cmd
  2510                           
  2511                           ;lcd.h: 75: Lcd_Cmd(0x0C);
  2512  002D' 300C               	movlw	12
  2513  002E' 2000'              	fcall	_Lcd_Cmd
  2514                           
  2515                           ;lcd.h: 76: Lcd_Cmd(0x00);
  2516  002F' 3000               	movlw	0
  2517  0030' 2000'              	fcall	_Lcd_Cmd
  2518                           
  2519                           ;lcd.h: 77: Lcd_Cmd(0x06);
  2520  0031' 3006               	movlw	6
  2521  0032' 2000'              	fcall	_Lcd_Cmd
  2522  0033' 0008               	return
  2523  0034'                    __end_of_Lcd_Init:	
  2524                           
  2525                           	psect	text12
  2526  0000'                    __ptext12:	
  2527 ;; *************** function _Lcd_Clear *****************
  2528 ;; Defined at:
  2529 ;;		line 34 in file "lcd.h"
  2530 ;; Parameters:    Size  Location     Type
  2531 ;;		None
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;		None
  2534 ;; Return value:  Size  Location     Type
  2535 ;;                  2   56[None  ] int 
  2536 ;; Registers used:
  2537 ;;		wreg, status,2, status,0, pclath, cstack
  2538 ;; Tracked objects:
  2539 ;;		On entry : 0/0
  2540 ;;		On exit  : 0/0
  2541 ;;		Unchanged: 0/0
  2542 ;; Data sizes:     COMMON   BANK0
  2543 ;;      Params:         0       0
  2544 ;;      Locals:         0       0
  2545 ;;      Temps:          0       0
  2546 ;;      Totals:         0       0
  2547 ;;Total ram usage:        0 bytes
  2548 ;; Hardware stack levels used:    1
  2549 ;; Hardware stack levels required when called:    2
  2550 ;; This function calls:
  2551 ;;		_Lcd_Cmd
  2552 ;; This function is called by:
  2553 ;;		_main
  2554 ;;		_relaystatus
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           
  2559                           ;psect for function _Lcd_Clear
  2560  0000'                    _Lcd_Clear:	
  2561                           
  2562                           ;lcd.h: 36: Lcd_Cmd(0);
  2563                           
  2564                           ;incstack = 0
  2565                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2566  0000' 3000               	movlw	0
  2567  0001' 2000'              	fcall	_Lcd_Cmd
  2568                           
  2569                           ;lcd.h: 37: Lcd_Cmd(1);
  2570  0002' 3001               	movlw	1
  2571  0003' 2000'              	fcall	_Lcd_Cmd
  2572  0004' 0008               	return
  2573  0005'                    __end_of_Lcd_Clear:	
  2574                           
  2575                           	psect	text13
  2576  0000'                    __ptext13:	
  2577 ;; *************** function _Lcd_Cmd *****************
  2578 ;; Defined at:
  2579 ;;		line 25 in file "lcd.h"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;  a               1    wreg     unsigned char 
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;  a               1    3[BANK0 ] unsigned char 
  2584 ;; Return value:  Size  Location     Type
  2585 ;;                  1    wreg      void 
  2586 ;; Registers used:
  2587 ;;		wreg, status,2, status,0, pclath, cstack
  2588 ;; Tracked objects:
  2589 ;;		On entry : 0/0
  2590 ;;		On exit  : 0/0
  2591 ;;		Unchanged: 0/0
  2592 ;; Data sizes:     COMMON   BANK0
  2593 ;;      Params:         0       0
  2594 ;;      Locals:         0       1
  2595 ;;      Temps:          0       2
  2596 ;;      Totals:         0       3
  2597 ;;Total ram usage:        3 bytes
  2598 ;; Hardware stack levels used:    1
  2599 ;; Hardware stack levels required when called:    1
  2600 ;; This function calls:
  2601 ;;		_Lcd_Port
  2602 ;; This function is called by:
  2603 ;;		_Lcd_Clear
  2604 ;;		_Lcd_Set_Cursor
  2605 ;;		_Lcd_Init
  2606 ;;		_Lcd_Shift_Right
  2607 ;;		_Lcd_Shift_Left
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           
  2612                           ;psect for function _Lcd_Cmd
  2613  0000'                    _Lcd_Cmd:	
  2614                           
  2615                           ;incstack = 0
  2616                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2617                           ;Lcd_Cmd@a stored from wreg
  2618  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2619  0001' 0083'              	movwf	Lcd_Cmd@a
  2620                           
  2621                           ;lcd.h: 27: RA1 = 0;
  2622  0002' 1085               	bcf	5,1	;volatile
  2623                           
  2624                           ;lcd.h: 28: Lcd_Port(a);
  2625  0003' 0803'              	movf	Lcd_Cmd@a,w
  2626  0004' 2000'              	fcall	_Lcd_Port
  2627                           
  2628                           ;lcd.h: 29: RA2 = 1;
  2629  0005' 1283               	bcf	3,5	;RP0=0, select bank0
  2630  0006' 1505               	bsf	5,2	;volatile
  2631                           
  2632                           ;lcd.h: 30: _delay((unsigned long)((5)*(4000000/4000.0)));
  2633  0007' 3007               	movlw	7
  2634  0008' 0082'              	movwf	??_Lcd_Cmd+1
  2635  0009' 307D               	movlw	125
  2636  000A' 0081'              	movwf	??_Lcd_Cmd
  2637  000B'                    u1317:	
  2638  000B' 0B81'              	decfsz	??_Lcd_Cmd,f
  2639  000C' 280B'              	goto	u1317
  2640  000D' 0B82'              	decfsz	??_Lcd_Cmd+1,f
  2641  000E' 280B'              	goto	u1317
  2642                           
  2643                           ;lcd.h: 31: RA2 = 0;
  2644  000F' 1283               	bcf	3,5	;RP0=0, select bank0
  2645  0010' 1105               	bcf	5,2	;volatile
  2646  0011' 0008               	return
  2647  0012'                    __end_of_Lcd_Cmd:	
  2648                           
  2649                           	psect	text14
  2650  0000'                    __ptext14:	
  2651 ;; *************** function _Lcd_Port *****************
  2652 ;; Defined at:
  2653 ;;		line 3 in file "lcd.h"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;  a               1    wreg     unsigned char 
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;  a               1    0[BANK0 ] unsigned char 
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  1    wreg      void 
  2660 ;; Registers used:
  2661 ;;		wreg
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMMON   BANK0
  2667 ;;      Params:         0       0
  2668 ;;      Locals:         0       1
  2669 ;;      Temps:          0       0
  2670 ;;      Totals:         0       1
  2671 ;;Total ram usage:        1 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; This function calls:
  2674 ;;		Nothing
  2675 ;; This function is called by:
  2676 ;;		_Lcd_Cmd
  2677 ;;		_Lcd_Init
  2678 ;;		_Lcd_Write_Char
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           
  2683                           ;psect for function _Lcd_Port
  2684  0000'                    _Lcd_Port:	
  2685                           
  2686                           ;incstack = 0
  2687                           ; Regs used in _Lcd_Port: [wreg]
  2688                           ;Lcd_Port@a stored from wreg
  2689  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2690  0001' 0080'              	movwf	Lcd_Port@a
  2691                           
  2692                           ;lcd.h: 5: if(a & 1)
  2693  0002' 1C00'              	btfss	Lcd_Port@a,0
  2694  0003' 2806'              	goto	l43
  2695                           
  2696                           ;lcd.h: 6: RC0 = 1;
  2697  0004' 1407               	bsf	7,0	;volatile
  2698  0005' 2807'              	goto	l44
  2699  0006'                    l43:	
  2700                           
  2701                           ;lcd.h: 7: else
  2702                           ;lcd.h: 8: RC0 = 0;
  2703  0006' 1007               	bcf	7,0	;volatile
  2704  0007'                    l44:	
  2705                           
  2706                           ;lcd.h: 10: if(a & 2)
  2707  0007' 1C80'              	btfss	Lcd_Port@a,1
  2708  0008' 280B'              	goto	l45
  2709                           
  2710                           ;lcd.h: 11: RC1 = 1;
  2711  0009' 1487               	bsf	7,1	;volatile
  2712  000A' 280C'              	goto	l46
  2713  000B'                    l45:	
  2714                           
  2715                           ;lcd.h: 12: else
  2716                           ;lcd.h: 13: RC1 = 0;
  2717  000B' 1087               	bcf	7,1	;volatile
  2718  000C'                    l46:	
  2719                           
  2720                           ;lcd.h: 15: if(a & 4)
  2721  000C' 1D00'              	btfss	Lcd_Port@a,2
  2722  000D' 2810'              	goto	l47
  2723                           
  2724                           ;lcd.h: 16: RC2 = 1;
  2725  000E' 1507               	bsf	7,2	;volatile
  2726  000F' 2811'              	goto	l48
  2727  0010'                    l47:	
  2728                           
  2729                           ;lcd.h: 17: else
  2730                           ;lcd.h: 18: RC2 = 0;
  2731  0010' 1107               	bcf	7,2	;volatile
  2732  0011'                    l48:	
  2733                           
  2734                           ;lcd.h: 20: if(a & 8)
  2735  0011' 1D80'              	btfss	Lcd_Port@a,3
  2736  0012' 2815'              	goto	l49
  2737                           
  2738                           ;lcd.h: 21: RC3 = 1;
  2739  0013' 1587               	bsf	7,3	;volatile
  2740  0014' 0008               	return
  2741  0015'                    l49:	
  2742                           
  2743                           ;lcd.h: 22: else
  2744                           ;lcd.h: 23: RC3 = 0;
  2745  0015' 1187               	bcf	7,3	;volatile
  2746  0016' 0008               	return
  2747  0017'                    __end_of_Lcd_Port:	
  2748  005E                     btemp	set	94	;btemp
  2749  005E                     wtemp0	set	94


Data Sizes:
    Strings     125
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     39      39

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 14
		 -> STR_16(CODE[10]), STR_15(CODE[11]), STR_14(CODE[14]), STR_13(CODE[10]), 
		 -> STR_12(CODE[9]), STR_11(CODE[3]), STR_10(CODE[5]), STR_9(CODE[5]), 
		 -> STR_8(CODE[3]), STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[10]), 
		 -> STR_4(CODE[10]), STR_3(CODE[13]), STR_2(CODE[13]), STR_1(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checktemp
    _lcddisplay->___awdiv
    _checktemp->_read
    _checktemp->_write
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                29    29      0    4301
                                             14 BANK0     25    25      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _checktemp
                         _lcddisplay
 ---------------------------------------------------------------------------------
 (1) _lcddisplay                                           2     0      2    1507
                                              9 BANK0      2     0      2
                     _Lcd_Write_Char
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     402
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     406
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _checktemp                                           10     8      2     300
                                              4 BANK0     10     8      2
                               _read
                              _reset
                              _write
 ---------------------------------------------------------------------------------
 (2) _write                                                4     4      0     113
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _reset                                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _read                                                 4     4      0      92
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     700
                                              5 BANK0      3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     963
                                              4 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _checktemp
     _read
     _reset
     _write
   _lcddisplay
     _Lcd_Write_Char
       _Lcd_Port
     ___awdiv
     ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E     27      27       4       62.9%
ABS                  0      0       0       5        0.0%
DATA                 0      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Nov 27 11:57:29 2017

                        pc 0002                __CFG_CP$OFF 0000                         l43 0006  
                       l44 0007                         l45 000B                         l46 000C  
                       l47 0010                         l48 0011                         l49 0015  
                       l91 0029                         l96 000A               ___awdiv@sign 0006  
                       fsr 0004                        l125 00F1                        l118 006F  
                      l127 0136                        _RA0 0028                        _RA1 0029  
                      _RA2 002A                        _RC0 0038                        _RA4 002C  
                      _RC1 0039                        _RA5 002D                        _RC2 003A  
                      _RC3 003B                        _RC4 003C               __CFG_CPD$OFF 0000  
                      u615 0010                        u644 0014                        u645 0012  
                      u745 0021                        u915 000D                        u765 002D  
                      u845 001B                        u694 001A                        u935 002E  
                      u695 0018                        u775 0039                        u785 0043  
                      u865 002C                        u875 0035                        u985 006D  
                      fsr0 0004               ___awmod@sign 0006                       l1111 002F  
                     l1107 0021                       l1123 000B                       l1141 002C  
                     l1151 004D                       l1209 0021                       l1129 0016  
                     l1235 0004                       l1155 0055                       l1147 0042  
                     l1139 001E                       l1171 0012                       l1403 013C  
                     l1069 001B                       l1093 0034                       l1181 0026  
                     l1167 000B                       l1257 003C                       l1193 0047  
                     l1185 0034                       l1179 0018                       l1189 003F  
                     l1429 017C                       l1357 00AE                       l1393 0117  
                     l1379 00EA                main@highval 0021                       l1389 00F8  
                     STR_1 002E                       STR_2 0014                       STR_3 0021  
                     STR_4 0045                       STR_5 004F                       STR_6 0076  
                     STR_7 007B                       STR_8 0080                       STR_9 0076  
                     u1015 0087                       u1105 0122                       u1115 012F  
                     u1035 00BD                       u1207 002F                       u1217 0006  
                     u1137 0024                       u1307 001E                       u1227 000E  
                     u1147 0042                       u1317 000B                       u1237 0016  
                     u1157 00FE                       u1247 001E                       u1167 015C  
                     u1095 0115                       u1257 0023                       u1177 018A  
                     u1267 001B                       u1187 0012                       u1277 0025  
                     u1197 0025                       u1287 0007                       u1297 0013  
        ?_Lcd_Write_String 0000                       _main 0000                       _read 0000  
                     btemp 005E                main@tempval 001F                       start 0000* 
       ??_Lcd_Write_String 0000            __end_of_Lcd_Cmd 0012                      ?_main 0000  
                    ?_read 0000            __end_of___awdiv 005A                      STR_10 007B  
                    STR_11 0080                      STR_12 006D                      STR_13 0059  
                    STR_14 0006                      STR_15 003A                      STR_16 0063  
            __CFG_WDTE$OFF 0000            __end_of___awmod 004C                      _CMCON 0019  
                    _ANSEL 0091            ___awdiv@divisor 0000            ___awdiv@counter 0005  
  __size_of_Lcd_Set_Cursor 0042                      _TRISC 0087              __CFG_PWRTE$ON 0000  
                    _reset 0000                      main@b 0017                      main@c 0019  
                    _write 0000                      read@i 0003             __CFG_BOREN$OFF 0000  
                    pclath 000A                      status 0003                      wtemp0 005E  
         __end_of_Lcd_Init 0034           __end_of_Lcd_Port 0017             __CFG_MCLRE$OFF 0000  
          __initialization 0000               __end_of_main 0192               __end_of_read 0031  
                   ??_main 000E                     ??_read 0000         __size_of_Lcd_Clear 0005  
                   ?_reset 0000           ___awdiv@dividend 0002                     ?_write 0000  
                ??_Lcd_Cmd 0001    __size_of_Lcd_Write_Char 002A                     _TRISA0 0428  
                   _TRISA1 0429                     _TRISA2 042A                     _TRISA3 042B  
                   _TRISA4 042C                     _TRISA5 042D                  ??___awdiv 0004  
                ??___awmod 0004           ___awdiv@quotient 0007            ___awmod@divisor 0000  
          ___awmod@counter 0005                     write@i 0003            Lcd_Set_Cursor@a 0007  
          Lcd_Set_Cursor@b 0004            Lcd_Set_Cursor@y 0009            Lcd_Set_Cursor@z 0008  
  __end_of__initialization 0000              main@switchsel 0025          __end_of_Lcd_Clear 0005  
           __pcstackCOMMON 0000              __end_of_reset 0023         __size_of_checktemp 0042  
            __end_of_write 003A             _Lcd_Set_Cursor 0000                  ?_Lcd_Init 0000  
                ?_Lcd_Port 0000                    ??_reset 0000                    ??_write 0000  
               __pmaintext 0000  __size_of_Lcd_Write_String 0018     __end_of_Lcd_Set_Cursor 0042  
               ??_Lcd_Init 0004                 ??_Lcd_Port 0000                 _lcddisplay 0000  
            checktemp@temp 000C                 __stringtab 0000          __end_of_checktemp 0042  
           _Lcd_Write_Char 0000                    _Lcd_Cmd 0000                    ___awdiv 0000  
                  ___awmod 0000            ?_Lcd_Set_Cursor 0004                    __ptext1 0000  
                  __ptext2 0000                    __ptext3 0000                    __ptext4 0000  
                  __ptext5 0000                    __ptext6 0000                    __ptext7 0000  
                  __ptext8 0000                    __ptext9 0000           ___awmod@dividend 0002  
   __end_of_Lcd_Write_Char 002A       end_of_initialization 0000                  Lcd_Port@a 0000  
           lcddisplay@data 0009                ?_lcddisplay 0009            ?_Lcd_Write_Char 0000  
        Lcd_Write_String@a 0007          Lcd_Write_String@i 0005                 main@lowval 0023  
                _Lcd_Clear 0000           _Lcd_Write_String 0000        start_initialization 0000  
        __size_of_Lcd_Init 0034          __size_of_Lcd_Port 0017                 read@result 0002  
               ?_Lcd_Clear 0000        __size_of_lcddisplay 001D            Lcd_Write_Char@a 0004  
          Lcd_Write_Char@y 0003                  ___latbits 0000              __pcstackBANK0 0000  
                 ?_Lcd_Cmd 0000                  _checktemp 0000           ??_Lcd_Set_Cursor 0005  
                 ?___awdiv 0000                   ?___awmod 0000                  __pstrings 0000  
           __size_of_reset 0023             __size_of_write 003A                 ?_checktemp 0004  
                 Lcd_Cmd@a 0003                ??_Lcd_Clear 0000             checktemp@tempH 000A  
           checktemp@tempL 0008                  main@c_115 001D                __stringbase 0005  
         ??_Lcd_Write_Char 0001                  main@tempH 0013                  main@tempL 0011  
                 _Lcd_Init 0000                   _Lcd_Port 0000               ??_lcddisplay 0000  
 __end_of_Lcd_Write_String 0018           __size_of_Lcd_Cmd 0012           __size_of___awdiv 005A  
         __size_of___awmod 004C         __end_of_lcddisplay 001D         __end_of__stringtab 0006  
                 __ptext10 0000                   __ptext11 0000                   __ptext12 0000  
                 __ptext13 0000                   __ptext14 0000              __size_of_main 0192  
            __size_of_read 0031                ??_checktemp 0006                   main@curs 001B  
                 main@temp 0015         Lcd_Write_Char@temp 0002                  stringcode 0000  
       Lcd_Set_Cursor@temp 000A                   write@Cmd 0002                   write@WRT 0001  
                 stringdir 0000                   stringtab 0000          __CFG_FOSC$INTRCIO 0000  
