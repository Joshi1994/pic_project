

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Dec 02 11:28:06 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	psect	text14,local,class=CODE,merge=1,delta=2
    23                           	psect	text15,local,class=CODE,merge=1,delta=2
    24                           	psect	text16,local,class=CODE,merge=1,delta=2
    25                           	psect	text17,local,class=CODE,merge=1,delta=2
    26                           	psect	text18,local,class=CODE,merge=1,delta=2
    27                           	psect	text19,local,class=CODE,merge=1,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 1.44
    31                           ; Generated 14/09/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F886 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  000E                     	;# 
    79  000F                     	;# 
    80  0010                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0013                     	;# 
    84  0014                     	;# 
    85  0015                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001D                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  0087                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  008F                     	;# 
   107  0090                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0093                     	;# 
   112  0093                     	;# 
   113  0094                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0097                     	;# 
   117  0098                     	;# 
   118  0099                     	;# 
   119  009A                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  0105                     	;# 
   126  0107                     	;# 
   127  0108                     	;# 
   128  0109                     	;# 
   129  010C                     	;# 
   130  010C                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  010F                     	;# 
   134  0185                     	;# 
   135  0187                     	;# 
   136  0188                     	;# 
   137  0189                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  005F                     _GIE	set	95
   141  0018                     _CARRY	set	24
   142  0029                     _RA1	set	41
   143  0038                     _RC0	set	56
   144  0037                     _RB7	set	55
   145  0034                     _RB4	set	52
   146  0035                     _RB5	set	53
   147  0036                     _RB6	set	54
   148  0028                     _RA0	set	40
   149  003B                     _RC3	set	59
   150  003D                     _RC5	set	61
   151  003C                     _RC4	set	60
   152  0033                     _RB3	set	51
   153  0032                     _RB2	set	50
   154  0031                     _RB1	set	49
   155  0030                     _RB0	set	48
   156  008F                     _OSCCON	set	143
   157  0096                     _IOCB	set	150
   158  0095                     _WPUB	set	149
   159  0081                     _OPTION_REG	set	129
   160  0087                     _TRISC	set	135
   161  0086                     _TRISB	set	134
   162  0085                     _TRISA	set	133
   163  043B                     _TRISC3	set	1083
   164  010C                     _EEDATA	set	268
   165  010D                     _EEADR	set	269
   166  018D                     _EECON2	set	397
   167  018C                     _EECON1	set	396
   168  0189                     _ANSELH	set	393
   169  0188                     _ANSEL	set	392
   170  0C62                     _WREN	set	3170
   171  0C60                     _RD	set	3168
   172  0C61                     _WR	set	3169
   173                           
   174                           	psect	strings
   175  0003                     __pstrings:	
   176  0003                     stringtab:	
   177  0003                     __stringtab:	
   178  0003                     stringcode:	
   179                           ;	String table - string pointers are 1 byte each
   180                           
   181  0003                     stringdir:	
   182  0003  3000               	movlw	high stringdir
   183  0004  008A               	movwf	10
   184  0005  0804               	movf	4,w
   185  0006  0A84               	incf	4,f
   186  0007  0782               	addwf	2,f
   187  0008                     __stringbase:	
   188  0008  3400               	retlw	0
   189  0009                     __end_of__stringtab:	
   190  0009                     STR_3:	
   191  0009  3420               	retlw	32	;' '
   192  000A  342A               	retlw	42	;'*'
   193  000B  3420               	retlw	32	;' '
   194  000C  3442               	retlw	66	;'B'
   195  000D  3452               	retlw	82	;'R'
   196  000E  3445               	retlw	69	;'E'
   197  000F  3457               	retlw	87	;'W'
   198  0010  344D               	retlw	77	;'M'
   199  0011  3441               	retlw	65	;'A'
   200  0012  3453               	retlw	83	;'S'
   201  0013  3454               	retlw	84	;'T'
   202  0014  3445               	retlw	69	;'E'
   203  0015  3452               	retlw	82	;'R'
   204  0016  3420               	retlw	32	;' '
   205  0017  342A               	retlw	42	;'*'
   206  0018  3420               	retlw	32	;' '
   207  0019  3400               	retlw	0
   208  001A                     STR_5:	
   209  001A  3420               	retlw	32	;' '
   210  001B  3445               	retlw	69	;'E'
   211  001C  344E               	retlw	78	;'N'
   212  001D  3454               	retlw	84	;'T'
   213  001E  3445               	retlw	69	;'E'
   214  001F  3452               	retlw	82	;'R'
   215  0020  3420               	retlw	32	;' '
   216  0021  3450               	retlw	80	;'P'
   217  0022  3441               	retlw	65	;'A'
   218  0023  3453               	retlw	83	;'S'
   219  0024  3453               	retlw	83	;'S'
   220  0025  3457               	retlw	87	;'W'
   221  0026  344F               	retlw	79	;'O'
   222  0027  3452               	retlw	82	;'R'
   223  0028  3444               	retlw	68	;'D'
   224  0029  3420               	retlw	32	;' '
   225  002A  3400               	retlw	0
   226  002B                     STR_4:	
   227  002B  3420               	retlw	32	;' '
   228  002C  3445               	retlw	69	;'E'
   229  002D  3458               	retlw	88	;'X'
   230  002E  3454               	retlw	84	;'T'
   231  002F  3445               	retlw	69	;'E'
   232  0030  3452               	retlw	82	;'R'
   233  0031  344E               	retlw	78	;'N'
   234  0032  3441               	retlw	65	;'A'
   235  0033  344C               	retlw	76	;'L'
   236  0034  3420               	retlw	32	;' '
   237  0035  3442               	retlw	66	;'B'
   238  0036  344F               	retlw	79	;'O'
   239  0037  3449               	retlw	73	;'I'
   240  0038  344C               	retlw	76	;'L'
   241  0039  3445               	retlw	69	;'E'
   242  003A  3452               	retlw	82	;'R'
   243  003B  3400               	retlw	0
   244  003C                     STR_6:	
   245  003C  3477               	retlw	119	;'w'
   246  003D  3472               	retlw	114	;'r'
   247  003E  346F               	retlw	111	;'o'
   248  003F  346E               	retlw	110	;'n'
   249  0040  3467               	retlw	103	;'g'
   250  0041  3420               	retlw	32	;' '
   251  0042  3470               	retlw	112	;'p'
   252  0043  3461               	retlw	97	;'a'
   253  0044  3473               	retlw	115	;'s'
   254  0045  3473               	retlw	115	;'s'
   255  0046  3477               	retlw	119	;'w'
   256  0047  346F               	retlw	111	;'o'
   257  0048  3472               	retlw	114	;'r'
   258  0049  3464               	retlw	100	;'d'
   259  004A  3400               	retlw	0
   260  004B                     STR_7:	
   261  004B  3445               	retlw	69	;'E'
   262  004C  346E               	retlw	110	;'n'
   263  004D  3474               	retlw	116	;'t'
   264  004E  3465               	retlw	101	;'e'
   265  004F  3472               	retlw	114	;'r'
   266  0050  3420               	retlw	32	;' '
   267  0051  3470               	retlw	112	;'p'
   268  0052  3461               	retlw	97	;'a'
   269  0053  3473               	retlw	115	;'s'
   270  0054  3473               	retlw	115	;'s'
   271  0055  3477               	retlw	119	;'w'
   272  0056  346F               	retlw	111	;'o'
   273  0057  3472               	retlw	114	;'r'
   274  0058  3464               	retlw	100	;'d'
   275  0059  3400               	retlw	0
   276  005A                     STR_9:	
   277  005A  3453               	retlw	83	;'S'
   278  005B  3445               	retlw	69	;'E'
   279  005C  3454               	retlw	84	;'T'
   280  005D  3420               	retlw	32	;' '
   281  005E  344D               	retlw	77	;'M'
   282  005F  3449               	retlw	73	;'I'
   283  0060  344E               	retlw	78	;'N'
   284  0061  3420               	retlw	32	;' '
   285  0062  3454               	retlw	84	;'T'
   286  0063  3445               	retlw	69	;'E'
   287  0064  344D               	retlw	77	;'M'
   288  0065  3450               	retlw	80	;'P'
   289  0066  343A               	retlw	58	;':'
   290  0067  3400               	retlw	0
   291  0068                     STR_10:	
   292  0068  3453               	retlw	83	;'S'
   293  0069  3445               	retlw	69	;'E'
   294  006A  3454               	retlw	84	;'T'
   295  006B  3420               	retlw	32	;' '
   296  006C  344D               	retlw	77	;'M'
   297  006D  3441               	retlw	65	;'A'
   298  006E  3458               	retlw	88	;'X'
   299  006F  3420               	retlw	32	;' '
   300  0070  3454               	retlw	84	;'T'
   301  0071  3445               	retlw	69	;'E'
   302  0072  344D               	retlw	77	;'M'
   303  0073  3450               	retlw	80	;'P'
   304  0074  343A               	retlw	58	;':'
   305  0075  3400               	retlw	0
   306  0076                     STR_17:	
   307  0076  3454               	retlw	84	;'T'
   308  0077  3445               	retlw	69	;'E'
   309  0078  344D               	retlw	77	;'M'
   310  0079  3450               	retlw	80	;'P'
   311  007A  3445               	retlw	69	;'E'
   312  007B  3452               	retlw	82	;'R'
   313  007C  3441               	retlw	65	;'A'
   314  007D  3454               	retlw	84	;'T'
   315  007E  3455               	retlw	85	;'U'
   316  007F  3452               	retlw	82	;'R'
   317  0080  3445               	retlw	69	;'E'
   318  0081  3420               	retlw	32	;' '
   319  0082  3400               	retlw	0
   320  0083                     STR_2:	
   321  0083  3473               	retlw	115	;'s'
   322  0084  3474               	retlw	116	;'t'
   323  0085  3461               	retlw	97	;'a'
   324  0086  3474               	retlw	116	;'t'
   325  0087  3475               	retlw	117	;'u'
   326  0088  3473               	retlw	115	;'s'
   327  0089  3420               	retlw	32	;' '
   328  008A  343A               	retlw	58	;':'
   329  008B  3420               	retlw	32	;' '
   330  008C  344F               	retlw	79	;'O'
   331  008D  3446               	retlw	70	;'F'
   332  008E  3446               	retlw	70	;'F'
   333  008F  3400               	retlw	0
   334  0090                     STR_8:	
   335  0090  3477               	retlw	119	;'w'
   336  0091  3468               	retlw	104	;'h'
   337  0092  3469               	retlw	105	;'i'
   338  0093  346C               	retlw	108	;'l'
   339  0094  3465               	retlw	101	;'e'
   340  0095  3420               	retlw	32	;' '
   341  0096  3465               	retlw	101	;'e'
   342  0097  3478               	retlw	120	;'x'
   343  0098  3469               	retlw	105	;'i'
   344  0099  3474               	retlw	116	;'t'
   345  009A  3465               	retlw	101	;'e'
   346  009B  3464               	retlw	100	;'d'
   347  009C  3400               	retlw	0
   348  009D                     STR_1:	
   349  009D  3473               	retlw	115	;'s'
   350  009E  3474               	retlw	116	;'t'
   351  009F  3461               	retlw	97	;'a'
   352  00A0  3474               	retlw	116	;'t'
   353  00A1  3475               	retlw	117	;'u'
   354  00A2  3473               	retlw	115	;'s'
   355  00A3  3420               	retlw	32	;' '
   356  00A4  343A               	retlw	58	;':'
   357  00A5  3420               	retlw	32	;' '
   358  00A6  344F               	retlw	79	;'O'
   359  00A7  344E               	retlw	78	;'N'
   360  00A8  3400               	retlw	0
   361  00A9                     STR_20:	
   362  00A9  3441               	retlw	65	;'A'
   363  00AA  3443               	retlw	67	;'C'
   364  00AB  3454               	retlw	84	;'T'
   365  00AC  3455               	retlw	85	;'U'
   366  00AD  3441               	retlw	65	;'A'
   367  00AE  344C               	retlw	76	;'L'
   368  00AF  343A               	retlw	58	;':'
   369  00B0  3400               	retlw	0
   370  00B1                     STR_19:	
   371  00B1  3453               	retlw	83	;'S'
   372  00B2  3445               	retlw	69	;'E'
   373  00B3  3454               	retlw	84	;'T'
   374  00B4  343A               	retlw	58	;':'
   375  00B5  3400               	retlw	0
   376  00B6                     STR_13:	
   377  00B6  343C               	retlw	60	;'<'
   378  00B7  3400               	retlw	0
   379  00B8                     STR_18:	
   380  00B8  3443               	retlw	67	;'C'
   381  00B9  3400               	retlw	0
   382  005A                     
   383                           ; #config settings
   384  0000                     
   385                           	psect	cinit
   386  07FC                     start_initialization:	
   387  07FC                     __initialization:	
   388  07FC                     end_of_initialization:	
   389                           ;End of C runtime variable initialization code
   390                           
   391  07FC                     __end_of__initialization:	
   392  07FC  0183               	clrf	3
   393  07FD  120A  118A  2B80   	ljmp	_main	;jump to C main() function
   394                           
   395                           	psect	cstackCOMMON
   396  0070                     __pcstackCOMMON:	
   397  0070                     ?_eeprom_read:	
   398  0070                     ??_eeprom_read:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  0070                     ?_Lcd_Port:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0070                     ??_Lcd_Port:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0070                     ?_Lcd_Cmd:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0070                     ?_Lcd_Clear:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0070                     ?_Lcd_Init:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0070                     ?_Lcd_Write_Char:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ?_Lcd_Write_String:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ?_reset:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ??_reset:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?_write:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ??_write:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ?_read:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ??_read:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_main:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?___wmul:	
   444                           ; 2 bytes @ 0x0
   445                           
   446  0070                     ?___lwdiv:	
   447                           ; 2 bytes @ 0x0
   448                           
   449  0070                     ?___lwmod:	
   450                           ; 2 bytes @ 0x0
   451                           
   452  0070                     Lcd_Port@a:	
   453                           ; 2 bytes @ 0x0
   454                           
   455  0070                     ___wmul@multiplier:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ___lwdiv@divisor:	
   459                           ; 2 bytes @ 0x0
   460                           
   461  0070                     ___lwmod@divisor:	
   462                           ; 2 bytes @ 0x0
   463                           
   464                           
   465                           ; 2 bytes @ 0x0
   466  0070                     	ds	1
   467  0071                     ??_Lcd_Cmd:	
   468  0071                     ??_Lcd_Write_Char:	
   469                           ; 1 bytes @ 0x1
   470                           
   471  0071                     write@WRT:	
   472                           ; 1 bytes @ 0x1
   473                           
   474  0071                     eeprom_read@addr:	
   475                           ; 1 bytes @ 0x1
   476                           
   477                           
   478                           ; 1 bytes @ 0x1
   479  0071                     	ds	1
   480  0072                     Lcd_Write_Char@temp:	
   481  0072                     write@Cmd:	
   482                           ; 1 bytes @ 0x2
   483                           
   484  0072                     read@result:	
   485                           ; 1 bytes @ 0x2
   486                           
   487  0072                     ___wmul@multiplicand:	
   488                           ; 1 bytes @ 0x2
   489                           
   490  0072                     ___lwdiv@dividend:	
   491                           ; 2 bytes @ 0x2
   492                           
   493  0072                     ___lwmod@dividend:	
   494                           ; 2 bytes @ 0x2
   495                           
   496                           
   497                           ; 2 bytes @ 0x2
   498  0072                     	ds	1
   499  0073                     Lcd_Cmd@a:	
   500  0073                     Lcd_Write_Char@y:	
   501                           ; 1 bytes @ 0x3
   502                           
   503  0073                     write@i:	
   504                           ; 1 bytes @ 0x3
   505                           
   506  0073                     read@i:	
   507                           ; 1 bytes @ 0x3
   508                           
   509                           
   510                           ; 1 bytes @ 0x3
   511  0073                     	ds	1
   512  0074                     ??_Lcd_Clear:	
   513  0074                     ?_Lcd_Set_Cursor:	
   514                           ; 1 bytes @ 0x4
   515                           
   516  0074                     ??_Lcd_Init:	
   517                           ; 1 bytes @ 0x4
   518                           
   519  0074                     ??___wmul:	
   520                           ; 1 bytes @ 0x4
   521                           
   522  0074                     ??___lwdiv:	
   523                           ; 1 bytes @ 0x4
   524                           
   525  0074                     ??___lwmod:	
   526                           ; 1 bytes @ 0x4
   527                           
   528  0074                     ?_checktemp:	
   529                           ; 1 bytes @ 0x4
   530                           
   531  0074                     Lcd_Set_Cursor@b:	
   532                           ; 2 bytes @ 0x4
   533                           
   534  0074                     Lcd_Write_Char@a:	
   535                           ; 1 bytes @ 0x4
   536                           
   537  0074                     ___wmul@product:	
   538                           ; 1 bytes @ 0x4
   539                           
   540                           
   541                           ; 2 bytes @ 0x4
   542  0074                     	ds	1
   543  0075                     ??_Lcd_Set_Cursor:	
   544  0075                     ??_Lcd_Write_String:	
   545                           ; 1 bytes @ 0x5
   546                           
   547  0075                     ___lwmod@counter:	
   548                           ; 1 bytes @ 0x5
   549                           
   550  0075                     Lcd_Write_String@i:	
   551                           ; 1 bytes @ 0x5
   552                           
   553  0075                     ___lwdiv@quotient:	
   554                           ; 2 bytes @ 0x5
   555                           
   556                           
   557                           ; 2 bytes @ 0x5
   558  0075                     	ds	1
   559  0076                     ??_checktemp:	
   560  0076                     ?_Read_EEPROM:	
   561                           ; 1 bytes @ 0x6
   562                           
   563  0076                     Read_EEPROM@b2:	
   564                           ; 2 bytes @ 0x6
   565                           
   566                           
   567                           ; 1 bytes @ 0x6
   568  0076                     	ds	1
   569  0077                     Lcd_Set_Cursor@a:	
   570  0077                     Lcd_Write_String@a:	
   571                           ; 1 bytes @ 0x7
   572                           
   573  0077                     ___lwdiv@counter:	
   574                           ; 1 bytes @ 0x7
   575                           
   576                           
   577                           ; 1 bytes @ 0x7
   578  0077                     	ds	1
   579  0078                     ?_eeprom_write:	
   580  0078                     ?_lcddisplay:	
   581                           ; 1 bytes @ 0x8
   582                           
   583  0078                     ??_Read_EEPROM:	
   584                           ; 1 bytes @ 0x8
   585                           
   586  0078                     Lcd_Set_Cursor@z:	
   587                           ; 1 bytes @ 0x8
   588                           
   589  0078                     eeprom_write@value:	
   590                           ; 1 bytes @ 0x8
   591                           
   592  0078                     checktemp@tempL:	
   593                           ; 1 bytes @ 0x8
   594                           
   595  0078                     lcddisplay@num:	
   596                           ; 2 bytes @ 0x8
   597                           
   598                           
   599                           ; 2 bytes @ 0x8
   600  0078                     	ds	1
   601  0079                     ??_eeprom_write:	
   602  0079                     Lcd_Set_Cursor@y:	
   603                           ; 1 bytes @ 0x9
   604                           
   605                           
   606                           ; 1 bytes @ 0x9
   607  0079                     	ds	1
   608  007A                     ??_lcddisplay:	
   609  007A                     Lcd_Set_Cursor@temp:	
   610                           ; 1 bytes @ 0xA
   611                           
   612  007A                     eeprom_write@addr:	
   613                           ; 1 bytes @ 0xA
   614                           
   615  007A                     checktemp@tempH:	
   616                           ; 1 bytes @ 0xA
   617                           
   618                           
   619                           ; 2 bytes @ 0xA
   620  007A                     	ds	1
   621  007B                     ?_Write_EEPROM:	
   622  007B                     Write_EEPROM@a2:	
   623                           ; 1 bytes @ 0xB
   624                           
   625                           
   626                           ; 1 bytes @ 0xB
   627  007B                     	ds	1
   628  007C                     checktemp@temp:	
   629  007C                     Write_EEPROM@data_value:	
   630                           ; 2 bytes @ 0xC
   631                           
   632                           
   633                           ; 2 bytes @ 0xC
   634  007C                     	ds	2
   635                           
   636                           	psect	cstackBANK0
   637  0020                     __pcstackBANK0:	
   638  0020                     ??_Write_EEPROM:	
   639  0020                     Read_EEPROM@b1:	
   640                           ; 1 bytes @ 0x0
   641                           
   642                           
   643                           ; 1 bytes @ 0x0
   644  0020                     	ds	1
   645  0021                     Write_EEPROM@a1:	
   646  0021                     Read_EEPROM@c1:	
   647                           ; 1 bytes @ 0x1
   648                           
   649                           
   650                           ; 2 bytes @ 0x1
   651  0021                     	ds	2
   652  0023                     Read_EEPROM@c2:	
   653                           
   654                           ; 2 bytes @ 0x3
   655  0023                     	ds	2
   656  0025                     ??_main:	
   657                           
   658                           ; 1 bytes @ 0x5
   659  0025                     	ds	3
   660  0028                     main@open:	
   661                           
   662                           ; 2 bytes @ 0x8
   663  0028                     	ds	2
   664  002A                     main@prg:	
   665                           
   666                           ; 2 bytes @ 0xA
   667  002A                     	ds	2
   668  002C                     main@curs:	
   669                           
   670                           ; 2 bytes @ 0xC
   671  002C                     	ds	2
   672  002E                     main@tempval:	
   673                           
   674                           ; 2 bytes @ 0xE
   675  002E                     	ds	2
   676  0030                     main@switchsel:	
   677                           
   678                           ; 2 bytes @ 0x10
   679  0030                     	ds	2
   680  0032                     main@password:	
   681                           
   682                           ; 2 bytes @ 0x12
   683  0032                     	ds	2
   684  0034                     main@lowval:	
   685                           
   686                           ; 2 bytes @ 0x14
   687  0034                     	ds	2
   688  0036                     main@highval:	
   689                           
   690                           ; 2 bytes @ 0x16
   691  0036                     	ds	2
   692                           
   693                           	psect	maintext
   694  0380                     __pmaintext:	
   695 ;;
   696 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   697 ;;
   698 ;; *************** function _main *****************
   699 ;; Defined at:
   700 ;;		line 304 in file "mainbrew.c"
   701 ;; Parameters:    Size  Location     Type
   702 ;;		None
   703 ;; Auto vars:     Size  Location     Type
   704 ;;  highval         2   22[BANK0 ] int 
   705 ;;  lowval          2   20[BANK0 ] int 
   706 ;;  password        2   18[BANK0 ] int 
   707 ;;  switchsel       2   16[BANK0 ] int 
   708 ;;  tempval         2   14[BANK0 ] int 
   709 ;;  curs            2   12[BANK0 ] int 
   710 ;;  prg             2   10[BANK0 ] int 
   711 ;;  open            2    8[BANK0 ] int 
   712 ;; Return value:  Size  Location     Type
   713 ;;                  2  129[None  ] int 
   714 ;; Registers used:
   715 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   716 ;; Tracked objects:
   717 ;;		On entry : B00/0
   718 ;;		On exit  : 0/0
   719 ;;		Unchanged: 0/0
   720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   721 ;;      Params:         0       0       0       0       0
   722 ;;      Locals:         0      16       0       0       0
   723 ;;      Temps:          0       3       0       0       0
   724 ;;      Totals:         0      19       0       0       0
   725 ;;Total ram usage:       19 bytes
   726 ;; Hardware stack levels required when called:    3
   727 ;; This function calls:
   728 ;;		_Lcd_Clear
   729 ;;		_Lcd_Init
   730 ;;		_Lcd_Set_Cursor
   731 ;;		_Lcd_Write_Char
   732 ;;		_Lcd_Write_String
   733 ;;		_Read_EEPROM
   734 ;;		_Write_EEPROM
   735 ;;		_checktemp
   736 ;;		_lcddisplay
   737 ;; This function is called by:
   738 ;;		Startup code after reset
   739 ;; This function uses a non-reentrant model
   740 ;;
   741                           
   742                           
   743                           ;psect for function _main
   744  0380                     _main:	
   745                           
   746                           ;mainbrew.c: 306: TRISA = 0x01;
   747                           
   748                           ;incstack = 0
   749                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   750  0380  3001               	movlw	1
   751  0381  1683               	bsf	3,5	;RP0=1, select bank1
   752  0382  1303               	bcf	3,6	;RP1=0, select bank1
   753  0383  0085               	movwf	5	;volatile
   754                           
   755                           ;mainbrew.c: 307: TRISB = 0xF0;
   756  0384  30F0               	movlw	240
   757  0385  0086               	movwf	6	;volatile
   758                           
   759                           ;mainbrew.c: 308: TRISC = 0x00;
   760  0386  0187               	clrf	7	;volatile
   761                           
   762                           ;mainbrew.c: 319: OPTION_REG = 0X00;
   763  0387  0181               	clrf	1	;volatile
   764                           
   765                           ;mainbrew.c: 321: ANSEL = 0X00;
   766  0388  1683               	bsf	3,5	;RP0=1, select bank3
   767  0389  1703               	bsf	3,6	;RP1=1, select bank3
   768  038A  0188               	clrf	8	;volatile
   769                           
   770                           ;mainbrew.c: 322: ANSELH = 0X00;
   771  038B  0189               	clrf	9	;volatile
   772                           
   773                           ;mainbrew.c: 323: WPUB = 0XF0;
   774  038C  30F0               	movlw	240
   775  038D  1683               	bsf	3,5	;RP0=1, select bank1
   776  038E  1303               	bcf	3,6	;RP1=0, select bank1
   777  038F  0095               	movwf	21	;volatile
   778                           
   779                           ;mainbrew.c: 324: IOCB = 0X00;
   780  0390  0196               	clrf	22	;volatile
   781                           
   782                           ;mainbrew.c: 325: OSCCON = 0X65;
   783  0391  3065               	movlw	101
   784  0392  008F               	movwf	15	;volatile
   785                           
   786                           ;mainbrew.c: 327: int prg = 0;
   787  0393  1283               	bcf	3,5	;RP0=0, select bank0
   788  0394  1303               	bcf	3,6	;RP1=0, select bank0
   789  0395  01AA               	clrf	main@prg
   790  0396  01AB               	clrf	main@prg+1
   791                           
   792                           ;mainbrew.c: 328: int password = 0;
   793  0397  01B2               	clrf	main@password
   794  0398  01B3               	clrf	main@password+1
   795                           
   796                           ;mainbrew.c: 329: int switchsel = 0;
   797  0399  01B0               	clrf	main@switchsel
   798  039A  01B1               	clrf	main@switchsel+1
   799                           
   800                           ;mainbrew.c: 330: int highval = 30;
   801  039B  301E               	movlw	30
   802  039C  00B6               	movwf	main@highval
   803  039D  3000               	movlw	0
   804  039E  00B7               	movwf	main@highval+1
   805                           
   806                           ;mainbrew.c: 331: int lowval=25;
   807  039F  3019               	movlw	25
   808  03A0  00B4               	movwf	main@lowval
   809  03A1  3000               	movlw	0
   810  03A2  00B5               	movwf	main@lowval+1
   811                           
   812                           ;mainbrew.c: 332: int curs = 0;
   813  03A3  01AC               	clrf	main@curs
   814  03A4  01AD               	clrf	main@curs+1
   815                           
   816                           ;mainbrew.c: 333: int open = 0;
   817  03A5  01A8               	clrf	main@open
   818  03A6  01A9               	clrf	main@open+1
   819                           
   820                           ;mainbrew.c: 334: int tempval = 0;
   821  03A7  01AE               	clrf	main@tempval
   822  03A8  01AF               	clrf	main@tempval+1
   823                           
   824                           ;mainbrew.c: 340: _delay((unsigned long)((100)*(4000000/4000.0)));
   825  03A9  3082               	movlw	130
   826  03AA  1283               	bcf	3,5	;RP0=0, select bank0
   827  03AB  1303               	bcf	3,6	;RP1=0, select bank0
   828  03AC  00A6               	movwf	??_main+1
   829  03AD  30DD               	movlw	221
   830  03AE  00A5               	movwf	??_main
   831  03AF                     u1517:	
   832  03AF  0BA5               	decfsz	??_main,f
   833  03B0  2BAF               	goto	u1517
   834  03B1  0BA6               	decfsz	??_main+1,f
   835  03B2  2BAF               	goto	u1517
   836                           
   837                           ;mainbrew.c: 341: Lcd_Init();
   838  03B3  120A  118A  22CA  120A  118A  	fcall	_Lcd_Init
   839                           
   840                           ;mainbrew.c: 342: Lcd_Clear();
   841  03B8  120A  158A  2701  120A  118A  	fcall	_Lcd_Clear
   842                           
   843                           ;mainbrew.c: 343: Write_EEPROM(0,1,lowval);
   844  03BD  01FB               	clrf	Write_EEPROM@a2
   845  03BE  0AFB               	incf	Write_EEPROM@a2,f
   846  03BF  1283               	bcf	3,5	;RP0=0, select bank0
   847  03C0  1303               	bcf	3,6	;RP1=0, select bank0
   848  03C1  0835               	movf	main@lowval+1,w
   849  03C2  00FD               	movwf	Write_EEPROM@data_value+1
   850  03C3  0834               	movf	main@lowval,w
   851  03C4  00FC               	movwf	Write_EEPROM@data_value
   852  03C5  3000               	movlw	0
   853  03C6  120A  118A  2109  120A  118A  	fcall	_Write_EEPROM
   854                           
   855                           ;mainbrew.c: 344: Write_EEPROM(2,3,highval);
   856  03CB  3003               	movlw	3
   857  03CC  1283               	bcf	3,5	;RP0=0, select bank0
   858  03CD  1303               	bcf	3,6	;RP1=0, select bank0
   859  03CE  00A5               	movwf	??_main
   860  03CF  0825               	movf	??_main,w
   861  03D0  00FB               	movwf	Write_EEPROM@a2
   862  03D1  0837               	movf	main@highval+1,w
   863  03D2  00FD               	movwf	Write_EEPROM@data_value+1
   864  03D3  0836               	movf	main@highval,w
   865  03D4  00FC               	movwf	Write_EEPROM@data_value
   866  03D5  3002               	movlw	2
   867  03D6  120A  118A  2109  120A  118A  	fcall	_Write_EEPROM
   868                           
   869                           ;mainbrew.c: 347: {
   870                           ;mainbrew.c: 348: Lcd_Clear();
   871                           
   872                           ;mainbrew.c: 346: while(1)
   873  03DB  120A  158A  2701  120A  118A  	fcall	_Lcd_Clear
   874                           
   875                           ;mainbrew.c: 349: Lcd_Set_Cursor(1,1);
   876  03E0  01F4               	clrf	Lcd_Set_Cursor@b
   877  03E1  0AF4               	incf	Lcd_Set_Cursor@b,f
   878  03E2  3001               	movlw	1
   879  03E3  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
   880                           
   881                           ;mainbrew.c: 350: Lcd_Write_String(" * BREWMASTER * ");
   882  03E8  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   883  03E9  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
   884                           
   885                           ;mainbrew.c: 351: Lcd_Set_Cursor(2,1);
   886  03EE  01F4               	clrf	Lcd_Set_Cursor@b
   887  03EF  0AF4               	incf	Lcd_Set_Cursor@b,f
   888  03F0  3002               	movlw	2
   889  03F1  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
   890                           
   891                           ;mainbrew.c: 352: Lcd_Write_String(" EXTERNAL BOILER");
   892  03F6  3023               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   893  03F7  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
   894                           
   895                           ;mainbrew.c: 353: _delay((unsigned long)((2000)*(4000000/4000.0)));
   896  03FC  300B               	movlw	11
   897  03FD  1283               	bcf	3,5	;RP0=0, select bank0
   898  03FE  1303               	bcf	3,6	;RP1=0, select bank0
   899  03FF  00A7               	movwf	??_main+2
   900  0400  3026               	movlw	38
   901  0401  00A6               	movwf	??_main+1
   902  0402  305D               	movlw	93
   903  0403  00A5               	movwf	??_main
   904  0404                     u1527:	
   905  0404  0BA5               	decfsz	??_main,f
   906  0405  2C04               	goto	u1527
   907  0406  0BA6               	decfsz	??_main+1,f
   908  0407  2C04               	goto	u1527
   909  0408  0BA7               	decfsz	??_main+2,f
   910  0409  2C04               	goto	u1527
   911                           
   912                           ;mainbrew.c: 354: Lcd_Clear();
   913  040A  120A  158A  2701  120A  118A  	fcall	_Lcd_Clear
   914                           
   915                           ;mainbrew.c: 355: if(!RA0)
   916  040F  1283               	bcf	3,5	;RP0=0, select bank0
   917  0410  1303               	bcf	3,6	;RP1=0, select bank0
   918  0411  1805               	btfsc	5,0	;volatile
   919  0412  2C17               	goto	l1542
   920  0413                     l1540:	
   921                           ;mainbrew.c: 356: {
   922                           ;mainbrew.c: 357: start:
   923                           
   924                           
   925                           ;mainbrew.c: 359: prg = 1;
   926  0413  3001               	movlw	1
   927  0414  00AA               	movwf	main@prg
   928  0415  3000               	movlw	0
   929  0416  00AB               	movwf	main@prg+1
   930  0417                     l1542:	
   931                           
   932                           ;mainbrew.c: 362: }
   933                           ;mainbrew.c: 364: if(prg == 1)
   934  0417  032A               	decf	main@prg,w
   935  0418  042B               	iorwf	main@prg+1,w
   936  0419  1D03               	btfss	3,2
   937  041A  2F22               	goto	l187
   938                           
   939                           ;mainbrew.c: 365: {
   940                           ;mainbrew.c: 366: Lcd_Clear();
   941  041B  120A  158A  2701  120A  118A  	fcall	_Lcd_Clear
   942                           
   943                           ;mainbrew.c: 367: Lcd_Set_Cursor(1,1);
   944  0420  01F4               	clrf	Lcd_Set_Cursor@b
   945  0421  0AF4               	incf	Lcd_Set_Cursor@b,f
   946  0422  3001               	movlw	1
   947  0423  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
   948                           
   949                           ;mainbrew.c: 368: Lcd_Write_String(" ENTER PASSWORD ");
   950  0428  3012               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   951  0429  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
   952                           
   953                           ;mainbrew.c: 369: Lcd_Set_Cursor(2,7);
   954  042E  3007               	movlw	7
   955  042F  1283               	bcf	3,5	;RP0=0, select bank0
   956  0430  1303               	bcf	3,6	;RP1=0, select bank0
   957  0431  00A5               	movwf	??_main
   958  0432  0825               	movf	??_main,w
   959  0433  00F4               	movwf	Lcd_Set_Cursor@b
   960  0434  3002               	movlw	2
   961  0435  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
   962                           
   963                           ;mainbrew.c: 370: lcddisplay(password);
   964  043A  1283               	bcf	3,5	;RP0=0, select bank0
   965  043B  1303               	bcf	3,6	;RP1=0, select bank0
   966  043C  0833               	movf	main@password+1,w
   967  043D  00F9               	movwf	lcddisplay@num+1
   968  043E  0832               	movf	main@password,w
   969  043F  00F8               	movwf	lcddisplay@num
   970  0440  120A  118A  2270  120A  118A  	fcall	_lcddisplay
   971  0445  2C9B               	goto	l1552
   972  0446                     l1558:	
   973                           
   974                           ;mainbrew.c: 376: {
   975                           ;mainbrew.c: 378: if(password == 50)
   976  0446  3032               	movlw	50
   977  0447  0632               	xorwf	main@password,w
   978  0448  0433               	iorwf	main@password+1,w
   979  0449  1D03               	btfss	3,2
   980  044A  2C4D               	goto	l1562
   981                           
   982                           ;mainbrew.c: 379: {
   983                           ;mainbrew.c: 380: password = 0;
   984  044B  01B2               	clrf	main@password
   985  044C  01B3               	clrf	main@password+1
   986  044D                     l1562:	
   987                           
   988                           ;mainbrew.c: 381: }
   989                           ;mainbrew.c: 384: password++;
   990  044D  3001               	movlw	1
   991  044E  07B2               	addwf	main@password,f
   992  044F  1803               	skipnc
   993  0450  0AB3               	incf	main@password+1,f
   994  0451  3000               	movlw	0
   995  0452  07B3               	addwf	main@password+1,f
   996  0453                     l137:	
   997                           ;mainbrew.c: 385: while(!RB6);
   998                           
   999  0453  1B06               	btfsc	6,6	;volatile
  1000  0454  2C9B               	goto	l1552
  1001  0455  2C53               	goto	l137
  1002  0456                     l1564:	
  1003                           ;mainbrew.c: 386: }
  1004                           
  1005                           
  1006                           ;mainbrew.c: 388: {
  1007                           ;mainbrew.c: 390: if(password == 1)
  1008  0456  0332               	decf	main@password,w
  1009  0457  0433               	iorwf	main@password+1,w
  1010  0458  1D03               	btfss	3,2
  1011  0459  2C5E               	goto	l142
  1012                           
  1013                           ;mainbrew.c: 391: {
  1014                           ;mainbrew.c: 392: password = 50;
  1015  045A  3032               	movlw	50
  1016  045B  00B2               	movwf	main@password
  1017  045C  3000               	movlw	0
  1018  045D  00B3               	movwf	main@password+1
  1019  045E                     l142:	
  1020                           
  1021                           ;mainbrew.c: 393: }
  1022                           ;mainbrew.c: 405: password--;
  1023  045E  30FF               	movlw	255
  1024  045F  07B2               	addwf	main@password,f
  1025  0460  1803               	skipnc
  1026  0461  0AB3               	incf	main@password+1,f
  1027  0462  30FF               	movlw	255
  1028  0463  07B3               	addwf	main@password+1,f
  1029  0464                     l143:	
  1030                           ;mainbrew.c: 406: while(!RB5);
  1031                           
  1032  0464  1A86               	btfsc	6,5	;volatile
  1033  0465  2C9B               	goto	l1552
  1034  0466  2C64               	goto	l143
  1035  0467                     l1578:	
  1036                           ;mainbrew.c: 419: }
  1037                           
  1038                           ;mainbrew.c: 417: break;
  1039                           
  1040                           
  1041                           ;mainbrew.c: 420: else
  1042                           ;mainbrew.c: 421: {
  1043                           ;mainbrew.c: 422: Lcd_Clear();
  1044  0467  120A  158A  2701  120A  118A  	fcall	_Lcd_Clear
  1045                           
  1046                           ;mainbrew.c: 423: Lcd_Set_Cursor(1,1);
  1047  046C  01F4               	clrf	Lcd_Set_Cursor@b
  1048  046D  0AF4               	incf	Lcd_Set_Cursor@b,f
  1049  046E  3001               	movlw	1
  1050  046F  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1051                           
  1052                           ;mainbrew.c: 424: Lcd_Write_String("wrong password");
  1053  0474  3034               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1054  0475  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
  1055                           
  1056                           ;mainbrew.c: 425: _delay((unsigned long)((2000)*(4000000/4000.0)));
  1057  047A  300B               	movlw	11
  1058  047B  1283               	bcf	3,5	;RP0=0, select bank0
  1059  047C  1303               	bcf	3,6	;RP1=0, select bank0
  1060  047D  00A7               	movwf	??_main+2
  1061  047E  3026               	movlw	38
  1062  047F  00A6               	movwf	??_main+1
  1063  0480  305D               	movlw	93
  1064  0481  00A5               	movwf	??_main
  1065  0482                     u1537:	
  1066  0482  0BA5               	decfsz	??_main,f
  1067  0483  2C82               	goto	u1537
  1068  0484  0BA6               	decfsz	??_main+1,f
  1069  0485  2C82               	goto	u1537
  1070  0486  0BA7               	decfsz	??_main+2,f
  1071  0487  2C82               	goto	u1537
  1072                           
  1073                           ;mainbrew.c: 426: Lcd_Clear();
  1074  0488  120A  158A  2701  120A  118A  	fcall	_Lcd_Clear
  1075                           
  1076                           ;mainbrew.c: 427: Lcd_Set_Cursor(1,1);
  1077  048D  01F4               	clrf	Lcd_Set_Cursor@b
  1078  048E  0AF4               	incf	Lcd_Set_Cursor@b,f
  1079  048F  3001               	movlw	1
  1080  0490  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1081                           
  1082                           ;mainbrew.c: 428: Lcd_Write_String("Enter password");
  1083  0495  3043               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1084  0496  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
  1085  049B                     l1552:	
  1086                           ;mainbrew.c: 371: while(1)
  1087                           
  1088                           ;mainbrew.c: 408: }
  1089                           
  1090                           
  1091                           ;mainbrew.c: 372: {
  1092                           ;mainbrew.c: 373: Lcd_Set_Cursor(2,7);
  1093  049B  3007               	movlw	7
  1094  049C  1283               	bcf	3,5	;RP0=0, select bank0
  1095  049D  1303               	bcf	3,6	;RP1=0, select bank0
  1096  049E  00A5               	movwf	??_main
  1097  049F  0825               	movf	??_main,w
  1098  04A0  00F4               	movwf	Lcd_Set_Cursor@b
  1099  04A1  3002               	movlw	2
  1100  04A2  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1101                           
  1102                           ;mainbrew.c: 374: lcddisplay(password);
  1103  04A7  1283               	bcf	3,5	;RP0=0, select bank0
  1104  04A8  1303               	bcf	3,6	;RP1=0, select bank0
  1105  04A9  0833               	movf	main@password+1,w
  1106  04AA  00F9               	movwf	lcddisplay@num+1
  1107  04AB  0832               	movf	main@password,w
  1108  04AC  00F8               	movwf	lcddisplay@num
  1109  04AD  120A  118A  2270  120A  118A  	fcall	_lcddisplay
  1110                           
  1111                           ;mainbrew.c: 375: if(RB6 == 0)
  1112  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  1113  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  1114  04B4  1F06               	btfss	6,6	;volatile
  1115  04B5  2C46               	goto	l1558
  1116                           
  1117                           ;mainbrew.c: 387: else if(RB5==0)
  1118  04B6  1E86               	btfss	6,5	;volatile
  1119  04B7  2C56               	goto	l1564
  1120                           
  1121                           ;mainbrew.c: 410: else if(!RB4)
  1122  04B8  1A06               	btfsc	6,4	;volatile
  1123  04B9  2C9B               	goto	l1552
  1124                           
  1125                           ;mainbrew.c: 411: {
  1126                           ;mainbrew.c: 412: if(password == 2)
  1127  04BA  3002               	movlw	2
  1128  04BB  0632               	xorwf	main@password,w
  1129  04BC  0433               	iorwf	main@password+1,w
  1130  04BD  1D03               	btfss	3,2
  1131  04BE  2C67               	goto	l1578
  1132                           
  1133                           ;mainbrew.c: 413: {
  1134                           ;mainbrew.c: 414: prg = 0;
  1135  04BF  01AA               	clrf	main@prg
  1136  04C0  01AB               	clrf	main@prg+1
  1137                           
  1138                           ;mainbrew.c: 415: open = 1;
  1139  04C1  3001               	movlw	1
  1140  04C2  00A8               	movwf	main@open
  1141  04C3  3000               	movlw	0
  1142  04C4  00A9               	movwf	main@open+1
  1143                           
  1144                           ;mainbrew.c: 416: password = 0;
  1145  04C5  01B2               	clrf	main@password
  1146  04C6  01B3               	clrf	main@password+1
  1147                           
  1148                           ;mainbrew.c: 429: }
  1149                           ;mainbrew.c: 431: }
  1150                           ;mainbrew.c: 433: }
  1151                           ;mainbrew.c: 434: Lcd_Clear();
  1152  04C7  120A  158A  2701  120A  118A  	fcall	_Lcd_Clear
  1153                           
  1154                           ;mainbrew.c: 435: Lcd_Set_Cursor(1,1);
  1155  04CC  01F4               	clrf	Lcd_Set_Cursor@b
  1156  04CD  0AF4               	incf	Lcd_Set_Cursor@b,f
  1157  04CE  3001               	movlw	1
  1158  04CF  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1159                           
  1160                           ;mainbrew.c: 436: Lcd_Write_String("while exited");
  1161  04D4  3088               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1162  04D5  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
  1163                           
  1164                           ;mainbrew.c: 437: _delay((unsigned long)((1000)*(4000000/4000.0)));
  1165  04DA  3006               	movlw	6
  1166  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  1167  04DC  1303               	bcf	3,6	;RP1=0, select bank0
  1168  04DD  00A7               	movwf	??_main+2
  1169  04DE  3013               	movlw	19
  1170  04DF  00A6               	movwf	??_main+1
  1171  04E0  30AD               	movlw	173
  1172  04E1  00A5               	movwf	??_main
  1173  04E2                     u1547:	
  1174  04E2  0BA5               	decfsz	??_main,f
  1175  04E3  2CE2               	goto	u1547
  1176  04E4  0BA6               	decfsz	??_main+1,f
  1177  04E5  2CE2               	goto	u1547
  1178  04E6  0BA7               	decfsz	??_main+2,f
  1179  04E7  2CE2               	goto	u1547
  1180  04E8                     l1596:	
  1181                           ;mainbrew.c: 438: while (1)
  1182                           
  1183                           
  1184                           ;mainbrew.c: 439: {
  1185                           ;mainbrew.c: 440: Lcd_Clear();
  1186  04E8  120A  158A  2701  120A  118A  	fcall	_Lcd_Clear
  1187                           
  1188                           ;mainbrew.c: 441: Lcd_Set_Cursor(1,1);
  1189  04ED  01F4               	clrf	Lcd_Set_Cursor@b
  1190  04EE  0AF4               	incf	Lcd_Set_Cursor@b,f
  1191  04EF  3001               	movlw	1
  1192  04F0  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1193                           
  1194                           ;mainbrew.c: 442: Lcd_Write_String("SET MIN TEMP:");
  1195  04F5  3052               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1196  04F6  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
  1197                           
  1198                           ;mainbrew.c: 443: Lcd_Set_Cursor(1,14);
  1199  04FB  300E               	movlw	14
  1200  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  1201  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  1202  04FE  00A5               	movwf	??_main
  1203  04FF  0825               	movf	??_main,w
  1204  0500  00F4               	movwf	Lcd_Set_Cursor@b
  1205  0501  3001               	movlw	1
  1206  0502  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1207                           
  1208                           ;mainbrew.c: 444: lcddisplay(lowval);
  1209  0507  1283               	bcf	3,5	;RP0=0, select bank0
  1210  0508  1303               	bcf	3,6	;RP1=0, select bank0
  1211  0509  0835               	movf	main@lowval+1,w
  1212  050A  00F9               	movwf	lcddisplay@num+1
  1213  050B  0834               	movf	main@lowval,w
  1214  050C  00F8               	movwf	lcddisplay@num
  1215  050D  120A  118A  2270  120A  118A  	fcall	_lcddisplay
  1216                           
  1217                           ;mainbrew.c: 445: Lcd_Set_Cursor(2,1);
  1218  0512  01F4               	clrf	Lcd_Set_Cursor@b
  1219  0513  0AF4               	incf	Lcd_Set_Cursor@b,f
  1220  0514  3002               	movlw	2
  1221  0515  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1222                           
  1223                           ;mainbrew.c: 446: Lcd_Write_String("SET MAX TEMP:");
  1224  051A  3060               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1225  051B  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
  1226                           
  1227                           ;mainbrew.c: 447: Lcd_Set_Cursor(2,14);
  1228  0520  300E               	movlw	14
  1229  0521  1283               	bcf	3,5	;RP0=0, select bank0
  1230  0522  1303               	bcf	3,6	;RP1=0, select bank0
  1231  0523  00A5               	movwf	??_main
  1232  0524  0825               	movf	??_main,w
  1233  0525  00F4               	movwf	Lcd_Set_Cursor@b
  1234  0526  3002               	movlw	2
  1235  0527  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1236                           
  1237                           ;mainbrew.c: 448: lcddisplay(highval);
  1238  052C  1283               	bcf	3,5	;RP0=0, select bank0
  1239  052D  1303               	bcf	3,6	;RP1=0, select bank0
  1240  052E  0837               	movf	main@highval+1,w
  1241  052F  00F9               	movwf	lcddisplay@num+1
  1242  0530  0836               	movf	main@highval,w
  1243  0531  00F8               	movwf	lcddisplay@num
  1244  0532  120A  118A  2270  120A  118A  	fcall	_lcddisplay
  1245                           
  1246                           ;mainbrew.c: 449: if(!RA0)
  1247  0537  1283               	bcf	3,5	;RP0=0, select bank0
  1248  0538  1303               	bcf	3,6	;RP1=0, select bank0
  1249  0539  1805               	btfsc	5,0	;volatile
  1250  053A  2D4C               	goto	l1622
  1251                           
  1252                           ;mainbrew.c: 450: {
  1253                           ;mainbrew.c: 451: switchsel++;
  1254  053B  3001               	movlw	1
  1255  053C  07B0               	addwf	main@switchsel,f
  1256  053D  1803               	skipnc
  1257  053E  0AB1               	incf	main@switchsel+1,f
  1258  053F  3000               	movlw	0
  1259  0540  07B1               	addwf	main@switchsel+1,f
  1260                           
  1261                           ;mainbrew.c: 453: if(switchsel == 3)
  1262  0541  3003               	movlw	3
  1263  0542  0630               	xorwf	main@switchsel,w
  1264  0543  0431               	iorwf	main@switchsel+1,w
  1265  0544  1D03               	btfss	3,2
  1266  0545  2D4A               	goto	l155
  1267                           
  1268                           ;mainbrew.c: 454: {
  1269                           ;mainbrew.c: 456: switchsel = 1;
  1270  0546  3001               	movlw	1
  1271  0547  00B0               	movwf	main@switchsel
  1272  0548  3000               	movlw	0
  1273  0549  00B1               	movwf	main@switchsel+1
  1274  054A                     l155:	
  1275                           ;mainbrew.c: 458: }
  1276                           ;mainbrew.c: 459: while(!RA0);
  1277                           
  1278  054A  1C05               	btfss	5,0	;volatile
  1279  054B  2D4A               	goto	l155
  1280  054C                     l1622:	
  1281                           
  1282                           ;mainbrew.c: 461: }
  1283                           ;mainbrew.c: 462: if((switchsel == 1)&&(switchsel<=2))
  1284  054C  0330               	decf	main@switchsel,w
  1285  054D  0431               	iorwf	main@switchsel+1,w
  1286  054E  1D03               	btfss	3,2
  1287  054F  2E16               	goto	l1662
  1288  0550  0831               	movf	main@switchsel+1,w
  1289  0551  3A80               	xorlw	128
  1290  0552  00FF               	movwf	127
  1291  0553  3080               	movlw	128
  1292  0554  027F               	subwf	127,w
  1293  0555  1D03               	skipz
  1294  0556  2D59               	goto	u1325
  1295  0557  3003               	movlw	3
  1296  0558  0230               	subwf	main@switchsel,w
  1297  0559                     u1325:	
  1298  0559  1803               	skipnc
  1299  055A  2E16               	goto	l1662
  1300                           
  1301                           ;mainbrew.c: 463: {
  1302                           ;mainbrew.c: 464: Lcd_Clear();
  1303  055B  120A  158A  2701  120A  118A  	fcall	_Lcd_Clear
  1304                           
  1305                           ;mainbrew.c: 465: Lcd_Set_Cursor(1,1);
  1306  0560  01F4               	clrf	Lcd_Set_Cursor@b
  1307  0561  0AF4               	incf	Lcd_Set_Cursor@b,f
  1308  0562  3001               	movlw	1
  1309  0563  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1310                           
  1311                           ;mainbrew.c: 466: Lcd_Write_String("SET MIN TEMP:");
  1312  0568  3052               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1313  0569  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
  1314                           
  1315                           ;mainbrew.c: 467: Lcd_Set_Cursor(1,14);
  1316  056E  300E               	movlw	14
  1317  056F  1283               	bcf	3,5	;RP0=0, select bank0
  1318  0570  1303               	bcf	3,6	;RP1=0, select bank0
  1319  0571  00A5               	movwf	??_main
  1320  0572  0825               	movf	??_main,w
  1321  0573  00F4               	movwf	Lcd_Set_Cursor@b
  1322  0574  3001               	movlw	1
  1323  0575  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1324                           
  1325                           ;mainbrew.c: 468: lcddisplay(lowval);
  1326  057A  1283               	bcf	3,5	;RP0=0, select bank0
  1327  057B  1303               	bcf	3,6	;RP1=0, select bank0
  1328  057C  0835               	movf	main@lowval+1,w
  1329  057D  00F9               	movwf	lcddisplay@num+1
  1330  057E  0834               	movf	main@lowval,w
  1331  057F  00F8               	movwf	lcddisplay@num
  1332  0580  120A  118A  2270  120A  118A  	fcall	_lcddisplay
  1333                           
  1334                           ;mainbrew.c: 469: Lcd_Set_Cursor(2,1);
  1335  0585  01F4               	clrf	Lcd_Set_Cursor@b
  1336  0586  0AF4               	incf	Lcd_Set_Cursor@b,f
  1337  0587  3002               	movlw	2
  1338  0588  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1339                           
  1340                           ;mainbrew.c: 470: Lcd_Write_String("SET MAX TEMP:");
  1341  058D  3060               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1342  058E  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
  1343                           
  1344                           ;mainbrew.c: 471: Lcd_Set_Cursor(2,14);
  1345  0593  300E               	movlw	14
  1346  0594  1283               	bcf	3,5	;RP0=0, select bank0
  1347  0595  1303               	bcf	3,6	;RP1=0, select bank0
  1348  0596  00A5               	movwf	??_main
  1349  0597  0825               	movf	??_main,w
  1350  0598  00F4               	movwf	Lcd_Set_Cursor@b
  1351  0599  3002               	movlw	2
  1352  059A  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1353                           
  1354                           ;mainbrew.c: 472: lcddisplay(highval);
  1355  059F  1283               	bcf	3,5	;RP0=0, select bank0
  1356  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  1357  05A1  0837               	movf	main@highval+1,w
  1358  05A2  00F9               	movwf	lcddisplay@num+1
  1359  05A3  0836               	movf	main@highval,w
  1360  05A4  00F8               	movwf	lcddisplay@num
  1361  05A5  120A  118A  2270  120A  118A  	fcall	_lcddisplay
  1362                           
  1363                           ;mainbrew.c: 473: Lcd_Set_Cursor(1,16);
  1364  05AA  3010               	movlw	16
  1365  05AB  1283               	bcf	3,5	;RP0=0, select bank0
  1366  05AC  1303               	bcf	3,6	;RP1=0, select bank0
  1367  05AD  00A5               	movwf	??_main
  1368  05AE  0825               	movf	??_main,w
  1369  05AF  00F4               	movwf	Lcd_Set_Cursor@b
  1370  05B0  3001               	movlw	1
  1371  05B1  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1372                           
  1373                           ;mainbrew.c: 474: Lcd_Write_String("<");
  1374  05B6  30AE               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1375  05B7  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
  1376                           
  1377                           ;mainbrew.c: 475: curs = 1;
  1378  05BC  3001               	movlw	1
  1379  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  1380  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  1381  05BF  00AC               	movwf	main@curs
  1382  05C0  3000               	movlw	0
  1383  05C1  00AD               	movwf	main@curs+1
  1384                           
  1385                           ;mainbrew.c: 476: _delay((unsigned long)((500)*(4000000/4000.0)));
  1386  05C2  3003               	movlw	3
  1387  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  1388  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  1389  05C5  00A7               	movwf	??_main+2
  1390  05C6  308A               	movlw	138
  1391  05C7  00A6               	movwf	??_main+1
  1392  05C8  3055               	movlw	85
  1393  05C9  00A5               	movwf	??_main
  1394  05CA                     u1557:	
  1395  05CA  0BA5               	decfsz	??_main,f
  1396  05CB  2DCA               	goto	u1557
  1397  05CC  0BA6               	decfsz	??_main+1,f
  1398  05CD  2DCA               	goto	u1557
  1399  05CE  0BA7               	decfsz	??_main+2,f
  1400  05CF  2DCA               	goto	u1557
  1401                           
  1402                           ;mainbrew.c: 478: if(!RB6)
  1403  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  1404  05D1  1303               	bcf	3,6	;RP1=0, select bank0
  1405  05D2  1B06               	btfsc	6,6	;volatile
  1406  05D3  2DF4               	goto	l159
  1407                           
  1408                           ;mainbrew.c: 479: {
  1409                           ;mainbrew.c: 481: lowval++;
  1410  05D4  3001               	movlw	1
  1411  05D5  07B4               	addwf	main@lowval,f
  1412  05D6  1803               	skipnc
  1413  05D7  0AB5               	incf	main@lowval+1,f
  1414  05D8  3000               	movlw	0
  1415  05D9  07B5               	addwf	main@lowval+1,f
  1416                           
  1417                           ;mainbrew.c: 489: Lcd_Set_Cursor(1,14);
  1418  05DA  300E               	movlw	14
  1419  05DB  00A5               	movwf	??_main
  1420  05DC  0825               	movf	??_main,w
  1421  05DD  00F4               	movwf	Lcd_Set_Cursor@b
  1422  05DE  3001               	movlw	1
  1423  05DF  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1424                           
  1425                           ;mainbrew.c: 490: lcddisplay(lowval);
  1426  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  1427  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  1428  05E6  0835               	movf	main@lowval+1,w
  1429  05E7  00F9               	movwf	lcddisplay@num+1
  1430  05E8  0834               	movf	main@lowval,w
  1431  05E9  00F8               	movwf	lcddisplay@num
  1432  05EA  120A  118A  2270  120A  118A  	fcall	_lcddisplay
  1433  05EF                     l160:	
  1434                           ;mainbrew.c: 495: while(!RB6);
  1435                           
  1436  05EF  1283               	bcf	3,5	;RP0=0, select bank0
  1437  05F0  1303               	bcf	3,6	;RP1=0, select bank0
  1438  05F1  1B06               	btfsc	6,6	;volatile
  1439  05F2  2EC4               	goto	l1702
  1440  05F3  2DEF               	goto	l160
  1441  05F4                     l159:	
  1442                           ;mainbrew.c: 497: }
  1443                           
  1444                           
  1445                           ;mainbrew.c: 498: else if(!RB5)
  1446  05F4  1A86               	btfsc	6,5	;volatile
  1447  05F5  2EC4               	goto	l1702
  1448                           
  1449                           ;mainbrew.c: 499: {
  1450                           ;mainbrew.c: 506: lowval--;
  1451  05F6  30FF               	movlw	255
  1452  05F7  07B4               	addwf	main@lowval,f
  1453  05F8  1803               	skipnc
  1454  05F9  0AB5               	incf	main@lowval+1,f
  1455  05FA  30FF               	movlw	255
  1456  05FB  07B5               	addwf	main@lowval+1,f
  1457                           
  1458                           ;mainbrew.c: 510: Lcd_Set_Cursor(1,14);
  1459  05FC  300E               	movlw	14
  1460  05FD  00A5               	movwf	??_main
  1461  05FE  0825               	movf	??_main,w
  1462  05FF  00F4               	movwf	Lcd_Set_Cursor@b
  1463  0600  3001               	movlw	1
  1464  0601  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1465                           
  1466                           ;mainbrew.c: 511: lcddisplay(lowval);
  1467  0606  1283               	bcf	3,5	;RP0=0, select bank0
  1468  0607  1303               	bcf	3,6	;RP1=0, select bank0
  1469  0608  0835               	movf	main@lowval+1,w
  1470  0609  00F9               	movwf	lcddisplay@num+1
  1471  060A  0834               	movf	main@lowval,w
  1472  060B  00F8               	movwf	lcddisplay@num
  1473  060C  120A  118A  2270  120A  118A  	fcall	_lcddisplay
  1474  0611                     l165:	
  1475                           ;mainbrew.c: 516: while(!RB5);
  1476                           
  1477  0611  1283               	bcf	3,5	;RP0=0, select bank0
  1478  0612  1303               	bcf	3,6	;RP1=0, select bank0
  1479  0613  1A86               	btfsc	6,5	;volatile
  1480  0614  2EC4               	goto	l1702
  1481  0615  2E11               	goto	l165
  1482  0616                     l1662:	
  1483                           ;mainbrew.c: 517: }
  1484                           ;mainbrew.c: 523: }
  1485                           
  1486                           
  1487                           ;mainbrew.c: 524: else if((switchsel == 2) && (switchsel<=2))
  1488  0616  3002               	movlw	2
  1489  0617  1283               	bcf	3,5	;RP0=0, select bank0
  1490  0618  1303               	bcf	3,6	;RP1=0, select bank0
  1491  0619  0630               	xorwf	main@switchsel,w
  1492  061A  0431               	iorwf	main@switchsel+1,w
  1493  061B  1D03               	btfss	3,2
  1494  061C  2EC4               	goto	l1702
  1495  061D  0831               	movf	main@switchsel+1,w
  1496  061E  3A80               	xorlw	128
  1497  061F  00FF               	movwf	127
  1498  0620  3080               	movlw	128
  1499  0621  027F               	subwf	127,w
  1500  0622  1D03               	skipz
  1501  0623  2E26               	goto	u1385
  1502  0624  3003               	movlw	3
  1503  0625  0230               	subwf	main@switchsel,w
  1504  0626                     u1385:	
  1505  0626  1803               	skipnc
  1506  0627  2EC4               	goto	l1702
  1507                           
  1508                           ;mainbrew.c: 525: {
  1509                           ;mainbrew.c: 526: Lcd_Clear();
  1510  0628  120A  158A  2701  120A  118A  	fcall	_Lcd_Clear
  1511                           
  1512                           ;mainbrew.c: 527: Lcd_Set_Cursor(1,1);
  1513  062D  01F4               	clrf	Lcd_Set_Cursor@b
  1514  062E  0AF4               	incf	Lcd_Set_Cursor@b,f
  1515  062F  3001               	movlw	1
  1516  0630  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1517                           
  1518                           ;mainbrew.c: 528: Lcd_Write_String("SET MIN TEMP:");
  1519  0635  3052               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1520  0636  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
  1521                           
  1522                           ;mainbrew.c: 529: Lcd_Set_Cursor(1,14);
  1523  063B  300E               	movlw	14
  1524  063C  1283               	bcf	3,5	;RP0=0, select bank0
  1525  063D  1303               	bcf	3,6	;RP1=0, select bank0
  1526  063E  00A5               	movwf	??_main
  1527  063F  0825               	movf	??_main,w
  1528  0640  00F4               	movwf	Lcd_Set_Cursor@b
  1529  0641  3001               	movlw	1
  1530  0642  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1531                           
  1532                           ;mainbrew.c: 530: lcddisplay(lowval);
  1533  0647  1283               	bcf	3,5	;RP0=0, select bank0
  1534  0648  1303               	bcf	3,6	;RP1=0, select bank0
  1535  0649  0835               	movf	main@lowval+1,w
  1536  064A  00F9               	movwf	lcddisplay@num+1
  1537  064B  0834               	movf	main@lowval,w
  1538  064C  00F8               	movwf	lcddisplay@num
  1539  064D  120A  118A  2270  120A  118A  	fcall	_lcddisplay
  1540                           
  1541                           ;mainbrew.c: 531: Lcd_Set_Cursor(2,1);
  1542  0652  01F4               	clrf	Lcd_Set_Cursor@b
  1543  0653  0AF4               	incf	Lcd_Set_Cursor@b,f
  1544  0654  3002               	movlw	2
  1545  0655  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1546                           
  1547                           ;mainbrew.c: 532: Lcd_Write_String("SET MAX TEMP:");
  1548  065A  3060               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1549  065B  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
  1550                           
  1551                           ;mainbrew.c: 533: Lcd_Set_Cursor(2,14);
  1552  0660  300E               	movlw	14
  1553  0661  1283               	bcf	3,5	;RP0=0, select bank0
  1554  0662  1303               	bcf	3,6	;RP1=0, select bank0
  1555  0663  00A5               	movwf	??_main
  1556  0664  0825               	movf	??_main,w
  1557  0665  00F4               	movwf	Lcd_Set_Cursor@b
  1558  0666  3002               	movlw	2
  1559  0667  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1560                           
  1561                           ;mainbrew.c: 534: lcddisplay(highval);
  1562  066C  1283               	bcf	3,5	;RP0=0, select bank0
  1563  066D  1303               	bcf	3,6	;RP1=0, select bank0
  1564  066E  0837               	movf	main@highval+1,w
  1565  066F  00F9               	movwf	lcddisplay@num+1
  1566  0670  0836               	movf	main@highval,w
  1567  0671  00F8               	movwf	lcddisplay@num
  1568  0672  120A  118A  2270  120A  118A  	fcall	_lcddisplay
  1569                           
  1570                           ;mainbrew.c: 535: Lcd_Set_Cursor(2,16);
  1571  0677  3010               	movlw	16
  1572  0678  1283               	bcf	3,5	;RP0=0, select bank0
  1573  0679  1303               	bcf	3,6	;RP1=0, select bank0
  1574  067A  00A5               	movwf	??_main
  1575  067B  0825               	movf	??_main,w
  1576  067C  00F4               	movwf	Lcd_Set_Cursor@b
  1577  067D  3002               	movlw	2
  1578  067E  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1579                           
  1580                           ;mainbrew.c: 536: Lcd_Write_String("<");
  1581  0683  30AE               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1582  0684  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
  1583                           
  1584                           ;mainbrew.c: 537: curs = 2;
  1585  0689  3002               	movlw	2
  1586  068A  1283               	bcf	3,5	;RP0=0, select bank0
  1587  068B  1303               	bcf	3,6	;RP1=0, select bank0
  1588  068C  00AC               	movwf	main@curs
  1589  068D  3000               	movlw	0
  1590  068E  00AD               	movwf	main@curs+1
  1591                           
  1592                           ;mainbrew.c: 538: _delay((unsigned long)((500)*(4000000/4000.0)));
  1593  068F  3003               	movlw	3
  1594  0690  1283               	bcf	3,5	;RP0=0, select bank0
  1595  0691  1303               	bcf	3,6	;RP1=0, select bank0
  1596  0692  00A7               	movwf	??_main+2
  1597  0693  308A               	movlw	138
  1598  0694  00A6               	movwf	??_main+1
  1599  0695  3055               	movlw	85
  1600  0696  00A5               	movwf	??_main
  1601  0697                     u1567:	
  1602  0697  0BA5               	decfsz	??_main,f
  1603  0698  2E97               	goto	u1567
  1604  0699  0BA6               	decfsz	??_main+1,f
  1605  069A  2E97               	goto	u1567
  1606  069B  0BA7               	decfsz	??_main+2,f
  1607  069C  2E97               	goto	u1567
  1608                           
  1609                           ;mainbrew.c: 540: if(!RB6)
  1610  069D  1283               	bcf	3,5	;RP0=0, select bank0
  1611  069E  1303               	bcf	3,6	;RP1=0, select bank0
  1612  069F  1B06               	btfsc	6,6	;volatile
  1613  06A0  2EA7               	goto	l170
  1614                           
  1615                           ;mainbrew.c: 541: {
  1616                           ;mainbrew.c: 549: highval++;
  1617  06A1  3001               	movlw	1
  1618  06A2  07B6               	addwf	main@highval,f
  1619  06A3  1803               	skipnc
  1620  06A4  0AB7               	incf	main@highval+1,f
  1621  06A5  3000               	movlw	0
  1622  06A6  2EAE               	goto	L1
  1623  06A7                     l170:	
  1624                           ;mainbrew.c: 560: }
  1625                           
  1626                           ;mainbrew.c: 558: lcddisplay(highval);
  1627                           
  1628                           ;mainbrew.c: 557: Lcd_Set_Cursor(2,14);
  1629                           
  1630                           
  1631                           ;mainbrew.c: 561: else if(!RB5)
  1632  06A7  1A86               	btfsc	6,5	;volatile
  1633  06A8  2EC4               	goto	l1702
  1634                           
  1635                           ;mainbrew.c: 562: {
  1636                           ;mainbrew.c: 569: highval--;
  1637  06A9  30FF               	movlw	255
  1638  06AA  07B6               	addwf	main@highval,f
  1639  06AB  1803               	skipnc
  1640  06AC  0AB7               	incf	main@highval+1,f
  1641  06AD  30FF               	movlw	255
  1642  06AE                     L1:	
  1643  06AE  07B7               	addwf	main@highval+1,f
  1644                           
  1645                           ;mainbrew.c: 577: Lcd_Set_Cursor(2,14);
  1646  06AF  300E               	movlw	14
  1647  06B0  00A5               	movwf	??_main
  1648  06B1  0825               	movf	??_main,w
  1649  06B2  00F4               	movwf	Lcd_Set_Cursor@b
  1650  06B3  3002               	movlw	2
  1651  06B4  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1652                           
  1653                           ;mainbrew.c: 578: lcddisplay(highval);
  1654  06B9  1283               	bcf	3,5	;RP0=0, select bank0
  1655  06BA  1303               	bcf	3,6	;RP1=0, select bank0
  1656  06BB  0837               	movf	main@highval+1,w
  1657  06BC  00F9               	movwf	lcddisplay@num+1
  1658  06BD  0836               	movf	main@highval,w
  1659  06BE  00F8               	movwf	lcddisplay@num
  1660  06BF  120A  118A  2270  120A  118A  	fcall	_lcddisplay
  1661  06C4                     l1702:	
  1662                           
  1663                           ;mainbrew.c: 580: }
  1664                           ;mainbrew.c: 581: }
  1665                           ;mainbrew.c: 584: if(((!RB7)&&(curs == 1))||(!RB7))
  1666  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  1667  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  1668  06C6  1B86               	btfsc	6,7	;volatile
  1669  06C7  2ECC               	goto	l177
  1670  06C8  032C               	decf	main@curs,w
  1671  06C9  042D               	iorwf	main@curs+1,w
  1672  06CA  1903               	btfsc	3,2
  1673  06CB  2ECE               	goto	l178
  1674  06CC                     l177:	
  1675  06CC  1B86               	btfsc	6,7	;volatile
  1676  06CD  2EED               	goto	l173
  1677  06CE                     l178:	
  1678                           ;mainbrew.c: 585: {
  1679                           ;mainbrew.c: 586: while(!RB7);
  1680                           
  1681  06CE  1F86               	btfss	6,7	;volatile
  1682  06CF  2ECE               	goto	l178
  1683                           
  1684                           ;mainbrew.c: 587: Write_EEPROM(0,1,lowval);
  1685  06D0  01FB               	clrf	Write_EEPROM@a2
  1686  06D1  0AFB               	incf	Write_EEPROM@a2,f
  1687  06D2  0835               	movf	main@lowval+1,w
  1688  06D3  00FD               	movwf	Write_EEPROM@data_value+1
  1689  06D4  0834               	movf	main@lowval,w
  1690  06D5  00FC               	movwf	Write_EEPROM@data_value
  1691  06D6  3000               	movlw	0
  1692  06D7  120A  118A  2109  120A  118A  	fcall	_Write_EEPROM
  1693                           
  1694                           ;mainbrew.c: 588: Write_EEPROM(2,3,highval);
  1695  06DC  3003               	movlw	3
  1696  06DD  1283               	bcf	3,5	;RP0=0, select bank0
  1697  06DE  1303               	bcf	3,6	;RP1=0, select bank0
  1698  06DF  00A5               	movwf	??_main
  1699  06E0  0825               	movf	??_main,w
  1700  06E1  00FB               	movwf	Write_EEPROM@a2
  1701  06E2  0837               	movf	main@highval+1,w
  1702  06E3  00FD               	movwf	Write_EEPROM@data_value+1
  1703  06E4  0836               	movf	main@highval,w
  1704  06E5  00FC               	movwf	Write_EEPROM@data_value
  1705  06E6  3002               	movlw	2
  1706  06E7  120A  118A  2109  120A  118A  	fcall	_Write_EEPROM
  1707                           
  1708                           ;mainbrew.c: 589: break;
  1709  06EC  2F22               	goto	l187
  1710  06ED                     l173:	
  1711                           
  1712                           ;mainbrew.c: 590: }
  1713                           ;mainbrew.c: 591: if((!RB7)&&(curs == 2))
  1714  06ED  1B86               	btfsc	6,7	;volatile
  1715  06EE  2F13               	goto	l1714
  1716  06EF  3002               	movlw	2
  1717  06F0  062C               	xorwf	main@curs,w
  1718  06F1  042D               	iorwf	main@curs+1,w
  1719  06F2  1D03               	btfss	3,2
  1720  06F3  2F13               	goto	l1714
  1721  06F4                     l183:	
  1722                           ;mainbrew.c: 592: {
  1723                           ;mainbrew.c: 593: while(!RB7);
  1724                           
  1725  06F4  1F86               	btfss	6,7	;volatile
  1726  06F5  2EF4               	goto	l183
  1727                           
  1728                           ;mainbrew.c: 594: Write_EEPROM(0,1,lowval);
  1729  06F6  01FB               	clrf	Write_EEPROM@a2
  1730  06F7  0AFB               	incf	Write_EEPROM@a2,f
  1731  06F8  0835               	movf	main@lowval+1,w
  1732  06F9  00FD               	movwf	Write_EEPROM@data_value+1
  1733  06FA  0834               	movf	main@lowval,w
  1734  06FB  00FC               	movwf	Write_EEPROM@data_value
  1735  06FC  3000               	movlw	0
  1736  06FD  120A  118A  2109  120A  118A  	fcall	_Write_EEPROM
  1737                           
  1738                           ;mainbrew.c: 595: Write_EEPROM(2,3,highval);
  1739  0702  3003               	movlw	3
  1740  0703  1283               	bcf	3,5	;RP0=0, select bank0
  1741  0704  1303               	bcf	3,6	;RP1=0, select bank0
  1742  0705  00A5               	movwf	??_main
  1743  0706  0825               	movf	??_main,w
  1744  0707  00FB               	movwf	Write_EEPROM@a2
  1745  0708  0837               	movf	main@highval+1,w
  1746  0709  00FD               	movwf	Write_EEPROM@data_value+1
  1747  070A  0836               	movf	main@highval,w
  1748  070B  00FC               	movwf	Write_EEPROM@data_value
  1749  070C  3002               	movlw	2
  1750  070D  120A  118A  2109  120A  118A  	fcall	_Write_EEPROM
  1751                           
  1752                           ;mainbrew.c: 596: break;
  1753  0712  2F22               	goto	l187
  1754  0713                     l1714:	
  1755                           
  1756                           ;mainbrew.c: 597: }
  1757                           ;mainbrew.c: 598: _delay((unsigned long)((500)*(4000000/4000.0)));
  1758  0713  3003               	movlw	3
  1759  0714  1283               	bcf	3,5	;RP0=0, select bank0
  1760  0715  1303               	bcf	3,6	;RP1=0, select bank0
  1761  0716  00A7               	movwf	??_main+2
  1762  0717  308A               	movlw	138
  1763  0718  00A6               	movwf	??_main+1
  1764  0719  3055               	movlw	85
  1765  071A  00A5               	movwf	??_main
  1766  071B                     u1577:	
  1767  071B  0BA5               	decfsz	??_main,f
  1768  071C  2F1B               	goto	u1577
  1769  071D  0BA6               	decfsz	??_main+1,f
  1770  071E  2F1B               	goto	u1577
  1771  071F  0BA7               	decfsz	??_main+2,f
  1772  0720  2F1B               	goto	u1577
  1773  0721  2CE8               	goto	l1596
  1774  0722                     l187:	
  1775                           ;mainbrew.c: 601: }
  1776                           ;mainbrew.c: 602: }
  1777                           ;mainbrew.c: 604: while(1)
  1778                           
  1779                           
  1780                           ;mainbrew.c: 605: {
  1781                           ;mainbrew.c: 607: if(RA0 == 0)
  1782  0722  1283               	bcf	3,5	;RP0=0, select bank0
  1783  0723  1303               	bcf	3,6	;RP1=0, select bank0
  1784  0724  1C05               	btfss	5,0	;volatile
  1785  0725  2C13               	goto	l1540
  1786                           
  1787                           ;mainbrew.c: 613: }
  1788                           ;mainbrew.c: 614: tempval = checktemp();
  1789                           
  1790                           ;mainbrew.c: 608: {
  1791                           ;mainbrew.c: 611: goto start;
  1792  0726  120A  118A  2325  120A  118A  	fcall	_checktemp
  1793  072B  0875               	movf	?_checktemp+1,w
  1794  072C  1283               	bcf	3,5	;RP0=0, select bank0
  1795  072D  1303               	bcf	3,6	;RP1=0, select bank0
  1796  072E  00AF               	movwf	main@tempval+1
  1797  072F  0874               	movf	?_checktemp,w
  1798  0730  00AE               	movwf	main@tempval
  1799                           
  1800                           ;mainbrew.c: 615: lowval=Read_EEPROM(0,1);
  1801  0731  01F6               	clrf	Read_EEPROM@b2
  1802  0732  0AF6               	incf	Read_EEPROM@b2,f
  1803  0733  3000               	movlw	0
  1804  0734  120A  118A  2174  120A  118A  	fcall	_Read_EEPROM
  1805  0739  0877               	movf	?_Read_EEPROM+1,w
  1806  073A  1283               	bcf	3,5	;RP0=0, select bank0
  1807  073B  1303               	bcf	3,6	;RP1=0, select bank0
  1808  073C  00B5               	movwf	main@lowval+1
  1809  073D  0876               	movf	?_Read_EEPROM,w
  1810  073E  00B4               	movwf	main@lowval
  1811                           
  1812                           ;mainbrew.c: 616: highval=Read_EEPROM(2,3);
  1813  073F  3003               	movlw	3
  1814  0740  00A5               	movwf	??_main
  1815  0741  0825               	movf	??_main,w
  1816  0742  00F6               	movwf	Read_EEPROM@b2
  1817  0743  3002               	movlw	2
  1818  0744  120A  118A  2174  120A  118A  	fcall	_Read_EEPROM
  1819  0749  0877               	movf	?_Read_EEPROM+1,w
  1820  074A  1283               	bcf	3,5	;RP0=0, select bank0
  1821  074B  1303               	bcf	3,6	;RP1=0, select bank0
  1822  074C  00B7               	movwf	main@highval+1
  1823  074D  0876               	movf	?_Read_EEPROM,w
  1824  074E  00B6               	movwf	main@highval
  1825                           
  1826                           ;mainbrew.c: 617: Lcd_Clear();
  1827  074F  120A  158A  2701  120A  118A  	fcall	_Lcd_Clear
  1828                           
  1829                           ;mainbrew.c: 618: Lcd_Set_Cursor(1,1);
  1830  0754  01F4               	clrf	Lcd_Set_Cursor@b
  1831  0755  0AF4               	incf	Lcd_Set_Cursor@b,f
  1832  0756  3001               	movlw	1
  1833  0757  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1834                           
  1835                           ;mainbrew.c: 619: Lcd_Write_String("TEMPERATURE ");
  1836  075C  306E               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  1837  075D  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
  1838                           
  1839                           ;mainbrew.c: 620: Lcd_Write_Char(0xdf);
  1840  0762  30DF               	movlw	223
  1841  0763  120A  118A  213D  120A  118A  	fcall	_Lcd_Write_Char
  1842                           
  1843                           ;mainbrew.c: 621: Lcd_Set_Cursor(1,14);
  1844  0768  300E               	movlw	14
  1845  0769  1283               	bcf	3,5	;RP0=0, select bank0
  1846  076A  1303               	bcf	3,6	;RP1=0, select bank0
  1847  076B  00A5               	movwf	??_main
  1848  076C  0825               	movf	??_main,w
  1849  076D  00F4               	movwf	Lcd_Set_Cursor@b
  1850  076E  3001               	movlw	1
  1851  076F  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1852                           
  1853                           ;mainbrew.c: 622: Lcd_Write_String("C");
  1854  0774  30B0               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  1855  0775  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
  1856                           
  1857                           ;mainbrew.c: 623: Lcd_Set_Cursor(2,1);
  1858  077A  01F4               	clrf	Lcd_Set_Cursor@b
  1859  077B  0AF4               	incf	Lcd_Set_Cursor@b,f
  1860  077C  3002               	movlw	2
  1861  077D  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1862                           
  1863                           ;mainbrew.c: 624: Lcd_Write_String("SET:");
  1864  0782  30A9               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  1865  0783  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
  1866                           
  1867                           ;mainbrew.c: 625: Lcd_Set_Cursor(2,5);
  1868  0788  3005               	movlw	5
  1869  0789  1283               	bcf	3,5	;RP0=0, select bank0
  1870  078A  1303               	bcf	3,6	;RP1=0, select bank0
  1871  078B  00A5               	movwf	??_main
  1872  078C  0825               	movf	??_main,w
  1873  078D  00F4               	movwf	Lcd_Set_Cursor@b
  1874  078E  3002               	movlw	2
  1875  078F  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1876                           
  1877                           ;mainbrew.c: 626: lcddisplay(highval);
  1878  0794  1283               	bcf	3,5	;RP0=0, select bank0
  1879  0795  1303               	bcf	3,6	;RP1=0, select bank0
  1880  0796  0837               	movf	main@highval+1,w
  1881  0797  00F9               	movwf	lcddisplay@num+1
  1882  0798  0836               	movf	main@highval,w
  1883  0799  00F8               	movwf	lcddisplay@num
  1884  079A  120A  118A  2270  120A  118A  	fcall	_lcddisplay
  1885                           
  1886                           ;mainbrew.c: 627: Lcd_Set_Cursor(2,8);
  1887  079F  3008               	movlw	8
  1888  07A0  1283               	bcf	3,5	;RP0=0, select bank0
  1889  07A1  1303               	bcf	3,6	;RP1=0, select bank0
  1890  07A2  00A5               	movwf	??_main
  1891  07A3  0825               	movf	??_main,w
  1892  07A4  00F4               	movwf	Lcd_Set_Cursor@b
  1893  07A5  3002               	movlw	2
  1894  07A6  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1895                           
  1896                           ;mainbrew.c: 628: Lcd_Write_String("ACTUAL:");
  1897  07AB  30A1               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  1898  07AC  120A  158A  2761  120A  118A  	fcall	_Lcd_Write_String
  1899                           
  1900                           ;mainbrew.c: 629: Lcd_Set_Cursor(2,15);
  1901  07B1  300F               	movlw	15
  1902  07B2  1283               	bcf	3,5	;RP0=0, select bank0
  1903  07B3  1303               	bcf	3,6	;RP1=0, select bank0
  1904  07B4  00A5               	movwf	??_main
  1905  07B5  0825               	movf	??_main,w
  1906  07B6  00F4               	movwf	Lcd_Set_Cursor@b
  1907  07B7  3002               	movlw	2
  1908  07B8  120A  118A  2226  120A  118A  	fcall	_Lcd_Set_Cursor
  1909                           
  1910                           ;mainbrew.c: 630: lcddisplay(tempval);
  1911  07BD  1283               	bcf	3,5	;RP0=0, select bank0
  1912  07BE  1303               	bcf	3,6	;RP1=0, select bank0
  1913  07BF  082F               	movf	main@tempval+1,w
  1914  07C0  00F9               	movwf	lcddisplay@num+1
  1915  07C1  082E               	movf	main@tempval,w
  1916  07C2  00F8               	movwf	lcddisplay@num
  1917  07C3  120A  118A  2270  120A  118A  	fcall	_lcddisplay
  1918                           
  1919                           ;mainbrew.c: 632: _delay((unsigned long)((250)*(4000000/4000.0)));
  1920  07C8  3002               	movlw	2
  1921  07C9  1283               	bcf	3,5	;RP0=0, select bank0
  1922  07CA  1303               	bcf	3,6	;RP1=0, select bank0
  1923  07CB  00A7               	movwf	??_main+2
  1924  07CC  3045               	movlw	69
  1925  07CD  00A6               	movwf	??_main+1
  1926  07CE  30A9               	movlw	169
  1927  07CF  00A5               	movwf	??_main
  1928  07D0                     u1587:	
  1929  07D0  0BA5               	decfsz	??_main,f
  1930  07D1  2FD0               	goto	u1587
  1931  07D2  0BA6               	decfsz	??_main+1,f
  1932  07D3  2FD0               	goto	u1587
  1933  07D4  0BA7               	decfsz	??_main+2,f
  1934  07D5  2FD0               	goto	u1587
  1935                           
  1936                           ;mainbrew.c: 641: if((tempval>=lowval)&&(tempval<=highval))
  1937  07D6  1283               	bcf	3,5	;RP0=0, select bank0
  1938  07D7  1303               	bcf	3,6	;RP1=0, select bank0
  1939  07D8  082F               	movf	main@tempval+1,w
  1940  07D9  3A80               	xorlw	128
  1941  07DA  00A5               	movwf	??_main
  1942  07DB  0835               	movf	main@lowval+1,w
  1943  07DC  3A80               	xorlw	128
  1944  07DD  0225               	subwf	??_main,w
  1945  07DE  1D03               	skipz
  1946  07DF  2FE2               	goto	u1495
  1947  07E0  0834               	movf	main@lowval,w
  1948  07E1  022E               	subwf	main@tempval,w
  1949  07E2                     u1495:	
  1950  07E2  1C03               	skipc
  1951  07E3  2FF7               	goto	l189
  1952  07E4  1283               	bcf	3,5	;RP0=0, select bank0
  1953  07E5  1303               	bcf	3,6	;RP1=0, select bank0
  1954  07E6  0837               	movf	main@highval+1,w
  1955  07E7  3A80               	xorlw	128
  1956  07E8  00A5               	movwf	??_main
  1957  07E9  082F               	movf	main@tempval+1,w
  1958  07EA  3A80               	xorlw	128
  1959  07EB  0225               	subwf	??_main,w
  1960  07EC  1D03               	skipz
  1961  07ED  2FF0               	goto	u1505
  1962  07EE  082E               	movf	main@tempval,w
  1963  07EF  0236               	subwf	main@highval,w
  1964  07F0                     u1505:	
  1965  07F0  1C03               	skipc
  1966  07F1  2FF7               	goto	l189
  1967                           
  1968                           ;mainbrew.c: 642: {
  1969                           ;mainbrew.c: 643: RC0 = 1;
  1970  07F2  1283               	bcf	3,5	;RP0=0, select bank0
  1971  07F3  1303               	bcf	3,6	;RP1=0, select bank0
  1972  07F4  1407               	bsf	7,0	;volatile
  1973                           
  1974                           ;mainbrew.c: 644: RA1 = 1;
  1975  07F5  1485               	bsf	5,1	;volatile
  1976                           
  1977                           ;mainbrew.c: 645: }
  1978  07F6  2F22               	goto	l187
  1979  07F7                     l189:	
  1980                           
  1981                           ;mainbrew.c: 646: else
  1982                           ;mainbrew.c: 647: {
  1983                           ;mainbrew.c: 648: RC0 = 0;
  1984  07F7  1283               	bcf	3,5	;RP0=0, select bank0
  1985  07F8  1303               	bcf	3,6	;RP1=0, select bank0
  1986  07F9  1007               	bcf	7,0	;volatile
  1987                           
  1988                           ;mainbrew.c: 649: RA1 = 0;
  1989  07FA  1085               	bcf	5,1	;volatile
  1990  07FB  2F22               	goto	l187
  1991  07FC                     __end_of_main:	
  1992                           
  1993                           	psect	text1
  1994  0270                     __ptext1:	
  1995 ;; *************** function _lcddisplay *****************
  1996 ;; Defined at:
  1997 ;;		line 255 in file "mainbrew.c"
  1998 ;; Parameters:    Size  Location     Type
  1999 ;;  num             2    8[COMMON] unsigned int 
  2000 ;; Auto vars:     Size  Location     Type
  2001 ;;		None
  2002 ;; Return value:  Size  Location     Type
  2003 ;;                  1    wreg      void 
  2004 ;; Registers used:
  2005 ;;		wreg, status,2, status,0, pclath, cstack
  2006 ;; Tracked objects:
  2007 ;;		On entry : 0/0
  2008 ;;		On exit  : 0/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2011 ;;      Params:         2       0       0       0       0
  2012 ;;      Locals:         0       0       0       0       0
  2013 ;;      Temps:          0       0       0       0       0
  2014 ;;      Totals:         2       0       0       0       0
  2015 ;;Total ram usage:        2 bytes
  2016 ;; Hardware stack levels used:    1
  2017 ;; Hardware stack levels required when called:    2
  2018 ;; This function calls:
  2019 ;;		_Lcd_Write_Char
  2020 ;;		___lwdiv
  2021 ;;		___lwmod
  2022 ;; This function is called by:
  2023 ;;		_main
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           
  2028                           ;psect for function _lcddisplay
  2029  0270                     _lcddisplay:	
  2030                           
  2031                           ;mainbrew.c: 259: num=num%10000;
  2032                           
  2033                           ;incstack = 0
  2034                           ; Regs used in _lcddisplay: [wreg+status,2+status,0+pclath+cstack]
  2035  0270  3010               	movlw	16
  2036  0271  00F0               	movwf	___lwmod@divisor
  2037  0272  3027               	movlw	39
  2038  0273  00F1               	movwf	___lwmod@divisor+1
  2039  0274  0879               	movf	lcddisplay@num+1,w
  2040  0275  00F3               	movwf	___lwmod@dividend+1
  2041  0276  0878               	movf	lcddisplay@num,w
  2042  0277  00F2               	movwf	___lwmod@dividend
  2043  0278  120A  158A  27CE  120A  118A  	fcall	___lwmod
  2044  027D  0871               	movf	?___lwmod+1,w
  2045  027E  00F9               	movwf	lcddisplay@num+1
  2046  027F  0870               	movf	?___lwmod,w
  2047  0280  00F8               	movwf	lcddisplay@num
  2048                           
  2049                           ;mainbrew.c: 262: num=num%1000;
  2050  0281  30E8               	movlw	232
  2051  0282  00F0               	movwf	___lwmod@divisor
  2052  0283  3003               	movlw	3
  2053  0284  00F1               	movwf	___lwmod@divisor+1
  2054  0285  0879               	movf	lcddisplay@num+1,w
  2055  0286  00F3               	movwf	___lwmod@dividend+1
  2056  0287  0878               	movf	lcddisplay@num,w
  2057  0288  00F2               	movwf	___lwmod@dividend
  2058  0289  120A  158A  27CE  120A  118A  	fcall	___lwmod
  2059  028E  0871               	movf	?___lwmod+1,w
  2060  028F  00F9               	movwf	lcddisplay@num+1
  2061  0290  0870               	movf	?___lwmod,w
  2062  0291  00F8               	movwf	lcddisplay@num
  2063                           
  2064                           ;mainbrew.c: 265: num=num%100;
  2065  0292  3064               	movlw	100
  2066  0293  00F0               	movwf	___lwmod@divisor
  2067  0294  3000               	movlw	0
  2068  0295  00F1               	movwf	___lwmod@divisor+1
  2069  0296  0879               	movf	lcddisplay@num+1,w
  2070  0297  00F3               	movwf	___lwmod@dividend+1
  2071  0298  0878               	movf	lcddisplay@num,w
  2072  0299  00F2               	movwf	___lwmod@dividend
  2073  029A  120A  158A  27CE  120A  118A  	fcall	___lwmod
  2074  029F  0871               	movf	?___lwmod+1,w
  2075  02A0  00F9               	movwf	lcddisplay@num+1
  2076  02A1  0870               	movf	?___lwmod,w
  2077  02A2  00F8               	movwf	lcddisplay@num
  2078                           
  2079                           ;mainbrew.c: 267: Lcd_Write_Char((num/10)+0x30);
  2080  02A3  300A               	movlw	10
  2081  02A4  00F0               	movwf	___lwdiv@divisor
  2082  02A5  3000               	movlw	0
  2083  02A6  00F1               	movwf	___lwdiv@divisor+1
  2084  02A7  0879               	movf	lcddisplay@num+1,w
  2085  02A8  00F3               	movwf	___lwdiv@dividend+1
  2086  02A9  0878               	movf	lcddisplay@num,w
  2087  02AA  00F2               	movwf	___lwdiv@dividend
  2088  02AB  120A  118A  21AD  120A  118A  	fcall	___lwdiv
  2089  02B0  0870               	movf	?___lwdiv,w
  2090  02B1  3E30               	addlw	48
  2091  02B2  120A  118A  213D  120A  118A  	fcall	_Lcd_Write_Char
  2092                           
  2093                           ;mainbrew.c: 269: Lcd_Write_Char((num%10)+0x30);
  2094  02B7  300A               	movlw	10
  2095  02B8  00F0               	movwf	___lwmod@divisor
  2096  02B9  3000               	movlw	0
  2097  02BA  00F1               	movwf	___lwmod@divisor+1
  2098  02BB  0879               	movf	lcddisplay@num+1,w
  2099  02BC  00F3               	movwf	___lwmod@dividend+1
  2100  02BD  0878               	movf	lcddisplay@num,w
  2101  02BE  00F2               	movwf	___lwmod@dividend
  2102  02BF  120A  158A  27CE  120A  118A  	fcall	___lwmod
  2103  02C4  0870               	movf	?___lwmod,w
  2104  02C5  3E30               	addlw	48
  2105  02C6  120A  118A  213D   	fcall	_Lcd_Write_Char
  2106  02C9  0008               	return
  2107  02CA                     __end_of_lcddisplay:	
  2108                           
  2109                           	psect	text2
  2110  0325                     __ptext2:	
  2111 ;; *************** function _checktemp *****************
  2112 ;; Defined at:
  2113 ;;		line 231 in file "mainbrew.c"
  2114 ;; Parameters:    Size  Location     Type
  2115 ;;		None
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;  temp            2   12[COMMON] unsigned int 
  2118 ;;  tempH           2   10[COMMON] unsigned short 
  2119 ;;  tempL           2    8[COMMON] unsigned short 
  2120 ;; Return value:  Size  Location     Type
  2121 ;;                  2    4[COMMON] int 
  2122 ;; Registers used:
  2123 ;;		wreg, status,2, status,0, pclath, cstack
  2124 ;; Tracked objects:
  2125 ;;		On entry : 0/0
  2126 ;;		On exit  : 0/0
  2127 ;;		Unchanged: 0/0
  2128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2129 ;;      Params:         2       0       0       0       0
  2130 ;;      Locals:         6       0       0       0       0
  2131 ;;      Temps:          2       0       0       0       0
  2132 ;;      Totals:        10       0       0       0       0
  2133 ;;Total ram usage:       10 bytes
  2134 ;; Hardware stack levels used:    1
  2135 ;; Hardware stack levels required when called:    1
  2136 ;; This function calls:
  2137 ;;		_read
  2138 ;;		_reset
  2139 ;;		_write
  2140 ;; This function is called by:
  2141 ;;		_main
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           
  2146                           ;psect for function _checktemp
  2147  0325                     _checktemp:	
  2148                           
  2149                           ;mainbrew.c: 233: unsigned short tempL = 0,tempH = 0;
  2150                           
  2151                           ;incstack = 0
  2152                           ; Regs used in _checktemp: [wreg+status,2+status,0+pclath+cstack]
  2153  0325  01F8               	clrf	checktemp@tempL
  2154  0326  01F9               	clrf	checktemp@tempL+1
  2155  0327  01FA               	clrf	checktemp@tempH
  2156  0328  01FB               	clrf	checktemp@tempH+1
  2157                           
  2158                           ;mainbrew.c: 234: unsigned int temp = 0;
  2159  0329  01FC               	clrf	checktemp@temp
  2160  032A  01FD               	clrf	checktemp@temp+1
  2161                           
  2162                           ;mainbrew.c: 236: if(!reset())
  2163  032B  120A  158A  2783  120A  118A  	fcall	_reset
  2164  0330  3A00               	xorlw	0
  2165  0331  1D03               	skipz
  2166  0332  2B7B               	goto	l1468
  2167                           
  2168                           ;mainbrew.c: 237: {
  2169                           ;mainbrew.c: 238: write(0xcc);
  2170  0333  30CC               	movlw	204
  2171  0334  120A  118A  21E9  120A  118A  	fcall	_write
  2172                           
  2173                           ;mainbrew.c: 239: write(0x44);
  2174  0339  3044               	movlw	68
  2175  033A  120A  118A  21E9  120A  118A  	fcall	_write
  2176                           
  2177                           ;mainbrew.c: 240: _delay((unsigned long)((600)*(4000000/4000000.0)));
  2178  033F  30C7               	movlw	199
  2179  0340  00F6               	movwf	??_checktemp
  2180  0341                     u1597:	
  2181  0341  0BF6               	decfsz	??_checktemp,f
  2182  0342  2B41               	goto	u1597
  2183  0343  2B44               	nop2
  2184                           
  2185                           ;mainbrew.c: 242: reset();
  2186  0344  120A  158A  2783  120A  118A  	fcall	_reset
  2187                           
  2188                           ;mainbrew.c: 243: write(0xcc);
  2189  0349  30CC               	movlw	204
  2190  034A  120A  118A  21E9  120A  118A  	fcall	_write
  2191                           
  2192                           ;mainbrew.c: 244: write(0xbe);
  2193  034F  30BE               	movlw	190
  2194  0350  120A  118A  21E9  120A  118A  	fcall	_write
  2195                           
  2196                           ;mainbrew.c: 246: tempL = read();
  2197  0355  120A  118A  20D6  120A  118A  	fcall	_read
  2198  035A  00F6               	movwf	??_checktemp
  2199  035B  01F7               	clrf	??_checktemp+1
  2200  035C  0876               	movf	??_checktemp,w
  2201  035D  00F8               	movwf	checktemp@tempL
  2202  035E  0877               	movf	??_checktemp+1,w
  2203  035F  00F9               	movwf	checktemp@tempL+1
  2204                           
  2205                           ;mainbrew.c: 247: tempH = read();
  2206  0360  120A  118A  20D6   	fcall	_read
  2207  0363  00F6               	movwf	??_checktemp
  2208  0364  01F7               	clrf	??_checktemp+1
  2209  0365  0876               	movf	??_checktemp,w
  2210  0366  00FA               	movwf	checktemp@tempH
  2211  0367  0877               	movf	??_checktemp+1,w
  2212  0368  00FB               	movwf	checktemp@tempH+1
  2213                           
  2214                           ;mainbrew.c: 248: temp=((tempH << 8 )| tempL);
  2215  0369  087A               	movf	checktemp@tempH,w
  2216  036A  00F7               	movwf	??_checktemp+1
  2217  036B  01F6               	clrf	??_checktemp
  2218  036C  0878               	movf	checktemp@tempL,w
  2219  036D  0476               	iorwf	??_checktemp,w
  2220  036E  00FC               	movwf	checktemp@temp
  2221  036F  0879               	movf	checktemp@tempL+1,w
  2222  0370  0477               	iorwf	??_checktemp+1,w
  2223  0371  00FD               	movwf	checktemp@temp+1
  2224                           
  2225                           ;mainbrew.c: 249: temp = temp /16 ;
  2226  0372  0E7C               	swapf	checktemp@temp,w
  2227  0373  390F               	andlw	15
  2228  0374  00FC               	movwf	checktemp@temp
  2229  0375  0E7D               	swapf	checktemp@temp+1,w
  2230  0376  39F0               	andlw	240
  2231  0377  04FC               	iorwf	checktemp@temp,f
  2232  0378  0E7D               	swapf	checktemp@temp+1,w
  2233  0379  390F               	andlw	15
  2234  037A  00FD               	movwf	checktemp@temp+1
  2235  037B                     l1468:	
  2236                           
  2237                           ;mainbrew.c: 250: }
  2238                           ;mainbrew.c: 251: return temp;
  2239  037B  087D               	movf	checktemp@temp+1,w
  2240  037C  00F5               	movwf	?_checktemp+1
  2241  037D  087C               	movf	checktemp@temp,w
  2242  037E  00F4               	movwf	?_checktemp
  2243  037F  0008               	return
  2244  0380                     __end_of_checktemp:	
  2245                           
  2246                           	psect	text3
  2247  01E9                     __ptext3:	
  2248 ;; *************** function _write *****************
  2249 ;; Defined at:
  2250 ;;		line 183 in file "mainbrew.c"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;  WRT             1    wreg     unsigned char 
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;  WRT             1    1[COMMON] unsigned char 
  2255 ;;  i               1    3[COMMON] unsigned char 
  2256 ;;  Cmd             1    2[COMMON] unsigned char 
  2257 ;; Return value:  Size  Location     Type
  2258 ;;                  1    wreg      void 
  2259 ;; Registers used:
  2260 ;;		wreg, status,2, status,0
  2261 ;; Tracked objects:
  2262 ;;		On entry : 0/0
  2263 ;;		On exit  : 0/0
  2264 ;;		Unchanged: 0/0
  2265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2266 ;;      Params:         0       0       0       0       0
  2267 ;;      Locals:         3       0       0       0       0
  2268 ;;      Temps:          1       0       0       0       0
  2269 ;;      Totals:         4       0       0       0       0
  2270 ;;Total ram usage:        4 bytes
  2271 ;; Hardware stack levels used:    1
  2272 ;; This function calls:
  2273 ;;		Nothing
  2274 ;; This function is called by:
  2275 ;;		_checktemp
  2276 ;; This function uses a non-reentrant model
  2277 ;;
  2278                           
  2279                           
  2280                           ;psect for function _write
  2281  01E9                     _write:	
  2282                           
  2283                           ;incstack = 0
  2284                           ; Regs used in _write: [wreg+status,2+status,0]
  2285                           ;write@WRT stored from wreg
  2286  01E9  00F1               	movwf	write@WRT
  2287                           
  2288                           ;mainbrew.c: 185: char i,Cmd;
  2289                           ;mainbrew.c: 186: Cmd=WRT;
  2290  01EA  0871               	movf	write@WRT,w
  2291  01EB  00F0               	movwf	??_write
  2292  01EC  0870               	movf	??_write,w
  2293  01ED  00F2               	movwf	write@Cmd
  2294                           
  2295                           ;mainbrew.c: 187: TRISC3 = 1;
  2296  01EE  1683               	bsf	3,5	;RP0=1, select bank1
  2297  01EF  1303               	bcf	3,6	;RP1=0, select bank1
  2298  01F0  1587               	bsf	7,3	;volatile
  2299                           
  2300                           ;mainbrew.c: 189: for(i = 0; i < 8; i++)
  2301  01F1  01F3               	clrf	write@i
  2302  01F2                     L2:	
  2303  01F2  3008               	movlw	8
  2304  01F3  0273               	subwf	write@i,w
  2305  01F4  1803               	btfsc	3,0
  2306  01F5  0008               	return
  2307                           
  2308                           ;mainbrew.c: 190: {
  2309                           ;mainbrew.c: 191: if((Cmd & (1<<i))!= 0)
  2310  01F6  3001               	movlw	1
  2311  01F7  00F0               	movwf	??_write
  2312  01F8  0A73               	incf	write@i,w
  2313  01F9  29FC               	goto	u834
  2314  01FA                     u835:	
  2315  01FA  1003               	clrc
  2316  01FB  0DF0               	rlf	??_write,f
  2317  01FC                     u834:	
  2318  01FC  3EFF               	addlw	-1
  2319  01FD  1D03               	skipz
  2320  01FE  29FA               	goto	u835
  2321  01FF  0870               	movf	??_write,w
  2322  0200  0572               	andwf	write@Cmd,w
  2323  0201  1903               	btfsc	3,2
  2324  0202  2A13               	goto	l99
  2325                           
  2326                           ;mainbrew.c: 192: {
  2327                           ;mainbrew.c: 194: TRISC3 = 0;
  2328  0203  1683               	bsf	3,5	;RP0=1, select bank1
  2329  0204  1303               	bcf	3,6	;RP1=0, select bank1
  2330  0205  1187               	bcf	7,3	;volatile
  2331                           
  2332                           ;mainbrew.c: 195: RC3= 0;
  2333  0206  1283               	bcf	3,5	;RP0=0, select bank0
  2334  0207  1303               	bcf	3,6	;RP1=0, select bank0
  2335  0208  1187               	bcf	7,3	;volatile
  2336                           
  2337                           ;mainbrew.c: 196: _delay((unsigned long)((1)*(4000000/4000000.0)));
  2338  0209  0000               	nop
  2339                           
  2340                           ;mainbrew.c: 197: TRISC3 = 1;
  2341  020A  1683               	bsf	3,5	;RP0=1, select bank1
  2342  020B  1303               	bcf	3,6	;RP1=0, select bank1
  2343  020C  1587               	bsf	7,3	;volatile
  2344                           
  2345                           ;mainbrew.c: 198: _delay((unsigned long)((60)*(4000000/4000000.0)));
  2346  020D  3013               	movlw	19
  2347  020E  00F0               	movwf	??_write
  2348  020F                     u1607:	
  2349  020F  0BF0               	decfsz	??_write,f
  2350  0210  2A0F               	goto	u1607
  2351  0211  2A12               	nop2
  2352                           
  2353                           ;mainbrew.c: 199: }
  2354  0212  2A21               	goto	l1300
  2355  0213                     l99:	
  2356                           
  2357                           ;mainbrew.c: 200: else
  2358                           ;mainbrew.c: 201: {
  2359                           ;mainbrew.c: 203: TRISC3 = 0;
  2360  0213  1683               	bsf	3,5	;RP0=1, select bank1
  2361  0214  1303               	bcf	3,6	;RP1=0, select bank1
  2362  0215  1187               	bcf	7,3	;volatile
  2363                           
  2364                           ;mainbrew.c: 204: RC3= 0;
  2365  0216  1283               	bcf	3,5	;RP0=0, select bank0
  2366  0217  1303               	bcf	3,6	;RP1=0, select bank0
  2367  0218  1187               	bcf	7,3	;volatile
  2368                           
  2369                           ;mainbrew.c: 205: _delay((unsigned long)((60)*(4000000/4000000.0)));
  2370  0219  3013               	movlw	19
  2371  021A  00F0               	movwf	??_write
  2372  021B                     u1617:	
  2373  021B  0BF0               	decfsz	??_write,f
  2374  021C  2A1B               	goto	u1617
  2375  021D  2A1E               	nop2
  2376                           
  2377                           ;mainbrew.c: 206: TRISC3 = 1;
  2378  021E  1683               	bsf	3,5	;RP0=1, select bank1
  2379  021F  1303               	bcf	3,6	;RP1=0, select bank1
  2380  0220  1587               	bsf	7,3	;volatile
  2381  0221                     l1300:	
  2382  0221  3001               	movlw	1
  2383  0222  00F0               	movwf	??_write
  2384  0223  0870               	movf	??_write,w
  2385  0224  07F3               	addwf	write@i,f
  2386  0225  29F2               	goto	L2
  2387  0226                     __end_of_write:	
  2388                           
  2389                           	psect	text4
  2390  0F83                     __ptext4:	
  2391 ;; *************** function _reset *****************
  2392 ;; Defined at:
  2393 ;;		line 161 in file "mainbrew.c"
  2394 ;; Parameters:    Size  Location     Type
  2395 ;;		None
  2396 ;; Auto vars:     Size  Location     Type
  2397 ;;		None
  2398 ;; Return value:  Size  Location     Type
  2399 ;;                  1    wreg      unsigned char 
  2400 ;; Registers used:
  2401 ;;		wreg
  2402 ;; Tracked objects:
  2403 ;;		On entry : 0/0
  2404 ;;		On exit  : 0/0
  2405 ;;		Unchanged: 0/0
  2406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2407 ;;      Params:         0       0       0       0       0
  2408 ;;      Locals:         0       0       0       0       0
  2409 ;;      Temps:          1       0       0       0       0
  2410 ;;      Totals:         1       0       0       0       0
  2411 ;;Total ram usage:        1 bytes
  2412 ;; Hardware stack levels used:    1
  2413 ;; This function calls:
  2414 ;;		Nothing
  2415 ;; This function is called by:
  2416 ;;		_checktemp
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           
  2421                           ;psect for function _reset
  2422  0F83                     _reset:	
  2423                           
  2424                           ;mainbrew.c: 163: TRISC3 = 0;
  2425                           
  2426                           ;incstack = 0
  2427                           ; Regs used in _reset: [wreg]
  2428  0F83  1683               	bsf	3,5	;RP0=1, select bank1
  2429  0F84  1303               	bcf	3,6	;RP1=0, select bank1
  2430  0F85  1187               	bcf	7,3	;volatile
  2431                           
  2432                           ;mainbrew.c: 164: RC3= 0;
  2433  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  2434  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  2435  0F88  1187               	bcf	7,3	;volatile
  2436                           
  2437                           ;mainbrew.c: 165: _delay((unsigned long)((480)*(4000000/4000000.0)));
  2438  0F89  309F               	movlw	159
  2439  0F8A  00F0               	movwf	??_reset
  2440  0F8B                     u1627:	
  2441  0F8B  0BF0               	decfsz	??_reset,f
  2442  0F8C  2F8B               	goto	u1627
  2443  0F8D  2F8E               	nop2
  2444                           
  2445                           ;mainbrew.c: 166: TRISC3 = 1;
  2446  0F8E  1683               	bsf	3,5	;RP0=1, select bank1
  2447  0F8F  1303               	bcf	3,6	;RP1=0, select bank1
  2448  0F90  1587               	bsf	7,3	;volatile
  2449                           
  2450                           ;mainbrew.c: 167: _delay((unsigned long)((60)*(4000000/4000000.0)));
  2451  0F91  3013               	movlw	19
  2452  0F92  00F0               	movwf	??_reset
  2453  0F93                     u1637:	
  2454  0F93  0BF0               	decfsz	??_reset,f
  2455  0F94  2F93               	goto	u1637
  2456  0F95  2F96               	nop2
  2457                           
  2458                           ;mainbrew.c: 169: if (RC3== 0)
  2459  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  2460  0F97  1303               	bcf	3,6	;RP1=0, select bank0
  2461  0F98  1987               	btfsc	7,3	;volatile
  2462  0F99  2FA1               	goto	l1276
  2463                           
  2464                           ;mainbrew.c: 170: {
  2465                           ;mainbrew.c: 171: _delay((unsigned long)((480)*(4000000/4000000.0)));
  2466  0F9A  309F               	movlw	159
  2467  0F9B  00F0               	movwf	??_reset
  2468  0F9C                     u1647:	
  2469  0F9C  0BF0               	decfsz	??_reset,f
  2470  0F9D  2F9C               	goto	u1647
  2471  0F9E  2F9F               	nop2
  2472                           
  2473                           ;mainbrew.c: 172: return 0;
  2474  0F9F  3000               	movlw	0
  2475                           
  2476                           ;mainbrew.c: 173: }
  2477  0FA0  0008               	return
  2478  0FA1                     l1276:	
  2479                           
  2480                           ;mainbrew.c: 174: else
  2481                           ;mainbrew.c: 175: {
  2482                           ;mainbrew.c: 176: _delay((unsigned long)((480)*(4000000/4000000.0)));
  2483  0FA1  309F               	movlw	159
  2484  0FA2  00F0               	movwf	??_reset
  2485  0FA3                     u1657:	
  2486  0FA3  0BF0               	decfsz	??_reset,f
  2487  0FA4  2FA3               	goto	u1657
  2488  0FA5  2FA6               	nop2
  2489                           
  2490                           ;mainbrew.c: 177: return 1;
  2491  0FA6  3001               	movlw	1
  2492  0FA7  0008               	return
  2493  0FA8                     __end_of_reset:	
  2494                           
  2495                           	psect	text5
  2496  00D6                     __ptext5:	
  2497 ;; *************** function _read *****************
  2498 ;; Defined at:
  2499 ;;		line 213 in file "mainbrew.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;		None
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;  i               1    3[COMMON] unsigned char 
  2504 ;;  result          1    2[COMMON] unsigned char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      unsigned char 
  2507 ;; Registers used:
  2508 ;;		wreg, status,2, status,0
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2514 ;;      Params:         0       0       0       0       0
  2515 ;;      Locals:         2       0       0       0       0
  2516 ;;      Temps:          2       0       0       0       0
  2517 ;;      Totals:         4       0       0       0       0
  2518 ;;Total ram usage:        4 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; This function calls:
  2521 ;;		Nothing
  2522 ;; This function is called by:
  2523 ;;		_checktemp
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           
  2528                           ;psect for function _read
  2529  00D6                     _read:	
  2530                           
  2531                           ;mainbrew.c: 215: char i,result = 0;
  2532                           
  2533                           ;incstack = 0
  2534                           ; Regs used in _read: [wreg+status,2+status,0]
  2535  00D6  01F2               	clrf	read@result
  2536                           
  2537                           ;mainbrew.c: 216: TRISC3 = 1;
  2538  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  2539  00D8  1303               	bcf	3,6	;RP1=0, select bank1
  2540  00D9  1587               	bsf	7,3	;volatile
  2541                           
  2542                           ;mainbrew.c: 217: for(i = 0; i < 8; i++)
  2543  00DA  01F3               	clrf	read@i
  2544  00DB  3008               	movlw	8
  2545  00DC  0273               	subwf	read@i,w
  2546  00DD  1803               	btfsc	3,0
  2547  00DE  2907               	goto	l1318
  2548  00DF                     l104:	
  2549                           
  2550                           ;mainbrew.c: 218: {
  2551                           ;mainbrew.c: 219: TRISC3 = 0;
  2552  00DF  1683               	bsf	3,5	;RP0=1, select bank1
  2553  00E0  1303               	bcf	3,6	;RP1=0, select bank1
  2554  00E1  1187               	bcf	7,3	;volatile
  2555                           
  2556                           ;mainbrew.c: 220: RC3= 0;
  2557  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  2558  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  2559  00E4  1187               	bcf	7,3	;volatile
  2560                           
  2561                           ;mainbrew.c: 221: _delay((unsigned long)((2)*(4000000/4000000.0)));
  2562  00E5  28E6               	nop2	;2 cycle nop
  2563                           
  2564                           ;mainbrew.c: 222: TRISC3 = 1;
  2565  00E6  1683               	bsf	3,5	;RP0=1, select bank1
  2566  00E7  1303               	bcf	3,6	;RP1=0, select bank1
  2567  00E8  1587               	bsf	7,3	;volatile
  2568                           
  2569                           ;mainbrew.c: 223: if(RC3!= 0)
  2570  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  2571  00EA  1303               	bcf	3,6	;RP1=0, select bank0
  2572  00EB  1D87               	btfss	7,3	;volatile
  2573  00EC  28FA               	goto	l1314
  2574                           
  2575                           ;mainbrew.c: 224: result |= 1<<i;
  2576  00ED  3001               	movlw	1
  2577  00EE  00F0               	movwf	??_read
  2578  00EF  0A73               	incf	read@i,w
  2579  00F0  28F3               	goto	u884
  2580  00F1                     u885:	
  2581  00F1  1003               	clrc
  2582  00F2  0DF0               	rlf	??_read,f
  2583  00F3                     u884:	
  2584  00F3  3EFF               	addlw	-1
  2585  00F4  1D03               	skipz
  2586  00F5  28F1               	goto	u885
  2587  00F6  0870               	movf	??_read,w
  2588  00F7  00F1               	movwf	??_read+1
  2589  00F8  0871               	movf	??_read+1,w
  2590  00F9  04F2               	iorwf	read@result,f
  2591  00FA                     l1314:	
  2592                           
  2593                           ;mainbrew.c: 225: _delay((unsigned long)((60)*(4000000/4000000.0)));
  2594  00FA  3013               	movlw	19
  2595  00FB  00F0               	movwf	??_read
  2596  00FC                     u1667:	
  2597  00FC  0BF0               	decfsz	??_read,f
  2598  00FD  28FC               	goto	u1667
  2599  00FE  28FF               	nop2
  2600  00FF  3001               	movlw	1
  2601  0100  00F0               	movwf	??_read
  2602  0101  0870               	movf	??_read,w
  2603  0102  07F3               	addwf	read@i,f
  2604  0103  3008               	movlw	8
  2605  0104  0273               	subwf	read@i,w
  2606  0105  1C03               	skipc
  2607  0106  28DF               	goto	l104
  2608  0107                     l1318:	
  2609                           
  2610                           ;mainbrew.c: 226: }
  2611                           ;mainbrew.c: 227: return result;
  2612  0107  0872               	movf	read@result,w
  2613  0108  0008               	return
  2614  0109                     __end_of_read:	
  2615                           
  2616                           	psect	text6
  2617  0109                     __ptext6:	
  2618 ;; *************** function _Write_EEPROM *****************
  2619 ;; Defined at:
  2620 ;;		line 290 in file "mainbrew.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;  a1              1    wreg     unsigned char 
  2623 ;;  a2              1   11[COMMON] unsigned char 
  2624 ;;  data_value      2   12[COMMON] unsigned int 
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;  a1              1    1[BANK0 ] unsigned char 
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      void 
  2629 ;; Registers used:
  2630 ;;		wreg, status,2, status,0, pclath, cstack
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2636 ;;      Params:         3       0       0       0       0
  2637 ;;      Locals:         0       1       0       0       0
  2638 ;;      Temps:          0       1       0       0       0
  2639 ;;      Totals:         3       2       0       0       0
  2640 ;;Total ram usage:        5 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    1
  2643 ;; This function calls:
  2644 ;;		___lwdiv
  2645 ;;		___lwmod
  2646 ;;		_eeprom_write
  2647 ;; This function is called by:
  2648 ;;		_main
  2649 ;; This function uses a non-reentrant model
  2650 ;;
  2651                           
  2652                           
  2653                           ;psect for function _Write_EEPROM
  2654  0109                     _Write_EEPROM:	
  2655                           
  2656                           ;incstack = 0
  2657                           ; Regs used in _Write_EEPROM: [wreg+status,2+status,0+pclath+cstack]
  2658                           ;Write_EEPROM@a1 stored from wreg
  2659  0109  1283               	bcf	3,5	;RP0=0, select bank0
  2660  010A  1303               	bcf	3,6	;RP1=0, select bank0
  2661  010B  00A1               	movwf	Write_EEPROM@a1
  2662                           
  2663                           ;mainbrew.c: 292: eeprom_write(a1,(data_value/10));
  2664  010C  300A               	movlw	10
  2665  010D  00F0               	movwf	___lwdiv@divisor
  2666  010E  3000               	movlw	0
  2667  010F  00F1               	movwf	___lwdiv@divisor+1
  2668  0110  087D               	movf	Write_EEPROM@data_value+1,w
  2669  0111  00F3               	movwf	___lwdiv@dividend+1
  2670  0112  087C               	movf	Write_EEPROM@data_value,w
  2671  0113  00F2               	movwf	___lwdiv@dividend
  2672  0114  120A  118A  21AD  120A  118A  	fcall	___lwdiv
  2673  0119  0870               	movf	?___lwdiv,w
  2674  011A  1283               	bcf	3,5	;RP0=0, select bank0
  2675  011B  1303               	bcf	3,6	;RP1=0, select bank0
  2676  011C  00A0               	movwf	??_Write_EEPROM
  2677  011D  0820               	movf	??_Write_EEPROM,w
  2678  011E  00F8               	movwf	eeprom_write@value
  2679  011F  0821               	movf	Write_EEPROM@a1,w
  2680  0120  120A  158A  27A8  120A  118A  	fcall	_eeprom_write
  2681                           
  2682                           ;mainbrew.c: 293: eeprom_write(a2,(data_value%10));
  2683  0125  300A               	movlw	10
  2684  0126  00F0               	movwf	___lwmod@divisor
  2685  0127  3000               	movlw	0
  2686  0128  00F1               	movwf	___lwmod@divisor+1
  2687  0129  087D               	movf	Write_EEPROM@data_value+1,w
  2688  012A  00F3               	movwf	___lwmod@dividend+1
  2689  012B  087C               	movf	Write_EEPROM@data_value,w
  2690  012C  00F2               	movwf	___lwmod@dividend
  2691  012D  120A  158A  27CE  120A  118A  	fcall	___lwmod
  2692  0132  0870               	movf	?___lwmod,w
  2693  0133  1283               	bcf	3,5	;RP0=0, select bank0
  2694  0134  1303               	bcf	3,6	;RP1=0, select bank0
  2695  0135  00A0               	movwf	??_Write_EEPROM
  2696  0136  0820               	movf	??_Write_EEPROM,w
  2697  0137  00F8               	movwf	eeprom_write@value
  2698  0138  087B               	movf	Write_EEPROM@a2,w
  2699  0139  120A  158A  27A8   	fcall	_eeprom_write
  2700  013C  0008               	return
  2701  013D                     __end_of_Write_EEPROM:	
  2702                           
  2703                           	psect	text7
  2704  0FA8                     __ptext7:	
  2705 ;; *************** function _eeprom_write *****************
  2706 ;; Defined at:
  2707 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\pic\eewrite.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;  addr            1    wreg     unsigned char 
  2710 ;;  value           1    8[COMMON] unsigned char 
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;  addr            1   10[COMMON] unsigned char 
  2713 ;; Return value:  Size  Location     Type
  2714 ;;                  1    wreg      void 
  2715 ;; Registers used:
  2716 ;;		wreg, status,2, status,0
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2722 ;;      Params:         1       0       0       0       0
  2723 ;;      Locals:         1       0       0       0       0
  2724 ;;      Temps:          1       0       0       0       0
  2725 ;;      Totals:         3       0       0       0       0
  2726 ;;Total ram usage:        3 bytes
  2727 ;; Hardware stack levels used:    1
  2728 ;; This function calls:
  2729 ;;		Nothing
  2730 ;; This function is called by:
  2731 ;;		_Write_EEPROM
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           
  2736                           ;psect for function _eeprom_write
  2737  0FA8                     _eeprom_write:	
  2738                           
  2739                           ;incstack = 0
  2740                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  2741                           ;eeprom_write@addr stored from wreg
  2742  0FA8  00FA               	movwf	eeprom_write@addr
  2743  0FA9                     l230:	
  2744  0FA9  1683               	bsf	3,5	;RP0=1, select bank3
  2745  0FAA  1703               	bsf	3,6	;RP1=1, select bank3
  2746  0FAB  188C               	btfsc	12,1	;volsfr
  2747  0FAC  2FA9               	goto	l230
  2748  0FAD  087A               	movf	eeprom_write@addr,w
  2749  0FAE  1283               	bcf	3,5	;RP0=0, select bank2
  2750  0FAF  1703               	bsf	3,6	;RP1=1, select bank2
  2751  0FB0  008D               	movwf	13	;volatile
  2752  0FB1  0878               	movf	eeprom_write@value,w
  2753  0FB2  008C               	movwf	12	;volatile
  2754  0FB3  303F               	movlw	63
  2755  0FB4  00F9               	movwf	??_eeprom_write
  2756  0FB5  0879               	movf	??_eeprom_write,w
  2757  0FB6  1683               	bsf	3,5	;RP0=1, select bank3
  2758  0FB7  1703               	bsf	3,6	;RP1=1, select bank3
  2759  0FB8  058C               	andwf	12,f	;volsfr
  2760  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  2761  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  2762  0FBB  1003               	bcf	3,0	;volatile
  2763  0FBC  1B8B               	btfsc	11,7	;volatile
  2764  0FBD  1403               	bsf	3,0	;volatile
  2765  0FBE  138B               	bcf	11,7	;volatile
  2766  0FBF  1683               	bsf	3,5	;RP0=1, select bank3
  2767  0FC0  1703               	bsf	3,6	;RP1=1, select bank3
  2768  0FC1  150C               	bsf	12,2	;volsfr
  2769  0FC2  3055               	movlw	85
  2770  0FC3  008D               	movwf	13	;volsfr
  2771  0FC4  30AA               	movlw	170
  2772  0FC5  008D               	movwf	13	;volsfr
  2773  0FC6  148C               	bsf	12,1	;volsfr
  2774  0FC7  110C               	bcf	12,2	;volsfr
  2775  0FC8  1283               	bcf	3,5	;RP0=0, select bank0
  2776  0FC9  1303               	bcf	3,6	;RP1=0, select bank0
  2777  0FCA  1C03               	btfss	3,0	;volatile
  2778  0FCB  0008               	return
  2779  0FCC  178B               	bsf	11,7	;volatile
  2780  0FCD  0008               	return
  2781  0FCE                     __end_of_eeprom_write:	
  2782                           
  2783                           	psect	text8
  2784  0FCE                     __ptext8:	
  2785 ;; *************** function ___lwmod *****************
  2786 ;; Defined at:
  2787 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lwmod.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;  divisor         2    0[COMMON] unsigned int 
  2790 ;;  dividend        2    2[COMMON] unsigned int 
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;  counter         1    5[COMMON] unsigned char 
  2793 ;; Return value:  Size  Location     Type
  2794 ;;                  2    0[COMMON] unsigned int 
  2795 ;; Registers used:
  2796 ;;		wreg, status,2, status,0
  2797 ;; Tracked objects:
  2798 ;;		On entry : 0/0
  2799 ;;		On exit  : 0/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2802 ;;      Params:         4       0       0       0       0
  2803 ;;      Locals:         1       0       0       0       0
  2804 ;;      Temps:          1       0       0       0       0
  2805 ;;      Totals:         6       0       0       0       0
  2806 ;;Total ram usage:        6 bytes
  2807 ;; Hardware stack levels used:    1
  2808 ;; This function calls:
  2809 ;;		Nothing
  2810 ;; This function is called by:
  2811 ;;		_lcddisplay
  2812 ;;		_Write_EEPROM
  2813 ;; This function uses a non-reentrant model
  2814 ;;
  2815                           
  2816                           
  2817                           ;psect for function ___lwmod
  2818  0FCE                     ___lwmod:	
  2819                           
  2820                           ;incstack = 0
  2821                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2822  0FCE  0870               	movf	___lwmod@divisor,w
  2823  0FCF  0471               	iorwf	___lwmod@divisor+1,w
  2824  0FD0  1903               	btfsc	3,2
  2825  0FD1  2FFB               	goto	l1404
  2826  0FD2  01F5               	clrf	___lwmod@counter
  2827  0FD3  0AF5               	incf	___lwmod@counter,f
  2828  0FD4                     l1394:	
  2829  0FD4  1BF1               	btfsc	___lwmod@divisor+1,7
  2830  0FD5  2FE2               	goto	l1396
  2831  0FD6  3001               	movlw	1
  2832  0FD7                     u1065:	
  2833  0FD7  1003               	clrc
  2834  0FD8  0DF0               	rlf	___lwmod@divisor,f
  2835  0FD9  0DF1               	rlf	___lwmod@divisor+1,f
  2836  0FDA  3EFF               	addlw	-1
  2837  0FDB  1D03               	skipz
  2838  0FDC  2FD7               	goto	u1065
  2839  0FDD  3001               	movlw	1
  2840  0FDE  00F4               	movwf	??___lwmod
  2841  0FDF  0874               	movf	??___lwmod,w
  2842  0FE0  07F5               	addwf	___lwmod@counter,f
  2843  0FE1  2FD4               	goto	l1394
  2844  0FE2                     l1396:	
  2845  0FE2  0871               	movf	___lwmod@divisor+1,w
  2846  0FE3  0273               	subwf	___lwmod@dividend+1,w
  2847  0FE4  1D03               	skipz
  2848  0FE5  2FE8               	goto	u1085
  2849  0FE6  0870               	movf	___lwmod@divisor,w
  2850  0FE7  0272               	subwf	___lwmod@dividend,w
  2851  0FE8                     u1085:	
  2852  0FE8  1C03               	skipc
  2853  0FE9  2FF0               	goto	l1400
  2854  0FEA  0870               	movf	___lwmod@divisor,w
  2855  0FEB  02F2               	subwf	___lwmod@dividend,f
  2856  0FEC  0871               	movf	___lwmod@divisor+1,w
  2857  0FED  1C03               	skipc
  2858  0FEE  03F3               	decf	___lwmod@dividend+1,f
  2859  0FEF  02F3               	subwf	___lwmod@dividend+1,f
  2860  0FF0                     l1400:	
  2861  0FF0  3001               	movlw	1
  2862  0FF1                     u1095:	
  2863  0FF1  1003               	clrc
  2864  0FF2  0CF1               	rrf	___lwmod@divisor+1,f
  2865  0FF3  0CF0               	rrf	___lwmod@divisor,f
  2866  0FF4  3EFF               	addlw	-1
  2867  0FF5  1D03               	skipz
  2868  0FF6  2FF1               	goto	u1095
  2869  0FF7  3001               	movlw	1
  2870  0FF8  02F5               	subwf	___lwmod@counter,f
  2871  0FF9  1D03               	btfss	3,2
  2872  0FFA  2FE2               	goto	l1396
  2873  0FFB                     l1404:	
  2874  0FFB  0873               	movf	___lwmod@dividend+1,w
  2875  0FFC  00F1               	movwf	?___lwmod+1
  2876  0FFD  0872               	movf	___lwmod@dividend,w
  2877  0FFE  00F0               	movwf	?___lwmod
  2878  0FFF  0008               	return
  2879  1000                     __end_of___lwmod:	
  2880                           
  2881                           	psect	text9
  2882  01AD                     __ptext9:	
  2883 ;; *************** function ___lwdiv *****************
  2884 ;; Defined at:
  2885 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;  divisor         2    0[COMMON] unsigned int 
  2888 ;;  dividend        2    2[COMMON] unsigned int 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;  quotient        2    5[COMMON] unsigned int 
  2891 ;;  counter         1    7[COMMON] unsigned char 
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  2    0[COMMON] unsigned int 
  2894 ;; Registers used:
  2895 ;;		wreg, status,2, status,0
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2901 ;;      Params:         4       0       0       0       0
  2902 ;;      Locals:         3       0       0       0       0
  2903 ;;      Temps:          1       0       0       0       0
  2904 ;;      Totals:         8       0       0       0       0
  2905 ;;Total ram usage:        8 bytes
  2906 ;; Hardware stack levels used:    1
  2907 ;; This function calls:
  2908 ;;		Nothing
  2909 ;; This function is called by:
  2910 ;;		_lcddisplay
  2911 ;;		_Write_EEPROM
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           
  2916                           ;psect for function ___lwdiv
  2917  01AD                     ___lwdiv:	
  2918                           
  2919                           ;incstack = 0
  2920                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2921  01AD  01F5               	clrf	___lwdiv@quotient
  2922  01AE  01F6               	clrf	___lwdiv@quotient+1
  2923  01AF  0870               	movf	___lwdiv@divisor,w
  2924  01B0  0471               	iorwf	___lwdiv@divisor+1,w
  2925  01B1  1903               	btfsc	3,2
  2926  01B2  29E4               	goto	l1382
  2927  01B3  01F7               	clrf	___lwdiv@counter
  2928  01B4  0AF7               	incf	___lwdiv@counter,f
  2929  01B5                     l1370:	
  2930  01B5  1BF1               	btfsc	___lwdiv@divisor+1,7
  2931  01B6  29C3               	goto	l1372
  2932  01B7  3001               	movlw	1
  2933  01B8                     u995:	
  2934  01B8  1003               	clrc
  2935  01B9  0DF0               	rlf	___lwdiv@divisor,f
  2936  01BA  0DF1               	rlf	___lwdiv@divisor+1,f
  2937  01BB  3EFF               	addlw	-1
  2938  01BC  1D03               	skipz
  2939  01BD  29B8               	goto	u995
  2940  01BE  3001               	movlw	1
  2941  01BF  00F4               	movwf	??___lwdiv
  2942  01C0  0874               	movf	??___lwdiv,w
  2943  01C1  07F7               	addwf	___lwdiv@counter,f
  2944  01C2  29B5               	goto	l1370
  2945  01C3                     l1372:	
  2946  01C3  3001               	movlw	1
  2947  01C4                     u1015:	
  2948  01C4  1003               	clrc
  2949  01C5  0DF5               	rlf	___lwdiv@quotient,f
  2950  01C6  0DF6               	rlf	___lwdiv@quotient+1,f
  2951  01C7  3EFF               	addlw	-1
  2952  01C8  1D03               	skipz
  2953  01C9  29C4               	goto	u1015
  2954  01CA  0871               	movf	___lwdiv@divisor+1,w
  2955  01CB  0273               	subwf	___lwdiv@dividend+1,w
  2956  01CC  1D03               	skipz
  2957  01CD  29D0               	goto	u1025
  2958  01CE  0870               	movf	___lwdiv@divisor,w
  2959  01CF  0272               	subwf	___lwdiv@dividend,w
  2960  01D0                     u1025:	
  2961  01D0  1C03               	skipc
  2962  01D1  29D9               	goto	l1378
  2963  01D2  0870               	movf	___lwdiv@divisor,w
  2964  01D3  02F2               	subwf	___lwdiv@dividend,f
  2965  01D4  0871               	movf	___lwdiv@divisor+1,w
  2966  01D5  1C03               	skipc
  2967  01D6  03F3               	decf	___lwdiv@dividend+1,f
  2968  01D7  02F3               	subwf	___lwdiv@dividend+1,f
  2969  01D8  1475               	bsf	___lwdiv@quotient,0
  2970  01D9                     l1378:	
  2971  01D9  3001               	movlw	1
  2972  01DA                     u1035:	
  2973  01DA  1003               	clrc
  2974  01DB  0CF1               	rrf	___lwdiv@divisor+1,f
  2975  01DC  0CF0               	rrf	___lwdiv@divisor,f
  2976  01DD  3EFF               	addlw	-1
  2977  01DE  1D03               	skipz
  2978  01DF  29DA               	goto	u1035
  2979  01E0  3001               	movlw	1
  2980  01E1  02F7               	subwf	___lwdiv@counter,f
  2981  01E2  1D03               	btfss	3,2
  2982  01E3  29C3               	goto	l1372
  2983  01E4                     l1382:	
  2984  01E4  0876               	movf	___lwdiv@quotient+1,w
  2985  01E5  00F1               	movwf	?___lwdiv+1
  2986  01E6  0875               	movf	___lwdiv@quotient,w
  2987  01E7  00F0               	movwf	?___lwdiv
  2988  01E8  0008               	return
  2989  01E9                     __end_of___lwdiv:	
  2990                           
  2991                           	psect	text10
  2992  0174                     __ptext10:	
  2993 ;; *************** function _Read_EEPROM *****************
  2994 ;; Defined at:
  2995 ;;		line 296 in file "mainbrew.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;  b1              1    wreg     unsigned char 
  2998 ;;  b2              1    6[COMMON] unsigned char 
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;  b1              1    0[BANK0 ] unsigned char 
  3001 ;;  c2              2    3[BANK0 ] unsigned int 
  3002 ;;  c1              2    1[BANK0 ] unsigned int 
  3003 ;; Return value:  Size  Location     Type
  3004 ;;                  2    6[COMMON] unsigned int 
  3005 ;; Registers used:
  3006 ;;		wreg, status,2, status,0, pclath, cstack
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 0/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3012 ;;      Params:         2       0       0       0       0
  3013 ;;      Locals:         0       5       0       0       0
  3014 ;;      Temps:          2       0       0       0       0
  3015 ;;      Totals:         4       5       0       0       0
  3016 ;;Total ram usage:        9 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; Hardware stack levels required when called:    1
  3019 ;; This function calls:
  3020 ;;		___wmul
  3021 ;;		_eeprom_read
  3022 ;; This function is called by:
  3023 ;;		_main
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           
  3028                           ;psect for function _Read_EEPROM
  3029  0174                     _Read_EEPROM:	
  3030                           
  3031                           ;incstack = 0
  3032                           ; Regs used in _Read_EEPROM: [wreg+status,2+status,0+pclath+cstack]
  3033                           ;Read_EEPROM@b1 stored from wreg
  3034  0174  1283               	bcf	3,5	;RP0=0, select bank0
  3035  0175  1303               	bcf	3,6	;RP1=0, select bank0
  3036  0176  00A0               	movwf	Read_EEPROM@b1
  3037                           
  3038                           ;mainbrew.c: 298: unsigned int c1=0,c2=0;
  3039  0177  01A1               	clrf	Read_EEPROM@c1
  3040  0178  01A2               	clrf	Read_EEPROM@c1+1
  3041  0179  01A3               	clrf	Read_EEPROM@c2
  3042  017A  01A4               	clrf	Read_EEPROM@c2+1
  3043                           
  3044                           ;mainbrew.c: 299: c1=eeprom_read(b1);
  3045  017B  0820               	movf	Read_EEPROM@b1,w
  3046  017C  120A  118A  20BB  120A  118A  	fcall	_eeprom_read
  3047  0181  00F8               	movwf	??_Read_EEPROM
  3048  0182  01F9               	clrf	??_Read_EEPROM+1
  3049  0183  0878               	movf	??_Read_EEPROM,w
  3050  0184  1283               	bcf	3,5	;RP0=0, select bank0
  3051  0185  1303               	bcf	3,6	;RP1=0, select bank0
  3052  0186  00A1               	movwf	Read_EEPROM@c1
  3053  0187  0879               	movf	??_Read_EEPROM+1,w
  3054  0188  00A2               	movwf	Read_EEPROM@c1+1
  3055                           
  3056                           ;mainbrew.c: 300: c2=eeprom_read(b2);
  3057  0189  0876               	movf	Read_EEPROM@b2,w
  3058  018A  120A  118A  20BB  120A  118A  	fcall	_eeprom_read
  3059  018F  00F8               	movwf	??_Read_EEPROM
  3060  0190  01F9               	clrf	??_Read_EEPROM+1
  3061  0191  0878               	movf	??_Read_EEPROM,w
  3062  0192  1283               	bcf	3,5	;RP0=0, select bank0
  3063  0193  1303               	bcf	3,6	;RP1=0, select bank0
  3064  0194  00A3               	movwf	Read_EEPROM@c2
  3065  0195  0879               	movf	??_Read_EEPROM+1,w
  3066  0196  00A4               	movwf	Read_EEPROM@c2+1
  3067                           
  3068                           ;mainbrew.c: 301: return ((c1*10)+c2);
  3069  0197  0822               	movf	Read_EEPROM@c1+1,w
  3070  0198  00F1               	movwf	___wmul@multiplier+1
  3071  0199  0821               	movf	Read_EEPROM@c1,w
  3072  019A  00F0               	movwf	___wmul@multiplier
  3073  019B  300A               	movlw	10
  3074  019C  00F2               	movwf	___wmul@multiplicand
  3075  019D  3000               	movlw	0
  3076  019E  00F3               	movwf	___wmul@multiplicand+1
  3077  019F  120A  158A  2740   	fcall	___wmul
  3078  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  3079  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  3080  01A4  0823               	movf	Read_EEPROM@c2,w
  3081  01A5  0770               	addwf	?___wmul,w
  3082  01A6  00F6               	movwf	?_Read_EEPROM
  3083  01A7  0824               	movf	Read_EEPROM@c2+1,w
  3084  01A8  1803               	skipnc
  3085  01A9  0A24               	incf	Read_EEPROM@c2+1,w
  3086  01AA  0771               	addwf	?___wmul+1,w
  3087  01AB  00F7               	movwf	?_Read_EEPROM+1
  3088  01AC  0008               	return
  3089  01AD                     __end_of_Read_EEPROM:	
  3090                           
  3091                           	psect	text11
  3092  00BB                     __ptext11:	
  3093 ;; *************** function _eeprom_read *****************
  3094 ;; Defined at:
  3095 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\pic\eeread.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;  addr            1    wreg     unsigned char 
  3098 ;; Auto vars:     Size  Location     Type
  3099 ;;  addr            1    1[COMMON] unsigned char 
  3100 ;; Return value:  Size  Location     Type
  3101 ;;                  1    wreg      unsigned char 
  3102 ;; Registers used:
  3103 ;;		wreg, status,2, status,0
  3104 ;; Tracked objects:
  3105 ;;		On entry : 0/0
  3106 ;;		On exit  : 0/0
  3107 ;;		Unchanged: 0/0
  3108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3109 ;;      Params:         0       0       0       0       0
  3110 ;;      Locals:         1       0       0       0       0
  3111 ;;      Temps:          1       0       0       0       0
  3112 ;;      Totals:         2       0       0       0       0
  3113 ;;Total ram usage:        2 bytes
  3114 ;; Hardware stack levels used:    1
  3115 ;; This function calls:
  3116 ;;		Nothing
  3117 ;; This function is called by:
  3118 ;;		_Read_EEPROM
  3119 ;; This function uses a non-reentrant model
  3120 ;;
  3121                           
  3122                           
  3123                           ;psect for function _eeprom_read
  3124  00BB                     _eeprom_read:	
  3125                           
  3126                           ;incstack = 0
  3127                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  3128                           ;eeprom_read@addr stored from wreg
  3129  00BB  00F1               	movwf	eeprom_read@addr
  3130  00BC                     l208:	
  3131  00BC  0064               	clrwdt	;# 
  3132  00BD  1683               	bsf	3,5	;RP0=1, select bank3
  3133  00BE  1703               	bsf	3,6	;RP1=1, select bank3
  3134  00BF  188C               	btfsc	12,1	;volsfr
  3135  00C0  28BC               	goto	l208
  3136  00C1  0871               	movf	eeprom_read@addr,w
  3137  00C2  1283               	bcf	3,5	;RP0=0, select bank2
  3138  00C3  1703               	bsf	3,6	;RP1=1, select bank2
  3139  00C4  008D               	movwf	13	;volatile
  3140  00C5  303F               	movlw	63
  3141  00C6  00F0               	movwf	??_eeprom_read
  3142  00C7  0870               	movf	??_eeprom_read,w
  3143  00C8  1683               	bsf	3,5	;RP0=1, select bank3
  3144  00C9  1703               	bsf	3,6	;RP1=1, select bank3
  3145  00CA  058C               	andwf	12,f	;volsfr
  3146  00CB  140C               	bsf	12,0	;volsfr
  3147  00CC  1003               	clrc
  3148  00CD  180C               	btfsc	12,0	;volsfr
  3149  00CE  1403               	setc
  3150  00CF  3000               	movlw	0
  3151  00D0  1803               	skipnc
  3152  00D1  3001               	movlw	1
  3153  00D2  1283               	bcf	3,5	;RP0=0, select bank2
  3154  00D3  1703               	bsf	3,6	;RP1=1, select bank2
  3155  00D4  080C               	movf	12,w	;volatile
  3156  00D5  0008               	return
  3157  00D6                     __end_of_eeprom_read:	
  3158                           
  3159                           	psect	text12
  3160  0F40                     __ptext12:	
  3161 ;; *************** function ___wmul *****************
  3162 ;; Defined at:
  3163 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\Umul16.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;  multiplier      2    0[COMMON] unsigned int 
  3166 ;;  multiplicand    2    2[COMMON] unsigned int 
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;  product         2    4[COMMON] unsigned int 
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  2    0[COMMON] unsigned int 
  3171 ;; Registers used:
  3172 ;;		wreg, status,2, status,0
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3178 ;;      Params:         4       0       0       0       0
  3179 ;;      Locals:         2       0       0       0       0
  3180 ;;      Temps:          0       0       0       0       0
  3181 ;;      Totals:         6       0       0       0       0
  3182 ;;Total ram usage:        6 bytes
  3183 ;; Hardware stack levels used:    1
  3184 ;; This function calls:
  3185 ;;		Nothing
  3186 ;; This function is called by:
  3187 ;;		_Read_EEPROM
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191                           
  3192                           ;psect for function ___wmul
  3193  0F40                     ___wmul:	
  3194                           
  3195                           ;incstack = 0
  3196                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3197  0F40  01F4               	clrf	___wmul@product
  3198  0F41  01F5               	clrf	___wmul@product+1
  3199  0F42                     l1348:	
  3200  0F42  1C70               	btfss	___wmul@multiplier,0
  3201  0F43  2F4A               	goto	l320
  3202  0F44  0872               	movf	___wmul@multiplicand,w
  3203  0F45  07F4               	addwf	___wmul@product,f
  3204  0F46  1803               	skipnc
  3205  0F47  0AF5               	incf	___wmul@product+1,f
  3206  0F48  0873               	movf	___wmul@multiplicand+1,w
  3207  0F49  07F5               	addwf	___wmul@product+1,f
  3208  0F4A                     l320:	
  3209  0F4A  3001               	movlw	1
  3210  0F4B                     u955:	
  3211  0F4B  1003               	clrc
  3212  0F4C  0DF2               	rlf	___wmul@multiplicand,f
  3213  0F4D  0DF3               	rlf	___wmul@multiplicand+1,f
  3214  0F4E  3EFF               	addlw	-1
  3215  0F4F  1D03               	skipz
  3216  0F50  2F4B               	goto	u955
  3217  0F51  3001               	movlw	1
  3218  0F52                     u965:	
  3219  0F52  1003               	clrc
  3220  0F53  0CF1               	rrf	___wmul@multiplier+1,f
  3221  0F54  0CF0               	rrf	___wmul@multiplier,f
  3222  0F55  3EFF               	addlw	-1
  3223  0F56  1D03               	skipz
  3224  0F57  2F52               	goto	u965
  3225  0F58  0870               	movf	___wmul@multiplier,w
  3226  0F59  0471               	iorwf	___wmul@multiplier+1,w
  3227  0F5A  1D03               	btfss	3,2
  3228  0F5B  2F42               	goto	l1348
  3229  0F5C  0875               	movf	___wmul@product+1,w
  3230  0F5D  00F1               	movwf	?___wmul+1
  3231  0F5E  0874               	movf	___wmul@product,w
  3232  0F5F  00F0               	movwf	?___wmul
  3233  0F60  0008               	return
  3234  0F61                     __end_of___wmul:	
  3235                           
  3236                           	psect	text13
  3237  0F61                     __ptext13:	
  3238 ;; *************** function _Lcd_Write_String *****************
  3239 ;; Defined at:
  3240 ;;		line 150 in file "mainbrew.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  a               1    wreg     PTR const unsigned char 
  3243 ;;		 -> STR_20(8), STR_19(5), STR_18(2), STR_17(13), 
  3244 ;;		 -> STR_16(2), STR_15(14), STR_14(14), STR_13(2), 
  3245 ;;		 -> STR_12(14), STR_11(14), STR_10(14), STR_9(14), 
  3246 ;;		 -> STR_8(13), STR_7(15), STR_6(15), STR_5(17), 
  3247 ;;		 -> STR_4(17), STR_3(17), STR_2(13), STR_1(12), 
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;  a               1    7[COMMON] PTR const unsigned char 
  3250 ;;		 -> STR_20(8), STR_19(5), STR_18(2), STR_17(13), 
  3251 ;;		 -> STR_16(2), STR_15(14), STR_14(14), STR_13(2), 
  3252 ;;		 -> STR_12(14), STR_11(14), STR_10(14), STR_9(14), 
  3253 ;;		 -> STR_8(13), STR_7(15), STR_6(15), STR_5(17), 
  3254 ;;		 -> STR_4(17), STR_3(17), STR_2(13), STR_1(12), 
  3255 ;;  i               2    5[COMMON] int 
  3256 ;; Return value:  Size  Location     Type
  3257 ;;                  1    wreg      void 
  3258 ;; Registers used:
  3259 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3260 ;; Tracked objects:
  3261 ;;		On entry : 0/0
  3262 ;;		On exit  : 0/0
  3263 ;;		Unchanged: 0/0
  3264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3265 ;;      Params:         0       0       0       0       0
  3266 ;;      Locals:         3       0       0       0       0
  3267 ;;      Temps:          0       0       0       0       0
  3268 ;;      Totals:         3       0       0       0       0
  3269 ;;Total ram usage:        3 bytes
  3270 ;; Hardware stack levels used:    1
  3271 ;; Hardware stack levels required when called:    2
  3272 ;; This function calls:
  3273 ;;		_Lcd_Write_Char
  3274 ;; This function is called by:
  3275 ;;		_main
  3276 ;;		_relaystatus
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           
  3281                           ;psect for function _Lcd_Write_String
  3282  0F61                     _Lcd_Write_String:	
  3283                           
  3284                           ;incstack = 0
  3285                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3286                           ;Lcd_Write_String@a stored from wreg
  3287  0F61  00F7               	movwf	Lcd_Write_String@a
  3288                           
  3289                           ;mainbrew.c: 154: int i;
  3290                           ;mainbrew.c: 155: for(i=0;a[i]!='\0';i++)
  3291  0F62  01F5               	clrf	Lcd_Write_String@i
  3292  0F63  01F6               	clrf	Lcd_Write_String@i+1
  3293  0F64                     l1446:	
  3294  0F64  0875               	movf	Lcd_Write_String@i,w
  3295  0F65  0777               	addwf	Lcd_Write_String@a,w
  3296  0F66  0084               	movwf	4
  3297  0F67  120A  118A  2003  120A  158A  	fcall	stringdir
  3298  0F6C  3A00               	xorlw	0
  3299  0F6D  1903               	btfsc	3,2
  3300  0F6E  0008               	return
  3301                           
  3302                           ;mainbrew.c: 156: Lcd_Write_Char(a[i]);
  3303  0F6F  0875               	movf	Lcd_Write_String@i,w
  3304  0F70  0777               	addwf	Lcd_Write_String@a,w
  3305  0F71  0084               	movwf	4
  3306  0F72  120A  118A  2003  120A  158A  	fcall	stringdir
  3307  0F77  120A  118A  213D  120A  158A  	fcall	_Lcd_Write_Char
  3308  0F7C  3001               	movlw	1
  3309  0F7D  07F5               	addwf	Lcd_Write_String@i,f
  3310  0F7E  1803               	skipnc
  3311  0F7F  0AF6               	incf	Lcd_Write_String@i+1,f
  3312  0F80  3000               	movlw	0
  3313  0F81  07F6               	addwf	Lcd_Write_String@i+1,f
  3314  0F82  2F64               	goto	l1446
  3315  0F83                     __end_of_Lcd_Write_String:	
  3316                           
  3317                           	psect	text14
  3318  013D                     __ptext14:	
  3319 ;; *************** function _Lcd_Write_Char *****************
  3320 ;; Defined at:
  3321 ;;		line 134 in file "mainbrew.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;  a               1    wreg     unsigned char 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;  a               1    4[COMMON] unsigned char 
  3326 ;;  y               1    3[COMMON] unsigned char 
  3327 ;;  temp            1    2[COMMON] unsigned char 
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  1    wreg      void 
  3330 ;; Registers used:
  3331 ;;		wreg, status,2, status,0, pclath, cstack
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3337 ;;      Params:         0       0       0       0       0
  3338 ;;      Locals:         3       0       0       0       0
  3339 ;;      Temps:          1       0       0       0       0
  3340 ;;      Totals:         4       0       0       0       0
  3341 ;;Total ram usage:        4 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:    1
  3344 ;; This function calls:
  3345 ;;		_Lcd_Port
  3346 ;; This function is called by:
  3347 ;;		_Lcd_Write_String
  3348 ;;		_lcddisplay
  3349 ;;		_main
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           
  3354                           ;psect for function _Lcd_Write_Char
  3355  013D                     _Lcd_Write_Char:	
  3356                           
  3357                           ;incstack = 0
  3358                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3359                           ;Lcd_Write_Char@a stored from wreg
  3360  013D  00F4               	movwf	Lcd_Write_Char@a
  3361                           
  3362                           ;mainbrew.c: 136: char temp,y;
  3363                           ;mainbrew.c: 137: temp = a&0x0F;
  3364  013E  0874               	movf	Lcd_Write_Char@a,w
  3365  013F  390F               	andlw	15
  3366  0140  00F1               	movwf	??_Lcd_Write_Char
  3367  0141  0871               	movf	??_Lcd_Write_Char,w
  3368  0142  00F2               	movwf	Lcd_Write_Char@temp
  3369                           
  3370                           ;mainbrew.c: 138: y = a&0xF0;
  3371  0143  0874               	movf	Lcd_Write_Char@a,w
  3372  0144  39F0               	andlw	240
  3373  0145  00F1               	movwf	??_Lcd_Write_Char
  3374  0146  0871               	movf	??_Lcd_Write_Char,w
  3375  0147  00F3               	movwf	Lcd_Write_Char@y
  3376                           
  3377                           ;mainbrew.c: 139: RC4 = 1;
  3378  0148  1283               	bcf	3,5	;RP0=0, select bank0
  3379  0149  1303               	bcf	3,6	;RP1=0, select bank0
  3380  014A  1607               	bsf	7,4	;volatile
  3381                           
  3382                           ;mainbrew.c: 140: Lcd_Port(y>>4);
  3383  014B  0873               	movf	Lcd_Write_Char@y,w
  3384  014C  00F1               	movwf	??_Lcd_Write_Char
  3385  014D  3004               	movlw	4
  3386  014E                     u805:	
  3387  014E  1003               	clrc
  3388  014F  0CF1               	rrf	??_Lcd_Write_Char,f
  3389  0150  3EFF               	addlw	-1
  3390  0151  1D03               	skipz
  3391  0152  294E               	goto	u805
  3392  0153  0871               	movf	??_Lcd_Write_Char,w
  3393  0154  120A  158A  270C  120A  118A  	fcall	_Lcd_Port
  3394                           
  3395                           ;mainbrew.c: 141: RC5 = 1;
  3396  0159  1283               	bcf	3,5	;RP0=0, select bank0
  3397  015A  1303               	bcf	3,6	;RP1=0, select bank0
  3398  015B  1687               	bsf	7,5	;volatile
  3399                           
  3400                           ;mainbrew.c: 142: _delay((unsigned long)((40)*(4000000/4000000.0)));
  3401  015C  300D               	movlw	13
  3402  015D  00F1               	movwf	??_Lcd_Write_Char
  3403  015E                     u1677:	
  3404  015E  0BF1               	decfsz	??_Lcd_Write_Char,f
  3405  015F  295E               	goto	u1677
  3406                           
  3407                           ;mainbrew.c: 143: RC5 = 0;
  3408  0160  1283               	bcf	3,5	;RP0=0, select bank0
  3409  0161  1303               	bcf	3,6	;RP1=0, select bank0
  3410  0162  1287               	bcf	7,5	;volatile
  3411                           
  3412                           ;mainbrew.c: 144: Lcd_Port(temp);
  3413  0163  0872               	movf	Lcd_Write_Char@temp,w
  3414  0164  120A  158A  270C  120A  118A  	fcall	_Lcd_Port
  3415                           
  3416                           ;mainbrew.c: 145: RC5 = 1;
  3417  0169  1283               	bcf	3,5	;RP0=0, select bank0
  3418  016A  1303               	bcf	3,6	;RP1=0, select bank0
  3419  016B  1687               	bsf	7,5	;volatile
  3420                           
  3421                           ;mainbrew.c: 146: _delay((unsigned long)((40)*(4000000/4000000.0)));
  3422  016C  300D               	movlw	13
  3423  016D  00F1               	movwf	??_Lcd_Write_Char
  3424  016E                     u1687:	
  3425  016E  0BF1               	decfsz	??_Lcd_Write_Char,f
  3426  016F  296E               	goto	u1687
  3427                           
  3428                           ;mainbrew.c: 147: RC5 = 0;
  3429  0170  1283               	bcf	3,5	;RP0=0, select bank0
  3430  0171  1303               	bcf	3,6	;RP1=0, select bank0
  3431  0172  1287               	bcf	7,5	;volatile
  3432  0173  0008               	return
  3433  0174                     __end_of_Lcd_Write_Char:	
  3434                           
  3435                           	psect	text15
  3436  0226                     __ptext15:	
  3437 ;; *************** function _Lcd_Set_Cursor *****************
  3438 ;; Defined at:
  3439 ;;		line 94 in file "mainbrew.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  a               1    wreg     unsigned char 
  3442 ;;  b               1    4[COMMON] unsigned char 
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;  a               1    7[COMMON] unsigned char 
  3445 ;;  temp            1   10[COMMON] unsigned char 
  3446 ;;  y               1    9[COMMON] unsigned char 
  3447 ;;  z               1    8[COMMON] unsigned char 
  3448 ;; Return value:  Size  Location     Type
  3449 ;;                  1    wreg      void 
  3450 ;; Registers used:
  3451 ;;		wreg, status,2, status,0, pclath, cstack
  3452 ;; Tracked objects:
  3453 ;;		On entry : 0/0
  3454 ;;		On exit  : 0/0
  3455 ;;		Unchanged: 0/0
  3456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3457 ;;      Params:         1       0       0       0       0
  3458 ;;      Locals:         4       0       0       0       0
  3459 ;;      Temps:          2       0       0       0       0
  3460 ;;      Totals:         7       0       0       0       0
  3461 ;;Total ram usage:        7 bytes
  3462 ;; Hardware stack levels used:    1
  3463 ;; Hardware stack levels required when called:    2
  3464 ;; This function calls:
  3465 ;;		_Lcd_Cmd
  3466 ;; This function is called by:
  3467 ;;		_main
  3468 ;; This function uses a non-reentrant model
  3469 ;;
  3470                           
  3471                           
  3472                           ;psect for function _Lcd_Set_Cursor
  3473  0226                     _Lcd_Set_Cursor:	
  3474                           
  3475                           ;incstack = 0
  3476                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3477                           ;Lcd_Set_Cursor@a stored from wreg
  3478  0226  00F7               	movwf	Lcd_Set_Cursor@a
  3479                           
  3480                           ;mainbrew.c: 96: char temp,z,y;
  3481                           ;mainbrew.c: 97: if(a == 1)
  3482  0227  0377               	decf	Lcd_Set_Cursor@a,w
  3483  0228  1D03               	btfss	3,2
  3484  0229  2A4B               	goto	l1420
  3485                           
  3486                           ;mainbrew.c: 98: {
  3487                           ;mainbrew.c: 99: temp = 0x80 + b - 1;
  3488  022A  0874               	movf	Lcd_Set_Cursor@b,w
  3489  022B  3E7F               	addlw	127
  3490  022C  00F5               	movwf	??_Lcd_Set_Cursor
  3491  022D  0875               	movf	??_Lcd_Set_Cursor,w
  3492  022E  00FA               	movwf	Lcd_Set_Cursor@temp
  3493                           
  3494                           ;mainbrew.c: 100: z = temp>>4;
  3495  022F  087A               	movf	Lcd_Set_Cursor@temp,w
  3496  0230  00F5               	movwf	??_Lcd_Set_Cursor
  3497  0231  3004               	movlw	4
  3498  0232                     u1125:	
  3499  0232  1003               	clrc
  3500  0233  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3501  0234  3EFF               	addlw	-1
  3502  0235  1D03               	skipz
  3503  0236  2A32               	goto	u1125
  3504  0237  0875               	movf	??_Lcd_Set_Cursor,w
  3505  0238  00F6               	movwf	??_Lcd_Set_Cursor+1
  3506  0239  0876               	movf	??_Lcd_Set_Cursor+1,w
  3507  023A  00F8               	movwf	Lcd_Set_Cursor@z
  3508                           
  3509                           ;mainbrew.c: 101: y = temp & 0x0F;
  3510  023B  087A               	movf	Lcd_Set_Cursor@temp,w
  3511  023C  390F               	andlw	15
  3512  023D  00F5               	movwf	??_Lcd_Set_Cursor
  3513  023E  0875               	movf	??_Lcd_Set_Cursor,w
  3514  023F  00F9               	movwf	Lcd_Set_Cursor@y
  3515                           
  3516                           ;mainbrew.c: 102: Lcd_Cmd(z);
  3517  0240  0878               	movf	Lcd_Set_Cursor@z,w
  3518  0241  120A  158A  2726  120A  118A  	fcall	_Lcd_Cmd
  3519                           
  3520                           ;mainbrew.c: 103: Lcd_Cmd(y);
  3521  0246  0879               	movf	Lcd_Set_Cursor@y,w
  3522  0247  120A  158A  2726   	fcall	_Lcd_Cmd
  3523                           
  3524                           ;mainbrew.c: 104: }
  3525  024A  0008               	return
  3526  024B                     l1420:	
  3527                           
  3528                           ;mainbrew.c: 105: else if(a == 2)
  3529  024B  3002               	movlw	2
  3530  024C  0677               	xorwf	Lcd_Set_Cursor@a,w
  3531  024D  1D03               	btfss	3,2
  3532  024E  0008               	return
  3533                           
  3534                           ;mainbrew.c: 106: {
  3535                           ;mainbrew.c: 107: temp = 0xC0 + b - 1;
  3536  024F  0874               	movf	Lcd_Set_Cursor@b,w
  3537  0250  3EBF               	addlw	191
  3538  0251  00F5               	movwf	??_Lcd_Set_Cursor
  3539  0252  0875               	movf	??_Lcd_Set_Cursor,w
  3540  0253  00FA               	movwf	Lcd_Set_Cursor@temp
  3541                           
  3542                           ;mainbrew.c: 108: z = temp>>4;
  3543  0254  087A               	movf	Lcd_Set_Cursor@temp,w
  3544  0255  00F5               	movwf	??_Lcd_Set_Cursor
  3545  0256  3004               	movlw	4
  3546  0257                     u1145:	
  3547  0257  1003               	clrc
  3548  0258  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3549  0259  3EFF               	addlw	-1
  3550  025A  1D03               	skipz
  3551  025B  2A57               	goto	u1145
  3552  025C  0875               	movf	??_Lcd_Set_Cursor,w
  3553  025D  00F6               	movwf	??_Lcd_Set_Cursor+1
  3554  025E  0876               	movf	??_Lcd_Set_Cursor+1,w
  3555  025F  00F8               	movwf	Lcd_Set_Cursor@z
  3556                           
  3557                           ;mainbrew.c: 109: y = temp & 0x0F;
  3558  0260  087A               	movf	Lcd_Set_Cursor@temp,w
  3559  0261  390F               	andlw	15
  3560  0262  00F5               	movwf	??_Lcd_Set_Cursor
  3561  0263  0875               	movf	??_Lcd_Set_Cursor,w
  3562  0264  00F9               	movwf	Lcd_Set_Cursor@y
  3563                           
  3564                           ;mainbrew.c: 110: Lcd_Cmd(z);
  3565  0265  0878               	movf	Lcd_Set_Cursor@z,w
  3566  0266  120A  158A  2726  120A  118A  	fcall	_Lcd_Cmd
  3567                           
  3568                           ;mainbrew.c: 111: Lcd_Cmd(y);
  3569  026B  0879               	movf	Lcd_Set_Cursor@y,w
  3570  026C  120A  158A  2726   	fcall	_Lcd_Cmd
  3571  026F  0008               	return
  3572  0270                     __end_of_Lcd_Set_Cursor:	
  3573                           
  3574                           	psect	text16
  3575  02CA                     __ptext16:	
  3576 ;; *************** function _Lcd_Init *****************
  3577 ;; Defined at:
  3578 ;;		line 115 in file "mainbrew.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;		None
  3581 ;; Auto vars:     Size  Location     Type
  3582 ;;		None
  3583 ;; Return value:  Size  Location     Type
  3584 ;;                  1    wreg      void 
  3585 ;; Registers used:
  3586 ;;		wreg, status,2, status,0, pclath, cstack
  3587 ;; Tracked objects:
  3588 ;;		On entry : 0/0
  3589 ;;		On exit  : 0/0
  3590 ;;		Unchanged: 0/0
  3591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3592 ;;      Params:         0       0       0       0       0
  3593 ;;      Locals:         0       0       0       0       0
  3594 ;;      Temps:          2       0       0       0       0
  3595 ;;      Totals:         2       0       0       0       0
  3596 ;;Total ram usage:        2 bytes
  3597 ;; Hardware stack levels used:    1
  3598 ;; Hardware stack levels required when called:    2
  3599 ;; This function calls:
  3600 ;;		_Lcd_Cmd
  3601 ;;		_Lcd_Port
  3602 ;; This function is called by:
  3603 ;;		_main
  3604 ;; This function uses a non-reentrant model
  3605 ;;
  3606                           
  3607                           
  3608                           ;psect for function _Lcd_Init
  3609  02CA                     _Lcd_Init:	
  3610                           
  3611                           ;mainbrew.c: 117: Lcd_Port(0x00);
  3612                           
  3613                           ;incstack = 0
  3614                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3615  02CA  3000               	movlw	0
  3616  02CB  120A  158A  270C  120A  118A  	fcall	_Lcd_Port
  3617                           
  3618                           ;mainbrew.c: 118: _delay((unsigned long)((20)*(4000000/4000.0)));
  3619  02D0  301A               	movlw	26
  3620  02D1  00F5               	movwf	??_Lcd_Init+1
  3621  02D2  30F8               	movlw	248
  3622  02D3  00F4               	movwf	??_Lcd_Init
  3623  02D4                     u1697:	
  3624  02D4  0BF4               	decfsz	??_Lcd_Init,f
  3625  02D5  2AD4               	goto	u1697
  3626  02D6  0BF5               	decfsz	??_Lcd_Init+1,f
  3627  02D7  2AD4               	goto	u1697
  3628  02D8  0000               	nop
  3629                           
  3630                           ;mainbrew.c: 119: Lcd_Cmd(0x03);
  3631  02D9  3003               	movlw	3
  3632  02DA  120A  158A  2726  120A  118A  	fcall	_Lcd_Cmd
  3633                           
  3634                           ;mainbrew.c: 120: _delay((unsigned long)((5)*(4000000/4000.0)));
  3635  02DF  3007               	movlw	7
  3636  02E0  00F5               	movwf	??_Lcd_Init+1
  3637  02E1  307D               	movlw	125
  3638  02E2  00F4               	movwf	??_Lcd_Init
  3639  02E3                     u1707:	
  3640  02E3  0BF4               	decfsz	??_Lcd_Init,f
  3641  02E4  2AE3               	goto	u1707
  3642  02E5  0BF5               	decfsz	??_Lcd_Init+1,f
  3643  02E6  2AE3               	goto	u1707
  3644                           
  3645                           ;mainbrew.c: 121: Lcd_Cmd(0x03);
  3646  02E7  3003               	movlw	3
  3647  02E8  120A  158A  2726  120A  118A  	fcall	_Lcd_Cmd
  3648                           
  3649                           ;mainbrew.c: 122: _delay((unsigned long)((11)*(4000000/4000.0)));
  3650  02ED  300F               	movlw	15
  3651  02EE  00F5               	movwf	??_Lcd_Init+1
  3652  02EF  3047               	movlw	71
  3653  02F0  00F4               	movwf	??_Lcd_Init
  3654  02F1                     u1717:	
  3655  02F1  0BF4               	decfsz	??_Lcd_Init,f
  3656  02F2  2AF1               	goto	u1717
  3657  02F3  0BF5               	decfsz	??_Lcd_Init+1,f
  3658  02F4  2AF1               	goto	u1717
  3659  02F5  2AF6               	nop2
  3660                           
  3661                           ;mainbrew.c: 123: Lcd_Cmd(0x03);
  3662  02F6  3003               	movlw	3
  3663  02F7  120A  158A  2726  120A  118A  	fcall	_Lcd_Cmd
  3664                           
  3665                           ;mainbrew.c: 125: Lcd_Cmd(0x02);
  3666  02FC  3002               	movlw	2
  3667  02FD  120A  158A  2726  120A  118A  	fcall	_Lcd_Cmd
  3668                           
  3669                           ;mainbrew.c: 126: Lcd_Cmd(0x02);
  3670  0302  3002               	movlw	2
  3671  0303  120A  158A  2726  120A  118A  	fcall	_Lcd_Cmd
  3672                           
  3673                           ;mainbrew.c: 127: Lcd_Cmd(0x08);
  3674  0308  3008               	movlw	8
  3675  0309  120A  158A  2726  120A  118A  	fcall	_Lcd_Cmd
  3676                           
  3677                           ;mainbrew.c: 128: Lcd_Cmd(0x00);
  3678  030E  3000               	movlw	0
  3679  030F  120A  158A  2726  120A  118A  	fcall	_Lcd_Cmd
  3680                           
  3681                           ;mainbrew.c: 129: Lcd_Cmd(0x0C);
  3682  0314  300C               	movlw	12
  3683  0315  120A  158A  2726  120A  118A  	fcall	_Lcd_Cmd
  3684                           
  3685                           ;mainbrew.c: 130: Lcd_Cmd(0x00);
  3686  031A  3000               	movlw	0
  3687  031B  120A  158A  2726  120A  118A  	fcall	_Lcd_Cmd
  3688                           
  3689                           ;mainbrew.c: 131: Lcd_Cmd(0x06);
  3690  0320  3006               	movlw	6
  3691  0321  120A  158A  2726   	fcall	_Lcd_Cmd
  3692  0324  0008               	return
  3693  0325                     __end_of_Lcd_Init:	
  3694                           
  3695                           	psect	text17
  3696  0F01                     __ptext17:	
  3697 ;; *************** function _Lcd_Clear *****************
  3698 ;; Defined at:
  3699 ;;		line 88 in file "mainbrew.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;		None
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;		None
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  1    wreg      void 
  3706 ;; Registers used:
  3707 ;;		wreg, status,2, status,0, pclath, cstack
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3713 ;;      Params:         0       0       0       0       0
  3714 ;;      Locals:         0       0       0       0       0
  3715 ;;      Temps:          0       0       0       0       0
  3716 ;;      Totals:         0       0       0       0       0
  3717 ;;Total ram usage:        0 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; Hardware stack levels required when called:    2
  3720 ;; This function calls:
  3721 ;;		_Lcd_Cmd
  3722 ;; This function is called by:
  3723 ;;		_main
  3724 ;;		_relaystatus
  3725 ;; This function uses a non-reentrant model
  3726 ;;
  3727                           
  3728                           
  3729                           ;psect for function _Lcd_Clear
  3730  0F01                     _Lcd_Clear:	
  3731                           
  3732                           ;mainbrew.c: 90: Lcd_Cmd(0);
  3733                           
  3734                           ;incstack = 0
  3735                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3736  0F01  3000               	movlw	0
  3737  0F02  120A  158A  2726  120A  158A  	fcall	_Lcd_Cmd
  3738                           
  3739                           ;mainbrew.c: 91: Lcd_Cmd(1);
  3740  0F07  3001               	movlw	1
  3741  0F08  120A  158A  2726   	fcall	_Lcd_Cmd
  3742  0F0B  0008               	return
  3743  0F0C                     __end_of_Lcd_Clear:	
  3744                           
  3745                           	psect	text18
  3746  0F26                     __ptext18:	
  3747 ;; *************** function _Lcd_Cmd *****************
  3748 ;; Defined at:
  3749 ;;		line 79 in file "mainbrew.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;  a               1    wreg     unsigned char 
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;  a               1    3[COMMON] unsigned char 
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  1    wreg      void 
  3756 ;; Registers used:
  3757 ;;		wreg, status,2, status,0, pclath, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3763 ;;      Params:         0       0       0       0       0
  3764 ;;      Locals:         1       0       0       0       0
  3765 ;;      Temps:          2       0       0       0       0
  3766 ;;      Totals:         3       0       0       0       0
  3767 ;;Total ram usage:        3 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    1
  3770 ;; This function calls:
  3771 ;;		_Lcd_Port
  3772 ;; This function is called by:
  3773 ;;		_Lcd_Clear
  3774 ;;		_Lcd_Set_Cursor
  3775 ;;		_Lcd_Init
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           
  3780                           ;psect for function _Lcd_Cmd
  3781  0F26                     _Lcd_Cmd:	
  3782                           
  3783                           ;incstack = 0
  3784                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3785                           ;Lcd_Cmd@a stored from wreg
  3786  0F26  00F3               	movwf	Lcd_Cmd@a
  3787                           
  3788                           ;mainbrew.c: 81: RC4 = 0;
  3789  0F27  1283               	bcf	3,5	;RP0=0, select bank0
  3790  0F28  1303               	bcf	3,6	;RP1=0, select bank0
  3791  0F29  1207               	bcf	7,4	;volatile
  3792                           
  3793                           ;mainbrew.c: 82: Lcd_Port(a);
  3794  0F2A  0873               	movf	Lcd_Cmd@a,w
  3795  0F2B  120A  158A  270C  120A  158A  	fcall	_Lcd_Port
  3796                           
  3797                           ;mainbrew.c: 83: RC5 = 1;
  3798  0F30  1283               	bcf	3,5	;RP0=0, select bank0
  3799  0F31  1303               	bcf	3,6	;RP1=0, select bank0
  3800  0F32  1687               	bsf	7,5	;volatile
  3801                           
  3802                           ;mainbrew.c: 84: _delay((unsigned long)((4)*(4000000/4000.0)));
  3803  0F33  3006               	movlw	6
  3804  0F34  00F2               	movwf	??_Lcd_Cmd+1
  3805  0F35  3030               	movlw	48
  3806  0F36  00F1               	movwf	??_Lcd_Cmd
  3807  0F37                     u1727:	
  3808  0F37  0BF1               	decfsz	??_Lcd_Cmd,f
  3809  0F38  2F37               	goto	u1727
  3810  0F39  0BF2               	decfsz	??_Lcd_Cmd+1,f
  3811  0F3A  2F37               	goto	u1727
  3812  0F3B  0000               	nop
  3813                           
  3814                           ;mainbrew.c: 85: RC5 = 0;
  3815  0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  3816  0F3D  1303               	bcf	3,6	;RP1=0, select bank0
  3817  0F3E  1287               	bcf	7,5	;volatile
  3818  0F3F  0008               	return
  3819  0F40                     __end_of_Lcd_Cmd:	
  3820                           
  3821                           	psect	text19
  3822  0F0C                     __ptext19:	
  3823 ;; *************** function _Lcd_Port *****************
  3824 ;; Defined at:
  3825 ;;		line 57 in file "mainbrew.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;  a               1    wreg     unsigned char 
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;  a               1    0[COMMON] unsigned char 
  3830 ;; Return value:  Size  Location     Type
  3831 ;;                  1    wreg      void 
  3832 ;; Registers used:
  3833 ;;		wreg
  3834 ;; Tracked objects:
  3835 ;;		On entry : 0/0
  3836 ;;		On exit  : 0/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3839 ;;      Params:         0       0       0       0       0
  3840 ;;      Locals:         1       0       0       0       0
  3841 ;;      Temps:          0       0       0       0       0
  3842 ;;      Totals:         1       0       0       0       0
  3843 ;;Total ram usage:        1 bytes
  3844 ;; Hardware stack levels used:    1
  3845 ;; This function calls:
  3846 ;;		Nothing
  3847 ;; This function is called by:
  3848 ;;		_Lcd_Cmd
  3849 ;;		_Lcd_Init
  3850 ;;		_Lcd_Write_Char
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854                           
  3855                           ;psect for function _Lcd_Port
  3856  0F0C                     _Lcd_Port:	
  3857                           
  3858                           ;incstack = 0
  3859                           ; Regs used in _Lcd_Port: [wreg]
  3860                           ;Lcd_Port@a stored from wreg
  3861  0F0C  00F0               	movwf	Lcd_Port@a
  3862                           
  3863                           ;mainbrew.c: 59: if(a & 1)
  3864  0F0D  1C70               	btfss	Lcd_Port@a,0
  3865  0F0E  2F13               	goto	l57
  3866                           
  3867                           ;mainbrew.c: 60: RB0 = 1;
  3868  0F0F  1283               	bcf	3,5	;RP0=0, select bank0
  3869  0F10  1303               	bcf	3,6	;RP1=0, select bank0
  3870  0F11  1406               	bsf	6,0	;volatile
  3871  0F12  2F16               	goto	l58
  3872  0F13                     l57:	
  3873                           
  3874                           ;mainbrew.c: 61: else
  3875                           ;mainbrew.c: 62: RB0 = 0;
  3876  0F13  1283               	bcf	3,5	;RP0=0, select bank0
  3877  0F14  1303               	bcf	3,6	;RP1=0, select bank0
  3878  0F15  1006               	bcf	6,0	;volatile
  3879  0F16                     l58:	
  3880                           
  3881                           ;mainbrew.c: 64: if(a & 2)
  3882  0F16  1CF0               	btfss	Lcd_Port@a,1
  3883  0F17  2F1A               	goto	l59
  3884                           
  3885                           ;mainbrew.c: 65: RB1 = 1;
  3886  0F18  1486               	bsf	6,1	;volatile
  3887  0F19  2F1B               	goto	l60
  3888  0F1A                     l59:	
  3889                           
  3890                           ;mainbrew.c: 66: else
  3891                           ;mainbrew.c: 67: RB1 = 0;
  3892  0F1A  1086               	bcf	6,1	;volatile
  3893  0F1B                     l60:	
  3894                           
  3895                           ;mainbrew.c: 69: if(a & 4)
  3896  0F1B  1D70               	btfss	Lcd_Port@a,2
  3897  0F1C  2F1F               	goto	l61
  3898                           
  3899                           ;mainbrew.c: 70: RB2 = 1;
  3900  0F1D  1506               	bsf	6,2	;volatile
  3901  0F1E  2F20               	goto	l62
  3902  0F1F                     l61:	
  3903                           
  3904                           ;mainbrew.c: 71: else
  3905                           ;mainbrew.c: 72: RB2 = 0;
  3906  0F1F  1106               	bcf	6,2	;volatile
  3907  0F20                     l62:	
  3908                           
  3909                           ;mainbrew.c: 74: if(a & 8)
  3910  0F20  1DF0               	btfss	Lcd_Port@a,3
  3911  0F21  2F24               	goto	l63
  3912                           
  3913                           ;mainbrew.c: 75: RB3 = 1;
  3914  0F22  1586               	bsf	6,3	;volatile
  3915  0F23  0008               	return
  3916  0F24                     l63:	
  3917                           
  3918                           ;mainbrew.c: 76: else
  3919                           ;mainbrew.c: 77: RB3 = 0;
  3920  0F24  1186               	bcf	6,3	;volatile
  3921  0F25  0008               	return
  3922  0F26                     __end_of_Lcd_Port:	
  3923  007E                     btemp	set	126	;btemp
  3924  007E                     wtemp0	set	126


Data Sizes:
    Strings     177
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     24      24
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_20(CODE[8]), STR_19(CODE[5]), STR_18(CODE[2]), STR_17(CODE[13]), 
		 -> STR_16(CODE[2]), STR_15(CODE[14]), STR_14(CODE[14]), STR_13(CODE[2]), 
		 -> STR_12(CODE[14]), STR_11(CODE[14]), STR_10(CODE[14]), STR_9(CODE[14]), 
		 -> STR_8(CODE[13]), STR_7(CODE[15]), STR_6(CODE[15]), STR_5(CODE[17]), 
		 -> STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[13]), STR_1(CODE[12]), 


Critical Paths under _main in COMMON

    _main->_Write_EEPROM
    _main->_checktemp
    _lcddisplay->___lwdiv
    _checktemp->_read
    _checktemp->_write
    _Write_EEPROM->_eeprom_write
    _eeprom_write->___lwdiv
    _Read_EEPROM->___wmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_Read_EEPROM

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0    8918
                                              5 BANK0     19    19      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                        _Read_EEPROM
                       _Write_EEPROM
                          _checktemp
                         _lcddisplay
 ---------------------------------------------------------------------------------
 (1) _lcddisplay                                           2     0      2    2096
                                              8 COMMON     2     0      2
                     _Lcd_Write_Char
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) _checktemp                                           10     8      2     300
                                              4 COMMON    10     8      2
                               _read
                              _reset
                              _write
 ---------------------------------------------------------------------------------
 (2) _write                                                4     4      0     113
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _reset                                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _read                                                 4     4      0      92
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Write_EEPROM                                         5     2      3    1937
                                             11 COMMON     3     0      3
                                              0 BANK0      2     2      0
                            ___lwdiv
                            ___lwmod
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (2) _eeprom_write                                         3     2      1     150
                                              8 COMMON     3     2      1
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     689
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     374
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Read_EEPROM                                          9     7      2     418
                                              6 COMMON     4     2      2
                                              0 BANK0      5     5      0
                             ___wmul
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     198
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     808
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    2076
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Read_EEPROM
     ___wmul
     _eeprom_read
   _Write_EEPROM
     ___lwdiv
     ___lwmod
     _eeprom_write
       ___lwdiv (ARG)
       ___lwmod (ARG)
   _checktemp
     _read
     _reset
     _write
   _lcddisplay
     _Lcd_Write_Char
       _Lcd_Port
     ___lwdiv
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     18      18       5       30.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Dec 02 11:28:06 2017

                        pc 0002                __CFG_CP$OFF 0000                         l60 0F1B  
                       l61 0F1F                         l62 0F20                         l63 0F24  
                       l57 0F13                         l58 0F16                         l59 0F1A  
                       l99 0213                         _RD 0C60                         _WR 0C61  
                       fsr 0004        ___wmul@multiplicand 0072                        l104 00DF  
                      l230 0FA9                        l142 045E                        l143 0464  
                      l320 0F4A                        l208 00BC                        l160 05EF  
                      l137 0453                        l170 06A7                        l155 054A  
                      l173 06ED                        l165 0611                        l183 06F4  
                      l159 05F4                        l177 06CC                        l178 06CE  
                      l187 0722                        l189 07F7                        _GIE 005F  
                      _RA0 0028                        _RA1 0029                        _RB0 0030  
                      _RB1 0031                        _RB2 0032                        _RC0 0038  
                      _RB3 0033                        _RB4 0034                        _RC3 003B  
                      _RB5 0035                        _RC4 003C                        _RB6 0036  
                      _RC5 003D                        _RB7 0037               __CFG_CPD$OFF 0000  
                      u805 014E                        u834 01FC                        u835 01FA  
                      u955 0F4B                        u884 00F3                        u965 0F52  
                      u885 00F1                        u995 01B8                        fsr0 0004  
    __size_of_Write_EEPROM 0034               __CFG_LVP$OFF 0000                       l1300 0221  
                     l1400 0FF0                       l1314 00FA                       l1420 024B  
                     l1404 0FFB                       l1318 0107                       l1370 01B5  
                     l1348 0F42                       l1372 01C3                       l1276 0FA1  
                     l1540 0413                       l1446 0F64                       l1382 01E4  
                     l1702 06C4                       l1622 054C                       l1542 0417  
                     l1552 049B                       l1378 01D9                       l1394 0FD4  
                     l1714 0713                       l1562 044D                main@highval 0036  
                     l1396 0FE2                       l1468 037B                       l1564 0456  
                     l1662 0616                       l1558 0446                       l1578 0467  
                     l1596 04E8                       STR_1 009D                       STR_2 0083  
                     STR_3 0009                       STR_4 002B                       STR_5 001A  
                     STR_6 003C                       STR_7 004B                       STR_8 0090  
                     STR_9 005A                       u1015 01C4                       u1025 01D0  
                     u1035 01DA                       u1125 0232                       u1145 0257  
                     u1065 0FD7                       _IOCB 0096                       u1085 0FE8  
                     u1325 0559                       u1095 0FF1                       u1505 07F0  
                     u1517 03AF                       u1607 020F                       u1527 0404  
                     u1617 021B                       u1385 0626                       u1537 0482  
                     u1707 02E3                       u1627 0F8B                       u1547 04E2  
                     u1717 02F1                       u1637 0F93                       u1557 05CA  
                     u1727 0F37                       u1647 0F9C                       u1495 07E2  
                     u1567 0697                       u1657 0FA3                       u1577 071B  
                     u1667 00FC                       u1587 07D0                       u1677 015E  
                     u1597 0341                       u1687 016E                       u1697 02D4  
                     _WREN 0C62                       _WPUB 0095             ??_eeprom_write 0079  
             __CFG_WRT$OFF 0000          ?_Lcd_Write_String 0070                       _main 0380  
                     _read 00D6                       btemp 007E              ??_Read_EEPROM 0078  
              main@tempval 002E              __CFG_BOREN$ON 0000                       start 0000  
       ??_Lcd_Write_String 0075              __CFG_IESO$OFF 0000            __end_of_Lcd_Cmd 0F40  
             _Write_EEPROM 0109                      ?_main 0070                      ?_read 0070  
                    _EEADR 010D                      STR_10 0068                      STR_11 005A  
                    STR_12 0068                      STR_20 00A9                      STR_13 00B6  
                    STR_14 005A                      STR_15 0068                      STR_16 00B6  
                    STR_17 0076              __CFG_WDTE$OFF 0000                      STR_18 00B8  
                    STR_19 00B1                      _CARRY 0018                      _ANSEL 0188  
          __end_of___lwdiv 01E9            __end_of___lwmod 1000    __size_of_Lcd_Set_Cursor 004A  
                    _TRISA 0085                      _TRISB 0086                      _TRISC 0087  
           __CFG_FCMEN$OFF 0000               main@password 0032                      _reset 0F83  
                    _write 01E9                      read@i 0073                      pclath 000A  
                    status 0003                      wtemp0 007E           __end_of_Lcd_Init 0325  
         __end_of_Lcd_Port 0F26             __CFG_MCLRE$OFF 0000            __initialization 07FC  
             __end_of_main 07FC               __end_of_read 0109        __end_of_Read_EEPROM 01AD  
                   ??_main 0025                     ??_read 0070         __size_of_Lcd_Clear 000B  
           Write_EEPROM@a1 0021             Write_EEPROM@a2 007B                     _EEDATA 010C  
                   _EECON1 018C                     _EECON2 018D                     ?_reset 0070  
                   _ANSELH 0189                     ?_write 0070                     _OSCCON 008F  
                ??_Lcd_Cmd 0071    __size_of_Lcd_Write_Char 0037                     _TRISC3 043B  
           __CFG_PWRTE$OFF 0000       __size_of_eeprom_read 001B                     ___wmul 0F40  
                ??___lwdiv 0074                  ??___lwmod 0074       __end_of_eeprom_write 0FCE  
            lcddisplay@num 0078                     write@i 0073            Lcd_Set_Cursor@a 0077  
          Lcd_Set_Cursor@b 0074            Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078  
  __end_of__initialization 07FC              main@switchsel 0030            eeprom_read@addr 0071  
        __end_of_Lcd_Clear 0F0C                _Read_EEPROM 0174             __pcstackCOMMON 0070  
            __end_of_reset 0FA8         __size_of_checktemp 005B              __end_of_write 0226  
           _Lcd_Set_Cursor 0226          eeprom_write@value 0078                  ?_Lcd_Init 0070  
                ?_Lcd_Port 0070                    ??_reset 0070                    ??_write 0070  
            Read_EEPROM@b1 0020              Read_EEPROM@b2 0076              Read_EEPROM@c1 0021  
            Read_EEPROM@c2 0023                 __pmaintext 0380                    ?___wmul 0070  
__size_of_Lcd_Write_String 0022     __end_of_Lcd_Set_Cursor 0270                 ??_Lcd_Init 0074  
               ??_Lcd_Port 0070                 _lcddisplay 0270              checktemp@temp 007C  
               __stringtab 0003          __end_of_checktemp 0380             _Lcd_Write_Char 013D  
                  _Lcd_Cmd 0F26      __size_of_eeprom_write 0026            __size_of___wmul 0021  
                  ___lwdiv 01AD                    ___lwmod 0FCE            ?_Lcd_Set_Cursor 0074  
                  __ptext1 0270                    __ptext2 0325                    __ptext3 01E9  
                  __ptext4 0F83                    __ptext5 00D6                    __ptext6 0109  
                  __ptext7 0FA8                    __ptext8 0FCE                    __ptext9 01AD  
                  main@prg 002A     __end_of_Lcd_Write_Char 0174       end_of_initialization 07FC  
             _eeprom_write 0FA8                  Lcd_Port@a 0070                ?_lcddisplay 0078  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0077          Lcd_Write_String@i 0075  
            ??_eeprom_read 0070               ?_Read_EEPROM 0076                 main@lowval 0034  
                _Lcd_Clear 0F01             __end_of___wmul 0F61           _Lcd_Write_String 0F61  
      start_initialization 07FC          __size_of_Lcd_Init 005B          __size_of_Lcd_Port 001A  
               read@result 0072                 ?_Lcd_Clear 0070                   ??___wmul 0074  
      __end_of_eeprom_read 00D6              ?_Write_EEPROM 007B        __size_of_lcddisplay 005A  
          Lcd_Write_Char@a 0074            Lcd_Write_Char@y 0073                  ___latbits 0002  
            __pcstackBANK0 0020     __CFG_FOSC$INTRC_CLKOUT 0000           eeprom_write@addr 007A  
                 ?_Lcd_Cmd 0070                  _checktemp 0325           ___lwdiv@dividend 0072  
         ??_Lcd_Set_Cursor 0075             ??_Write_EEPROM 0020                   ?___lwdiv 0070  
                 ?___lwmod 0070                  __pstrings 0003           ___lwdiv@quotient 0075  
           __size_of_reset 0025             __size_of_write 003D             ___wmul@product 0074  
              _eeprom_read 00BB                 ?_checktemp 0074                   Lcd_Cmd@a 0073  
     __size_of_Read_EEPROM 0039                ??_Lcd_Clear 0074             checktemp@tempH 007A  
           checktemp@tempL 0078                __stringbase 0008          ___wmul@multiplier 0070  
         ??_Lcd_Write_Char 0071                   _Lcd_Init 02CA                   _Lcd_Port 0F0C  
             ??_lcddisplay 007A   __end_of_Lcd_Write_String 0F83           __size_of_Lcd_Cmd 001A  
         __size_of___lwdiv 003C         __end_of_lcddisplay 02CA           __size_of___lwmod 0032  
       __end_of__stringtab 0009            ___lwdiv@divisor 0070            ___lwdiv@counter 0077  
                 __ptext10 0174                   __ptext11 00BB                   __ptext12 0F40  
                 __ptext13 0F61                   __ptext14 013D                   __ptext15 0226  
                 __ptext16 02CA                   __ptext17 0F01                   __ptext18 0F26  
                 __ptext19 0F0C          __CFG_BOR4V$BOR40V 0000       __end_of_Write_EEPROM 013D  
            __size_of_main 047C              __size_of_read 0033                ??_checktemp 0076  
   Write_EEPROM@data_value 007C                   main@curs 002C                   main@open 0028  
       Lcd_Write_Char@temp 0072           ___lwmod@dividend 0072                  stringcode 0003  
       Lcd_Set_Cursor@temp 007A                 _OPTION_REG 0081            ___lwmod@divisor 0070  
          ___lwmod@counter 0075                   write@Cmd 0072                   write@WRT 0071  
                 stringdir 0003                   stringtab 0003              ?_eeprom_write 0078  
             ?_eeprom_read 0070  
