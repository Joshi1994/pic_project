

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Dec 23 15:22:35 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F676
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	dabs	1,0x5E,2
    22  0000                     
    23                           ; Version 1.44
    24                           ; Generated 14/09/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F676 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0007                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0019                     	;# 
    72  001E                     	;# 
    73  001F                     	;# 
    74  0081                     	;# 
    75  0085                     	;# 
    76  0087                     	;# 
    77  008C                     	;# 
    78  008E                     	;# 
    79  0090                     	;# 
    80  0091                     	;# 
    81  0095                     	;# 
    82  0095                     	;# 
    83  0096                     	;# 
    84  0096                     	;# 
    85  0099                     	;# 
    86  009A                     	;# 
    87  009A                     	;# 
    88  009B                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009E                     	;# 
    92  009F                     	;# 
    93  0038                     _RC0	set	56
    94  003A                     _RC2	set	58
    95  003D                     _RC5	set	61
    96  0087                     _TRISC	set	135
    97  0091                     _ANSEL	set	145
    98                           
    99                           	psect	strings
   100  0001                     __pstrings:	
   101  0001                     stringtab:	
   102  0001                     __stringtab:	
   103  0001                     stringcode:	
   104                           ;	String table - string pointers are 1 byte each
   105                           
   106  0001                     stringdir:	
   107  0001  3000               	movlw	high stringdir
   108  0002  008A               	movwf	10
   109  0003  0804               	movf	4,w
   110  0004  0A84               	incf	4,f
   111  0005  0782               	addwf	2,f
   112  0006                     __stringbase:	
   113  0006  3400               	retlw	0
   114  0007                     __end_of__stringtab:	
   115  0007                     STR_1:	
   116  0007  3448               	retlw	72	;'H'
   117  0008  3465               	retlw	101	;'e'
   118  0009  346C               	retlw	108	;'l'
   119  000A  346C               	retlw	108	;'l'
   120  000B  346F               	retlw	111	;'o'
   121  000C  346F               	retlw	111	;'o'
   122  000D  346F               	retlw	111	;'o'
   123  000E  3400               	retlw	0
   124                           
   125                           ; #config settings
   126  0000                     
   127                           	psect	cinit
   128  03F8                     start_initialization:	
   129  03F8                     __initialization:	
   130                           
   131                           ; Clear objects allocated to BANK0
   132  03F8  1383               	bcf	3,7	;select IRP bank0
   133  03F9  3040               	movlw	low __pbssBANK0
   134  03FA  0084               	movwf	4
   135  03FB  3054               	movlw	low (__pbssBANK0+20)
   136  03FC  215D               	fcall	clear_ram0
   137  03FD                     end_of_initialization:	
   138                           ;End of C runtime variable initialization code
   139                           
   140  03FD                     __end_of__initialization:	
   141  03FD  0183               	clrf	3
   142  03FE  2A65               	ljmp	_main	;jump to C main() function
   143                           
   144                           	psect	bssBANK0
   145  0040                     __pbssBANK0:	
   146  0040                     _temp:	
   147  0040                     	ds	2
   148  0042                     _Flag:	
   149  0042                     	ds	2
   150  0044                     _RS:	
   151  0044                     	ds	2
   152  0046                     _t:	
   153  0046                     	ds	2
   154  0048                     _N:	
   155  0048                     	ds	2
   156  004A                     _Mask:	
   157  004A                     	ds	2
   158  004C                     _q:	
   159  004C                     	ds	2
   160  004E                     _p:	
   161  004E                     	ds	2
   162  0050                     _High_Nibble:	
   163  0050                     	ds	2
   164  0052                     _Low_Nibble:	
   165  0052                     	ds	2
   166                           
   167                           	psect	clrtext
   168  015D                     clear_ram0:	
   169                           ;	Called with FSR containing the base address, and
   170                           ;	W with the last address+1
   171                           
   172  015D  0064               	clrwdt	;clear the watchdog before getting into this loop
   173  015E                     clrloop0:	
   174  015E  0180               	clrf	0	;clear RAM location pointed to by FSR
   175  015F  0A84               	incf	4,f	;increment pointer
   176  0160  0604               	xorwf	4,w	;XOR with final address
   177  0161  1903               	btfsc	3,2	;have we reached the end yet?
   178  0162  3400               	retlw	0	;all done for this memory range, return
   179  0163  0604               	xorwf	4,w	;XOR again to restore value
   180  0164  295E               	goto	clrloop0	;do the next byte
   181                           
   182                           	psect	cstackCOMMON
   183  0000                     __pcstackCOMMON:	
   184  0000                     ??_Serial_LCD_Init:	
   185                           
   186                           	psect	cstackBANK0
   187  0020                     __pcstackBANK0:	
   188                           ; 1 bytes @ 0x0
   189                           
   190  0020                     ?_Delay_50ms:	
   191  0020                     ??_Delay_50ms:	
   192                           ; 1 bytes @ 0x0
   193                           
   194  0020                     ?_Write_Nibble:	
   195                           ; 1 bytes @ 0x0
   196                           
   197  0020                     ?_Serial_LCD_Cmd:	
   198                           ; 1 bytes @ 0x0
   199                           
   200  0020                     ?_Serial_LCD_Init:	
   201                           ; 1 bytes @ 0x0
   202                           
   203  0020                     ?_main:	
   204                           ; 1 bytes @ 0x0
   205                           
   206  0020                     ?___awdiv:	
   207                           ; 1 bytes @ 0x0
   208                           
   209  0020                     ?___lwdiv:	
   210                           ; 2 bytes @ 0x0
   211                           
   212  0020                     ?___lwmod:	
   213                           ; 2 bytes @ 0x0
   214                           
   215  0020                     Write_Nibble@N:	
   216                           ; 2 bytes @ 0x0
   217                           
   218  0020                     ___awdiv@divisor:	
   219                           ; 2 bytes @ 0x0
   220                           
   221  0020                     ___lwdiv@divisor:	
   222                           ; 2 bytes @ 0x0
   223                           
   224  0020                     ___lwmod@divisor:	
   225                           ; 2 bytes @ 0x0
   226                           
   227                           
   228                           ; 2 bytes @ 0x0
   229  0020                     	ds	2
   230  0022                     ??_Write_Nibble:	
   231  0022                     ___awdiv@dividend:	
   232                           ; 1 bytes @ 0x2
   233                           
   234  0022                     ___lwdiv@dividend:	
   235                           ; 2 bytes @ 0x2
   236                           
   237  0022                     ___lwmod@dividend:	
   238                           ; 2 bytes @ 0x2
   239                           
   240                           
   241                           ; 2 bytes @ 0x2
   242  0022                     	ds	2
   243  0024                     ??___awdiv:	
   244  0024                     ??___lwdiv:	
   245                           ; 1 bytes @ 0x4
   246                           
   247  0024                     ??___lwmod:	
   248                           ; 1 bytes @ 0x4
   249                           
   250                           
   251                           ; 1 bytes @ 0x4
   252  0024                     	ds	1
   253  0025                     ___awdiv@counter:	
   254  0025                     ___lwmod@counter:	
   255                           ; 1 bytes @ 0x5
   256                           
   257  0025                     ___lwdiv@quotient:	
   258                           ; 1 bytes @ 0x5
   259                           
   260                           
   261                           ; 2 bytes @ 0x5
   262  0025                     	ds	1
   263  0026                     ___awdiv@sign:	
   264                           
   265                           ; 1 bytes @ 0x6
   266  0026                     	ds	1
   267  0027                     ___lwdiv@counter:	
   268  0027                     ___awdiv@quotient:	
   269                           ; 1 bytes @ 0x7
   270                           
   271                           
   272                           ; 2 bytes @ 0x7
   273  0027                     	ds	2
   274  0029                     ??_Serial_LCD_Cmd:	
   275                           
   276                           ; 1 bytes @ 0x9
   277  0029                     	ds	2
   278  002B                     Serial_LCD_Cmd@Command:	
   279                           
   280                           ; 1 bytes @ 0xB
   281  002B                     	ds	1
   282  002C                     ?_Serial_LCD_Chr:	
   283  002C                     Serial_LCD_Chr@row:	
   284                           ; 1 bytes @ 0xC
   285                           
   286                           
   287                           ; 2 bytes @ 0xC
   288  002C                     	ds	2
   289  002E                     Serial_LCD_Chr@col:	
   290                           
   291                           ; 2 bytes @ 0xE
   292  002E                     	ds	2
   293  0030                     Serial_LCD_Chr@LCDChar:	
   294                           
   295                           ; 1 bytes @ 0x10
   296  0030                     	ds	1
   297  0031                     ??_Serial_LCD_Chr:	
   298                           
   299                           ; 1 bytes @ 0x11
   300  0031                     	ds	2
   301  0033                     ?_Lcd_Write_String:	
   302  0033                     ?_lcddisplay:	
   303                           ; 1 bytes @ 0x13
   304                           
   305  0033                     Lcd_Write_String@row:	
   306                           ; 1 bytes @ 0x13
   307                           
   308  0033                     lcddisplay@row:	
   309                           ; 2 bytes @ 0x13
   310                           
   311                           
   312                           ; 2 bytes @ 0x13
   313  0033                     	ds	2
   314  0035                     Lcd_Write_String@col:	
   315  0035                     lcddisplay@col:	
   316                           ; 2 bytes @ 0x15
   317                           
   318                           
   319                           ; 2 bytes @ 0x15
   320  0035                     	ds	2
   321  0037                     Lcd_Write_String@a:	
   322  0037                     lcddisplay@num:	
   323                           ; 1 bytes @ 0x17
   324                           
   325                           
   326                           ; 2 bytes @ 0x17
   327  0037                     	ds	1
   328  0038                     ??_Lcd_Write_String:	
   329                           
   330                           ; 1 bytes @ 0x18
   331  0038                     	ds	1
   332  0039                     ??_lcddisplay:	
   333  0039                     Lcd_Write_String@i:	
   334                           ; 1 bytes @ 0x19
   335                           
   336                           
   337                           ; 2 bytes @ 0x19
   338  0039                     	ds	2
   339  003B                     ??_main:	
   340                           
   341                           ; 1 bytes @ 0x1B
   342  003B                     	ds	3
   343  003E                     main@i:	
   344                           
   345                           ; 2 bytes @ 0x1E
   346  003E                     	ds	2
   347                           
   348                           	psect	maintext
   349  0265                     __pmaintext:	
   350 ;;
   351 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   352 ;;
   353 ;; *************** function _main *****************
   354 ;; Defined at:
   355 ;;		line 170 in file "newmain.c"
   356 ;; Parameters:    Size  Location     Type
   357 ;;		None
   358 ;; Auto vars:     Size  Location     Type
   359 ;;  i               2   30[BANK0 ] int 
   360 ;; Return value:  Size  Location     Type
   361 ;;                  1    wreg      void 
   362 ;; Registers used:
   363 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   364 ;; Tracked objects:
   365 ;;		On entry : B00/0
   366 ;;		On exit  : 0/0
   367 ;;		Unchanged: 0/0
   368 ;; Data sizes:     COMMON   BANK0
   369 ;;      Params:         0       0
   370 ;;      Locals:         0       2
   371 ;;      Temps:          0       3
   372 ;;      Totals:         0       5
   373 ;;Total ram usage:        5 bytes
   374 ;; Hardware stack levels required when called:    4
   375 ;; This function calls:
   376 ;;		_Lcd_Write_String
   377 ;;		_Serial_LCD_Cmd
   378 ;;		_Serial_LCD_Init
   379 ;;		_lcddisplay
   380 ;; This function is called by:
   381 ;;		Startup code after reset
   382 ;; This function uses a non-reentrant model
   383 ;;
   384                           
   385                           
   386                           ;psect for function _main
   387  0265                     _main:	
   388                           
   389                           ;newmain.c: 172: ANSEL = 0x00;
   390                           
   391                           ;incstack = 0
   392                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   393  0265  1683               	bsf	3,5	;RP0=1, select bank1
   394  0266  0191               	clrf	17	;volatile
   395                           
   396                           ;newmain.c: 173: TRISC = 0x00;
   397  0267  0187               	clrf	7	;volatile
   398                           
   399                           ;newmain.c: 174: Serial_LCD_Init();
   400  0268  2170               	fcall	_Serial_LCD_Init
   401                           
   402                           ;newmain.c: 175: Serial_LCD_Cmd(0x01);
   403  0269  3001               	movlw	1
   404  026A  22F9               	fcall	_Serial_LCD_Cmd
   405                           
   406                           ;newmain.c: 176: Serial_LCD_Cmd(0x0C);
   407  026B  300C               	movlw	12
   408  026C  22F9               	fcall	_Serial_LCD_Cmd
   409  026D                     l991:	
   410                           ;newmain.c: 178: while(1){
   411                           
   412                           
   413                           ;newmain.c: 179: Lcd_Write_String(1,1,"Hellooo");
   414  026D  3001               	movlw	1
   415  026E  1283               	bcf	3,5	;RP0=0, select bank0
   416  026F  00B3               	movwf	Lcd_Write_String@row
   417  0270  3000               	movlw	0
   418  0271  00B4               	movwf	Lcd_Write_String@row+1
   419  0272  3001               	movlw	1
   420  0273  00B5               	movwf	Lcd_Write_String@col
   421  0274  3000               	movlw	0
   422  0275  00B6               	movwf	Lcd_Write_String@col+1
   423  0276  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   424  0277  00BB               	movwf	??_main
   425  0278  083B               	movf	??_main,w
   426  0279  00B7               	movwf	Lcd_Write_String@a
   427  027A  2184               	fcall	_Lcd_Write_String
   428                           
   429                           ;newmain.c: 181: for(int i=0;i<=10;i++)
   430  027B  1283               	bcf	3,5	;RP0=0, select bank0
   431  027C  01BE               	clrf	main@i
   432  027D  01BF               	clrf	main@i+1
   433  027E                     L1:	
   434  027E  083F               	movf	main@i+1,w
   435  027F  3A80               	xorlw	128
   436  0280  00DF               	movwf	95
   437  0281  3080               	movlw	128
   438  0282  025F               	subwf	95,w
   439  0283  1D03               	skipz
   440  0284  2A87               	goto	u815
   441  0285  300B               	movlw	11
   442  0286  023E               	subwf	main@i,w
   443  0287                     u815:	
   444  0287  1803               	btfsc	3,0
   445  0288  2A6D               	goto	l991
   446                           
   447                           ;newmain.c: 182: {
   448                           ;newmain.c: 183: lcddisplay(2,1,i);
   449  0289  3002               	movlw	2
   450  028A  1283               	bcf	3,5	;RP0=0, select bank0
   451  028B  00B3               	movwf	lcddisplay@row
   452  028C  3000               	movlw	0
   453  028D  00B4               	movwf	lcddisplay@row+1
   454  028E  3001               	movlw	1
   455  028F  00B5               	movwf	lcddisplay@col
   456  0290  3000               	movlw	0
   457  0291  00B6               	movwf	lcddisplay@col+1
   458  0292  083F               	movf	main@i+1,w
   459  0293  00B8               	movwf	lcddisplay@num+1
   460  0294  083E               	movf	main@i,w
   461  0295  00B7               	movwf	lcddisplay@num
   462  0296  2225               	fcall	_lcddisplay
   463                           
   464                           ;newmain.c: 184: _delay((unsigned long)((1000)*(4000000/4000.0)));
   465  0297  3006               	movlw	6
   466  0298  1283               	bcf	3,5	;RP0=0, select bank0
   467  0299  00BD               	movwf	??_main+2
   468  029A  3013               	movlw	19
   469  029B  00BC               	movwf	??_main+1
   470  029C  30AD               	movlw	173
   471  029D  00BB               	movwf	??_main
   472  029E                     u837:	
   473  029E  0BBB               	decfsz	??_main,f
   474  029F  2A9E               	goto	u837
   475  02A0  0BBC               	decfsz	??_main+1,f
   476  02A1  2A9E               	goto	u837
   477  02A2  0BBD               	decfsz	??_main+2,f
   478  02A3  2A9E               	goto	u837
   479  02A4  2AA5               	nop2
   480  02A5  3001               	movlw	1
   481  02A6  1283               	bcf	3,5	;RP0=0, select bank0
   482  02A7  07BE               	addwf	main@i,f
   483  02A8  1803               	skipnc
   484  02A9  0ABF               	incf	main@i+1,f
   485  02AA  3000               	movlw	0
   486  02AB  07BF               	addwf	main@i+1,f
   487  02AC  2A7E               	goto	L1
   488  02AD                     __end_of_main:	
   489                           
   490                           	psect	text1
   491  0225                     __ptext1:	
   492 ;; *************** function _lcddisplay *****************
   493 ;; Defined at:
   494 ;;		line 158 in file "newmain.c"
   495 ;; Parameters:    Size  Location     Type
   496 ;;  row             2   19[BANK0 ] unsigned int 
   497 ;;  col             2   21[BANK0 ] unsigned int 
   498 ;;  num             2   23[BANK0 ] unsigned int 
   499 ;; Auto vars:     Size  Location     Type
   500 ;;		None
   501 ;; Return value:  Size  Location     Type
   502 ;;                  1    wreg      void 
   503 ;; Registers used:
   504 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   505 ;; Tracked objects:
   506 ;;		On entry : 0/0
   507 ;;		On exit  : 0/0
   508 ;;		Unchanged: 0/0
   509 ;; Data sizes:     COMMON   BANK0
   510 ;;      Params:         0       6
   511 ;;      Locals:         0       0
   512 ;;      Temps:          0       1
   513 ;;      Totals:         0       7
   514 ;;Total ram usage:        7 bytes
   515 ;; Hardware stack levels used:    1
   516 ;; Hardware stack levels required when called:    3
   517 ;; This function calls:
   518 ;;		_Serial_LCD_Chr
   519 ;;		___lwdiv
   520 ;;		___lwmod
   521 ;; This function is called by:
   522 ;;		_main
   523 ;; This function uses a non-reentrant model
   524 ;;
   525                           
   526                           
   527                           ;psect for function _lcddisplay
   528  0225                     _lcddisplay:	
   529                           
   530                           ;newmain.c: 161: Serial_LCD_Chr(row,col++,(num/10)+0x30);
   531                           
   532                           ;incstack = 0
   533                           ; Regs used in _lcddisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   534  0225  1283               	bcf	3,5	;RP0=0, select bank0
   535  0226  0834               	movf	lcddisplay@row+1,w
   536  0227  00AD               	movwf	Serial_LCD_Chr@row+1
   537  0228  0833               	movf	lcddisplay@row,w
   538  0229  00AC               	movwf	Serial_LCD_Chr@row
   539  022A  0836               	movf	lcddisplay@col+1,w
   540  022B  00AF               	movwf	Serial_LCD_Chr@col+1
   541  022C  0835               	movf	lcddisplay@col,w
   542  022D  00AE               	movwf	Serial_LCD_Chr@col
   543  022E  300A               	movlw	10
   544  022F  00A0               	movwf	___lwdiv@divisor
   545  0230  3000               	movlw	0
   546  0231  00A1               	movwf	___lwdiv@divisor+1
   547  0232  0838               	movf	lcddisplay@num+1,w
   548  0233  00A3               	movwf	___lwdiv@dividend+1
   549  0234  0837               	movf	lcddisplay@num,w
   550  0235  00A2               	movwf	___lwdiv@dividend
   551  0236  21E8               	fcall	___lwdiv
   552  0237  1283               	bcf	3,5	;RP0=0, select bank0
   553  0238  0820               	movf	?___lwdiv,w
   554  0239  3E30               	addlw	48
   555  023A  00B9               	movwf	??_lcddisplay
   556  023B  0839               	movf	??_lcddisplay,w
   557  023C  00B0               	movwf	Serial_LCD_Chr@LCDChar
   558  023D  234B               	fcall	_Serial_LCD_Chr
   559  023E  3001               	movlw	1
   560  023F  1283               	bcf	3,5	;RP0=0, select bank0
   561  0240  07B5               	addwf	lcddisplay@col,f
   562  0241  1803               	skipnc
   563  0242  0AB6               	incf	lcddisplay@col+1,f
   564  0243  3000               	movlw	0
   565  0244  07B6               	addwf	lcddisplay@col+1,f
   566                           
   567                           ;newmain.c: 162: Serial_LCD_Chr(row,col++,(num%10)+0x30);
   568  0245  0834               	movf	lcddisplay@row+1,w
   569  0246  00AD               	movwf	Serial_LCD_Chr@row+1
   570  0247  0833               	movf	lcddisplay@row,w
   571  0248  00AC               	movwf	Serial_LCD_Chr@row
   572  0249  0836               	movf	lcddisplay@col+1,w
   573  024A  00AF               	movwf	Serial_LCD_Chr@col+1
   574  024B  0835               	movf	lcddisplay@col,w
   575  024C  00AE               	movwf	Serial_LCD_Chr@col
   576  024D  300A               	movlw	10
   577  024E  00A0               	movwf	___lwmod@divisor
   578  024F  3000               	movlw	0
   579  0250  00A1               	movwf	___lwmod@divisor+1
   580  0251  0838               	movf	lcddisplay@num+1,w
   581  0252  00A3               	movwf	___lwmod@dividend+1
   582  0253  0837               	movf	lcddisplay@num,w
   583  0254  00A2               	movwf	___lwmod@dividend
   584  0255  21B5               	fcall	___lwmod
   585  0256  1283               	bcf	3,5	;RP0=0, select bank0
   586  0257  0820               	movf	?___lwmod,w
   587  0258  3E30               	addlw	48
   588  0259  00B9               	movwf	??_lcddisplay
   589  025A  0839               	movf	??_lcddisplay,w
   590  025B  00B0               	movwf	Serial_LCD_Chr@LCDChar
   591  025C  234B               	fcall	_Serial_LCD_Chr
   592  025D  3001               	movlw	1
   593  025E  1283               	bcf	3,5	;RP0=0, select bank0
   594  025F  07B5               	addwf	lcddisplay@col,f
   595  0260  1803               	skipnc
   596  0261  0AB6               	incf	lcddisplay@col+1,f
   597  0262  3000               	movlw	0
   598  0263  07B6               	addwf	lcddisplay@col+1,f
   599  0264  0008               	return
   600  0265                     __end_of_lcddisplay:	
   601                           
   602                           	psect	text2
   603  01B5                     __ptext2:	
   604 ;; *************** function ___lwmod *****************
   605 ;; Defined at:
   606 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lwmod.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;  divisor         2    0[BANK0 ] unsigned int 
   609 ;;  dividend        2    2[BANK0 ] unsigned int 
   610 ;; Auto vars:     Size  Location     Type
   611 ;;  counter         1    5[BANK0 ] unsigned char 
   612 ;; Return value:  Size  Location     Type
   613 ;;                  2    0[BANK0 ] unsigned int 
   614 ;; Registers used:
   615 ;;		wreg, status,2, status,0
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMMON   BANK0
   621 ;;      Params:         0       4
   622 ;;      Locals:         0       1
   623 ;;      Temps:          0       1
   624 ;;      Totals:         0       6
   625 ;;Total ram usage:        6 bytes
   626 ;; Hardware stack levels used:    1
   627 ;; This function calls:
   628 ;;		Nothing
   629 ;; This function is called by:
   630 ;;		_lcddisplay
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634                           
   635                           ;psect for function ___lwmod
   636  01B5                     ___lwmod:	
   637                           
   638                           ;incstack = 0
   639                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   640  01B5  1283               	bcf	3,5	;RP0=0, select bank0
   641  01B6  0820               	movf	___lwmod@divisor,w
   642  01B7  0421               	iorwf	___lwmod@divisor+1,w
   643  01B8  1903               	btfsc	3,2
   644  01B9  29E3               	goto	l959
   645  01BA  01A5               	clrf	___lwmod@counter
   646  01BB  0AA5               	incf	___lwmod@counter,f
   647  01BC                     l949:	
   648  01BC  1BA1               	btfsc	___lwmod@divisor+1,7
   649  01BD  29CA               	goto	l951
   650  01BE  3001               	movlw	1
   651  01BF                     u755:	
   652  01BF  1003               	clrc
   653  01C0  0DA0               	rlf	___lwmod@divisor,f
   654  01C1  0DA1               	rlf	___lwmod@divisor+1,f
   655  01C2  3EFF               	addlw	-1
   656  01C3  1D03               	skipz
   657  01C4  29BF               	goto	u755
   658  01C5  3001               	movlw	1
   659  01C6  00A4               	movwf	??___lwmod
   660  01C7  0824               	movf	??___lwmod,w
   661  01C8  07A5               	addwf	___lwmod@counter,f
   662  01C9  29BC               	goto	l949
   663  01CA                     l951:	
   664  01CA  0821               	movf	___lwmod@divisor+1,w
   665  01CB  0223               	subwf	___lwmod@dividend+1,w
   666  01CC  1D03               	skipz
   667  01CD  29D0               	goto	u775
   668  01CE  0820               	movf	___lwmod@divisor,w
   669  01CF  0222               	subwf	___lwmod@dividend,w
   670  01D0                     u775:	
   671  01D0  1C03               	skipc
   672  01D1  29D8               	goto	l955
   673  01D2  0820               	movf	___lwmod@divisor,w
   674  01D3  02A2               	subwf	___lwmod@dividend,f
   675  01D4  0821               	movf	___lwmod@divisor+1,w
   676  01D5  1C03               	skipc
   677  01D6  03A3               	decf	___lwmod@dividend+1,f
   678  01D7  02A3               	subwf	___lwmod@dividend+1,f
   679  01D8                     l955:	
   680  01D8  3001               	movlw	1
   681  01D9                     u785:	
   682  01D9  1003               	clrc
   683  01DA  0CA1               	rrf	___lwmod@divisor+1,f
   684  01DB  0CA0               	rrf	___lwmod@divisor,f
   685  01DC  3EFF               	addlw	-1
   686  01DD  1D03               	skipz
   687  01DE  29D9               	goto	u785
   688  01DF  3001               	movlw	1
   689  01E0  02A5               	subwf	___lwmod@counter,f
   690  01E1  1D03               	btfss	3,2
   691  01E2  29CA               	goto	l951
   692  01E3                     l959:	
   693  01E3  0823               	movf	___lwmod@dividend+1,w
   694  01E4  00A1               	movwf	?___lwmod+1
   695  01E5  0822               	movf	___lwmod@dividend,w
   696  01E6  00A0               	movwf	?___lwmod
   697  01E7  0008               	return
   698  01E8                     __end_of___lwmod:	
   699                           
   700                           	psect	text3
   701  01E8                     __ptext3:	
   702 ;; *************** function ___lwdiv *****************
   703 ;; Defined at:
   704 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lwdiv.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;  divisor         2    0[BANK0 ] unsigned int 
   707 ;;  dividend        2    2[BANK0 ] unsigned int 
   708 ;; Auto vars:     Size  Location     Type
   709 ;;  quotient        2    5[BANK0 ] unsigned int 
   710 ;;  counter         1    7[BANK0 ] unsigned char 
   711 ;; Return value:  Size  Location     Type
   712 ;;                  2    0[BANK0 ] unsigned int 
   713 ;; Registers used:
   714 ;;		wreg, status,2, status,0
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMMON   BANK0
   720 ;;      Params:         0       4
   721 ;;      Locals:         0       3
   722 ;;      Temps:          0       1
   723 ;;      Totals:         0       8
   724 ;;Total ram usage:        8 bytes
   725 ;; Hardware stack levels used:    1
   726 ;; This function calls:
   727 ;;		Nothing
   728 ;; This function is called by:
   729 ;;		_lcddisplay
   730 ;; This function uses a non-reentrant model
   731 ;;
   732                           
   733                           
   734                           ;psect for function ___lwdiv
   735  01E8                     ___lwdiv:	
   736                           
   737                           ;incstack = 0
   738                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
   739  01E8  1283               	bcf	3,5	;RP0=0, select bank0
   740  01E9  01A5               	clrf	___lwdiv@quotient
   741  01EA  01A6               	clrf	___lwdiv@quotient+1
   742  01EB  0820               	movf	___lwdiv@divisor,w
   743  01EC  0421               	iorwf	___lwdiv@divisor+1,w
   744  01ED  1903               	btfsc	3,2
   745  01EE  2A20               	goto	l937
   746  01EF  01A7               	clrf	___lwdiv@counter
   747  01F0  0AA7               	incf	___lwdiv@counter,f
   748  01F1                     l925:	
   749  01F1  1BA1               	btfsc	___lwdiv@divisor+1,7
   750  01F2  29FF               	goto	l927
   751  01F3  3001               	movlw	1
   752  01F4                     u685:	
   753  01F4  1003               	clrc
   754  01F5  0DA0               	rlf	___lwdiv@divisor,f
   755  01F6  0DA1               	rlf	___lwdiv@divisor+1,f
   756  01F7  3EFF               	addlw	-1
   757  01F8  1D03               	skipz
   758  01F9  29F4               	goto	u685
   759  01FA  3001               	movlw	1
   760  01FB  00A4               	movwf	??___lwdiv
   761  01FC  0824               	movf	??___lwdiv,w
   762  01FD  07A7               	addwf	___lwdiv@counter,f
   763  01FE  29F1               	goto	l925
   764  01FF                     l927:	
   765  01FF  3001               	movlw	1
   766  0200                     u705:	
   767  0200  1003               	clrc
   768  0201  0DA5               	rlf	___lwdiv@quotient,f
   769  0202  0DA6               	rlf	___lwdiv@quotient+1,f
   770  0203  3EFF               	addlw	-1
   771  0204  1D03               	skipz
   772  0205  2A00               	goto	u705
   773  0206  0821               	movf	___lwdiv@divisor+1,w
   774  0207  0223               	subwf	___lwdiv@dividend+1,w
   775  0208  1D03               	skipz
   776  0209  2A0C               	goto	u715
   777  020A  0820               	movf	___lwdiv@divisor,w
   778  020B  0222               	subwf	___lwdiv@dividend,w
   779  020C                     u715:	
   780  020C  1C03               	skipc
   781  020D  2A15               	goto	l933
   782  020E  0820               	movf	___lwdiv@divisor,w
   783  020F  02A2               	subwf	___lwdiv@dividend,f
   784  0210  0821               	movf	___lwdiv@divisor+1,w
   785  0211  1C03               	skipc
   786  0212  03A3               	decf	___lwdiv@dividend+1,f
   787  0213  02A3               	subwf	___lwdiv@dividend+1,f
   788  0214  1425               	bsf	___lwdiv@quotient,0
   789  0215                     l933:	
   790  0215  3001               	movlw	1
   791  0216                     u725:	
   792  0216  1003               	clrc
   793  0217  0CA1               	rrf	___lwdiv@divisor+1,f
   794  0218  0CA0               	rrf	___lwdiv@divisor,f
   795  0219  3EFF               	addlw	-1
   796  021A  1D03               	skipz
   797  021B  2A16               	goto	u725
   798  021C  3001               	movlw	1
   799  021D  02A7               	subwf	___lwdiv@counter,f
   800  021E  1D03               	btfss	3,2
   801  021F  29FF               	goto	l927
   802  0220                     l937:	
   803  0220  0826               	movf	___lwdiv@quotient+1,w
   804  0221  00A1               	movwf	?___lwdiv+1
   805  0222  0825               	movf	___lwdiv@quotient,w
   806  0223  00A0               	movwf	?___lwdiv
   807  0224  0008               	return
   808  0225                     __end_of___lwdiv:	
   809                           
   810                           	psect	text4
   811  0170                     __ptext4:	
   812 ;; *************** function _Serial_LCD_Init *****************
   813 ;; Defined at:
   814 ;;		line 131 in file "newmain.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		wreg, status,2, status,0, pclath, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMMON   BANK0
   828 ;;      Params:         0       0
   829 ;;      Locals:         0       0
   830 ;;      Temps:          0       0
   831 ;;      Totals:         0       0
   832 ;;Total ram usage:        0 bytes
   833 ;; Hardware stack levels used:    1
   834 ;; Hardware stack levels required when called:    2
   835 ;; This function calls:
   836 ;;		_Delay_50ms
   837 ;;		_Serial_LCD_Cmd
   838 ;; This function is called by:
   839 ;;		_main
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           
   844                           ;psect for function _Serial_LCD_Init
   845  0170                     _Serial_LCD_Init:	
   846                           
   847                           ;newmain.c: 132: Delay_50ms();
   848                           
   849                           ;incstack = 0
   850                           ; Regs used in _Serial_LCD_Init: [wreg+status,2+status,0+pclath+cstack]
   851  0170  2165               	fcall	_Delay_50ms
   852                           
   853                           ;newmain.c: 133: Serial_LCD_Cmd(0x03);
   854  0171  3003               	movlw	3
   855  0172  22F9               	fcall	_Serial_LCD_Cmd
   856                           
   857                           ;newmain.c: 134: Delay_50ms();
   858  0173  2165               	fcall	_Delay_50ms
   859                           
   860                           ;newmain.c: 135: Serial_LCD_Cmd(0x03);
   861  0174  3003               	movlw	3
   862  0175  22F9               	fcall	_Serial_LCD_Cmd
   863                           
   864                           ;newmain.c: 136: Delay_50ms();
   865  0176  2165               	fcall	_Delay_50ms
   866                           
   867                           ;newmain.c: 137: Serial_LCD_Cmd(0x03);
   868  0177  3003               	movlw	3
   869  0178  22F9               	fcall	_Serial_LCD_Cmd
   870                           
   871                           ;newmain.c: 138: Delay_50ms();
   872  0179  2165               	fcall	_Delay_50ms
   873                           
   874                           ;newmain.c: 139: Serial_LCD_Cmd(0x02);
   875  017A  3002               	movlw	2
   876  017B  22F9               	fcall	_Serial_LCD_Cmd
   877                           
   878                           ;newmain.c: 140: Delay_50ms();
   879  017C  2165               	fcall	_Delay_50ms
   880                           
   881                           ;newmain.c: 141: Serial_LCD_Cmd(0x28);
   882  017D  3028               	movlw	40
   883  017E  22F9               	fcall	_Serial_LCD_Cmd
   884                           
   885                           ;newmain.c: 142: Delay_50ms();
   886  017F  2165               	fcall	_Delay_50ms
   887                           
   888                           ;newmain.c: 143: Serial_LCD_Cmd(0x06);
   889  0180  3006               	movlw	6
   890  0181  22F9               	fcall	_Serial_LCD_Cmd
   891                           
   892                           ;newmain.c: 144: Delay_50ms();
   893  0182  2165               	fcall	_Delay_50ms
   894  0183  0008               	return
   895  0184                     __end_of_Serial_LCD_Init:	
   896                           
   897                           	psect	text5
   898  0184                     __ptext5:	
   899 ;; *************** function _Lcd_Write_String *****************
   900 ;; Defined at:
   901 ;;		line 148 in file "newmain.c"
   902 ;; Parameters:    Size  Location     Type
   903 ;;  row             2   19[BANK0 ] unsigned int 
   904 ;;  col             2   21[BANK0 ] unsigned int 
   905 ;;  a               1   23[BANK0 ] PTR unsigned char 
   906 ;;		 -> STR_1(8), 
   907 ;; Auto vars:     Size  Location     Type
   908 ;;  i               2   25[BANK0 ] int 
   909 ;; Return value:  Size  Location     Type
   910 ;;                  1    wreg      void 
   911 ;; Registers used:
   912 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMMON   BANK0
   918 ;;      Params:         0       5
   919 ;;      Locals:         0       2
   920 ;;      Temps:          0       1
   921 ;;      Totals:         0       8
   922 ;;Total ram usage:        8 bytes
   923 ;; Hardware stack levels used:    1
   924 ;; Hardware stack levels required when called:    3
   925 ;; This function calls:
   926 ;;		_Serial_LCD_Chr
   927 ;; This function is called by:
   928 ;;		_main
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           
   933                           ;psect for function _Lcd_Write_String
   934  0184                     _Lcd_Write_String:	
   935                           
   936                           ;newmain.c: 150: int i;
   937                           ;newmain.c: 151: for(i=0;a[i]!='\0';i++)
   938                           
   939                           ;incstack = 0
   940                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   941  0184  1283               	bcf	3,5	;RP0=0, select bank0
   942  0185  01B9               	clrf	Lcd_Write_String@i
   943  0186  01BA               	clrf	Lcd_Write_String@i+1
   944  0187                     l973:	
   945  0187  0839               	movf	Lcd_Write_String@i,w
   946  0188  0737               	addwf	Lcd_Write_String@a,w
   947  0189  0084               	movwf	4
   948  018A  2001               	fcall	stringdir
   949  018B  3A00               	xorlw	0
   950  018C  1903               	btfsc	3,2
   951  018D  29AC               	goto	l975
   952                           
   953                           ;newmain.c: 152: {
   954                           ;newmain.c: 153: Serial_LCD_Chr(row,col++,a[i]);
   955  018E  0834               	movf	Lcd_Write_String@row+1,w
   956  018F  00AD               	movwf	Serial_LCD_Chr@row+1
   957  0190  0833               	movf	Lcd_Write_String@row,w
   958  0191  00AC               	movwf	Serial_LCD_Chr@row
   959  0192  0836               	movf	Lcd_Write_String@col+1,w
   960  0193  00AF               	movwf	Serial_LCD_Chr@col+1
   961  0194  0835               	movf	Lcd_Write_String@col,w
   962  0195  00AE               	movwf	Serial_LCD_Chr@col
   963  0196  0839               	movf	Lcd_Write_String@i,w
   964  0197  0737               	addwf	Lcd_Write_String@a,w
   965  0198  0084               	movwf	4
   966  0199  2001               	fcall	stringdir
   967  019A  00B8               	movwf	??_Lcd_Write_String
   968  019B  0838               	movf	??_Lcd_Write_String,w
   969  019C  00B0               	movwf	Serial_LCD_Chr@LCDChar
   970  019D  234B               	fcall	_Serial_LCD_Chr
   971  019E  3001               	movlw	1
   972  019F  1283               	bcf	3,5	;RP0=0, select bank0
   973  01A0  07B5               	addwf	Lcd_Write_String@col,f
   974  01A1  1803               	skipnc
   975  01A2  0AB6               	incf	Lcd_Write_String@col+1,f
   976  01A3  3000               	movlw	0
   977  01A4  07B6               	addwf	Lcd_Write_String@col+1,f
   978  01A5  3001               	movlw	1
   979  01A6  07B9               	addwf	Lcd_Write_String@i,f
   980  01A7  1803               	skipnc
   981  01A8  0ABA               	incf	Lcd_Write_String@i+1,f
   982  01A9  3000               	movlw	0
   983  01AA  07BA               	addwf	Lcd_Write_String@i+1,f
   984  01AB  2987               	goto	l973
   985  01AC                     l975:	
   986                           
   987                           ;newmain.c: 154: }
   988                           ;newmain.c: 155: row = 1;
   989  01AC  3001               	movlw	1
   990  01AD  00B3               	movwf	Lcd_Write_String@row
   991  01AE  3000               	movlw	0
   992  01AF  00B4               	movwf	Lcd_Write_String@row+1
   993                           
   994                           ;newmain.c: 156: col = 1;
   995  01B0  3001               	movlw	1
   996  01B1  00B5               	movwf	Lcd_Write_String@col
   997  01B2  3000               	movlw	0
   998  01B3  00B6               	movwf	Lcd_Write_String@col+1
   999  01B4  0008               	return
  1000  01B5                     __end_of_Lcd_Write_String:	
  1001                           
  1002                           	psect	text6
  1003  034B                     __ptext6:	
  1004 ;; *************** function _Serial_LCD_Chr *****************
  1005 ;; Defined at:
  1006 ;;		line 104 in file "newmain.c"
  1007 ;; Parameters:    Size  Location     Type
  1008 ;;  row             2   12[BANK0 ] unsigned int 
  1009 ;;  col             2   14[BANK0 ] unsigned int 
  1010 ;;  LCDChar         1   16[BANK0 ] unsigned char 
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;		None
  1013 ;; Return value:  Size  Location     Type
  1014 ;;                  1    wreg      void 
  1015 ;; Registers used:
  1016 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMMON   BANK0
  1022 ;;      Params:         0       5
  1023 ;;      Locals:         0       0
  1024 ;;      Temps:          0       2
  1025 ;;      Totals:         0       7
  1026 ;;Total ram usage:        7 bytes
  1027 ;; Hardware stack levels used:    1
  1028 ;; Hardware stack levels required when called:    2
  1029 ;; This function calls:
  1030 ;;		_Serial_LCD_Cmd
  1031 ;;		_Write_Nibble
  1032 ;;		___awdiv
  1033 ;; This function is called by:
  1034 ;;		_Lcd_Write_String
  1035 ;;		_lcddisplay
  1036 ;; This function uses a non-reentrant model
  1037 ;;
  1038                           
  1039                           
  1040                           ;psect for function _Serial_LCD_Chr
  1041  034B                     _Serial_LCD_Chr:	
  1042                           
  1043                           ;newmain.c: 106: switch(row){
  1044                           
  1045                           ;incstack = 0
  1046                           ; Regs used in _Serial_LCD_Chr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1047  034B  2B60               	goto	l899
  1048  034C                     l889:	
  1049                           ;newmain.c: 108: case 1:
  1050                           
  1051                           
  1052                           ;newmain.c: 109: Serial_LCD_Cmd(0x80 + col-1);
  1053  034C  1283               	bcf	3,5	;RP0=0, select bank0
  1054  034D  082E               	movf	Serial_LCD_Chr@col,w
  1055  034E  3E7F               	addlw	127
  1056  034F  22F9               	fcall	_Serial_LCD_Cmd
  1057                           
  1058                           ;newmain.c: 110: break;
  1059  0350  2B74               	goto	l901
  1060  0351                     l891:	
  1061                           ;newmain.c: 111: case 2:
  1062                           
  1063                           
  1064                           ;newmain.c: 112: Serial_LCD_Cmd(0xC0 + col-1);
  1065  0351  1283               	bcf	3,5	;RP0=0, select bank0
  1066  0352  082E               	movf	Serial_LCD_Chr@col,w
  1067  0353  3EBF               	addlw	191
  1068  0354  22F9               	fcall	_Serial_LCD_Cmd
  1069                           
  1070                           ;newmain.c: 113: break;
  1071  0355  2B74               	goto	l901
  1072  0356                     l893:	
  1073                           ;newmain.c: 114: case 3:
  1074                           
  1075                           
  1076                           ;newmain.c: 115: Serial_LCD_Cmd(0x94 + col-1);
  1077  0356  1283               	bcf	3,5	;RP0=0, select bank0
  1078  0357  082E               	movf	Serial_LCD_Chr@col,w
  1079  0358  3E93               	addlw	147
  1080  0359  22F9               	fcall	_Serial_LCD_Cmd
  1081                           
  1082                           ;newmain.c: 116: break;
  1083  035A  2B74               	goto	l901
  1084  035B                     l895:	
  1085                           ;newmain.c: 117: case 4:
  1086                           
  1087                           
  1088                           ;newmain.c: 118: Serial_LCD_Cmd(0xD4 + col-1);
  1089  035B  1283               	bcf	3,5	;RP0=0, select bank0
  1090  035C  082E               	movf	Serial_LCD_Chr@col,w
  1091  035D  3ED3               	addlw	211
  1092  035E  22F9               	fcall	_Serial_LCD_Cmd
  1093                           
  1094                           ;newmain.c: 120: }
  1095                           
  1096                           ;newmain.c: 119: break;
  1097  035F  2B74               	goto	l901
  1098  0360                     l899:	
  1099                           
  1100                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1101                           ; Switch size 1, requested type "space"
  1102                           ; Number of cases is 1, Range of values is 0 to 0
  1103                           ; switch strategies available:
  1104                           ; Name         Instructions Cycles
  1105                           ; simple_byte            4     3 (average)
  1106                           ; direct_byte            7     6 (fixed)
  1107                           ; jumptable            260     6 (fixed)
  1108                           ;	Chosen strategy is simple_byte
  1109  0360  1283               	bcf	3,5	;RP0=0, select bank0
  1110  0361  082D               	movf	Serial_LCD_Chr@row+1,w
  1111  0362  3A00               	xorlw	0	; case 0
  1112  0363  1903               	skipnz
  1113  0364  2B66               	goto	l1027
  1114  0365  2B74               	goto	l901
  1115  0366                     l1027:	
  1116                           
  1117                           ; Switch size 1, requested type "space"
  1118                           ; Number of cases is 4, Range of values is 1 to 4
  1119                           ; switch strategies available:
  1120                           ; Name         Instructions Cycles
  1121                           ; simple_byte           13     7 (average)
  1122                           ; direct_byte           13     9 (fixed)
  1123                           ; jumptable            263     9 (fixed)
  1124                           ;	Chosen strategy is simple_byte
  1125  0366  082C               	movf	Serial_LCD_Chr@row,w
  1126  0367  3A01               	xorlw	1	; case 1
  1127  0368  1903               	skipnz
  1128  0369  2B4C               	goto	l889
  1129  036A  3A03               	xorlw	3	; case 2
  1130  036B  1903               	skipnz
  1131  036C  2B51               	goto	l891
  1132  036D  3A01               	xorlw	1	; case 3
  1133  036E  1903               	skipnz
  1134  036F  2B56               	goto	l893
  1135  0370  3A07               	xorlw	7	; case 4
  1136  0371  1903               	skipnz
  1137  0372  2B5B               	goto	l895
  1138  0373  2B74               	goto	l901
  1139  0374                     l901:	
  1140                           
  1141                           ;newmain.c: 122: RS = 1;
  1142  0374  3001               	movlw	1
  1143  0375  1283               	bcf	3,5	;RP0=0, select bank0
  1144  0376  00C4               	movwf	_RS
  1145  0377  3000               	movlw	0
  1146  0378  00C5               	movwf	_RS+1
  1147                           
  1148                           ;newmain.c: 123: Low_Nibble = LCDChar & 15;
  1149  0379  0830               	movf	Serial_LCD_Chr@LCDChar,w
  1150  037A  390F               	andlw	15
  1151  037B  00B1               	movwf	??_Serial_LCD_Chr
  1152  037C  01B2               	clrf	??_Serial_LCD_Chr+1
  1153  037D  0831               	movf	??_Serial_LCD_Chr,w
  1154  037E  00D2               	movwf	_Low_Nibble
  1155  037F  0832               	movf	??_Serial_LCD_Chr+1,w
  1156  0380  00D3               	movwf	_Low_Nibble+1
  1157                           
  1158                           ;newmain.c: 124: High_Nibble = LCDChar/16;
  1159  0381  3010               	movlw	16
  1160  0382  00A0               	movwf	___awdiv@divisor
  1161  0383  3000               	movlw	0
  1162  0384  00A1               	movwf	___awdiv@divisor+1
  1163  0385  0830               	movf	Serial_LCD_Chr@LCDChar,w
  1164  0386  00B1               	movwf	??_Serial_LCD_Chr
  1165  0387  01B2               	clrf	??_Serial_LCD_Chr+1
  1166  0388  0831               	movf	??_Serial_LCD_Chr,w
  1167  0389  00A2               	movwf	___awdiv@dividend
  1168  038A  0832               	movf	??_Serial_LCD_Chr+1,w
  1169  038B  00A3               	movwf	___awdiv@dividend+1
  1170  038C  239E               	fcall	___awdiv
  1171  038D  1283               	bcf	3,5	;RP0=0, select bank0
  1172  038E  0821               	movf	?___awdiv+1,w
  1173  038F  00D1               	movwf	_High_Nibble+1
  1174  0390  0820               	movf	?___awdiv,w
  1175  0391  00D0               	movwf	_High_Nibble
  1176                           
  1177                           ;newmain.c: 125: Write_Nibble(High_Nibble);
  1178  0392  0851               	movf	_High_Nibble+1,w
  1179  0393  00A1               	movwf	Write_Nibble@N+1
  1180  0394  0850               	movf	_High_Nibble,w
  1181  0395  00A0               	movwf	Write_Nibble@N
  1182  0396  22AD               	fcall	_Write_Nibble
  1183                           
  1184                           ;newmain.c: 126: Write_Nibble(Low_Nibble);
  1185  0397  1283               	bcf	3,5	;RP0=0, select bank0
  1186  0398  0853               	movf	_Low_Nibble+1,w
  1187  0399  00A1               	movwf	Write_Nibble@N+1
  1188  039A  0852               	movf	_Low_Nibble,w
  1189  039B  00A0               	movwf	Write_Nibble@N
  1190  039C  22AD               	fcall	_Write_Nibble
  1191  039D  0008               	return
  1192  039E                     __end_of_Serial_LCD_Chr:	
  1193                           
  1194                           	psect	text7
  1195  02F9                     __ptext7:	
  1196 ;; *************** function _Serial_LCD_Cmd *****************
  1197 ;; Defined at:
  1198 ;;		line 90 in file "newmain.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;  Command         1    wreg     unsigned char 
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  Command         1   11[BANK0 ] unsigned char 
  1203 ;; Return value:  Size  Location     Type
  1204 ;;                  1    wreg      void 
  1205 ;; Registers used:
  1206 ;;		wreg, status,2, status,0, pclath, cstack
  1207 ;; Tracked objects:
  1208 ;;		On entry : 0/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMMON   BANK0
  1212 ;;      Params:         0       0
  1213 ;;      Locals:         0       1
  1214 ;;      Temps:          0       2
  1215 ;;      Totals:         0       3
  1216 ;;Total ram usage:        3 bytes
  1217 ;; Hardware stack levels used:    1
  1218 ;; Hardware stack levels required when called:    1
  1219 ;; This function calls:
  1220 ;;		_Delay_50ms
  1221 ;;		_Write_Nibble
  1222 ;;		___awdiv
  1223 ;; This function is called by:
  1224 ;;		_Serial_LCD_Chr
  1225 ;;		_Serial_LCD_Init
  1226 ;;		_main
  1227 ;; This function uses a non-reentrant model
  1228 ;;
  1229                           
  1230                           
  1231                           ;psect for function _Serial_LCD_Cmd
  1232  02F9                     _Serial_LCD_Cmd:	
  1233                           
  1234                           ;incstack = 0
  1235                           ; Regs used in _Serial_LCD_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1236                           ;Serial_LCD_Cmd@Command stored from wreg
  1237  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  1238  02FA  00AB               	movwf	Serial_LCD_Cmd@Command
  1239                           
  1240                           ;newmain.c: 92: RS = 0;
  1241  02FB  01C4               	clrf	_RS
  1242  02FC  01C5               	clrf	_RS+1
  1243                           
  1244                           ;newmain.c: 93: Low_Nibble = Command & 15;
  1245  02FD  082B               	movf	Serial_LCD_Cmd@Command,w
  1246  02FE  390F               	andlw	15
  1247  02FF  00A9               	movwf	??_Serial_LCD_Cmd
  1248  0300  01AA               	clrf	??_Serial_LCD_Cmd+1
  1249  0301  0829               	movf	??_Serial_LCD_Cmd,w
  1250  0302  00D2               	movwf	_Low_Nibble
  1251  0303  082A               	movf	??_Serial_LCD_Cmd+1,w
  1252  0304  00D3               	movwf	_Low_Nibble+1
  1253                           
  1254                           ;newmain.c: 94: High_Nibble = Command/16;
  1255  0305  3010               	movlw	16
  1256  0306  00A0               	movwf	___awdiv@divisor
  1257  0307  3000               	movlw	0
  1258  0308  00A1               	movwf	___awdiv@divisor+1
  1259  0309  082B               	movf	Serial_LCD_Cmd@Command,w
  1260  030A  00A9               	movwf	??_Serial_LCD_Cmd
  1261  030B  01AA               	clrf	??_Serial_LCD_Cmd+1
  1262  030C  0829               	movf	??_Serial_LCD_Cmd,w
  1263  030D  00A2               	movwf	___awdiv@dividend
  1264  030E  082A               	movf	??_Serial_LCD_Cmd+1,w
  1265  030F  00A3               	movwf	___awdiv@dividend+1
  1266  0310  239E               	fcall	___awdiv
  1267  0311  1283               	bcf	3,5	;RP0=0, select bank0
  1268  0312  0821               	movf	?___awdiv+1,w
  1269  0313  00D1               	movwf	_High_Nibble+1
  1270  0314  0820               	movf	?___awdiv,w
  1271  0315  00D0               	movwf	_High_Nibble
  1272                           
  1273                           ;newmain.c: 95: Write_Nibble(High_Nibble);
  1274  0316  0851               	movf	_High_Nibble+1,w
  1275  0317  00A1               	movwf	Write_Nibble@N+1
  1276  0318  0850               	movf	_High_Nibble,w
  1277  0319  00A0               	movwf	Write_Nibble@N
  1278  031A  22AD               	fcall	_Write_Nibble
  1279                           
  1280                           ;newmain.c: 96: Write_Nibble(Low_Nibble);
  1281  031B  1283               	bcf	3,5	;RP0=0, select bank0
  1282  031C  0853               	movf	_Low_Nibble+1,w
  1283  031D  00A1               	movwf	Write_Nibble@N+1
  1284  031E  0852               	movf	_Low_Nibble,w
  1285  031F  00A0               	movwf	Write_Nibble@N
  1286  0320  22AD               	fcall	_Write_Nibble
  1287                           
  1288                           ;newmain.c: 97: if((Command == 0x0C) || (Command == 0x01) || (Command == 0x0E) || (Comma
      +                          nd == 0x0F) || (Command == 0x10)
  1289                           ;newmain.c: 98: || (Command == 0x1E) || (Command == 0x18) || (Command == 0x08) || (Comma
      +                          nd == 0x14)
  1290                           ;newmain.c: 99: || (Command == 0x02))
  1291  0321  300C               	movlw	12
  1292  0322  1283               	bcf	3,5	;RP0=0, select bank0
  1293  0323  062B               	xorwf	Serial_LCD_Cmd@Command,w
  1294  0324  1903               	btfsc	3,2
  1295  0325  2B49               	goto	l885
  1296  0326  032B               	decf	Serial_LCD_Cmd@Command,w
  1297  0327  1903               	btfsc	3,2
  1298  0328  2B49               	goto	l885
  1299  0329  300E               	movlw	14
  1300  032A  062B               	xorwf	Serial_LCD_Cmd@Command,w
  1301  032B  1903               	btfsc	3,2
  1302  032C  2B49               	goto	l885
  1303  032D  300F               	movlw	15
  1304  032E  062B               	xorwf	Serial_LCD_Cmd@Command,w
  1305  032F  1903               	btfsc	3,2
  1306  0330  2B49               	goto	l885
  1307  0331  3010               	movlw	16
  1308  0332  062B               	xorwf	Serial_LCD_Cmd@Command,w
  1309  0333  1903               	btfsc	3,2
  1310  0334  2B49               	goto	l885
  1311  0335  301E               	movlw	30
  1312  0336  062B               	xorwf	Serial_LCD_Cmd@Command,w
  1313  0337  1903               	btfsc	3,2
  1314  0338  2B49               	goto	l885
  1315  0339  3018               	movlw	24
  1316  033A  062B               	xorwf	Serial_LCD_Cmd@Command,w
  1317  033B  1903               	btfsc	3,2
  1318  033C  2B49               	goto	l885
  1319  033D  3008               	movlw	8
  1320  033E  062B               	xorwf	Serial_LCD_Cmd@Command,w
  1321  033F  1903               	btfsc	3,2
  1322  0340  2B49               	goto	l885
  1323  0341  3014               	movlw	20
  1324  0342  062B               	xorwf	Serial_LCD_Cmd@Command,w
  1325  0343  1903               	btfsc	3,2
  1326  0344  2B49               	goto	l885
  1327  0345  3002               	movlw	2
  1328  0346  062B               	xorwf	Serial_LCD_Cmd@Command,w
  1329  0347  1D03               	btfss	3,2
  1330  0348  0008               	return
  1331  0349                     l885:	
  1332                           
  1333                           ;newmain.c: 100: Delay_50ms();
  1334  0349  2165               	fcall	_Delay_50ms
  1335  034A  0008               	return
  1336  034B                     __end_of_Serial_LCD_Cmd:	
  1337                           
  1338                           	psect	text8
  1339  039E                     __ptext8:	
  1340 ;; *************** function ___awdiv *****************
  1341 ;; Defined at:
  1342 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\awdiv.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;  divisor         2    0[BANK0 ] int 
  1345 ;;  dividend        2    2[BANK0 ] int 
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;  quotient        2    7[BANK0 ] int 
  1348 ;;  sign            1    6[BANK0 ] unsigned char 
  1349 ;;  counter         1    5[BANK0 ] unsigned char 
  1350 ;; Return value:  Size  Location     Type
  1351 ;;                  2    0[BANK0 ] int 
  1352 ;; Registers used:
  1353 ;;		wreg, status,2, status,0
  1354 ;; Tracked objects:
  1355 ;;		On entry : 0/0
  1356 ;;		On exit  : 0/0
  1357 ;;		Unchanged: 0/0
  1358 ;; Data sizes:     COMMON   BANK0
  1359 ;;      Params:         0       4
  1360 ;;      Locals:         0       4
  1361 ;;      Temps:          0       1
  1362 ;;      Totals:         0       9
  1363 ;;Total ram usage:        9 bytes
  1364 ;; Hardware stack levels used:    1
  1365 ;; This function calls:
  1366 ;;		Nothing
  1367 ;; This function is called by:
  1368 ;;		_Serial_LCD_Cmd
  1369 ;;		_Serial_LCD_Chr
  1370 ;; This function uses a non-reentrant model
  1371 ;;
  1372                           
  1373                           
  1374                           ;psect for function ___awdiv
  1375  039E                     ___awdiv:	
  1376                           
  1377                           ;incstack = 0
  1378                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1379  039E  1283               	bcf	3,5	;RP0=0, select bank0
  1380  039F  01A6               	clrf	___awdiv@sign
  1381  03A0  1FA1               	btfss	___awdiv@divisor+1,7
  1382  03A1  2BA9               	goto	l819
  1383  03A2  09A0               	comf	___awdiv@divisor,f
  1384  03A3  09A1               	comf	___awdiv@divisor+1,f
  1385  03A4  0AA0               	incf	___awdiv@divisor,f
  1386  03A5  1903               	skipnz
  1387  03A6  0AA1               	incf	___awdiv@divisor+1,f
  1388  03A7  01A6               	clrf	___awdiv@sign
  1389  03A8  0AA6               	incf	___awdiv@sign,f
  1390  03A9                     l819:	
  1391  03A9  1FA3               	btfss	___awdiv@dividend+1,7
  1392  03AA  2BB4               	goto	l825
  1393  03AB  09A2               	comf	___awdiv@dividend,f
  1394  03AC  09A3               	comf	___awdiv@dividend+1,f
  1395  03AD  0AA2               	incf	___awdiv@dividend,f
  1396  03AE  1903               	skipnz
  1397  03AF  0AA3               	incf	___awdiv@dividend+1,f
  1398  03B0  3001               	movlw	1
  1399  03B1  00A4               	movwf	??___awdiv
  1400  03B2  0824               	movf	??___awdiv,w
  1401  03B3  06A6               	xorwf	___awdiv@sign,f
  1402  03B4                     l825:	
  1403  03B4  01A7               	clrf	___awdiv@quotient
  1404  03B5  01A8               	clrf	___awdiv@quotient+1
  1405  03B6  0820               	movf	___awdiv@divisor,w
  1406  03B7  0421               	iorwf	___awdiv@divisor+1,w
  1407  03B8  1903               	btfsc	3,2
  1408  03B9  2BEB               	goto	l847
  1409  03BA  01A5               	clrf	___awdiv@counter
  1410  03BB  0AA5               	incf	___awdiv@counter,f
  1411  03BC                     l835:	
  1412  03BC  1BA1               	btfsc	___awdiv@divisor+1,7
  1413  03BD  2BCA               	goto	l837
  1414  03BE  3001               	movlw	1
  1415  03BF                     u505:	
  1416  03BF  1003               	clrc
  1417  03C0  0DA0               	rlf	___awdiv@divisor,f
  1418  03C1  0DA1               	rlf	___awdiv@divisor+1,f
  1419  03C2  3EFF               	addlw	-1
  1420  03C3  1D03               	skipz
  1421  03C4  2BBF               	goto	u505
  1422  03C5  3001               	movlw	1
  1423  03C6  00A4               	movwf	??___awdiv
  1424  03C7  0824               	movf	??___awdiv,w
  1425  03C8  07A5               	addwf	___awdiv@counter,f
  1426  03C9  2BBC               	goto	l835
  1427  03CA                     l837:	
  1428  03CA  3001               	movlw	1
  1429  03CB                     u525:	
  1430  03CB  1003               	clrc
  1431  03CC  0DA7               	rlf	___awdiv@quotient,f
  1432  03CD  0DA8               	rlf	___awdiv@quotient+1,f
  1433  03CE  3EFF               	addlw	-1
  1434  03CF  1D03               	skipz
  1435  03D0  2BCB               	goto	u525
  1436  03D1  0821               	movf	___awdiv@divisor+1,w
  1437  03D2  0223               	subwf	___awdiv@dividend+1,w
  1438  03D3  1D03               	skipz
  1439  03D4  2BD7               	goto	u535
  1440  03D5  0820               	movf	___awdiv@divisor,w
  1441  03D6  0222               	subwf	___awdiv@dividend,w
  1442  03D7                     u535:	
  1443  03D7  1C03               	skipc
  1444  03D8  2BE0               	goto	l843
  1445  03D9  0820               	movf	___awdiv@divisor,w
  1446  03DA  02A2               	subwf	___awdiv@dividend,f
  1447  03DB  0821               	movf	___awdiv@divisor+1,w
  1448  03DC  1C03               	skipc
  1449  03DD  03A3               	decf	___awdiv@dividend+1,f
  1450  03DE  02A3               	subwf	___awdiv@dividend+1,f
  1451  03DF  1427               	bsf	___awdiv@quotient,0
  1452  03E0                     l843:	
  1453  03E0  3001               	movlw	1
  1454  03E1                     u545:	
  1455  03E1  1003               	clrc
  1456  03E2  0CA1               	rrf	___awdiv@divisor+1,f
  1457  03E3  0CA0               	rrf	___awdiv@divisor,f
  1458  03E4  3EFF               	addlw	-1
  1459  03E5  1D03               	skipz
  1460  03E6  2BE1               	goto	u545
  1461  03E7  3001               	movlw	1
  1462  03E8  02A5               	subwf	___awdiv@counter,f
  1463  03E9  1D03               	btfss	3,2
  1464  03EA  2BCA               	goto	l837
  1465  03EB                     l847:	
  1466  03EB  0826               	movf	___awdiv@sign,w
  1467  03EC  1903               	btfsc	3,2
  1468  03ED  2BF3               	goto	l851
  1469  03EE  09A7               	comf	___awdiv@quotient,f
  1470  03EF  09A8               	comf	___awdiv@quotient+1,f
  1471  03F0  0AA7               	incf	___awdiv@quotient,f
  1472  03F1  1903               	skipnz
  1473  03F2  0AA8               	incf	___awdiv@quotient+1,f
  1474  03F3                     l851:	
  1475  03F3  0828               	movf	___awdiv@quotient+1,w
  1476  03F4  00A1               	movwf	?___awdiv+1
  1477  03F5  0827               	movf	___awdiv@quotient,w
  1478  03F6  00A0               	movwf	?___awdiv
  1479  03F7  0008               	return
  1480  03F8                     __end_of___awdiv:	
  1481                           
  1482                           	psect	text9
  1483  02AD                     __ptext9:	
  1484 ;; *************** function _Write_Nibble *****************
  1485 ;; Defined at:
  1486 ;;		line 62 in file "newmain.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  N               2    0[BANK0 ] unsigned short 
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;		None
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  1    wreg      void 
  1493 ;; Registers used:
  1494 ;;		wreg, status,2, status,0
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMMON   BANK0
  1500 ;;      Params:         0       2
  1501 ;;      Locals:         0       0
  1502 ;;      Temps:          0       2
  1503 ;;      Totals:         0       4
  1504 ;;Total ram usage:        4 bytes
  1505 ;; Hardware stack levels used:    1
  1506 ;; This function calls:
  1507 ;;		Nothing
  1508 ;; This function is called by:
  1509 ;;		_Serial_LCD_Cmd
  1510 ;;		_Serial_LCD_Chr
  1511 ;; This function uses a non-reentrant model
  1512 ;;
  1513                           
  1514                           
  1515                           ;psect for function _Write_Nibble
  1516  02AD                     _Write_Nibble:	
  1517                           
  1518                           ;newmain.c: 63: RC5 = 0;
  1519                           
  1520                           ;incstack = 0
  1521                           ; Regs used in _Write_Nibble: [wreg+status,2+status,0]
  1522  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  1523  02AE  1287               	bcf	7,5	;volatile
  1524                           
  1525                           ;newmain.c: 65: RC2 = 0;
  1526  02AF  1107               	bcf	7,2	;volatile
  1527                           
  1528                           ;newmain.c: 66: RC0 = RS;
  1529  02B0  1C44               	btfss	_RS,0
  1530  02B1  2AB5               	goto	u420
  1531  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  1532  02B3  1407               	bsf	7,0	;volatile
  1533  02B4  2AB7               	goto	u434
  1534  02B5                     u420:	
  1535  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  1536  02B6  1007               	bcf	7,0	;volatile
  1537  02B7                     u434:	
  1538                           
  1539                           ;newmain.c: 67: RC2 = 1;
  1540  02B7  1507               	bsf	7,2	;volatile
  1541                           
  1542                           ;newmain.c: 68: RC2 = 0;
  1543  02B8  1107               	bcf	7,2	;volatile
  1544                           
  1545                           ;newmain.c: 72: Mask = 8;
  1546  02B9  3008               	movlw	8
  1547  02BA  00CA               	movwf	_Mask
  1548  02BB  3000               	movlw	0
  1549  02BC  00CB               	movwf	_Mask+1
  1550                           
  1551                           ;newmain.c: 73: for (t=0; t<4; t++){
  1552  02BD  01C6               	clrf	_t
  1553  02BE  01C7               	clrf	_t+1
  1554  02BF  3000               	movlw	0
  1555  02C0  0247               	subwf	_t+1,w
  1556  02C1  3004               	movlw	4
  1557  02C2  1903               	skipnz
  1558  02C3  0246               	subwf	_t,w
  1559  02C4  1803               	btfsc	3,0
  1560  02C5  2AED               	goto	l39
  1561  02C6                     l795:	
  1562                           
  1563                           ;newmain.c: 74: Flag = N & Mask;
  1564  02C6  084A               	movf	_Mask,w
  1565  02C7  0520               	andwf	Write_Nibble@N,w
  1566  02C8  00C2               	movwf	_Flag
  1567  02C9  084B               	movf	_Mask+1,w
  1568  02CA  0521               	andwf	Write_Nibble@N+1,w
  1569  02CB  00C3               	movwf	_Flag+1
  1570                           
  1571                           ;newmain.c: 75: if(Flag==0) RC0 = 0;
  1572  02CC  0842               	movf	_Flag,w
  1573  02CD  0443               	iorwf	_Flag+1,w
  1574  02CE  1D03               	btfss	3,2
  1575  02CF  2AD2               	goto	l40
  1576  02D0  1007               	bcf	7,0	;volatile
  1577  02D1  2AD3               	goto	l41
  1578  02D2                     l40:	
  1579                           
  1580                           ;newmain.c: 76: else RC0 = 1;
  1581  02D2  1407               	bsf	7,0	;volatile
  1582  02D3                     l41:	
  1583                           
  1584                           ;newmain.c: 77: RC2 = 1;
  1585  02D3  1507               	bsf	7,2	;volatile
  1586                           
  1587                           ;newmain.c: 78: RC2 = 0;
  1588  02D4  1107               	bcf	7,2	;volatile
  1589                           
  1590                           ;newmain.c: 79: Mask = Mask >> 1;
  1591  02D5  084B               	movf	_Mask+1,w
  1592  02D6  00A3               	movwf	??_Write_Nibble+1
  1593  02D7  084A               	movf	_Mask,w
  1594  02D8  00A2               	movwf	??_Write_Nibble
  1595  02D9  1003               	clrc
  1596  02DA  0CA3               	rrf	??_Write_Nibble+1,f
  1597  02DB  0CA2               	rrf	??_Write_Nibble,f
  1598  02DC  0822               	movf	??_Write_Nibble,w
  1599  02DD  00CA               	movwf	_Mask
  1600  02DE  0823               	movf	??_Write_Nibble+1,w
  1601  02DF  00CB               	movwf	_Mask+1
  1602  02E0  3001               	movlw	1
  1603  02E1  07C6               	addwf	_t,f
  1604  02E2  1803               	skipnc
  1605  02E3  0AC7               	incf	_t+1,f
  1606  02E4  3000               	movlw	0
  1607  02E5  07C7               	addwf	_t+1,f
  1608  02E6  3000               	movlw	0
  1609  02E7  0247               	subwf	_t+1,w
  1610  02E8  3004               	movlw	4
  1611  02E9  1903               	skipnz
  1612  02EA  0246               	subwf	_t,w
  1613  02EB  1C03               	skipc
  1614  02EC  2AC6               	goto	l795
  1615  02ED                     l39:	
  1616                           
  1617                           ;newmain.c: 80: }
  1618                           ;newmain.c: 82: RC2 = 1;
  1619  02ED  1507               	bsf	7,2	;volatile
  1620                           
  1621                           ;newmain.c: 83: RC2 = 0;
  1622  02EE  1107               	bcf	7,2	;volatile
  1623                           
  1624                           ;newmain.c: 84: RC0 = 0;
  1625  02EF  1007               	bcf	7,0	;volatile
  1626                           
  1627                           ;newmain.c: 85: RC5 = 1;
  1628  02F0  1687               	bsf	7,5	;volatile
  1629                           
  1630                           ;newmain.c: 86: _delay((unsigned long)((500)*(4000000/4000000.0)));
  1631  02F1  30A6               	movlw	166
  1632  02F2  00A2               	movwf	??_Write_Nibble
  1633  02F3                     u847:	
  1634  02F3  0BA2               	decfsz	??_Write_Nibble,f
  1635  02F4  2AF3               	goto	u847
  1636  02F5  0000               	nop
  1637                           
  1638                           ;newmain.c: 87: RC5 = 0;
  1639  02F6  1283               	bcf	3,5	;RP0=0, select bank0
  1640  02F7  1287               	bcf	7,5	;volatile
  1641  02F8  0008               	return
  1642  02F9                     __end_of_Write_Nibble:	
  1643                           
  1644                           	psect	text10
  1645  0165                     __ptext10:	
  1646 ;; *************** function _Delay_50ms *****************
  1647 ;; Defined at:
  1648 ;;		line 58 in file "newmain.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;		None
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;		None
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  1    wreg      void 
  1655 ;; Registers used:
  1656 ;;		wreg
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMMON   BANK0
  1662 ;;      Params:         0       0
  1663 ;;      Locals:         0       0
  1664 ;;      Temps:          0       2
  1665 ;;      Totals:         0       2
  1666 ;;Total ram usage:        2 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; This function calls:
  1669 ;;		Nothing
  1670 ;; This function is called by:
  1671 ;;		_Serial_LCD_Cmd
  1672 ;;		_Serial_LCD_Init
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           
  1677                           ;psect for function _Delay_50ms
  1678  0165                     _Delay_50ms:	
  1679                           
  1680                           ;newmain.c: 59: _delay((unsigned long)((50)*(4000000/4000.0)));
  1681                           
  1682                           ;incstack = 0
  1683                           ; Regs used in _Delay_50ms: [wreg]
  1684  0165  3041               	movlw	65
  1685  0166  1283               	bcf	3,5	;RP0=0, select bank0
  1686  0167  00A1               	movwf	??_Delay_50ms+1
  1687  0168  30EE               	movlw	238
  1688  0169  00A0               	movwf	??_Delay_50ms
  1689  016A                     u857:	
  1690  016A  0BA0               	decfsz	??_Delay_50ms,f
  1691  016B  296A               	goto	u857
  1692  016C  0BA1               	decfsz	??_Delay_50ms+1,f
  1693  016D  296A               	goto	u857
  1694  016E  0000               	nop
  1695  016F  0008               	return
  1696  0170                     __end_of_Delay_50ms:	
  1697  005E                     btemp	set	94	;btemp
  1698  005E                     wtemp0	set	94


Data Sizes:
    Strings     8
    Constant    0
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     32      52

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 8
		 -> STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Write_String
    _lcddisplay->_Serial_LCD_Chr
    _Serial_LCD_Init->_Serial_LCD_Cmd
    _Lcd_Write_String->_Serial_LCD_Chr
    _Serial_LCD_Chr->_Serial_LCD_Cmd
    _Serial_LCD_Cmd->___awdiv

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    7984
                                             27 BANK0      5     5      0
                   _Lcd_Write_String
                     _Serial_LCD_Cmd
                    _Serial_LCD_Init
                         _lcddisplay
 ---------------------------------------------------------------------------------
 (1) _lcddisplay                                           7     1      6    3213
                                             19 BANK0      7     1      6
                     _Serial_LCD_Chr
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Serial_LCD_Init                                      0     0      0    1010
                         _Delay_50ms
                     _Serial_LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     8     3      5    2683
                                             19 BANK0      8     3      5
                     _Serial_LCD_Chr
 ---------------------------------------------------------------------------------
 (2) _Serial_LCD_Chr                                       7     2      5    2387
                                             12 BANK0      7     2      5
                     _Serial_LCD_Cmd
                       _Write_Nibble
                            ___awdiv
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _Serial_LCD_Cmd                                       3     3      0    1010
                                              9 BANK0      3     3      0
                         _Delay_50ms
                       _Write_Nibble
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     512
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _Write_Nibble                                         4     2      2     234
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (4) _Delay_50ms                                           2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Write_String
     _Serial_LCD_Chr
       _Serial_LCD_Cmd
         _Delay_50ms
         _Write_Nibble
         ___awdiv
       _Write_Nibble
       ___awdiv
       ___lwdiv (ARG)
       ___lwmod (ARG)
   _Serial_LCD_Cmd
     _Delay_50ms
     _Write_Nibble
     ___awdiv
   _Serial_LCD_Init
     _Delay_50ms
     _Serial_LCD_Cmd
       _Delay_50ms
       _Write_Nibble
       ___awdiv
   _lcddisplay
     _Serial_LCD_Chr
       _Serial_LCD_Cmd
         _Delay_50ms
         _Write_Nibble
         ___awdiv
       _Write_Nibble
       ___awdiv
       ___lwdiv (ARG)
       ___lwmod (ARG)
     ___lwdiv
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E     20      34       4       83.9%
ABS                  0      0      34       5        0.0%
DATA                 0      0      34       6        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Dec 23 15:22:35 2017

                        _N 0048                          _p 004E                          _q 004C  
                        _t 0046                          pc 0002                __CFG_CP$OFF 0000  
                       l40 02D2                         l41 02D3                         l39 02ED  
                       _RS 0044               ___awdiv@sign 0026                         fsr 0004  
                      l901 0374                        l825 03B4                        l851 03F3  
                      l843 03E0                        l835 03BC                        l819 03A9  
                      l837 03CA                        l933 0215                        l925 01F1  
                      l847 03EB                        l927 01FF                        l951 01CA  
                      l937 0220                        l795 02C6                        l891 0351  
                      l955 01D8                        l885 0349                        l893 0356  
                      l973 0187                        l949 01BC                        l895 035B  
                      l975 01AC                        l959 01E3                        l991 026D  
                      l889 034C                        l899 0360                        _RC0 0038  
                      _RC2 003A                        _RC5 003D                        u420 02B5  
                      u505 03BF                        u434 02B7               __CFG_CPD$OFF 0000  
                      u525 03CB                        u535 03D7                        u545 03E1  
                      u705 0200                        u715 020C                        u725 0216  
                      u815 0287                        u755 01BF                        u685 01F4  
                      u837 029E                        u847 02F3                        u775 01D0  
                      u857 016A                        u785 01D9                        fsr0 0004  
                      indf 0000                       l1027 0366                       STR_1 0007  
    __size_of_Write_Nibble 004C        Lcd_Write_String@col 0035                       _Flag 0042  
               _Delay_50ms 0165        Lcd_Write_String@row 0033                       _Mask 004A  
        ?_Lcd_Write_String 0033                       _main 0265                       _temp 0040  
                     btemp 005E              __CFG_BOREN$ON 0000                       start 0000  
       ??_Lcd_Write_String 0038      Serial_LCD_Chr@LCDChar 0030             _Serial_LCD_Cmd 02F9  
           _Serial_LCD_Chr 034B                      ?_main 0020            __end_of___awdiv 03F8  
            __CFG_WDTE$OFF 0000                      _ANSEL 0091            ___awdiv@divisor 0020  
          __end_of___lwdiv 0225            __end_of___lwmod 01E8            ___awdiv@counter 0025  
    Serial_LCD_Cmd@Command 002B                      _TRISC 0087               _Write_Nibble 02AD  
                    main@i 003E                      pclath 000A                      status 0003  
                    wtemp0 005E             __CFG_MCLRE$OFF 0000            __initialization 03F8  
             __end_of_main 02AD     __end_of_Serial_LCD_Cmd 034B     __end_of_Serial_LCD_Chr 039E  
                   ??_main 003B            _Serial_LCD_Init 0170                 _Low_Nibble 0052  
         ___awdiv@dividend 0022                _High_Nibble 0050                ?_Delay_50ms 0020  
           __CFG_PWRTE$OFF 0000                  ??___awdiv 0024            ?_Serial_LCD_Cmd 0020  
          ?_Serial_LCD_Chr 002C                  ??___lwdiv 0024                  ??___lwmod 0024  
         ___awdiv@quotient 0027              lcddisplay@col 0035              lcddisplay@num 0037  
            lcddisplay@row 0033    __end_of__initialization 03FD             __pcstackCOMMON 0000  
  __end_of_Serial_LCD_Init 0184        __size_of_Delay_50ms 000B                 __pbssBANK0 0040  
               __pmaintext 0265  __size_of_Lcd_Write_String 0031                 _lcddisplay 0225  
               __stringtab 0001                    ___awdiv 039E                    ___lwdiv 01E8  
                  ___lwmod 01B5           ?_Serial_LCD_Init 0020                    __ptext1 0225  
                  __ptext2 01B5                    __ptext3 01E8                    __ptext4 0170  
                  __ptext5 0184                    __ptext6 034B                    __ptext7 02F9  
                  __ptext8 039E                    __ptext9 02AD                    clrloop0 015E  
     end_of_initialization 03FD               ??_Delay_50ms 0020           ??_Serial_LCD_Cmd 0029  
         ??_Serial_LCD_Chr 0031         __end_of_Delay_50ms 0170                ?_lcddisplay 0033  
        Lcd_Write_String@a 0037          Lcd_Write_String@i 0039           _Lcd_Write_String 0184  
      start_initialization 03F8        __size_of_lcddisplay 0040              ?_Write_Nibble 0020  
                ___latbits 0000              __pcstackBANK0 0020          Serial_LCD_Chr@col 002E  
        Serial_LCD_Chr@row 002C              Write_Nibble@N 0020           ___lwdiv@dividend 0022  
                 ?___awdiv 0020                   ?___lwdiv 0020                   ?___lwmod 0020  
                __pstrings 0001             ??_Write_Nibble 0022           ___lwdiv@quotient 0025  
                clear_ram0 015D                __stringbase 0006   __size_of_Serial_LCD_Init 0014  
             ??_lcddisplay 0039   __end_of_Lcd_Write_String 01B5           __size_of___awdiv 005A  
         __size_of___lwdiv 003D         __end_of_lcddisplay 0265           __size_of___lwmod 0033  
       __end_of__stringtab 0007            ___lwdiv@divisor 0020            ___lwdiv@counter 0027  
                 __ptext10 0165              __size_of_main 0048       __end_of_Write_Nibble 02F9  
  __size_of_Serial_LCD_Cmd 0052    __size_of_Serial_LCD_Chr 0053           ___lwmod@dividend 0022  
        ??_Serial_LCD_Init 0000                  stringcode 0001            ___lwmod@divisor 0020  
          ___lwmod@counter 0025                   stringdir 0001                   stringtab 0001  
        __CFG_FOSC$INTRCIO 0000  
