

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Dec 23 13:10:59 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F676
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	dabs	1,0x5E,2
    21  0000                     
    22                           ; Version 1.44
    23                           ; Generated 14/09/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F676 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0007                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0019                     	;# 
    71  001E                     	;# 
    72  001F                     	;# 
    73  0081                     	;# 
    74  0085                     	;# 
    75  0087                     	;# 
    76  008C                     	;# 
    77  008E                     	;# 
    78  0090                     	;# 
    79  0091                     	;# 
    80  0095                     	;# 
    81  0095                     	;# 
    82  0096                     	;# 
    83  0096                     	;# 
    84  0099                     	;# 
    85  009A                     	;# 
    86  009A                     	;# 
    87  009B                     	;# 
    88  009C                     	;# 
    89  009D                     	;# 
    90  009E                     	;# 
    91  009F                     	;# 
    92                           
    93                           	psect	idataBANK0
    94  02A1                     __pidataBANK0:	
    95                           
    96                           ;initializer for _Message2
    97  02A1  3475               	retlw	117
    98  02A2  3473               	retlw	115
    99  02A3  3469               	retlw	105
   100  02A4  346E               	retlw	110
   101  02A5  3467               	retlw	103
   102  02A6  3420               	retlw	32
   103  02A7  3437               	retlw	55
   104  02A8  3434               	retlw	52
   105  02A9  3448               	retlw	72
   106  02AA  3443               	retlw	67
   107  02AB  3435               	retlw	53
   108  02AC  3439               	retlw	57
   109  02AD  3435               	retlw	53
   110  02AE  3400               	retlw	0
   111                           
   112                           ;initializer for _Message1
   113  02AF  3433               	retlw	51
   114  02B0  342D               	retlw	45
   115  02B1  3457               	retlw	87
   116  02B2  3469               	retlw	105
   117  02B3  3472               	retlw	114
   118  02B4  3465               	retlw	101
   119  02B5  3420               	retlw	32
   120  02B6  344C               	retlw	76
   121  02B7  3443               	retlw	67
   122  02B8  3444               	retlw	68
   123  02B9  3400               	retlw	0
   124  0038                     _RC0	set	56
   125  003A                     _RC2	set	58
   126  003D                     _RC5	set	61
   127  0087                     _TRISC	set	135
   128  0091                     _ANSEL	set	145
   129                           
   130                           ; #config settings
   131  0000                     
   132                           	psect	cinit
   133  03EF                     start_initialization:	
   134  03EF                     __initialization:	
   135                           
   136                           ; Initialize objects allocated to BANK0
   137  03EF  1383               	bcf	3,7	;select IRP bank0
   138  03F0  3039               	movlw	low (__pdataBANK0+25)
   139  03F1  00DD               	movwf	btemp+-1
   140  03F2  3002               	movlw	high __pidataBANK0
   141  03F3  00DE               	movwf	btemp
   142  03F4  30A1               	movlw	low __pidataBANK0
   143  03F5  00DF               	movwf	btemp+1
   144  03F6  3020               	movlw	low __pdataBANK0
   145  03F7  0084               	movwf	4
   146  03F8  2296               	fcall	init_ram0
   147                           
   148                           ; Clear objects allocated to BANK0
   149  03F9  3039               	movlw	low __pbssBANK0
   150  03FA  0084               	movwf	4
   151  03FB  304D               	movlw	low (__pbssBANK0+20)
   152  03FC  227F               	fcall	clear_ram0
   153  03FD                     end_of_initialization:	
   154                           ;End of C runtime variable initialization code
   155                           
   156  03FD                     __end_of__initialization:	
   157  03FD  0183               	clrf	3
   158  03FE  2B6A               	ljmp	_main	;jump to C main() function
   159                           
   160                           	psect	bssBANK0
   161  0039                     __pbssBANK0:	
   162  0039                     _temp:	
   163  0039                     	ds	2
   164  003B                     _Flag:	
   165  003B                     	ds	2
   166  003D                     _RS:	
   167  003D                     	ds	2
   168  003F                     _t:	
   169  003F                     	ds	2
   170  0041                     _N:	
   171  0041                     	ds	2
   172  0043                     _Mask:	
   173  0043                     	ds	2
   174  0045                     _q:	
   175  0045                     	ds	2
   176  0047                     _p:	
   177  0047                     	ds	2
   178  0049                     _High_Nibble:	
   179  0049                     	ds	2
   180  004B                     _Low_Nibble:	
   181  004B                     	ds	2
   182                           
   183                           	psect	dataBANK0
   184  0020                     __pdataBANK0:	
   185  0020                     _Message2:	
   186  0020                     	ds	14
   187  002E                     _Message1:	
   188  002E                     	ds	11
   189                           
   190                           	psect	inittext
   191  0292                     init_fetch0:	
   192                           ;	Called with low address in FSR and high address in W
   193                           
   194  0292  085E               	movf	94,w
   195  0293  008A               	movwf	10
   196  0294  085F               	movf	95,w
   197  0295  0082               	movwf	2
   198  0296                     init_ram0:	
   199                           ;Called with:
   200                           ;	high address of idata address in btemp 
   201                           ;	low address of idata address in btemp+1 
   202                           ;	low address of data in FSR
   203                           ;	high address + 1 of data in btemp-1
   204                           
   205  0296  2292               	fcall	init_fetch0
   206  0297  0080               	movwf	0
   207  0298  0A84               	incf	4,f
   208  0299  0804               	movf	4,w
   209  029A  065D               	xorwf	93,w
   210  029B  1903               	btfsc	3,2
   211  029C  3400               	retlw	0
   212  029D  0ADF               	incf	95,f
   213  029E  1903               	btfsc	3,2
   214  029F  0ADE               	incf	94,f
   215  02A0  2A96               	goto	init_ram0
   216                           
   217                           	psect	clrtext
   218  027F                     clear_ram0:	
   219                           ;	Called with FSR containing the base address, and
   220                           ;	W with the last address+1
   221                           
   222  027F  0064               	clrwdt	;clear the watchdog before getting into this loop
   223  0280                     clrloop0:	
   224  0280  0180               	clrf	0	;clear RAM location pointed to by FSR
   225  0281  0A84               	incf	4,f	;increment pointer
   226  0282  0604               	xorwf	4,w	;XOR with final address
   227  0283  1903               	btfsc	3,2	;have we reached the end yet?
   228  0284  3400               	retlw	0	;all done for this memory range, return
   229  0285  0604               	xorwf	4,w	;XOR again to restore value
   230  0286  2A80               	goto	clrloop0	;do the next byte
   231                           
   232                           	psect	cstackCOMMON
   233  0000                     __pcstackCOMMON:	
   234  0000                     ??_Write_LCD_Data:	
   235  0000                     ??_Write_LCD_Cmd:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0000                     ??_Initialize_LCD:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0000                     ??_Position_LCD:	
   242                           ; 1 bytes @ 0x0
   243                           
   244                           
   245                           	psect	cstackBANK0
   246  004D                     __pcstackBANK0:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  004D                     ?_Delay_50ms:	
   250  004D                     ??_Delay_50ms:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  004D                     ?_Write_LCD_Nibble:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  004D                     ?_Initialize_LCD:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  004D                     ?_Lcd_Write_String:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  004D                     ?_main:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  004D                     Write_LCD_Nibble@N:	
   266                           ; 1 bytes @ 0x0
   267                           
   268                           
   269                           ; 2 bytes @ 0x0
   270  004D                     	ds	2
   271  004F                     ??_Write_LCD_Nibble:	
   272                           
   273                           ; 1 bytes @ 0x2
   274  004F                     	ds	2
   275  0051                     ?_Write_LCD_Data:	
   276  0051                     ?_Write_LCD_Cmd:	
   277                           ; 1 bytes @ 0x4
   278                           
   279  0051                     Write_LCD_Data@D:	
   280                           ; 1 bytes @ 0x4
   281                           
   282  0051                     Write_LCD_Cmd@C:	
   283                           ; 2 bytes @ 0x4
   284                           
   285                           
   286                           ; 2 bytes @ 0x4
   287  0051                     	ds	2
   288  0053                     ?_Position_LCD:	
   289  0053                     ??_Lcd_Write_String:	
   290                           ; 1 bytes @ 0x6
   291                           
   292  0053                     Position_LCD@x:	
   293                           ; 1 bytes @ 0x6
   294                           
   295                           
   296                           ; 2 bytes @ 0x6
   297  0053                     	ds	2
   298  0055                     Position_LCD@y:	
   299                           
   300                           ; 2 bytes @ 0x8
   301  0055                     	ds	1
   302  0056                     Lcd_Write_String@i:	
   303                           
   304                           ; 2 bytes @ 0x9
   305  0056                     	ds	2
   306  0058                     Lcd_Write_String@a:	
   307                           
   308                           ; 1 bytes @ 0xB
   309  0058                     	ds	1
   310  0059                     ??_main:	
   311                           
   312                           ; 1 bytes @ 0xC
   313  0059                     	ds	3
   314                           
   315                           	psect	maintext
   316  036A                     __pmaintext:	
   317 ;;
   318 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   319 ;;
   320 ;; *************** function _main *****************
   321 ;; Defined at:
   322 ;;		line 116 in file "lcd.c"
   323 ;; Parameters:    Size  Location     Type
   324 ;;		None
   325 ;; Auto vars:     Size  Location     Type
   326 ;;		None
   327 ;; Return value:  Size  Location     Type
   328 ;;                  1    wreg      void 
   329 ;; Registers used:
   330 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   331 ;; Tracked objects:
   332 ;;		On entry : B00/0
   333 ;;		On exit  : 0/0
   334 ;;		Unchanged: 0/0
   335 ;; Data sizes:     COMMON   BANK0
   336 ;;      Params:         0       0
   337 ;;      Locals:         0       0
   338 ;;      Temps:          0       3
   339 ;;      Totals:         0       3
   340 ;;Total ram usage:        3 bytes
   341 ;; Hardware stack levels required when called:    3
   342 ;; This function calls:
   343 ;;		_Initialize_LCD
   344 ;;		_Lcd_Write_String
   345 ;;		_Position_LCD
   346 ;;		_Write_LCD_Cmd
   347 ;; This function is called by:
   348 ;;		Startup code after reset
   349 ;; This function uses a non-reentrant model
   350 ;;
   351                           
   352                           
   353                           ;psect for function _main
   354  036A                     _main:	
   355                           
   356                           ;lcd.c: 117: ANSEL = 0x00;
   357                           
   358                           ;incstack = 0
   359                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   360  036A  1683               	bsf	3,5	;RP0=1, select bank1
   361  036B  0191               	clrf	17	;volatile
   362                           
   363                           ;lcd.c: 118: TRISC = 0x00;
   364  036C  0187               	clrf	7	;volatile
   365                           
   366                           ;lcd.c: 121: Initialize_LCD();
   367  036D  2337               	fcall	_Initialize_LCD
   368  036E                     l670:	
   369                           ;lcd.c: 123: do {
   370                           
   371                           
   372                           ;lcd.c: 124: Position_LCD(1,4);
   373  036E  3001               	movlw	1
   374  036F  1283               	bcf	3,5	;RP0=0, select bank0
   375  0370  00D3               	movwf	Position_LCD@x
   376  0371  3000               	movlw	0
   377  0372  00D4               	movwf	Position_LCD@x+1
   378  0373  3004               	movlw	4
   379  0374  00D5               	movwf	Position_LCD@y
   380  0375  3000               	movlw	0
   381  0376  00D6               	movwf	Position_LCD@y+1
   382  0377  22BA               	fcall	_Position_LCD
   383                           
   384                           ;lcd.c: 125: Lcd_Write_String(Message1);
   385  0378  302E               	movlw	(low (_Message1| 0))& (0+255)
   386  0379  2314               	fcall	_Lcd_Write_String
   387                           
   388                           ;lcd.c: 126: Position_LCD(2,2);
   389  037A  3002               	movlw	2
   390  037B  1283               	bcf	3,5	;RP0=0, select bank0
   391  037C  00D3               	movwf	Position_LCD@x
   392  037D  3000               	movlw	0
   393  037E  00D4               	movwf	Position_LCD@x+1
   394  037F  3002               	movlw	2
   395  0380  00D5               	movwf	Position_LCD@y
   396  0381  3000               	movlw	0
   397  0382  00D6               	movwf	Position_LCD@y+1
   398  0383  22BA               	fcall	_Position_LCD
   399                           
   400                           ;lcd.c: 127: Lcd_Write_String(Message2);
   401  0384  3020               	movlw	(low (_Message2| 0))& (0+255)
   402  0385  2314               	fcall	_Lcd_Write_String
   403                           
   404                           ;lcd.c: 128: _delay((unsigned long)((1500)*(4000000/4000.0)));
   405  0386  3008               	movlw	8
   406  0387  1283               	bcf	3,5	;RP0=0, select bank0
   407  0388  00DB               	movwf	??_main+2
   408  0389  309D               	movlw	157
   409  038A  00DA               	movwf	??_main+1
   410  038B  3005               	movlw	5
   411  038C  00D9               	movwf	??_main
   412  038D                     u157:	
   413  038D  0BD9               	decfsz	??_main,f
   414  038E  2B8D               	goto	u157
   415  038F  0BDA               	decfsz	??_main+1,f
   416  0390  2B8D               	goto	u157
   417  0391  0BDB               	decfsz	??_main+2,f
   418  0392  2B8D               	goto	u157
   419  0393  2B94               	nop2
   420                           
   421                           ;lcd.c: 129: Write_LCD_Cmd(0x01);
   422  0394  3001               	movlw	1
   423  0395  1283               	bcf	3,5	;RP0=0, select bank0
   424  0396  00D1               	movwf	Write_LCD_Cmd@C
   425  0397  3000               	movlw	0
   426  0398  00D2               	movwf	Write_LCD_Cmd@C+1
   427  0399  22D6               	fcall	_Write_LCD_Cmd
   428                           
   429                           ;lcd.c: 130: _delay((unsigned long)((1000)*(4000000/4000.0)));
   430  039A  3006               	movlw	6
   431  039B  1283               	bcf	3,5	;RP0=0, select bank0
   432  039C  00DB               	movwf	??_main+2
   433  039D  3013               	movlw	19
   434  039E  00DA               	movwf	??_main+1
   435  039F  30AD               	movlw	173
   436  03A0  00D9               	movwf	??_main
   437  03A1                     u167:	
   438  03A1  0BD9               	decfsz	??_main,f
   439  03A2  2BA1               	goto	u167
   440  03A3  0BDA               	decfsz	??_main+1,f
   441  03A4  2BA1               	goto	u167
   442  03A5  0BDB               	decfsz	??_main+2,f
   443  03A6  2BA1               	goto	u167
   444  03A7  2BA8               	nop2
   445                           
   446                           ;lcd.c: 131: } while(1);
   447  03A8  2B6E               	goto	l670
   448  03A9                     __end_of_main:	
   449                           
   450                           	psect	text1
   451  02BA                     __ptext1:	
   452 ;; *************** function _Position_LCD *****************
   453 ;; Defined at:
   454 ;;		line 100 in file "lcd.c"
   455 ;; Parameters:    Size  Location     Type
   456 ;;  x               2    6[BANK0 ] unsigned short 
   457 ;;  y               2    8[BANK0 ] unsigned short 
   458 ;; Auto vars:     Size  Location     Type
   459 ;;		None
   460 ;; Return value:  Size  Location     Type
   461 ;;                  1    wreg      void 
   462 ;; Registers used:
   463 ;;		wreg, status,2, status,0, pclath, cstack
   464 ;; Tracked objects:
   465 ;;		On entry : 0/0
   466 ;;		On exit  : 0/0
   467 ;;		Unchanged: 0/0
   468 ;; Data sizes:     COMMON   BANK0
   469 ;;      Params:         0       4
   470 ;;      Locals:         0       0
   471 ;;      Temps:          0       0
   472 ;;      Totals:         0       4
   473 ;;Total ram usage:        4 bytes
   474 ;; Hardware stack levels used:    1
   475 ;; Hardware stack levels required when called:    2
   476 ;; This function calls:
   477 ;;		_Write_LCD_Cmd
   478 ;; This function is called by:
   479 ;;		_main
   480 ;; This function uses a non-reentrant model
   481 ;;
   482                           
   483                           
   484                           ;psect for function _Position_LCD
   485  02BA                     _Position_LCD:	
   486                           
   487                           ;lcd.c: 101: temp = 127 + y;
   488                           
   489                           ;incstack = 0
   490                           ; Regs used in _Position_LCD: [wreg+status,2+status,0+pclath+cstack]
   491  02BA  1283               	bcf	3,5	;RP0=0, select bank0
   492  02BB  0855               	movf	Position_LCD@y,w
   493  02BC  3E7F               	addlw	127
   494  02BD  00B9               	movwf	_temp
   495  02BE  0856               	movf	Position_LCD@y+1,w
   496  02BF  1803               	skipnc
   497  02C0  3E01               	addlw	1
   498  02C1  3E00               	addlw	0
   499  02C2  00BA               	movwf	_temp+1
   500                           
   501                           ;lcd.c: 102: if (x == 2) temp = temp + 64;
   502  02C3  3002               	movlw	2
   503  02C4  0653               	xorwf	Position_LCD@x,w
   504  02C5  0454               	iorwf	Position_LCD@x+1,w
   505  02C6  1D03               	btfss	3,2
   506  02C7  2AD0               	goto	l656
   507  02C8  0839               	movf	_temp,w
   508  02C9  3E40               	addlw	64
   509  02CA  00B9               	movwf	_temp
   510  02CB  083A               	movf	_temp+1,w
   511  02CC  1803               	skipnc
   512  02CD  3E01               	addlw	1
   513  02CE  3E00               	addlw	0
   514  02CF  00BA               	movwf	_temp+1
   515  02D0                     l656:	
   516                           
   517                           ;lcd.c: 103: Write_LCD_Cmd(temp);
   518  02D0  083A               	movf	_temp+1,w
   519  02D1  00D2               	movwf	Write_LCD_Cmd@C+1
   520  02D2  0839               	movf	_temp,w
   521  02D3  00D1               	movwf	Write_LCD_Cmd@C
   522  02D4  22D6               	fcall	_Write_LCD_Cmd
   523  02D5  0008               	return
   524  02D6                     __end_of_Position_LCD:	
   525                           
   526                           	psect	text2
   527  0314                     __ptext2:	
   528 ;; *************** function _Lcd_Write_String *****************
   529 ;; Defined at:
   530 ;;		line 106 in file "lcd.c"
   531 ;; Parameters:    Size  Location     Type
   532 ;;  a               1    wreg     PTR unsigned char 
   533 ;;		 -> Message2(14), Message1(11), 
   534 ;; Auto vars:     Size  Location     Type
   535 ;;  a               1   11[BANK0 ] PTR unsigned char 
   536 ;;		 -> Message2(14), Message1(11), 
   537 ;;  i               2    9[BANK0 ] int 
   538 ;; Return value:  Size  Location     Type
   539 ;;                  1    wreg      void 
   540 ;; Registers used:
   541 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   542 ;; Tracked objects:
   543 ;;		On entry : 0/0
   544 ;;		On exit  : 0/0
   545 ;;		Unchanged: 0/0
   546 ;; Data sizes:     COMMON   BANK0
   547 ;;      Params:         0       0
   548 ;;      Locals:         0       3
   549 ;;      Temps:          0       3
   550 ;;      Totals:         0       6
   551 ;;Total ram usage:        6 bytes
   552 ;; Hardware stack levels used:    1
   553 ;; Hardware stack levels required when called:    2
   554 ;; This function calls:
   555 ;;		_Write_LCD_Data
   556 ;; This function is called by:
   557 ;;		_main
   558 ;; This function uses a non-reentrant model
   559 ;;
   560                           
   561                           
   562                           ;psect for function _Lcd_Write_String
   563  0314                     _Lcd_Write_String:	
   564                           
   565                           ;incstack = 0
   566                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   567                           ;Lcd_Write_String@a stored from wreg
   568  0314  1283               	bcf	3,5	;RP0=0, select bank0
   569  0315  00D8               	movwf	Lcd_Write_String@a
   570                           
   571                           ;lcd.c: 108: int i;
   572                           ;lcd.c: 109: for(i=0;a[i]!='\0';i++)
   573  0316  01D6               	clrf	Lcd_Write_String@i
   574  0317  01D7               	clrf	Lcd_Write_String@i+1
   575  0318                     l664:	
   576  0318  0856               	movf	Lcd_Write_String@i,w
   577  0319  0758               	addwf	Lcd_Write_String@a,w
   578  031A  00D3               	movwf	??_Lcd_Write_String
   579  031B  0853               	movf	??_Lcd_Write_String,w
   580  031C  0084               	movwf	4
   581  031D  1383               	bcf	3,7	;select IRP bank0
   582  031E  0800               	movf	0,w
   583  031F  1903               	btfsc	3,2
   584  0320  0008               	return
   585                           
   586                           ;lcd.c: 110: Write_LCD_Data(a[i]);
   587  0321  0856               	movf	Lcd_Write_String@i,w
   588  0322  0758               	addwf	Lcd_Write_String@a,w
   589  0323  00D3               	movwf	??_Lcd_Write_String
   590  0324  0853               	movf	??_Lcd_Write_String,w
   591  0325  0084               	movwf	4
   592  0326  1383               	bcf	3,7	;select IRP bank0
   593  0327  0800               	movf	0,w
   594  0328  00D4               	movwf	??_Lcd_Write_String+1
   595  0329  01D5               	clrf	??_Lcd_Write_String+2
   596  032A  0854               	movf	??_Lcd_Write_String+1,w
   597  032B  00D1               	movwf	Write_LCD_Data@D
   598  032C  0855               	movf	??_Lcd_Write_String+2,w
   599  032D  00D2               	movwf	Write_LCD_Data@D+1
   600  032E  22F4               	fcall	_Write_LCD_Data
   601  032F  3001               	movlw	1
   602  0330  1283               	bcf	3,5	;RP0=0, select bank0
   603  0331  07D6               	addwf	Lcd_Write_String@i,f
   604  0332  1803               	skipnc
   605  0333  0AD7               	incf	Lcd_Write_String@i+1,f
   606  0334  3000               	movlw	0
   607  0335  07D7               	addwf	Lcd_Write_String@i+1,f
   608  0336  2B18               	goto	l664
   609  0337                     __end_of_Lcd_Write_String:	
   610                           
   611                           	psect	text3
   612  02F4                     __ptext3:	
   613 ;; *************** function _Write_LCD_Data *****************
   614 ;; Defined at:
   615 ;;		line 66 in file "lcd.c"
   616 ;; Parameters:    Size  Location     Type
   617 ;;  D               2    4[BANK0 ] unsigned short 
   618 ;; Auto vars:     Size  Location     Type
   619 ;;		None
   620 ;; Return value:  Size  Location     Type
   621 ;;                  1    wreg      void 
   622 ;; Registers used:
   623 ;;		wreg, status,2, status,0, pclath, cstack
   624 ;; Tracked objects:
   625 ;;		On entry : 0/0
   626 ;;		On exit  : 0/0
   627 ;;		Unchanged: 0/0
   628 ;; Data sizes:     COMMON   BANK0
   629 ;;      Params:         0       2
   630 ;;      Locals:         0       0
   631 ;;      Temps:          0       0
   632 ;;      Totals:         0       2
   633 ;;Total ram usage:        2 bytes
   634 ;; Hardware stack levels used:    1
   635 ;; Hardware stack levels required when called:    1
   636 ;; This function calls:
   637 ;;		_Write_LCD_Nibble
   638 ;; This function is called by:
   639 ;;		_Lcd_Write_String
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643                           
   644                           ;psect for function _Write_LCD_Data
   645  02F4                     _Write_LCD_Data:	
   646                           
   647                           ;lcd.c: 67: RS = 1;
   648                           
   649                           ;incstack = 0
   650                           ; Regs used in _Write_LCD_Data: [wreg+status,2+status,0+pclath+cstack]
   651  02F4  3001               	movlw	1
   652  02F5  1283               	bcf	3,5	;RP0=0, select bank0
   653  02F6  00BD               	movwf	_RS
   654  02F7  3000               	movlw	0
   655  02F8  00BE               	movwf	_RS+1
   656                           
   657                           ;lcd.c: 68: Low_Nibble = D & 15;
   658  02F9  300F               	movlw	15
   659  02FA  0551               	andwf	Write_LCD_Data@D,w
   660  02FB  00CB               	movwf	_Low_Nibble
   661  02FC  3000               	movlw	0
   662  02FD  0552               	andwf	Write_LCD_Data@D+1,w
   663  02FE  00CC               	movwf	_Low_Nibble+1
   664                           
   665                           ;lcd.c: 69: High_Nibble = D/16;
   666  02FF  0E51               	swapf	Write_LCD_Data@D,w
   667  0300  390F               	andlw	15
   668  0301  00C9               	movwf	_High_Nibble
   669  0302  0E52               	swapf	Write_LCD_Data@D+1,w
   670  0303  39F0               	andlw	240
   671  0304  04C9               	iorwf	_High_Nibble,f
   672  0305  0E52               	swapf	Write_LCD_Data@D+1,w
   673  0306  390F               	andlw	15
   674  0307  00CA               	movwf	_High_Nibble+1
   675                           
   676                           ;lcd.c: 70: Write_LCD_Nibble(High_Nibble);
   677  0308  084A               	movf	_High_Nibble+1,w
   678  0309  00CE               	movwf	Write_LCD_Nibble@N+1
   679  030A  0849               	movf	_High_Nibble,w
   680  030B  00CD               	movwf	Write_LCD_Nibble@N
   681  030C  23A9               	fcall	_Write_LCD_Nibble
   682                           
   683                           ;lcd.c: 71: Write_LCD_Nibble(Low_Nibble);
   684  030D  1283               	bcf	3,5	;RP0=0, select bank0
   685  030E  084C               	movf	_Low_Nibble+1,w
   686  030F  00CE               	movwf	Write_LCD_Nibble@N+1
   687  0310  084B               	movf	_Low_Nibble,w
   688  0311  00CD               	movwf	Write_LCD_Nibble@N
   689  0312  23A9               	fcall	_Write_LCD_Nibble
   690  0313  0008               	return
   691  0314                     __end_of_Write_LCD_Data:	
   692                           
   693                           	psect	text4
   694  0337                     __ptext4:	
   695 ;; *************** function _Initialize_LCD *****************
   696 ;; Defined at:
   697 ;;		line 82 in file "lcd.c"
   698 ;; Parameters:    Size  Location     Type
   699 ;;		None
   700 ;; Auto vars:     Size  Location     Type
   701 ;;		None
   702 ;; Return value:  Size  Location     Type
   703 ;;                  1    wreg      void 
   704 ;; Registers used:
   705 ;;		wreg, status,2, status,0, pclath, cstack
   706 ;; Tracked objects:
   707 ;;		On entry : 0/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMMON   BANK0
   711 ;;      Params:         0       0
   712 ;;      Locals:         0       0
   713 ;;      Temps:          0       0
   714 ;;      Totals:         0       0
   715 ;;Total ram usage:        0 bytes
   716 ;; Hardware stack levels used:    1
   717 ;; Hardware stack levels required when called:    2
   718 ;; This function calls:
   719 ;;		_Delay_50ms
   720 ;;		_Write_LCD_Cmd
   721 ;; This function is called by:
   722 ;;		_main
   723 ;; This function uses a non-reentrant model
   724 ;;
   725                           
   726                           
   727                           ;psect for function _Initialize_LCD
   728  0337                     _Initialize_LCD:	
   729                           
   730                           ;lcd.c: 83: Delay_50ms();
   731                           
   732                           ;incstack = 0
   733                           ; Regs used in _Initialize_LCD: [wreg+status,2+status,0+pclath+cstack]
   734  0337  2287               	fcall	_Delay_50ms
   735                           
   736                           ;lcd.c: 84: Write_LCD_Cmd(0x20);
   737  0338  3020               	movlw	32
   738  0339  1283               	bcf	3,5	;RP0=0, select bank0
   739  033A  00D1               	movwf	Write_LCD_Cmd@C
   740  033B  3000               	movlw	0
   741  033C  00D2               	movwf	Write_LCD_Cmd@C+1
   742  033D  22D6               	fcall	_Write_LCD_Cmd
   743                           
   744                           ;lcd.c: 85: Delay_50ms();
   745  033E  2287               	fcall	_Delay_50ms
   746                           
   747                           ;lcd.c: 86: Write_LCD_Cmd(0x20);
   748  033F  3020               	movlw	32
   749  0340  1283               	bcf	3,5	;RP0=0, select bank0
   750  0341  00D1               	movwf	Write_LCD_Cmd@C
   751  0342  3000               	movlw	0
   752  0343  00D2               	movwf	Write_LCD_Cmd@C+1
   753  0344  22D6               	fcall	_Write_LCD_Cmd
   754                           
   755                           ;lcd.c: 87: Delay_50ms();
   756  0345  2287               	fcall	_Delay_50ms
   757                           
   758                           ;lcd.c: 88: Write_LCD_Cmd(0x20);
   759  0346  3020               	movlw	32
   760  0347  1283               	bcf	3,5	;RP0=0, select bank0
   761  0348  00D1               	movwf	Write_LCD_Cmd@C
   762  0349  3000               	movlw	0
   763  034A  00D2               	movwf	Write_LCD_Cmd@C+1
   764  034B  22D6               	fcall	_Write_LCD_Cmd
   765                           
   766                           ;lcd.c: 89: Delay_50ms();
   767  034C  2287               	fcall	_Delay_50ms
   768                           
   769                           ;lcd.c: 90: Write_LCD_Cmd(0x28);
   770  034D  3028               	movlw	40
   771  034E  1283               	bcf	3,5	;RP0=0, select bank0
   772  034F  00D1               	movwf	Write_LCD_Cmd@C
   773  0350  3000               	movlw	0
   774  0351  00D2               	movwf	Write_LCD_Cmd@C+1
   775  0352  22D6               	fcall	_Write_LCD_Cmd
   776                           
   777                           ;lcd.c: 91: Delay_50ms();
   778  0353  2287               	fcall	_Delay_50ms
   779                           
   780                           ;lcd.c: 92: Write_LCD_Cmd(0x0C);
   781  0354  300C               	movlw	12
   782  0355  1283               	bcf	3,5	;RP0=0, select bank0
   783  0356  00D1               	movwf	Write_LCD_Cmd@C
   784  0357  3000               	movlw	0
   785  0358  00D2               	movwf	Write_LCD_Cmd@C+1
   786  0359  22D6               	fcall	_Write_LCD_Cmd
   787                           
   788                           ;lcd.c: 93: Delay_50ms();
   789  035A  2287               	fcall	_Delay_50ms
   790                           
   791                           ;lcd.c: 94: Write_LCD_Cmd(0x06);
   792  035B  3006               	movlw	6
   793  035C  1283               	bcf	3,5	;RP0=0, select bank0
   794  035D  00D1               	movwf	Write_LCD_Cmd@C
   795  035E  3000               	movlw	0
   796  035F  00D2               	movwf	Write_LCD_Cmd@C+1
   797  0360  22D6               	fcall	_Write_LCD_Cmd
   798                           
   799                           ;lcd.c: 95: Delay_50ms();
   800  0361  2287               	fcall	_Delay_50ms
   801                           
   802                           ;lcd.c: 96: Write_LCD_Cmd(0x01);
   803  0362  3001               	movlw	1
   804  0363  1283               	bcf	3,5	;RP0=0, select bank0
   805  0364  00D1               	movwf	Write_LCD_Cmd@C
   806  0365  3000               	movlw	0
   807  0366  00D2               	movwf	Write_LCD_Cmd@C+1
   808  0367  22D6               	fcall	_Write_LCD_Cmd
   809                           
   810                           ;lcd.c: 97: Delay_50ms();
   811  0368  2287               	fcall	_Delay_50ms
   812  0369  0008               	return
   813  036A                     __end_of_Initialize_LCD:	
   814                           
   815                           	psect	text5
   816  02D6                     __ptext5:	
   817 ;; *************** function _Write_LCD_Cmd *****************
   818 ;; Defined at:
   819 ;;		line 74 in file "lcd.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;  C               2    4[BANK0 ] unsigned short 
   822 ;; Auto vars:     Size  Location     Type
   823 ;;		None
   824 ;; Return value:  Size  Location     Type
   825 ;;                  1    wreg      void 
   826 ;; Registers used:
   827 ;;		wreg, status,2, status,0, pclath, cstack
   828 ;; Tracked objects:
   829 ;;		On entry : 0/0
   830 ;;		On exit  : 0/0
   831 ;;		Unchanged: 0/0
   832 ;; Data sizes:     COMMON   BANK0
   833 ;;      Params:         0       2
   834 ;;      Locals:         0       0
   835 ;;      Temps:          0       0
   836 ;;      Totals:         0       2
   837 ;;Total ram usage:        2 bytes
   838 ;; Hardware stack levels used:    1
   839 ;; Hardware stack levels required when called:    1
   840 ;; This function calls:
   841 ;;		_Write_LCD_Nibble
   842 ;; This function is called by:
   843 ;;		_Initialize_LCD
   844 ;;		_Position_LCD
   845 ;;		_main
   846 ;; This function uses a non-reentrant model
   847 ;;
   848                           
   849                           
   850                           ;psect for function _Write_LCD_Cmd
   851  02D6                     _Write_LCD_Cmd:	
   852                           
   853                           ;lcd.c: 75: RS = 0;
   854                           
   855                           ;incstack = 0
   856                           ; Regs used in _Write_LCD_Cmd: [wreg+status,2+status,0+pclath+cstack]
   857  02D6  1283               	bcf	3,5	;RP0=0, select bank0
   858  02D7  01BD               	clrf	_RS
   859  02D8  01BE               	clrf	_RS+1
   860                           
   861                           ;lcd.c: 76: Low_Nibble = C & 15;
   862  02D9  300F               	movlw	15
   863  02DA  0551               	andwf	Write_LCD_Cmd@C,w
   864  02DB  00CB               	movwf	_Low_Nibble
   865  02DC  3000               	movlw	0
   866  02DD  0552               	andwf	Write_LCD_Cmd@C+1,w
   867  02DE  00CC               	movwf	_Low_Nibble+1
   868                           
   869                           ;lcd.c: 77: High_Nibble = C/16;
   870  02DF  0E51               	swapf	Write_LCD_Cmd@C,w
   871  02E0  390F               	andlw	15
   872  02E1  00C9               	movwf	_High_Nibble
   873  02E2  0E52               	swapf	Write_LCD_Cmd@C+1,w
   874  02E3  39F0               	andlw	240
   875  02E4  04C9               	iorwf	_High_Nibble,f
   876  02E5  0E52               	swapf	Write_LCD_Cmd@C+1,w
   877  02E6  390F               	andlw	15
   878  02E7  00CA               	movwf	_High_Nibble+1
   879                           
   880                           ;lcd.c: 78: Write_LCD_Nibble(High_Nibble);
   881  02E8  084A               	movf	_High_Nibble+1,w
   882  02E9  00CE               	movwf	Write_LCD_Nibble@N+1
   883  02EA  0849               	movf	_High_Nibble,w
   884  02EB  00CD               	movwf	Write_LCD_Nibble@N
   885  02EC  23A9               	fcall	_Write_LCD_Nibble
   886                           
   887                           ;lcd.c: 79: Write_LCD_Nibble(Low_Nibble);
   888  02ED  1283               	bcf	3,5	;RP0=0, select bank0
   889  02EE  084C               	movf	_Low_Nibble+1,w
   890  02EF  00CE               	movwf	Write_LCD_Nibble@N+1
   891  02F0  084B               	movf	_Low_Nibble,w
   892  02F1  00CD               	movwf	Write_LCD_Nibble@N
   893  02F2  23A9               	fcall	_Write_LCD_Nibble
   894  02F3  0008               	return
   895  02F4                     __end_of_Write_LCD_Cmd:	
   896                           
   897                           	psect	text6
   898  03A9                     __ptext6:	
   899 ;; *************** function _Write_LCD_Nibble *****************
   900 ;; Defined at:
   901 ;;		line 38 in file "lcd.c"
   902 ;; Parameters:    Size  Location     Type
   903 ;;  N               2    0[BANK0 ] unsigned short 
   904 ;; Auto vars:     Size  Location     Type
   905 ;;		None
   906 ;; Return value:  Size  Location     Type
   907 ;;                  1    wreg      void 
   908 ;; Registers used:
   909 ;;		wreg, status,2, status,0
   910 ;; Tracked objects:
   911 ;;		On entry : 0/0
   912 ;;		On exit  : 0/0
   913 ;;		Unchanged: 0/0
   914 ;; Data sizes:     COMMON   BANK0
   915 ;;      Params:         0       2
   916 ;;      Locals:         0       0
   917 ;;      Temps:          0       2
   918 ;;      Totals:         0       4
   919 ;;Total ram usage:        4 bytes
   920 ;; Hardware stack levels used:    1
   921 ;; This function calls:
   922 ;;		Nothing
   923 ;; This function is called by:
   924 ;;		_Write_LCD_Data
   925 ;;		_Write_LCD_Cmd
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929                           
   930                           ;psect for function _Write_LCD_Nibble
   931  03A9                     _Write_LCD_Nibble:	
   932                           
   933                           ;lcd.c: 39: RC5 = 1;
   934                           
   935                           ;incstack = 0
   936                           ; Regs used in _Write_LCD_Nibble: [wreg+status,2+status,0]
   937  03A9  1283               	bcf	3,5	;RP0=0, select bank0
   938  03AA  1687               	bsf	7,5	;volatile
   939                           
   940                           ;lcd.c: 41: RC2 = 0;
   941  03AB  1107               	bcf	7,2	;volatile
   942                           
   943                           ;lcd.c: 42: RC0 = RS;
   944  03AC  1C3D               	btfss	_RS,0
   945  03AD  2BB1               	goto	u80
   946  03AE  1283               	bcf	3,5	;RP0=0, select bank0
   947  03AF  1407               	bsf	7,0	;volatile
   948  03B0  2BB3               	goto	u94
   949  03B1                     u80:	
   950  03B1  1283               	bcf	3,5	;RP0=0, select bank0
   951  03B2  1007               	bcf	7,0	;volatile
   952  03B3                     u94:	
   953                           
   954                           ;lcd.c: 43: RC2 = 1;
   955  03B3  1507               	bsf	7,2	;volatile
   956                           
   957                           ;lcd.c: 44: RC2 = 0;
   958  03B4  1107               	bcf	7,2	;volatile
   959                           
   960                           ;lcd.c: 48: Mask = 8;
   961  03B5  3008               	movlw	8
   962  03B6  00C3               	movwf	_Mask
   963  03B7  3000               	movlw	0
   964  03B8  00C4               	movwf	_Mask+1
   965                           
   966                           ;lcd.c: 49: for (t=0; t<4; t++){
   967  03B9  01BF               	clrf	_t
   968  03BA  01C0               	clrf	_t+1
   969  03BB  3000               	movlw	0
   970  03BC  0240               	subwf	_t+1,w
   971  03BD  3004               	movlw	4
   972  03BE  1903               	skipnz
   973  03BF  023F               	subwf	_t,w
   974  03C0  1803               	btfsc	3,0
   975  03C1  2BE9               	goto	l39
   976  03C2                     l618:	
   977                           
   978                           ;lcd.c: 50: Flag = N & Mask;
   979  03C2  0843               	movf	_Mask,w
   980  03C3  054D               	andwf	Write_LCD_Nibble@N,w
   981  03C4  00BB               	movwf	_Flag
   982  03C5  0844               	movf	_Mask+1,w
   983  03C6  054E               	andwf	Write_LCD_Nibble@N+1,w
   984  03C7  00BC               	movwf	_Flag+1
   985                           
   986                           ;lcd.c: 51: if(Flag==0) RC0 = 0;
   987  03C8  083B               	movf	_Flag,w
   988  03C9  043C               	iorwf	_Flag+1,w
   989  03CA  1D03               	btfss	3,2
   990  03CB  2BCE               	goto	l40
   991  03CC  1007               	bcf	7,0	;volatile
   992  03CD  2BCF               	goto	l41
   993  03CE                     l40:	
   994                           
   995                           ;lcd.c: 52: else RC0 = 1;
   996  03CE  1407               	bsf	7,0	;volatile
   997  03CF                     l41:	
   998                           
   999                           ;lcd.c: 53: RC2 = 1;
  1000  03CF  1507               	bsf	7,2	;volatile
  1001                           
  1002                           ;lcd.c: 54: RC2 = 0;
  1003  03D0  1107               	bcf	7,2	;volatile
  1004                           
  1005                           ;lcd.c: 55: Mask = Mask >> 1;
  1006  03D1  0844               	movf	_Mask+1,w
  1007  03D2  00D0               	movwf	??_Write_LCD_Nibble+1
  1008  03D3  0843               	movf	_Mask,w
  1009  03D4  00CF               	movwf	??_Write_LCD_Nibble
  1010  03D5  1003               	clrc
  1011  03D6  0CD0               	rrf	??_Write_LCD_Nibble+1,f
  1012  03D7  0CCF               	rrf	??_Write_LCD_Nibble,f
  1013  03D8  084F               	movf	??_Write_LCD_Nibble,w
  1014  03D9  00C3               	movwf	_Mask
  1015  03DA  0850               	movf	??_Write_LCD_Nibble+1,w
  1016  03DB  00C4               	movwf	_Mask+1
  1017  03DC  3001               	movlw	1
  1018  03DD  07BF               	addwf	_t,f
  1019  03DE  1803               	skipnc
  1020  03DF  0AC0               	incf	_t+1,f
  1021  03E0  3000               	movlw	0
  1022  03E1  07C0               	addwf	_t+1,f
  1023  03E2  3000               	movlw	0
  1024  03E3  0240               	subwf	_t+1,w
  1025  03E4  3004               	movlw	4
  1026  03E5  1903               	skipnz
  1027  03E6  023F               	subwf	_t,w
  1028  03E7  1C03               	skipc
  1029  03E8  2BC2               	goto	l618
  1030  03E9                     l39:	
  1031                           
  1032                           ;lcd.c: 56: }
  1033                           ;lcd.c: 58: RC2 = 1;
  1034  03E9  1507               	bsf	7,2	;volatile
  1035                           
  1036                           ;lcd.c: 59: RC2 = 0;
  1037  03EA  1107               	bcf	7,2	;volatile
  1038                           
  1039                           ;lcd.c: 60: RC0 = 0;
  1040  03EB  1007               	bcf	7,0	;volatile
  1041                           
  1042                           ;lcd.c: 61: RC5 = 0;
  1043  03EC  1287               	bcf	7,5	;volatile
  1044                           
  1045                           ;lcd.c: 62: RC5 = 1;
  1046  03ED  1687               	bsf	7,5	;volatile
  1047  03EE  0008               	return
  1048  03EF                     __end_of_Write_LCD_Nibble:	
  1049                           
  1050                           	psect	text7
  1051  0287                     __ptext7:	
  1052 ;; *************** function _Delay_50ms *****************
  1053 ;; Defined at:
  1054 ;;		line 34 in file "lcd.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;		None
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;		None
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  1    wreg      void 
  1061 ;; Registers used:
  1062 ;;		wreg
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMMON   BANK0
  1068 ;;      Params:         0       0
  1069 ;;      Locals:         0       0
  1070 ;;      Temps:          0       2
  1071 ;;      Totals:         0       2
  1072 ;;Total ram usage:        2 bytes
  1073 ;; Hardware stack levels used:    1
  1074 ;; This function calls:
  1075 ;;		Nothing
  1076 ;; This function is called by:
  1077 ;;		_Initialize_LCD
  1078 ;; This function uses a non-reentrant model
  1079 ;;
  1080                           
  1081                           
  1082                           ;psect for function _Delay_50ms
  1083  0287                     _Delay_50ms:	
  1084                           
  1085                           ;lcd.c: 35: _delay((unsigned long)((50)*(4000000/4000.0)));
  1086                           
  1087                           ;incstack = 0
  1088                           ; Regs used in _Delay_50ms: [wreg]
  1089  0287  3041               	movlw	65
  1090  0288  1283               	bcf	3,5	;RP0=0, select bank0
  1091  0289  00CE               	movwf	??_Delay_50ms+1
  1092  028A  30EE               	movlw	238
  1093  028B  00CD               	movwf	??_Delay_50ms
  1094  028C                     u177:	
  1095  028C  0BCD               	decfsz	??_Delay_50ms,f
  1096  028D  2A8C               	goto	u177
  1097  028E  0BCE               	decfsz	??_Delay_50ms+1,f
  1098  028F  2A8C               	goto	u177
  1099  0290  0000               	nop
  1100  0291  0008               	return
  1101  0292                     __end_of_Delay_50ms:	
  1102  005E                     btemp	set	94	;btemp
  1103  005E                     wtemp0	set	94


Data Sizes:
    Strings     0
    Constant    0
    Data        25
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     15      60

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 14
		 -> Message2(BANK0[14]), Message1(BANK0[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Write_String
    _Position_LCD->_Write_LCD_Cmd
    _Lcd_Write_String->_Write_LCD_Data
    _Write_LCD_Data->_Write_LCD_Nibble
    _Initialize_LCD->_Write_LCD_Cmd
    _Write_LCD_Cmd->_Write_LCD_Nibble

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2996
                                             12 BANK0      3     3      0
                     _Initialize_LCD
                   _Lcd_Write_String
                       _Position_LCD
                      _Write_LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _Position_LCD                                         4     0      4    1011
                                              6 BANK0      4     0      4
                      _Write_LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     6      0     475
                                              6 BANK0      6     6      0
                     _Write_LCD_Data
 ---------------------------------------------------------------------------------
 (2) _Write_LCD_Data                                       2     0      2     331
                                              4 BANK0      2     0      2
                   _Write_LCD_Nibble
 ---------------------------------------------------------------------------------
 (1) _Initialize_LCD                                       0     0      0     755
                         _Delay_50ms
                      _Write_LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _Write_LCD_Cmd                                        2     0      2     755
                                              4 BANK0      2     0      2
                   _Write_LCD_Nibble
 ---------------------------------------------------------------------------------
 (2) _Write_LCD_Nibble                                     4     2      2     234
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _Delay_50ms                                           2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Initialize_LCD
     _Delay_50ms
     _Write_LCD_Cmd
       _Write_LCD_Nibble
   _Lcd_Write_String
     _Write_LCD_Data
       _Write_LCD_Nibble
   _Position_LCD
     _Write_LCD_Cmd
       _Write_LCD_Nibble
   _Write_LCD_Cmd
     _Write_LCD_Nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               3E      F      3C       4       96.8%
BITBANK0            3E      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3C       6        0.0%
ABS                  0      0      3C       5        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Dec 23 13:10:59 2017

                        _N 0041                          _p 0047                          _q 0045  
                        _t 003F                          pc 0002                __CFG_CP$OFF 0000  
                       l40 03CE                         l41 03CF                         l39 03E9  
                       _RS 003D                         u80 03B1                         u94 03B3  
                       fsr 0004                        l618 03C2                        l670 036E  
                      l664 0318                        l656 02D0                        _RC0 0038  
                      _RC2 003A                        _RC5 003D                        u157 038D  
                      u167 03A1                        u177 028C               __CFG_CPD$OFF 0000  
                      fsr0 0004                        indf 0000                       _Flag 003B  
               _Delay_50ms 0287                       _Mask 0043          ?_Lcd_Write_String 004D  
                     _main 036A                       _temp 0039                       btemp 005E  
            __CFG_BOREN$ON 0000                       start 0000         ??_Lcd_Write_String 0053  
   __size_of_Write_LCD_Cmd 001E                      ?_main 004D              __CFG_WDTE$OFF 0000  
                    _ANSEL 0091  __size_of_Write_LCD_Nibble 0046                      _TRISC 0087  
                    pclath 000A                      status 0003                      wtemp0 005E  
  __size_of_Write_LCD_Data 0020             __CFG_MCLRE$OFF 0000            __initialization 03EF  
  __size_of_Initialize_LCD 0033               __end_of_main 03A9                     ??_main 0059  
            _Write_LCD_Cmd 02D6                 _Low_Nibble 004B                _High_Nibble 0049  
           Write_LCD_Cmd@C 0051                ?_Delay_50ms 004D             __CFG_PWRTE$OFF 0000  
           ?_Write_LCD_Cmd 0051    __end_of__initialization 03FD             __pcstackCOMMON 0000  
             __pidataBANK0 02A1        __size_of_Delay_50ms 000B           _Write_LCD_Nibble 03A9  
               __pbssBANK0 0039             _Write_LCD_Data 02F4                 __pmaintext 036A  
           _Initialize_LCD 0337  __size_of_Lcd_Write_String 0023            ??_Write_LCD_Cmd 0000  
          Write_LCD_Data@D 0051     __end_of_Write_LCD_Data 0314     __end_of_Initialize_LCD 036A  
                  __ptext1 02BA                    __ptext2 0314                    __ptext3 02F4  
                  __ptext4 0337                    __ptext5 02D6                    __ptext6 03A9  
                  __ptext7 0287              ?_Position_LCD 0053                    clrloop0 0280  
     end_of_initialization 03FD            ?_Write_LCD_Data 0051               ??_Delay_50ms 004D  
          ?_Initialize_LCD 004D          Write_LCD_Nibble@N 004D         __end_of_Delay_50ms 0292  
           ??_Position_LCD 0000          Lcd_Write_String@a 0058          Lcd_Write_String@i 0056  
 __end_of_Write_LCD_Nibble 03EF           _Lcd_Write_String 0314        start_initialization 03EF  
               init_fetch0 0292                __pdataBANK0 0020                  ___latbits 0000  
            __pcstackBANK0 004D       __end_of_Position_LCD 02D6      __end_of_Write_LCD_Cmd 02F4  
         ??_Write_LCD_Data 0000           ??_Initialize_LCD 0000                  clear_ram0 027F  
 __end_of_Lcd_Write_String 0337                   _Message1 002E                   _Message2 0020  
        ?_Write_LCD_Nibble 004D         ??_Write_LCD_Nibble 004F              __size_of_main 003F  
    __size_of_Position_LCD 001C              Position_LCD@x 0053              Position_LCD@y 0055  
                 init_ram0 0296               _Position_LCD 02BA          __CFG_FOSC$INTRCIO 0000  
