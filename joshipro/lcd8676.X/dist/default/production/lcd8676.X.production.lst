

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Dec 23 12:47:19 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F676
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	dabs	1,0x5E,2
    17  0000                     
    18                           ; Version 1.44
    19                           ; Generated 14/09/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F676 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0007                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0019                     	;# 
    67  001E                     	;# 
    68  001F                     	;# 
    69  0081                     	;# 
    70  0085                     	;# 
    71  0087                     	;# 
    72  008C                     	;# 
    73  008E                     	;# 
    74  0090                     	;# 
    75  0091                     	;# 
    76  0095                     	;# 
    77  0095                     	;# 
    78  0096                     	;# 
    79  0096                     	;# 
    80  0099                     	;# 
    81  009A                     	;# 
    82  009A                     	;# 
    83  009B                     	;# 
    84  009C                     	;# 
    85  009D                     	;# 
    86  009E                     	;# 
    87  009F                     	;# 
    88  0019                     _CMCON	set	25
    89  003D                     _RC5	set	61
    90  003C                     _RC4	set	60
    91  0038                     _RC0	set	56
    92  0039                     _RC1	set	57
    93  0087                     _TRISC	set	135
    94  0085                     _TRISA	set	133
    95  0091                     _ANSEL	set	145
    96                           
    97                           	psect	strings
    98  0001                     __pstrings:	
    99  0001                     stringtab:	
   100  0001                     __stringtab:	
   101  0001                     stringcode:	
   102                           ;	String table - string pointers are 1 byte each
   103                           
   104  0001                     stringdir:	
   105  0001  3000               	movlw	high stringdir
   106  0002  008A               	movwf	10
   107  0003  0804               	movf	4,w
   108  0004  0A84               	incf	4,f
   109  0005  0782               	addwf	2,f
   110  0006                     __stringbase:	
   111  0006  3400               	retlw	0
   112  0007                     __end_of__stringtab:	
   113  0007                     STR_1:	
   114  0007  3453               	retlw	83	;'S'
   115  0008  3444               	retlw	68	;'D'
   116  0009  3453               	retlw	83	;'S'
   117  000A  3441               	retlw	65	;'A'
   118  000B  3444               	retlw	68	;'D'
   119  000C  3400               	retlw	0
   120                           
   121                           ; #config settings
   122  0000                     
   123                           	psect	cinit
   124  03F2                     start_initialization:	
   125  03F2                     __initialization:	
   126                           
   127                           ; Clear objects allocated to BANK0
   128  03F2  1283               	bcf	3,5	;RP0=0, select bank0
   129  03F3  01A0               	clrf	__pbssBANK0& (0+127)
   130  03F4  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   131  03F5  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   132  03F6  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   133  03F7  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   134  03F8  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   135  03F9  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   136  03FA  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   137  03FB  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   138  03FC  01A9               	clrf	(__pbssBANK0+9)& (0+127)
   139  03FD                     end_of_initialization:	
   140                           ;End of C runtime variable initialization code
   141                           
   142  03FD                     __end_of__initialization:	
   143  03FD  0183               	clrf	3
   144  03FE  2B0A               	ljmp	_main	;jump to C main() function
   145                           
   146                           	psect	bssBANK0
   147  0020                     __pbssBANK0:	
   148  0020                     _D:	
   149  0020                     	ds	10
   150                           
   151                           	psect	cstackCOMMON
   152  0000                     __pcstackCOMMON:	
   153  0000                     ??_Lcd8_Set_Cursor:	
   154  0000                     ??_Lcd8_Write_String:	
   155                           ; 1 bytes @ 0x0
   156                           
   157  0000                     ??_main:	
   158                           ; 1 bytes @ 0x0
   159                           
   160                           
   161                           	psect	cstackBANK0
   162  002A                     __pcstackBANK0:	
   163                           ; 1 bytes @ 0x0
   164                           
   165  002A                     ?_Lcd8_Port:	
   166  002A                     ??_Lcd8_Port:	
   167                           ; 1 bytes @ 0x0
   168                           
   169  002A                     ?_Lcd8_Cmd:	
   170                           ; 1 bytes @ 0x0
   171                           
   172  002A                     ?_Lcd8_Init:	
   173                           ; 1 bytes @ 0x0
   174                           
   175  002A                     ?_Lcd8_Write_Char:	
   176                           ; 1 bytes @ 0x0
   177                           
   178  002A                     ?_Lcd8_Write_String:	
   179                           ; 1 bytes @ 0x0
   180                           
   181  002A                     ?_main:	
   182                           ; 1 bytes @ 0x0
   183                           
   184                           
   185                           ; 1 bytes @ 0x0
   186  002A                     	ds	1
   187  002B                     Lcd8_Port@i:	
   188                           
   189                           ; 2 bytes @ 0x1
   190  002B                     	ds	2
   191  002D                     Lcd8_Port@a:	
   192                           
   193                           ; 1 bytes @ 0x3
   194  002D                     	ds	1
   195  002E                     ??_Lcd8_Cmd:	
   196  002E                     ??_Lcd8_Write_Char:	
   197                           ; 1 bytes @ 0x4
   198                           
   199                           
   200                           ; 1 bytes @ 0x4
   201  002E                     	ds	2
   202  0030                     Lcd8_Cmd@a:	
   203  0030                     Lcd8_Write_Char@a:	
   204                           ; 1 bytes @ 0x6
   205                           
   206                           
   207                           ; 1 bytes @ 0x6
   208  0030                     	ds	1
   209  0031                     ?_Lcd8_Set_Cursor:	
   210  0031                     ??_Lcd8_Init:	
   211                           ; 1 bytes @ 0x7
   212                           
   213  0031                     Lcd8_Set_Cursor@b:	
   214                           ; 1 bytes @ 0x7
   215                           
   216  0031                     Lcd8_Write_String@i:	
   217                           ; 1 bytes @ 0x7
   218                           
   219                           
   220                           ; 2 bytes @ 0x7
   221  0031                     	ds	1
   222  0032                     Lcd8_Set_Cursor@a:	
   223                           
   224                           ; 1 bytes @ 0x8
   225  0032                     	ds	1
   226  0033                     Lcd8_Write_String@a:	
   227                           
   228                           ; 1 bytes @ 0x9
   229  0033                     	ds	1
   230                           
   231                           	psect	maintext
   232  030A                     __pmaintext:	
   233 ;;
   234 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   235 ;;
   236 ;; *************** function _main *****************
   237 ;; Defined at:
   238 ;;		line 161 in file "LCDCHECK.c"
   239 ;; Parameters:    Size  Location     Type
   240 ;;		None
   241 ;; Auto vars:     Size  Location     Type
   242 ;;		None
   243 ;; Return value:  Size  Location     Type
   244 ;;                  1    wreg      void 
   245 ;; Registers used:
   246 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   247 ;; Tracked objects:
   248 ;;		On entry : B00/0
   249 ;;		On exit  : 0/0
   250 ;;		Unchanged: 0/0
   251 ;; Data sizes:     COMMON   BANK0
   252 ;;      Params:         0       0
   253 ;;      Locals:         0       0
   254 ;;      Temps:          0       0
   255 ;;      Totals:         0       0
   256 ;;Total ram usage:        0 bytes
   257 ;; Hardware stack levels required when called:    3
   258 ;; This function calls:
   259 ;;		_Lcd8_Init
   260 ;;		_Lcd8_Set_Cursor
   261 ;;		_Lcd8_Write_String
   262 ;; This function is called by:
   263 ;;		Startup code after reset
   264 ;; This function uses a non-reentrant model
   265 ;;
   266                           
   267                           
   268                           ;psect for function _main
   269  030A                     _main:	
   270                           
   271                           ;LCDCHECK.c: 164: ANSEL = 0x00;
   272                           
   273                           ;incstack = 0
   274                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   275  030A  1683               	bsf	3,5	;RP0=1, select bank1
   276  030B  0191               	clrf	17	;volatile
   277                           
   278                           ;LCDCHECK.c: 165: CMCON = 0x07;
   279  030C  3007               	movlw	7
   280  030D  1283               	bcf	3,5	;RP0=0, select bank0
   281  030E  0099               	movwf	25	;volatile
   282                           
   283                           ;LCDCHECK.c: 167: TRISA = 0x00;
   284  030F  1683               	bsf	3,5	;RP0=1, select bank1
   285  0310  0185               	clrf	5	;volatile
   286                           
   287                           ;LCDCHECK.c: 169: TRISC = 0x00;
   288  0311  0187               	clrf	7	;volatile
   289                           
   290                           ;LCDCHECK.c: 170: Lcd8_Init();
   291  0312  236A               	fcall	_Lcd8_Init
   292                           
   293                           ;LCDCHECK.c: 171: Lcd8_Set_Cursor(1,1);
   294  0313  1283               	bcf	3,5	;RP0=0, select bank0
   295  0314  01B1               	clrf	Lcd8_Set_Cursor@b
   296  0315  0AB1               	incf	Lcd8_Set_Cursor@b,f
   297  0316  3001               	movlw	1
   298  0317  232D               	fcall	_Lcd8_Set_Cursor
   299  0318                     l797:	
   300                           ;LCDCHECK.c: 173: while(1)
   301                           
   302                           
   303                           ;LCDCHECK.c: 174: {
   304                           ;LCDCHECK.c: 176: Lcd8_Write_String("SDSAD");
   305  0318  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   306  0319  2352               	fcall	_Lcd8_Write_String
   307  031A  2B18               	goto	l797
   308  031B                     __end_of_main:	
   309                           
   310                           	psect	text1
   311  0352                     __ptext1:	
   312 ;; *************** function _Lcd8_Write_String *****************
   313 ;; Defined at:
   314 ;;		line 144 in file "LCDCHECK.c"
   315 ;; Parameters:    Size  Location     Type
   316 ;;  a               1    wreg     PTR unsigned char 
   317 ;;		 -> STR_1(6), 
   318 ;; Auto vars:     Size  Location     Type
   319 ;;  a               1    9[BANK0 ] PTR unsigned char 
   320 ;;		 -> STR_1(6), 
   321 ;;  i               2    7[BANK0 ] int 
   322 ;; Return value:  Size  Location     Type
   323 ;;                  1    wreg      void 
   324 ;; Registers used:
   325 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   326 ;; Tracked objects:
   327 ;;		On entry : 0/0
   328 ;;		On exit  : 0/0
   329 ;;		Unchanged: 0/0
   330 ;; Data sizes:     COMMON   BANK0
   331 ;;      Params:         0       0
   332 ;;      Locals:         0       3
   333 ;;      Temps:          0       0
   334 ;;      Totals:         0       3
   335 ;;Total ram usage:        3 bytes
   336 ;; Hardware stack levels used:    1
   337 ;; Hardware stack levels required when called:    2
   338 ;; This function calls:
   339 ;;		_Lcd8_Write_Char
   340 ;; This function is called by:
   341 ;;		_main
   342 ;; This function uses a non-reentrant model
   343 ;;
   344                           
   345                           
   346                           ;psect for function _Lcd8_Write_String
   347  0352                     _Lcd8_Write_String:	
   348                           
   349                           ;incstack = 0
   350                           ; Regs used in _Lcd8_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   351                           ;Lcd8_Write_String@a stored from wreg
   352  0352  1283               	bcf	3,5	;RP0=0, select bank0
   353  0353  00B3               	movwf	Lcd8_Write_String@a
   354                           
   355                           ;LCDCHECK.c: 146: int i;
   356                           ;LCDCHECK.c: 147: for(i=0;a[i]!='\0';i++)
   357  0354  01B1               	clrf	Lcd8_Write_String@i
   358  0355  01B2               	clrf	Lcd8_Write_String@i+1
   359  0356                     l777:	
   360  0356  0831               	movf	Lcd8_Write_String@i,w
   361  0357  0733               	addwf	Lcd8_Write_String@a,w
   362  0358  0084               	movwf	4
   363  0359  2001               	fcall	stringdir
   364  035A  3A00               	xorlw	0
   365  035B  1903               	btfsc	3,2
   366  035C  0008               	return
   367                           
   368                           ;LCDCHECK.c: 148: Lcd8_Write_Char(a[i]);
   369  035D  0831               	movf	Lcd8_Write_String@i,w
   370  035E  0733               	addwf	Lcd8_Write_String@a,w
   371  035F  0084               	movwf	4
   372  0360  2001               	fcall	stringdir
   373  0361  233F               	fcall	_Lcd8_Write_Char
   374  0362  3001               	movlw	1
   375  0363  1283               	bcf	3,5	;RP0=0, select bank0
   376  0364  07B1               	addwf	Lcd8_Write_String@i,f
   377  0365  1803               	skipnc
   378  0366  0AB2               	incf	Lcd8_Write_String@i+1,f
   379  0367  3000               	movlw	0
   380  0368  07B2               	addwf	Lcd8_Write_String@i+1,f
   381  0369  2B56               	goto	l777
   382  036A                     __end_of_Lcd8_Write_String:	
   383                           
   384                           	psect	text2
   385  033F                     __ptext2:	
   386 ;; *************** function _Lcd8_Write_Char *****************
   387 ;; Defined at:
   388 ;;		line 135 in file "LCDCHECK.c"
   389 ;; Parameters:    Size  Location     Type
   390 ;;  a               1    wreg     unsigned char 
   391 ;; Auto vars:     Size  Location     Type
   392 ;;  a               1    6[BANK0 ] unsigned char 
   393 ;; Return value:  Size  Location     Type
   394 ;;                  1    wreg      void 
   395 ;; Registers used:
   396 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   397 ;; Tracked objects:
   398 ;;		On entry : 0/0
   399 ;;		On exit  : 0/0
   400 ;;		Unchanged: 0/0
   401 ;; Data sizes:     COMMON   BANK0
   402 ;;      Params:         0       0
   403 ;;      Locals:         0       1
   404 ;;      Temps:          0       2
   405 ;;      Totals:         0       3
   406 ;;Total ram usage:        3 bytes
   407 ;; Hardware stack levels used:    1
   408 ;; Hardware stack levels required when called:    1
   409 ;; This function calls:
   410 ;;		_Lcd8_Port
   411 ;; This function is called by:
   412 ;;		_Lcd8_Write_String
   413 ;; This function uses a non-reentrant model
   414 ;;
   415                           
   416                           
   417                           ;psect for function _Lcd8_Write_Char
   418  033F                     _Lcd8_Write_Char:	
   419                           
   420                           ;incstack = 0
   421                           ; Regs used in _Lcd8_Write_Char: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   422                           ;Lcd8_Write_Char@a stored from wreg
   423  033F  1283               	bcf	3,5	;RP0=0, select bank0
   424  0340  00B0               	movwf	Lcd8_Write_Char@a
   425                           
   426                           ;LCDCHECK.c: 137: RC4 = 1;
   427  0341  1607               	bsf	7,4	;volatile
   428                           
   429                           ;LCDCHECK.c: 138: Lcd8_Port(a);
   430  0342  0830               	movf	Lcd8_Write_Char@a,w
   431  0343  2399               	fcall	_Lcd8_Port
   432                           
   433                           ;LCDCHECK.c: 139: RC5 = 1;
   434  0344  1283               	bcf	3,5	;RP0=0, select bank0
   435  0345  1687               	bsf	7,5	;volatile
   436                           
   437                           ;LCDCHECK.c: 140: _delay((unsigned long)((4)*(4000000/4000.0)));
   438  0346  3006               	movlw	6
   439  0347  00AF               	movwf	??_Lcd8_Write_Char+1
   440  0348  3030               	movlw	48
   441  0349  00AE               	movwf	??_Lcd8_Write_Char
   442  034A                     u317:	
   443  034A  0BAE               	decfsz	??_Lcd8_Write_Char,f
   444  034B  2B4A               	goto	u317
   445  034C  0BAF               	decfsz	??_Lcd8_Write_Char+1,f
   446  034D  2B4A               	goto	u317
   447  034E  0000               	nop
   448                           
   449                           ;LCDCHECK.c: 141: RC5 = 0;
   450  034F  1283               	bcf	3,5	;RP0=0, select bank0
   451  0350  1287               	bcf	7,5	;volatile
   452  0351  0008               	return
   453  0352                     __end_of_Lcd8_Write_Char:	
   454                           
   455                           	psect	text3
   456  032D                     __ptext3:	
   457 ;; *************** function _Lcd8_Set_Cursor *****************
   458 ;; Defined at:
   459 ;;		line 109 in file "LCDCHECK.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;  a               1    wreg     unsigned char 
   462 ;;  b               1    7[BANK0 ] unsigned char 
   463 ;; Auto vars:     Size  Location     Type
   464 ;;  a               1    8[BANK0 ] unsigned char 
   465 ;; Return value:  Size  Location     Type
   466 ;;                  1    wreg      void 
   467 ;; Registers used:
   468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   469 ;; Tracked objects:
   470 ;;		On entry : 0/0
   471 ;;		On exit  : 0/0
   472 ;;		Unchanged: 0/0
   473 ;; Data sizes:     COMMON   BANK0
   474 ;;      Params:         0       1
   475 ;;      Locals:         0       1
   476 ;;      Temps:          0       0
   477 ;;      Totals:         0       2
   478 ;;Total ram usage:        2 bytes
   479 ;; Hardware stack levels used:    1
   480 ;; Hardware stack levels required when called:    2
   481 ;; This function calls:
   482 ;;		_Lcd8_Cmd
   483 ;; This function is called by:
   484 ;;		_main
   485 ;; This function uses a non-reentrant model
   486 ;;
   487                           
   488                           
   489                           ;psect for function _Lcd8_Set_Cursor
   490  032D                     _Lcd8_Set_Cursor:	
   491                           
   492                           ;incstack = 0
   493                           ; Regs used in _Lcd8_Set_Cursor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   494                           ;Lcd8_Set_Cursor@a stored from wreg
   495  032D  1283               	bcf	3,5	;RP0=0, select bank0
   496  032E  00B2               	movwf	Lcd8_Set_Cursor@a
   497                           
   498                           ;LCDCHECK.c: 111: if(a == 1)
   499  032F  0332               	decf	Lcd8_Set_Cursor@a,w
   500  0330  1D03               	btfss	3,2
   501  0331  2B36               	goto	l755
   502                           
   503                           ;LCDCHECK.c: 112: Lcd8_Cmd(0x80 + b);
   504  0332  0831               	movf	Lcd8_Set_Cursor@b,w
   505  0333  3E80               	addlw	128
   506  0334  231B               	fcall	_Lcd8_Cmd
   507  0335  0008               	return
   508  0336                     l755:	
   509                           
   510                           ;LCDCHECK.c: 113: else if(a == 2)
   511  0336  3002               	movlw	2
   512  0337  1283               	bcf	3,5	;RP0=0, select bank0
   513  0338  0632               	xorwf	Lcd8_Set_Cursor@a,w
   514  0339  1D03               	btfss	3,2
   515  033A  0008               	return
   516                           
   517                           ;LCDCHECK.c: 114: Lcd8_Cmd(0xC0 + b);
   518  033B  0831               	movf	Lcd8_Set_Cursor@b,w
   519  033C  3EC0               	addlw	192
   520  033D  231B               	fcall	_Lcd8_Cmd
   521  033E  0008               	return
   522  033F                     __end_of_Lcd8_Set_Cursor:	
   523                           
   524                           	psect	text4
   525  036A                     __ptext4:	
   526 ;; *************** function _Lcd8_Init *****************
   527 ;; Defined at:
   528 ;;		line 117 in file "LCDCHECK.c"
   529 ;; Parameters:    Size  Location     Type
   530 ;;		None
   531 ;; Auto vars:     Size  Location     Type
   532 ;;		None
   533 ;; Return value:  Size  Location     Type
   534 ;;                  1    wreg      void 
   535 ;; Registers used:
   536 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   537 ;; Tracked objects:
   538 ;;		On entry : 0/0
   539 ;;		On exit  : 0/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMMON   BANK0
   542 ;;      Params:         0       0
   543 ;;      Locals:         0       0
   544 ;;      Temps:          0       2
   545 ;;      Totals:         0       2
   546 ;;Total ram usage:        2 bytes
   547 ;; Hardware stack levels used:    1
   548 ;; Hardware stack levels required when called:    2
   549 ;; This function calls:
   550 ;;		_Lcd8_Cmd
   551 ;;		_Lcd8_Port
   552 ;; This function is called by:
   553 ;;		_main
   554 ;; This function uses a non-reentrant model
   555 ;;
   556                           
   557                           
   558                           ;psect for function _Lcd8_Init
   559  036A                     _Lcd8_Init:	
   560                           
   561                           ;LCDCHECK.c: 119: Lcd8_Port(0x00);
   562                           
   563                           ;incstack = 0
   564                           ; Regs used in _Lcd8_Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   565  036A  3000               	movlw	0
   566  036B  2399               	fcall	_Lcd8_Port
   567                           
   568                           ;LCDCHECK.c: 120: RC4 = 0;
   569  036C  1283               	bcf	3,5	;RP0=0, select bank0
   570  036D  1207               	bcf	7,4	;volatile
   571                           
   572                           ;LCDCHECK.c: 121: _delay((unsigned long)((25)*(4000000/4000.0)));
   573  036E  3021               	movlw	33
   574  036F  00B2               	movwf	??_Lcd8_Init+1
   575  0370  3076               	movlw	118
   576  0371  00B1               	movwf	??_Lcd8_Init
   577  0372                     u327:	
   578  0372  0BB1               	decfsz	??_Lcd8_Init,f
   579  0373  2B72               	goto	u327
   580  0374  0BB2               	decfsz	??_Lcd8_Init+1,f
   581  0375  2B72               	goto	u327
   582  0376  0000               	nop
   583                           
   584                           ;LCDCHECK.c: 123: Lcd8_Cmd(0x30);
   585  0377  3030               	movlw	48
   586  0378  231B               	fcall	_Lcd8_Cmd
   587                           
   588                           ;LCDCHECK.c: 124: _delay((unsigned long)((5)*(4000000/4000.0)));
   589  0379  3007               	movlw	7
   590  037A  1283               	bcf	3,5	;RP0=0, select bank0
   591  037B  00B2               	movwf	??_Lcd8_Init+1
   592  037C  307D               	movlw	125
   593  037D  00B1               	movwf	??_Lcd8_Init
   594  037E                     u337:	
   595  037E  0BB1               	decfsz	??_Lcd8_Init,f
   596  037F  2B7E               	goto	u337
   597  0380  0BB2               	decfsz	??_Lcd8_Init+1,f
   598  0381  2B7E               	goto	u337
   599                           
   600                           ;LCDCHECK.c: 125: Lcd8_Cmd(0x30);
   601  0382  3030               	movlw	48
   602  0383  231B               	fcall	_Lcd8_Cmd
   603                           
   604                           ;LCDCHECK.c: 126: _delay((unsigned long)((15)*(4000000/4000.0)));
   605  0384  3014               	movlw	20
   606  0385  1283               	bcf	3,5	;RP0=0, select bank0
   607  0386  00B2               	movwf	??_Lcd8_Init+1
   608  0387  3079               	movlw	121
   609  0388  00B1               	movwf	??_Lcd8_Init
   610  0389                     u347:	
   611  0389  0BB1               	decfsz	??_Lcd8_Init,f
   612  038A  2B89               	goto	u347
   613  038B  0BB2               	decfsz	??_Lcd8_Init+1,f
   614  038C  2B89               	goto	u347
   615  038D  2B8E               	nop2
   616                           
   617                           ;LCDCHECK.c: 127: Lcd8_Cmd(0x30);
   618  038E  3030               	movlw	48
   619  038F  231B               	fcall	_Lcd8_Cmd
   620                           
   621                           ;LCDCHECK.c: 129: Lcd8_Cmd(0x38);
   622  0390  3038               	movlw	56
   623  0391  231B               	fcall	_Lcd8_Cmd
   624                           
   625                           ;LCDCHECK.c: 130: Lcd8_Cmd(0x0C);
   626  0392  300C               	movlw	12
   627  0393  231B               	fcall	_Lcd8_Cmd
   628                           
   629                           ;LCDCHECK.c: 131: Lcd8_Cmd(0x01);
   630  0394  3001               	movlw	1
   631  0395  231B               	fcall	_Lcd8_Cmd
   632                           
   633                           ;LCDCHECK.c: 132: Lcd8_Cmd(0x06);
   634  0396  3006               	movlw	6
   635  0397  231B               	fcall	_Lcd8_Cmd
   636  0398  0008               	return
   637  0399                     __end_of_Lcd8_Init:	
   638                           
   639                           	psect	text5
   640  031B                     __ptext5:	
   641 ;; *************** function _Lcd8_Cmd *****************
   642 ;; Defined at:
   643 ;;		line 95 in file "LCDCHECK.c"
   644 ;; Parameters:    Size  Location     Type
   645 ;;  a               1    wreg     unsigned char 
   646 ;; Auto vars:     Size  Location     Type
   647 ;;  a               1    6[BANK0 ] unsigned char 
   648 ;; Return value:  Size  Location     Type
   649 ;;                  1    wreg      void 
   650 ;; Registers used:
   651 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   652 ;; Tracked objects:
   653 ;;		On entry : 0/0
   654 ;;		On exit  : 0/0
   655 ;;		Unchanged: 0/0
   656 ;; Data sizes:     COMMON   BANK0
   657 ;;      Params:         0       0
   658 ;;      Locals:         0       1
   659 ;;      Temps:          0       2
   660 ;;      Totals:         0       3
   661 ;;Total ram usage:        3 bytes
   662 ;; Hardware stack levels used:    1
   663 ;; Hardware stack levels required when called:    1
   664 ;; This function calls:
   665 ;;		_Lcd8_Port
   666 ;; This function is called by:
   667 ;;		_Lcd8_Set_Cursor
   668 ;;		_Lcd8_Init
   669 ;;		_Lcd8_Clear
   670 ;;		_Lcd8_Shift_Right
   671 ;;		_Lcd8_Shift_Left
   672 ;; This function uses a non-reentrant model
   673 ;;
   674                           
   675                           
   676                           ;psect for function _Lcd8_Cmd
   677  031B                     _Lcd8_Cmd:	
   678                           
   679                           ;incstack = 0
   680                           ; Regs used in _Lcd8_Cmd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   681                           ;Lcd8_Cmd@a stored from wreg
   682  031B  1283               	bcf	3,5	;RP0=0, select bank0
   683  031C  00B0               	movwf	Lcd8_Cmd@a
   684                           
   685                           ;LCDCHECK.c: 97: RC4 = 0;
   686  031D  1207               	bcf	7,4	;volatile
   687                           
   688                           ;LCDCHECK.c: 98: Lcd8_Port(a);
   689  031E  0830               	movf	Lcd8_Cmd@a,w
   690  031F  2399               	fcall	_Lcd8_Port
   691                           
   692                           ;LCDCHECK.c: 99: RC5 = 1;
   693  0320  1283               	bcf	3,5	;RP0=0, select bank0
   694  0321  1687               	bsf	7,5	;volatile
   695                           
   696                           ;LCDCHECK.c: 100: _delay((unsigned long)((5)*(4000000/4000.0)));
   697  0322  3007               	movlw	7
   698  0323  00AF               	movwf	??_Lcd8_Cmd+1
   699  0324  307D               	movlw	125
   700  0325  00AE               	movwf	??_Lcd8_Cmd
   701  0326                     u357:	
   702  0326  0BAE               	decfsz	??_Lcd8_Cmd,f
   703  0327  2B26               	goto	u357
   704  0328  0BAF               	decfsz	??_Lcd8_Cmd+1,f
   705  0329  2B26               	goto	u357
   706                           
   707                           ;LCDCHECK.c: 101: RC5 = 0;
   708  032A  1283               	bcf	3,5	;RP0=0, select bank0
   709  032B  1287               	bcf	7,5	;volatile
   710  032C  0008               	return
   711  032D                     __end_of_Lcd8_Cmd:	
   712                           
   713                           	psect	text6
   714  0399                     __ptext6:	
   715 ;; *************** function _Lcd8_Port *****************
   716 ;; Defined at:
   717 ;;		line 40 in file "LCDCHECK.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;  a               1    wreg     unsigned char 
   720 ;; Auto vars:     Size  Location     Type
   721 ;;  a               1    3[BANK0 ] unsigned char 
   722 ;;  i               2    1[BANK0 ] int 
   723 ;; Return value:  Size  Location     Type
   724 ;;                  1    wreg      void 
   725 ;; Registers used:
   726 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMMON   BANK0
   732 ;;      Params:         0       0
   733 ;;      Locals:         0       3
   734 ;;      Temps:          0       1
   735 ;;      Totals:         0       4
   736 ;;Total ram usage:        4 bytes
   737 ;; Hardware stack levels used:    1
   738 ;; This function calls:
   739 ;;		Nothing
   740 ;; This function is called by:
   741 ;;		_Lcd8_Cmd
   742 ;;		_Lcd8_Init
   743 ;;		_Lcd8_Write_Char
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747                           
   748                           ;psect for function _Lcd8_Port
   749  0399                     _Lcd8_Port:	
   750                           
   751                           ;incstack = 0
   752                           ; Regs used in _Lcd8_Port: [wreg-fsr0h+status,2+status,0+btemp+1]
   753                           ;Lcd8_Port@a stored from wreg
   754  0399  1283               	bcf	3,5	;RP0=0, select bank0
   755  039A  00AD               	movwf	Lcd8_Port@a
   756                           
   757                           ;LCDCHECK.c: 42: if(a & 1)
   758  039B  1C2D               	btfss	Lcd8_Port@a,0
   759  039C  2BA0               	goto	l673
   760                           
   761                           ;LCDCHECK.c: 43: D[0] = 1;
   762  039D  01A0               	clrf	_D
   763  039E  0AA0               	incf	_D,f
   764  039F  2BA1               	goto	l675
   765  03A0                     l673:	
   766                           
   767                           ;LCDCHECK.c: 44: else
   768                           ;LCDCHECK.c: 45: D[0] = 0;
   769  03A0  01A0               	clrf	_D
   770  03A1                     l675:	
   771                           
   772                           ;LCDCHECK.c: 47: if(a & 2)
   773  03A1  1CAD               	btfss	Lcd8_Port@a,1
   774  03A2  2BA6               	goto	l679
   775                           
   776                           ;LCDCHECK.c: 48: D[1] = 1;
   777  03A3  01A1               	clrf	_D+1
   778  03A4  0AA1               	incf	_D+1,f
   779  03A5  2BA7               	goto	l681
   780  03A6                     l679:	
   781                           
   782                           ;LCDCHECK.c: 49: else
   783                           ;LCDCHECK.c: 50: D[1] = 0;
   784  03A6  01A1               	clrf	_D+1
   785  03A7                     l681:	
   786                           
   787                           ;LCDCHECK.c: 52: if(a & 4)
   788  03A7  1D2D               	btfss	Lcd8_Port@a,2
   789  03A8  2BAC               	goto	l685
   790                           
   791                           ;LCDCHECK.c: 53: D[2] = 1;
   792  03A9  01A2               	clrf	_D+2
   793  03AA  0AA2               	incf	_D+2,f
   794  03AB  2BAD               	goto	l687
   795  03AC                     l685:	
   796                           
   797                           ;LCDCHECK.c: 54: else
   798                           ;LCDCHECK.c: 55: D[2] = 0;
   799  03AC  01A2               	clrf	_D+2
   800  03AD                     l687:	
   801                           
   802                           ;LCDCHECK.c: 57: if(a & 8)
   803  03AD  1DAD               	btfss	Lcd8_Port@a,3
   804  03AE  2BB2               	goto	l691
   805                           
   806                           ;LCDCHECK.c: 58: D[3] = 1;
   807  03AF  01A3               	clrf	_D+3
   808  03B0  0AA3               	incf	_D+3,f
   809  03B1  2BB3               	goto	l693
   810  03B2                     l691:	
   811                           
   812                           ;LCDCHECK.c: 59: else
   813                           ;LCDCHECK.c: 60: D[3] = 0;
   814  03B2  01A3               	clrf	_D+3
   815  03B3                     l693:	
   816                           
   817                           ;LCDCHECK.c: 62: if(a & 16)
   818  03B3  1E2D               	btfss	Lcd8_Port@a,4
   819  03B4  2BB8               	goto	l697
   820                           
   821                           ;LCDCHECK.c: 63: D[4] = 1;
   822  03B5  01A4               	clrf	_D+4
   823  03B6  0AA4               	incf	_D+4,f
   824  03B7  2BB9               	goto	l699
   825  03B8                     l697:	
   826                           
   827                           ;LCDCHECK.c: 64: else
   828                           ;LCDCHECK.c: 65: D[4] = 0;
   829  03B8  01A4               	clrf	_D+4
   830  03B9                     l699:	
   831                           
   832                           ;LCDCHECK.c: 67: if(a & 32)
   833  03B9  1EAD               	btfss	Lcd8_Port@a,5
   834  03BA  2BBE               	goto	l703
   835                           
   836                           ;LCDCHECK.c: 68: D[5] = 1;
   837  03BB  01A5               	clrf	_D+5
   838  03BC  0AA5               	incf	_D+5,f
   839  03BD  2BBF               	goto	l705
   840  03BE                     l703:	
   841                           
   842                           ;LCDCHECK.c: 69: else
   843                           ;LCDCHECK.c: 70: D[5] = 0;
   844  03BE  01A5               	clrf	_D+5
   845  03BF                     l705:	
   846                           
   847                           ;LCDCHECK.c: 72: if(a & 64)
   848  03BF  1F2D               	btfss	Lcd8_Port@a,6
   849  03C0  2BC4               	goto	l709
   850                           
   851                           ;LCDCHECK.c: 73: D[6] = 1;
   852  03C1  01A6               	clrf	_D+6
   853  03C2  0AA6               	incf	_D+6,f
   854  03C3  2BC5               	goto	l711
   855  03C4                     l709:	
   856                           
   857                           ;LCDCHECK.c: 74: else
   858                           ;LCDCHECK.c: 75: D[6] = 0;
   859  03C4  01A6               	clrf	_D+6
   860  03C5                     l711:	
   861                           
   862                           ;LCDCHECK.c: 77: if(a & 128)
   863  03C5  1FAD               	btfss	Lcd8_Port@a,7
   864  03C6  2BCA               	goto	l715
   865                           
   866                           ;LCDCHECK.c: 78: D[7] = 1;
   867  03C7  01A7               	clrf	_D+7
   868  03C8  0AA7               	incf	_D+7,f
   869  03C9  2BCB               	goto	l38
   870  03CA                     l715:	
   871                           
   872                           ;LCDCHECK.c: 79: else
   873                           ;LCDCHECK.c: 80: D[7] = 0;
   874  03CA  01A7               	clrf	_D+7
   875  03CB                     l38:	
   876                           
   877                           ;LCDCHECK.c: 82: for(int i = 0;i<=7;i++)
   878  03CB  01AB               	clrf	Lcd8_Port@i
   879  03CC  01AC               	clrf	Lcd8_Port@i+1
   880  03CD                     L1:	
   881  03CD  082C               	movf	Lcd8_Port@i+1,w
   882  03CE  3A80               	xorlw	128
   883  03CF  00DF               	movwf	95
   884  03D0  3080               	movlw	128
   885  03D1  025F               	subwf	95,w
   886  03D2  1D03               	skipz
   887  03D3  2BD6               	goto	u245
   888  03D4  3008               	movlw	8
   889  03D5  022B               	subwf	Lcd8_Port@i,w
   890  03D6                     u245:	
   891  03D6  1803               	btfsc	3,0
   892  03D7  0008               	return
   893                           
   894                           ;LCDCHECK.c: 83: {
   895                           ;LCDCHECK.c: 84: RC1 = 1;
   896  03D8  1283               	bcf	3,5	;RP0=0, select bank0
   897  03D9  1487               	bsf	7,1	;volatile
   898                           
   899                           ;LCDCHECK.c: 85: _delay((unsigned long)((10)*(4000000/4000000.0)));
   900  03DA  3003               	movlw	3
   901  03DB  00AA               	movwf	??_Lcd8_Port
   902  03DC                     u367:	
   903  03DC  0BAA               	decfsz	??_Lcd8_Port,f
   904  03DD  2BDC               	goto	u367
   905                           
   906                           ;LCDCHECK.c: 86: RC0 = D[i];
   907  03DE  1283               	bcf	3,5	;RP0=0, select bank0
   908  03DF  082B               	movf	Lcd8_Port@i,w
   909  03E0  3E20               	addlw	(low (_D| 0))& (0+255)
   910  03E1  0084               	movwf	4
   911  03E2  1383               	bcf	3,7	;select IRP bank0
   912  03E3  1C00               	btfss	0,0
   913  03E4  2BE8               	goto	u250
   914  03E5  1283               	bcf	3,5	;RP0=0, select bank0
   915  03E6  1407               	bsf	7,0	;volatile
   916  03E7  2BEA               	goto	l725
   917  03E8                     u250:	
   918  03E8  1283               	bcf	3,5	;RP0=0, select bank0
   919  03E9  1007               	bcf	7,0	;volatile
   920  03EA                     l725:	
   921                           
   922                           ;LCDCHECK.c: 88: RC1 = 0;
   923  03EA  1087               	bcf	7,1	;volatile
   924  03EB  3001               	movlw	1
   925  03EC  07AB               	addwf	Lcd8_Port@i,f
   926  03ED  1803               	skipnc
   927  03EE  0AAC               	incf	Lcd8_Port@i+1,f
   928  03EF  3000               	movlw	0
   929  03F0  07AC               	addwf	Lcd8_Port@i+1,f
   930  03F1  2BCD               	goto	L1
   931  03F2                     __end_of_Lcd8_Port:	
   932  005E                     btemp	set	94	;btemp
   933  005E                     wtemp0	set	94


Data Sizes:
    Strings     6
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     10      20

Pointer List with Targets:

    Lcd8_Write_String@a	PTR unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd8_Write_String
    _Lcd8_Write_String->_Lcd8_Write_Char
    _Lcd8_Write_Char->_Lcd8_Port
    _Lcd8_Set_Cursor->_Lcd8_Cmd
    _Lcd8_Init->_Lcd8_Cmd
    _Lcd8_Cmd->_Lcd8_Port

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1300
                          _Lcd8_Init
                    _Lcd8_Set_Cursor
                  _Lcd8_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd8_Write_String                                    3     3      0     383
                                              7 BANK0      3     3      0
                    _Lcd8_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd8_Write_Char                                      3     3      0     266
                                              4 BANK0      3     3      0
                          _Lcd8_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd8_Set_Cursor                                      2     1      1     407
                                              7 BANK0      2     1      1
                           _Lcd8_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd8_Init                                            2     2      0     510
                                              7 BANK0      2     2      0
                           _Lcd8_Cmd
                          _Lcd8_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd8_Cmd                                             3     3      0     266
                                              4 BANK0      3     3      0
                          _Lcd8_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd8_Port                                            4     4      0     244
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd8_Init
     _Lcd8_Cmd
       _Lcd8_Port
     _Lcd8_Port
   _Lcd8_Set_Cursor
     _Lcd8_Cmd
       _Lcd8_Port
   _Lcd8_Write_String
     _Lcd8_Write_Char
       _Lcd8_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E      A      14       4       32.3%
ABS                  0      0      14       5        0.0%
DATA                 0      0      14       6        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Dec 23 12:47:19 2017

                         _D 0020                           pc 0002                 __CFG_CP$OFF 0000  
                        l38 03CB                          fsr 0004                         l711 03C5  
                       l703 03BE                         l705 03BF                         l715 03CA  
                       l725 03EA                         l709 03C4                         l681 03A7  
                       l673 03A0                         l691 03B2                         l675 03A1  
                       l755 0336                         l693 03B3                         l685 03AC  
                       l687 03AD                         l679 03A6                         l697 03B8  
                       l777 0356                         l699 03B9                         l797 0318  
                       _RC0 0038                         _RC1 0039                         _RC4 003C  
                       _RC5 003D                         u250 03E8                         u245 03D6  
                       u317 034A                         u327 0372                         u337 037E  
              __CFG_CPD$OFF 0000                         u347 0389                         u357 0326  
                       u367 03DC                         fsr0 0004                         indf 0000  
                      STR_1 0007                        _main 030A           ??_Lcd8_Set_Cursor 0000  
                      btemp 005E               __CFG_BOREN$ON 0000                        start 0000  
                     ?_main 002A               __CFG_WDTE$OFF 0000                       _CMCON 0019  
                     _ANSEL 0091                       _TRISA 0085                       _TRISC 0087  
                     pclath 000A                       status 0003            __end_of_Lcd8_Cmd 032D  
                     wtemp0 005E              __CFG_MCLRE$OFF 0000             __initialization 03F2  
              __end_of_main 031B          __size_of_Lcd8_Init 002F          __size_of_Lcd8_Port 0059  
         ??_Lcd8_Write_Char 002E                      ??_main 0000              __CFG_PWRTE$OFF 0000  
         __end_of_Lcd8_Init 0399           __end_of_Lcd8_Port 03F2     __end_of__initialization 03FD  
            __pcstackCOMMON 0000                   ?_Lcd8_Cmd 002A             _Lcd8_Set_Cursor 032D  
                __pbssBANK0 0020                  __pmaintext 030A            Lcd8_Set_Cursor@a 0032  
          Lcd8_Set_Cursor@b 0031                  ??_Lcd8_Cmd 002E                  __stringtab 0001  
           _Lcd8_Write_Char 033F     __end_of_Lcd8_Set_Cursor 033F                     __ptext1 0352  
                   __ptext2 033F                     __ptext3 032D                     __ptext4 036A  
                   __ptext5 031B                     __ptext6 0399                   Lcd8_Cmd@a 0030  
      end_of_initialization 03FD     __end_of_Lcd8_Write_Char 0352                   _Lcd8_Init 036A  
                 _Lcd8_Port 0399            ?_Lcd8_Set_Cursor 0031         start_initialization 03F2  
         __size_of_Lcd8_Cmd 0012           _Lcd8_Write_String 0352          ?_Lcd8_Write_String 002A  
                ?_Lcd8_Init 002A                  ?_Lcd8_Port 002A         ??_Lcd8_Write_String 0000  
                 ___latbits 0000               __pcstackBANK0 002A   __end_of_Lcd8_Write_String 036A  
          ?_Lcd8_Write_Char 002A                   __pstrings 0001                 ??_Lcd8_Init 0031  
          Lcd8_Write_Char@a 0030                 ??_Lcd8_Port 002A                 __stringbase 0006  
                  _Lcd8_Cmd 031B  __size_of_Lcd8_Write_String 0018          __end_of__stringtab 0007  
             __size_of_main 0011                  Lcd8_Port@a 002D                  Lcd8_Port@i 002B  
  __size_of_Lcd8_Set_Cursor 0012                   stringcode 0001          Lcd8_Write_String@a 0033  
        Lcd8_Write_String@i 0031                    stringdir 0001                    stringtab 0001  
         __CFG_FOSC$INTRCIO 0000    __size_of_Lcd8_Write_Char 0013  
