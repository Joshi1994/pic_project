

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Dec 23 10:53:36 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	text9,local,class=CODE,merge=1,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 1.44
    20                           ; Generated 14/09/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  010C                     	;# 
   108  010D                     	;# 
   109  010E                     	;# 
   110  010F                     	;# 
   111  018C                     	;# 
   112  018D                     	;# 
   113  0037                     _RB7	set	55
   114  0036                     _RB6	set	54
   115  003F                     _RC7	set	63
   116  003E                     _RC6	set	62
   117  003D                     _RC5	set	61
   118  003C                     _RC4	set	60
   119  003B                     _RC3	set	59
   120  003A                     _RC2	set	58
   121  0039                     _RC1	set	57
   122  0038                     _RC0	set	56
   123  0087                     _TRISC	set	135
   124  0086                     _TRISB	set	134
   125                           
   126                           	psect	strings
   127  0003                     __pstrings:	
   128  0003                     stringtab:	
   129  0003                     __stringtab:	
   130  0003                     stringcode:	
   131                           ;	String table - string pointers are 1 byte each
   132                           
   133  0003                     stringdir:	
   134  0003  3000               	movlw	high stringdir
   135  0004  008A               	movwf	10
   136  0005  0804               	movf	4,w
   137  0006  0A84               	incf	4,f
   138  0007  0782               	addwf	2,f
   139  0008                     __stringbase:	
   140  0008  3400               	retlw	0
   141  0009                     __end_of__stringtab:	
   142  0009                     STR_1:	
   143  0009  3465               	retlw	101	;'e'
   144  000A  346C               	retlw	108	;'l'
   145  000B  3465               	retlw	101	;'e'
   146  000C  3463               	retlw	99	;'c'
   147  000D  3474               	retlw	116	;'t'
   148  000E  3472               	retlw	114	;'r'
   149  000F  346F               	retlw	111	;'o'
   150  0010  3453               	retlw	83	;'S'
   151  0011  346F               	retlw	111	;'o'
   152  0012  346D               	retlw	109	;'m'
   153  0013  3465               	retlw	101	;'e'
   154  0014  3420               	retlw	32	;' '
   155  0015  344C               	retlw	76	;'L'
   156  0016  3443               	retlw	67	;'C'
   157  0017  3444               	retlw	68	;'D'
   158  0018  3420               	retlw	32	;' '
   159  0019  3448               	retlw	72	;'H'
   160  001A  3465               	retlw	101	;'e'
   161  001B  346C               	retlw	108	;'l'
   162  001C  346C               	retlw	108	;'l'
   163  001D  346F               	retlw	111	;'o'
   164  001E  3420               	retlw	32	;' '
   165  001F  3457               	retlw	87	;'W'
   166  0020  346F               	retlw	111	;'o'
   167  0021  3472               	retlw	114	;'r'
   168  0022  346C               	retlw	108	;'l'
   169  0023  3464               	retlw	100	;'d'
   170  0024  3400               	retlw	0
   171                           
   172                           ; #config settings
   173  0000                     
   174                           	psect	cinit
   175  07FC                     start_initialization:	
   176  07FC                     __initialization:	
   177  07FC                     end_of_initialization:	
   178                           ;End of C runtime variable initialization code
   179                           
   180  07FC                     __end_of__initialization:	
   181  07FC  0183               	clrf	3
   182  07FD  120A  118A  2F66   	ljmp	_main	;jump to C main() function
   183                           
   184                           	psect	cstackCOMMON
   185  0070                     __pcstackCOMMON:	
   186  0070                     ?_Lcd8_Port:	
   187  0070                     ??_Lcd8_Port:	
   188                           ; 1 bytes @ 0x0
   189                           
   190  0070                     ?_Lcd8_Cmd:	
   191                           ; 1 bytes @ 0x0
   192                           
   193  0070                     ?_Lcd8_Init:	
   194                           ; 1 bytes @ 0x0
   195                           
   196  0070                     ?_Lcd8_Write_Char:	
   197                           ; 1 bytes @ 0x0
   198                           
   199  0070                     ?_Lcd8_Write_String:	
   200                           ; 1 bytes @ 0x0
   201                           
   202  0070                     ?_Lcd8_Shift_Right:	
   203                           ; 1 bytes @ 0x0
   204                           
   205  0070                     ?_Lcd8_Shift_Left:	
   206                           ; 1 bytes @ 0x0
   207                           
   208  0070                     ?_main:	
   209                           ; 1 bytes @ 0x0
   210                           
   211  0070                     ?_Lcd8_Clear:	
   212                           ; 1 bytes @ 0x0
   213                           
   214  0070                     Lcd8_Port@a:	
   215                           ; 2 bytes @ 0x0
   216                           
   217                           
   218                           ; 1 bytes @ 0x0
   219  0070                     	ds	1
   220  0071                     ??_Lcd8_Cmd:	
   221  0071                     ??_Lcd8_Write_Char:	
   222                           ; 1 bytes @ 0x1
   223                           
   224                           
   225                           ; 1 bytes @ 0x1
   226  0071                     	ds	2
   227  0073                     Lcd8_Cmd@a:	
   228  0073                     Lcd8_Write_Char@a:	
   229                           ; 1 bytes @ 0x3
   230                           
   231                           
   232                           ; 1 bytes @ 0x3
   233  0073                     	ds	1
   234  0074                     ??_Lcd8_Clear:	
   235  0074                     ?_Lcd8_Set_Cursor:	
   236                           ; 1 bytes @ 0x4
   237                           
   238  0074                     ??_Lcd8_Init:	
   239                           ; 1 bytes @ 0x4
   240                           
   241  0074                     ??_Lcd8_Write_String:	
   242                           ; 1 bytes @ 0x4
   243                           
   244  0074                     ??_Lcd8_Shift_Right:	
   245                           ; 1 bytes @ 0x4
   246                           
   247  0074                     ??_Lcd8_Shift_Left:	
   248                           ; 1 bytes @ 0x4
   249                           
   250  0074                     Lcd8_Set_Cursor@b:	
   251                           ; 1 bytes @ 0x4
   252                           
   253  0074                     Lcd8_Write_String@i:	
   254                           ; 1 bytes @ 0x4
   255                           
   256                           
   257                           ; 2 bytes @ 0x4
   258  0074                     	ds	1
   259  0075                     ??_Lcd8_Set_Cursor:	
   260  0075                     Lcd8_Set_Cursor@a:	
   261                           ; 1 bytes @ 0x5
   262                           
   263                           
   264                           ; 1 bytes @ 0x5
   265  0075                     	ds	1
   266  0076                     Lcd8_Write_String@a:	
   267                           
   268                           ; 1 bytes @ 0x6
   269  0076                     	ds	1
   270  0077                     ??_main:	
   271                           
   272                           ; 1 bytes @ 0x7
   273  0077                     	ds	3
   274  007A                     main@i:	
   275                           
   276                           ; 2 bytes @ 0xA
   277  007A                     	ds	2
   278                           
   279                           	psect	maintext
   280  0766                     __pmaintext:	
   281 ;;
   282 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   283 ;;
   284 ;; *************** function _main *****************
   285 ;; Defined at:
   286 ;;		line 139 in file "newmain.c"
   287 ;; Parameters:    Size  Location     Type
   288 ;;		None
   289 ;; Auto vars:     Size  Location     Type
   290 ;;  i               2   10[COMMON] int 
   291 ;; Return value:  Size  Location     Type
   292 ;;                  1    wreg      void 
   293 ;; Registers used:
   294 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   295 ;; Tracked objects:
   296 ;;		On entry : B00/0
   297 ;;		On exit  : 0/0
   298 ;;		Unchanged: 0/0
   299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   300 ;;      Params:         0       0       0       0       0
   301 ;;      Locals:         2       0       0       0       0
   302 ;;      Temps:          3       0       0       0       0
   303 ;;      Totals:         5       0       0       0       0
   304 ;;Total ram usage:        5 bytes
   305 ;; Hardware stack levels required when called:    3
   306 ;; This function calls:
   307 ;;		_Lcd8_Clear
   308 ;;		_Lcd8_Init
   309 ;;		_Lcd8_Set_Cursor
   310 ;;		_Lcd8_Shift_Left
   311 ;;		_Lcd8_Shift_Right
   312 ;;		_Lcd8_Write_Char
   313 ;;		_Lcd8_Write_String
   314 ;; This function is called by:
   315 ;;		Startup code after reset
   316 ;; This function uses a non-reentrant model
   317 ;;
   318                           
   319                           
   320                           ;psect for function _main
   321  0766                     _main:	
   322                           
   323                           ;newmain.c: 141: int i;
   324                           ;newmain.c: 142: TRISB = 0x00;
   325                           
   326                           ;incstack = 0
   327                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   328  0766  1683               	bsf	3,5	;RP0=1, select bank1
   329  0767  1303               	bcf	3,6	;RP1=0, select bank1
   330  0768  0186               	clrf	6	;volatile
   331                           
   332                           ;newmain.c: 143: TRISC = 0x00;
   333  0769  0187               	clrf	7	;volatile
   334                           
   335                           ;newmain.c: 144: Lcd8_Init();
   336  076A  120A  118A  271A  120A  118A  	fcall	_Lcd8_Init
   337  076F                     l679:	
   338                           ;newmain.c: 145: while(1)
   339                           
   340                           
   341                           ;newmain.c: 146: {
   342                           ;newmain.c: 147: Lcd8_Set_Cursor(1,1);
   343  076F  01F4               	clrf	Lcd8_Set_Cursor@b
   344  0770  0AF4               	incf	Lcd8_Set_Cursor@b,f
   345  0771  3001               	movlw	1
   346  0772  120A  118A  2683  120A  118A  	fcall	_Lcd8_Set_Cursor
   347                           
   348                           ;newmain.c: 148: Lcd8_Write_String("electroSome LCD Hello World");
   349  0777  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   350  0778  120A  118A  26CA  120A  118A  	fcall	_Lcd8_Write_String
   351                           
   352                           ;newmain.c: 149: for(i=0;i<15;i++)
   353  077D  01FA               	clrf	main@i
   354  077E  01FB               	clrf	main@i+1
   355  077F  087B               	movf	main@i+1,w
   356  0780  3A80               	xorlw	128
   357  0781  00FF               	movwf	127
   358  0782  3080               	movlw	128
   359  0783  027F               	subwf	127,w
   360  0784  1D03               	skipz
   361  0785  2F88               	goto	u195
   362  0786  300F               	movlw	15
   363  0787  027A               	subwf	main@i,w
   364  0788                     u195:	
   365  0788  1803               	btfsc	3,0
   366  0789  2FA9               	goto	l697
   367  078A                     l689:	
   368                           
   369                           ;newmain.c: 150: {
   370                           ;newmain.c: 151: _delay((unsigned long)((100)*(4000000/4000.0)));
   371  078A  3082               	movlw	130
   372  078B  00F8               	movwf	??_main+1
   373  078C  30DD               	movlw	221
   374  078D  00F7               	movwf	??_main
   375  078E                     u237:	
   376  078E  0BF7               	decfsz	??_main,f
   377  078F  2F8E               	goto	u237
   378  0790  0BF8               	decfsz	??_main+1,f
   379  0791  2F8E               	goto	u237
   380  0792  2F93               	nop2
   381                           
   382                           ;newmain.c: 152: Lcd8_Shift_Left();
   383  0793  120A  118A  2679  120A  118A  	fcall	_Lcd8_Shift_Left
   384  0798  3001               	movlw	1
   385  0799  07FA               	addwf	main@i,f
   386  079A  1803               	skipnc
   387  079B  0AFB               	incf	main@i+1,f
   388  079C  3000               	movlw	0
   389  079D  07FB               	addwf	main@i+1,f
   390  079E  087B               	movf	main@i+1,w
   391  079F  3A80               	xorlw	128
   392  07A0  00FF               	movwf	127
   393  07A1  3080               	movlw	128
   394  07A2  027F               	subwf	127,w
   395  07A3  1D03               	skipz
   396  07A4  2FA7               	goto	u205
   397  07A5  300F               	movlw	15
   398  07A6  027A               	subwf	main@i,w
   399  07A7                     u205:	
   400  07A7  1C03               	skipc
   401  07A8  2F8A               	goto	l689
   402  07A9                     l697:	
   403                           
   404                           ;newmain.c: 153: }
   405                           ;newmain.c: 154: for(i=0;i<15;i++)
   406  07A9  01FA               	clrf	main@i
   407  07AA  01FB               	clrf	main@i+1
   408  07AB  087B               	movf	main@i+1,w
   409  07AC  3A80               	xorlw	128
   410  07AD  00FF               	movwf	127
   411  07AE  3080               	movlw	128
   412  07AF  027F               	subwf	127,w
   413  07B0  1D03               	skipz
   414  07B1  2FB4               	goto	u215
   415  07B2  300F               	movlw	15
   416  07B3  027A               	subwf	main@i,w
   417  07B4                     u215:	
   418  07B4  1803               	btfsc	3,0
   419  07B5  2FD5               	goto	l711
   420  07B6                     l703:	
   421                           
   422                           ;newmain.c: 155: {
   423                           ;newmain.c: 156: _delay((unsigned long)((100)*(4000000/4000.0)));
   424  07B6  3082               	movlw	130
   425  07B7  00F8               	movwf	??_main+1
   426  07B8  30DD               	movlw	221
   427  07B9  00F7               	movwf	??_main
   428  07BA                     u247:	
   429  07BA  0BF7               	decfsz	??_main,f
   430  07BB  2FBA               	goto	u247
   431  07BC  0BF8               	decfsz	??_main+1,f
   432  07BD  2FBA               	goto	u247
   433  07BE  2FBF               	nop2
   434                           
   435                           ;newmain.c: 157: Lcd8_Shift_Right();
   436  07BF  120A  118A  267E  120A  118A  	fcall	_Lcd8_Shift_Right
   437  07C4  3001               	movlw	1
   438  07C5  07FA               	addwf	main@i,f
   439  07C6  1803               	skipnc
   440  07C7  0AFB               	incf	main@i+1,f
   441  07C8  3000               	movlw	0
   442  07C9  07FB               	addwf	main@i+1,f
   443  07CA  087B               	movf	main@i+1,w
   444  07CB  3A80               	xorlw	128
   445  07CC  00FF               	movwf	127
   446  07CD  3080               	movlw	128
   447  07CE  027F               	subwf	127,w
   448  07CF  1D03               	skipz
   449  07D0  2FD3               	goto	u225
   450  07D1  300F               	movlw	15
   451  07D2  027A               	subwf	main@i,w
   452  07D3                     u225:	
   453  07D3  1C03               	skipc
   454  07D4  2FB6               	goto	l703
   455  07D5                     l711:	
   456                           
   457                           ;newmain.c: 158: }
   458                           ;newmain.c: 159: Lcd8_Clear();
   459  07D5  120A  118A  2674  120A  118A  	fcall	_Lcd8_Clear
   460                           
   461                           ;newmain.c: 160: Lcd8_Set_Cursor(2,1);
   462  07DA  01F4               	clrf	Lcd8_Set_Cursor@b
   463  07DB  0AF4               	incf	Lcd8_Set_Cursor@b,f
   464  07DC  3002               	movlw	2
   465  07DD  120A  118A  2683  120A  118A  	fcall	_Lcd8_Set_Cursor
   466                           
   467                           ;newmain.c: 161: Lcd8_Write_Char('e');
   468  07E2  3065               	movlw	101
   469  07E3  120A  118A  26B0  120A  118A  	fcall	_Lcd8_Write_Char
   470                           
   471                           ;newmain.c: 162: Lcd8_Write_Char('S');
   472  07E8  3053               	movlw	83
   473  07E9  120A  118A  26B0  120A  118A  	fcall	_Lcd8_Write_Char
   474                           
   475                           ;newmain.c: 163: _delay((unsigned long)((2000)*(4000000/4000.0)));
   476  07EE  300B               	movlw	11
   477  07EF  00F9               	movwf	??_main+2
   478  07F0  3026               	movlw	38
   479  07F1  00F8               	movwf	??_main+1
   480  07F2  305D               	movlw	93
   481  07F3  00F7               	movwf	??_main
   482  07F4                     u257:	
   483  07F4  0BF7               	decfsz	??_main,f
   484  07F5  2FF4               	goto	u257
   485  07F6  0BF8               	decfsz	??_main+1,f
   486  07F7  2FF4               	goto	u257
   487  07F8  0BF9               	decfsz	??_main+2,f
   488  07F9  2FF4               	goto	u257
   489  07FA  2FFB               	nop2
   490  07FB  2F6F               	goto	l679
   491  07FC                     __end_of_main:	
   492                           
   493                           	psect	text1
   494  06CA                     __ptext1:	
   495 ;; *************** function _Lcd8_Write_String *****************
   496 ;; Defined at:
   497 ;;		line 122 in file "newmain.c"
   498 ;; Parameters:    Size  Location     Type
   499 ;;  a               1    wreg     PTR unsigned char 
   500 ;;		 -> STR_1(28), 
   501 ;; Auto vars:     Size  Location     Type
   502 ;;  a               1    6[COMMON] PTR unsigned char 
   503 ;;		 -> STR_1(28), 
   504 ;;  i               2    4[COMMON] int 
   505 ;; Return value:  Size  Location     Type
   506 ;;                  1    wreg      void 
   507 ;; Registers used:
   508 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   509 ;; Tracked objects:
   510 ;;		On entry : 0/0
   511 ;;		On exit  : 0/0
   512 ;;		Unchanged: 0/0
   513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   514 ;;      Params:         0       0       0       0       0
   515 ;;      Locals:         3       0       0       0       0
   516 ;;      Temps:          0       0       0       0       0
   517 ;;      Totals:         3       0       0       0       0
   518 ;;Total ram usage:        3 bytes
   519 ;; Hardware stack levels used:    1
   520 ;; Hardware stack levels required when called:    2
   521 ;; This function calls:
   522 ;;		_Lcd8_Write_Char
   523 ;; This function is called by:
   524 ;;		_main
   525 ;; This function uses a non-reentrant model
   526 ;;
   527                           
   528                           
   529                           ;psect for function _Lcd8_Write_String
   530  06CA                     _Lcd8_Write_String:	
   531                           
   532                           ;incstack = 0
   533                           ; Regs used in _Lcd8_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   534                           ;Lcd8_Write_String@a stored from wreg
   535  06CA  00F6               	movwf	Lcd8_Write_String@a
   536                           
   537                           ;newmain.c: 124: int i;
   538                           ;newmain.c: 125: for(i=0;a[i]!='\0';i++)
   539  06CB  01F4               	clrf	Lcd8_Write_String@i
   540  06CC  01F5               	clrf	Lcd8_Write_String@i+1
   541  06CD                     l673:	
   542  06CD  0874               	movf	Lcd8_Write_String@i,w
   543  06CE  0776               	addwf	Lcd8_Write_String@a,w
   544  06CF  0084               	movwf	4
   545  06D0  120A  118A  2003  120A  118A  	fcall	stringdir
   546  06D5  3A00               	xorlw	0
   547  06D6  1903               	btfsc	3,2
   548  06D7  0008               	return
   549                           
   550                           ;newmain.c: 126: Lcd8_Write_Char(a[i]);
   551  06D8  0874               	movf	Lcd8_Write_String@i,w
   552  06D9  0776               	addwf	Lcd8_Write_String@a,w
   553  06DA  0084               	movwf	4
   554  06DB  120A  118A  2003  120A  118A  	fcall	stringdir
   555  06E0  120A  118A  26B0  120A  118A  	fcall	_Lcd8_Write_Char
   556  06E5  3001               	movlw	1
   557  06E6  07F4               	addwf	Lcd8_Write_String@i,f
   558  06E7  1803               	skipnc
   559  06E8  0AF5               	incf	Lcd8_Write_String@i+1,f
   560  06E9  3000               	movlw	0
   561  06EA  07F5               	addwf	Lcd8_Write_String@i+1,f
   562  06EB  2ECD               	goto	l673
   563  06EC                     __end_of_Lcd8_Write_String:	
   564                           
   565                           	psect	text2
   566  06B0                     __ptext2:	
   567 ;; *************** function _Lcd8_Write_Char *****************
   568 ;; Defined at:
   569 ;;		line 113 in file "newmain.c"
   570 ;; Parameters:    Size  Location     Type
   571 ;;  a               1    wreg     unsigned char 
   572 ;; Auto vars:     Size  Location     Type
   573 ;;  a               1    3[COMMON] unsigned char 
   574 ;; Return value:  Size  Location     Type
   575 ;;                  1    wreg      void 
   576 ;; Registers used:
   577 ;;		wreg, status,2, status,0, pclath, cstack
   578 ;; Tracked objects:
   579 ;;		On entry : 0/0
   580 ;;		On exit  : 0/0
   581 ;;		Unchanged: 0/0
   582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   583 ;;      Params:         0       0       0       0       0
   584 ;;      Locals:         1       0       0       0       0
   585 ;;      Temps:          2       0       0       0       0
   586 ;;      Totals:         3       0       0       0       0
   587 ;;Total ram usage:        3 bytes
   588 ;; Hardware stack levels used:    1
   589 ;; Hardware stack levels required when called:    1
   590 ;; This function calls:
   591 ;;		_Lcd8_Port
   592 ;; This function is called by:
   593 ;;		_Lcd8_Write_String
   594 ;;		_main
   595 ;; This function uses a non-reentrant model
   596 ;;
   597                           
   598                           
   599                           ;psect for function _Lcd8_Write_Char
   600  06B0                     _Lcd8_Write_Char:	
   601                           
   602                           ;incstack = 0
   603                           ; Regs used in _Lcd8_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   604                           ;Lcd8_Write_Char@a stored from wreg
   605  06B0  00F3               	movwf	Lcd8_Write_Char@a
   606                           
   607                           ;newmain.c: 115: RB6 = 1;
   608  06B1  1283               	bcf	3,5	;RP0=0, select bank0
   609  06B2  1303               	bcf	3,6	;RP1=0, select bank0
   610  06B3  1706               	bsf	6,6	;volatile
   611                           
   612                           ;newmain.c: 116: Lcd8_Port(a);
   613  06B4  0873               	movf	Lcd8_Write_Char@a,w
   614  06B5  120A  118A  26EC  120A  118A  	fcall	_Lcd8_Port
   615                           
   616                           ;newmain.c: 117: RB7 = 1;
   617  06BA  1283               	bcf	3,5	;RP0=0, select bank0
   618  06BB  1303               	bcf	3,6	;RP1=0, select bank0
   619  06BC  1786               	bsf	6,7	;volatile
   620                           
   621                           ;newmain.c: 118: _delay((unsigned long)((4)*(4000000/4000.0)));
   622  06BD  3006               	movlw	6
   623  06BE  00F2               	movwf	??_Lcd8_Write_Char+1
   624  06BF  3030               	movlw	48
   625  06C0  00F1               	movwf	??_Lcd8_Write_Char
   626  06C1                     u267:	
   627  06C1  0BF1               	decfsz	??_Lcd8_Write_Char,f
   628  06C2  2EC1               	goto	u267
   629  06C3  0BF2               	decfsz	??_Lcd8_Write_Char+1,f
   630  06C4  2EC1               	goto	u267
   631  06C5  0000               	nop
   632                           
   633                           ;newmain.c: 119: RB7 = 0;
   634  06C6  1283               	bcf	3,5	;RP0=0, select bank0
   635  06C7  1303               	bcf	3,6	;RP1=0, select bank0
   636  06C8  1386               	bcf	6,7	;volatile
   637  06C9  0008               	return
   638  06CA                     __end_of_Lcd8_Write_Char:	
   639                           
   640                           	psect	text3
   641  067E                     __ptext3:	
   642 ;; *************** function _Lcd8_Shift_Right *****************
   643 ;; Defined at:
   644 ;;		line 129 in file "newmain.c"
   645 ;; Parameters:    Size  Location     Type
   646 ;;		None
   647 ;; Auto vars:     Size  Location     Type
   648 ;;		None
   649 ;; Return value:  Size  Location     Type
   650 ;;                  1    wreg      void 
   651 ;; Registers used:
   652 ;;		wreg, status,2, status,0, pclath, cstack
   653 ;; Tracked objects:
   654 ;;		On entry : 0/0
   655 ;;		On exit  : 0/0
   656 ;;		Unchanged: 0/0
   657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   658 ;;      Params:         0       0       0       0       0
   659 ;;      Locals:         0       0       0       0       0
   660 ;;      Temps:          0       0       0       0       0
   661 ;;      Totals:         0       0       0       0       0
   662 ;;Total ram usage:        0 bytes
   663 ;; Hardware stack levels used:    1
   664 ;; Hardware stack levels required when called:    2
   665 ;; This function calls:
   666 ;;		_Lcd8_Cmd
   667 ;; This function is called by:
   668 ;;		_main
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           
   673                           ;psect for function _Lcd8_Shift_Right
   674  067E                     _Lcd8_Shift_Right:	
   675                           
   676                           ;newmain.c: 131: Lcd8_Cmd(0x1C);
   677                           
   678                           ;incstack = 0
   679                           ; Regs used in _Lcd8_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
   680  067E  301C               	movlw	28
   681  067F  120A  118A  2697   	fcall	_Lcd8_Cmd
   682  0682  0008               	return
   683  0683                     __end_of_Lcd8_Shift_Right:	
   684                           
   685                           	psect	text4
   686  0679                     __ptext4:	
   687 ;; *************** function _Lcd8_Shift_Left *****************
   688 ;; Defined at:
   689 ;;		line 134 in file "newmain.c"
   690 ;; Parameters:    Size  Location     Type
   691 ;;		None
   692 ;; Auto vars:     Size  Location     Type
   693 ;;		None
   694 ;; Return value:  Size  Location     Type
   695 ;;                  1    wreg      void 
   696 ;; Registers used:
   697 ;;		wreg, status,2, status,0, pclath, cstack
   698 ;; Tracked objects:
   699 ;;		On entry : 0/0
   700 ;;		On exit  : 0/0
   701 ;;		Unchanged: 0/0
   702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   703 ;;      Params:         0       0       0       0       0
   704 ;;      Locals:         0       0       0       0       0
   705 ;;      Temps:          0       0       0       0       0
   706 ;;      Totals:         0       0       0       0       0
   707 ;;Total ram usage:        0 bytes
   708 ;; Hardware stack levels used:    1
   709 ;; Hardware stack levels required when called:    2
   710 ;; This function calls:
   711 ;;		_Lcd8_Cmd
   712 ;; This function is called by:
   713 ;;		_main
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717                           
   718                           ;psect for function _Lcd8_Shift_Left
   719  0679                     _Lcd8_Shift_Left:	
   720                           
   721                           ;newmain.c: 136: Lcd8_Cmd(0x18);
   722                           
   723                           ;incstack = 0
   724                           ; Regs used in _Lcd8_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
   725  0679  3018               	movlw	24
   726  067A  120A  118A  2697   	fcall	_Lcd8_Cmd
   727  067D  0008               	return
   728  067E                     __end_of_Lcd8_Shift_Left:	
   729                           
   730                           	psect	text5
   731  0683                     __ptext5:	
   732 ;; *************** function _Lcd8_Set_Cursor *****************
   733 ;; Defined at:
   734 ;;		line 87 in file "newmain.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;  a               1    wreg     unsigned char 
   737 ;;  b               1    4[COMMON] unsigned char 
   738 ;; Auto vars:     Size  Location     Type
   739 ;;  a               1    5[COMMON] unsigned char 
   740 ;; Return value:  Size  Location     Type
   741 ;;                  1    wreg      void 
   742 ;; Registers used:
   743 ;;		wreg, status,2, status,0, pclath, cstack
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   749 ;;      Params:         1       0       0       0       0
   750 ;;      Locals:         1       0       0       0       0
   751 ;;      Temps:          0       0       0       0       0
   752 ;;      Totals:         2       0       0       0       0
   753 ;;Total ram usage:        2 bytes
   754 ;; Hardware stack levels used:    1
   755 ;; Hardware stack levels required when called:    2
   756 ;; This function calls:
   757 ;;		_Lcd8_Cmd
   758 ;; This function is called by:
   759 ;;		_main
   760 ;; This function uses a non-reentrant model
   761 ;;
   762                           
   763                           
   764                           ;psect for function _Lcd8_Set_Cursor
   765  0683                     _Lcd8_Set_Cursor:	
   766                           
   767                           ;incstack = 0
   768                           ; Regs used in _Lcd8_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   769                           ;Lcd8_Set_Cursor@a stored from wreg
   770  0683  00F5               	movwf	Lcd8_Set_Cursor@a
   771                           
   772                           ;newmain.c: 89: if(a == 1)
   773  0684  0375               	decf	Lcd8_Set_Cursor@a,w
   774  0685  1D03               	btfss	3,2
   775  0686  2E8D               	goto	l663
   776                           
   777                           ;newmain.c: 90: Lcd8_Cmd(0x80 + b);
   778  0687  0874               	movf	Lcd8_Set_Cursor@b,w
   779  0688  3E80               	addlw	128
   780  0689  120A  118A  2697   	fcall	_Lcd8_Cmd
   781  068C  0008               	return
   782  068D                     l663:	
   783                           
   784                           ;newmain.c: 91: else if(a == 2)
   785  068D  3002               	movlw	2
   786  068E  0675               	xorwf	Lcd8_Set_Cursor@a,w
   787  068F  1D03               	btfss	3,2
   788  0690  0008               	return
   789                           
   790                           ;newmain.c: 92: Lcd8_Cmd(0xC0 + b);
   791  0691  0874               	movf	Lcd8_Set_Cursor@b,w
   792  0692  3EC0               	addlw	192
   793  0693  120A  118A  2697   	fcall	_Lcd8_Cmd
   794  0696  0008               	return
   795  0697                     __end_of_Lcd8_Set_Cursor:	
   796                           
   797                           	psect	text6
   798  071A                     __ptext6:	
   799 ;; *************** function _Lcd8_Init *****************
   800 ;; Defined at:
   801 ;;		line 95 in file "newmain.c"
   802 ;; Parameters:    Size  Location     Type
   803 ;;		None
   804 ;; Auto vars:     Size  Location     Type
   805 ;;		None
   806 ;; Return value:  Size  Location     Type
   807 ;;                  1    wreg      void 
   808 ;; Registers used:
   809 ;;		wreg, status,2, status,0, pclath, cstack
   810 ;; Tracked objects:
   811 ;;		On entry : 0/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   815 ;;      Params:         0       0       0       0       0
   816 ;;      Locals:         0       0       0       0       0
   817 ;;      Temps:          2       0       0       0       0
   818 ;;      Totals:         2       0       0       0       0
   819 ;;Total ram usage:        2 bytes
   820 ;; Hardware stack levels used:    1
   821 ;; Hardware stack levels required when called:    2
   822 ;; This function calls:
   823 ;;		_Lcd8_Cmd
   824 ;;		_Lcd8_Port
   825 ;; This function is called by:
   826 ;;		_main
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           
   831                           ;psect for function _Lcd8_Init
   832  071A                     _Lcd8_Init:	
   833                           
   834                           ;newmain.c: 97: Lcd8_Port(0x00);
   835                           
   836                           ;incstack = 0
   837                           ; Regs used in _Lcd8_Init: [wreg+status,2+status,0+pclath+cstack]
   838  071A  3000               	movlw	0
   839  071B  120A  118A  26EC  120A  118A  	fcall	_Lcd8_Port
   840                           
   841                           ;newmain.c: 98: RB6 = 0;
   842  0720  1283               	bcf	3,5	;RP0=0, select bank0
   843  0721  1303               	bcf	3,6	;RP1=0, select bank0
   844  0722  1306               	bcf	6,6	;volatile
   845                           
   846                           ;newmain.c: 99: _delay((unsigned long)((25)*(4000000/4000.0)));
   847  0723  3021               	movlw	33
   848  0724  00F5               	movwf	??_Lcd8_Init+1
   849  0725  3076               	movlw	118
   850  0726  00F4               	movwf	??_Lcd8_Init
   851  0727                     u277:	
   852  0727  0BF4               	decfsz	??_Lcd8_Init,f
   853  0728  2F27               	goto	u277
   854  0729  0BF5               	decfsz	??_Lcd8_Init+1,f
   855  072A  2F27               	goto	u277
   856  072B  0000               	nop
   857                           
   858                           ;newmain.c: 101: Lcd8_Cmd(0x30);
   859  072C  3030               	movlw	48
   860  072D  120A  118A  2697  120A  118A  	fcall	_Lcd8_Cmd
   861                           
   862                           ;newmain.c: 102: _delay((unsigned long)((5)*(4000000/4000.0)));
   863  0732  3007               	movlw	7
   864  0733  00F5               	movwf	??_Lcd8_Init+1
   865  0734  307D               	movlw	125
   866  0735  00F4               	movwf	??_Lcd8_Init
   867  0736                     u287:	
   868  0736  0BF4               	decfsz	??_Lcd8_Init,f
   869  0737  2F36               	goto	u287
   870  0738  0BF5               	decfsz	??_Lcd8_Init+1,f
   871  0739  2F36               	goto	u287
   872                           
   873                           ;newmain.c: 103: Lcd8_Cmd(0x30);
   874  073A  3030               	movlw	48
   875  073B  120A  118A  2697  120A  118A  	fcall	_Lcd8_Cmd
   876                           
   877                           ;newmain.c: 104: _delay((unsigned long)((15)*(4000000/4000.0)));
   878  0740  3014               	movlw	20
   879  0741  00F5               	movwf	??_Lcd8_Init+1
   880  0742  3079               	movlw	121
   881  0743  00F4               	movwf	??_Lcd8_Init
   882  0744                     u297:	
   883  0744  0BF4               	decfsz	??_Lcd8_Init,f
   884  0745  2F44               	goto	u297
   885  0746  0BF5               	decfsz	??_Lcd8_Init+1,f
   886  0747  2F44               	goto	u297
   887  0748  2F49               	nop2
   888                           
   889                           ;newmain.c: 105: Lcd8_Cmd(0x30);
   890  0749  3030               	movlw	48
   891  074A  120A  118A  2697  120A  118A  	fcall	_Lcd8_Cmd
   892                           
   893                           ;newmain.c: 107: Lcd8_Cmd(0x38);
   894  074F  3038               	movlw	56
   895  0750  120A  118A  2697  120A  118A  	fcall	_Lcd8_Cmd
   896                           
   897                           ;newmain.c: 108: Lcd8_Cmd(0x0C);
   898  0755  300C               	movlw	12
   899  0756  120A  118A  2697  120A  118A  	fcall	_Lcd8_Cmd
   900                           
   901                           ;newmain.c: 109: Lcd8_Cmd(0x01);
   902  075B  3001               	movlw	1
   903  075C  120A  118A  2697  120A  118A  	fcall	_Lcd8_Cmd
   904                           
   905                           ;newmain.c: 110: Lcd8_Cmd(0x06);
   906  0761  3006               	movlw	6
   907  0762  120A  118A  2697   	fcall	_Lcd8_Cmd
   908  0765  0008               	return
   909  0766                     __end_of_Lcd8_Init:	
   910                           
   911                           	psect	text7
   912  0674                     __ptext7:	
   913 ;; *************** function _Lcd8_Clear *****************
   914 ;; Defined at:
   915 ;;		line 82 in file "newmain.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;		None
   918 ;; Auto vars:     Size  Location     Type
   919 ;;		None
   920 ;; Return value:  Size  Location     Type
   921 ;;                  2   50[None  ] int 
   922 ;; Registers used:
   923 ;;		wreg, status,2, status,0, pclath, cstack
   924 ;; Tracked objects:
   925 ;;		On entry : 0/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   929 ;;      Params:         0       0       0       0       0
   930 ;;      Locals:         0       0       0       0       0
   931 ;;      Temps:          0       0       0       0       0
   932 ;;      Totals:         0       0       0       0       0
   933 ;;Total ram usage:        0 bytes
   934 ;; Hardware stack levels used:    1
   935 ;; Hardware stack levels required when called:    2
   936 ;; This function calls:
   937 ;;		_Lcd8_Cmd
   938 ;; This function is called by:
   939 ;;		_main
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           
   944                           ;psect for function _Lcd8_Clear
   945  0674                     _Lcd8_Clear:	
   946                           
   947                           ;newmain.c: 84: Lcd8_Cmd(1);
   948                           
   949                           ;incstack = 0
   950                           ; Regs used in _Lcd8_Clear: [wreg+status,2+status,0+pclath+cstack]
   951  0674  3001               	movlw	1
   952  0675  120A  118A  2697   	fcall	_Lcd8_Cmd
   953  0678  0008               	return
   954  0679                     __end_of_Lcd8_Clear:	
   955                           
   956                           	psect	text8
   957  0697                     __ptext8:	
   958 ;; *************** function _Lcd8_Cmd *****************
   959 ;; Defined at:
   960 ;;		line 73 in file "newmain.c"
   961 ;; Parameters:    Size  Location     Type
   962 ;;  a               1    wreg     unsigned char 
   963 ;; Auto vars:     Size  Location     Type
   964 ;;  a               1    3[COMMON] unsigned char 
   965 ;; Return value:  Size  Location     Type
   966 ;;                  1    wreg      void 
   967 ;; Registers used:
   968 ;;		wreg, status,2, status,0, pclath, cstack
   969 ;; Tracked objects:
   970 ;;		On entry : 0/0
   971 ;;		On exit  : 0/0
   972 ;;		Unchanged: 0/0
   973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   974 ;;      Params:         0       0       0       0       0
   975 ;;      Locals:         1       0       0       0       0
   976 ;;      Temps:          2       0       0       0       0
   977 ;;      Totals:         3       0       0       0       0
   978 ;;Total ram usage:        3 bytes
   979 ;; Hardware stack levels used:    1
   980 ;; Hardware stack levels required when called:    1
   981 ;; This function calls:
   982 ;;		_Lcd8_Port
   983 ;; This function is called by:
   984 ;;		_Lcd8_Clear
   985 ;;		_Lcd8_Set_Cursor
   986 ;;		_Lcd8_Init
   987 ;;		_Lcd8_Shift_Right
   988 ;;		_Lcd8_Shift_Left
   989 ;; This function uses a non-reentrant model
   990 ;;
   991                           
   992                           
   993                           ;psect for function _Lcd8_Cmd
   994  0697                     _Lcd8_Cmd:	
   995                           
   996                           ;incstack = 0
   997                           ; Regs used in _Lcd8_Cmd: [wreg+status,2+status,0+pclath+cstack]
   998                           ;Lcd8_Cmd@a stored from wreg
   999  0697  00F3               	movwf	Lcd8_Cmd@a
  1000                           
  1001                           ;newmain.c: 75: RB6 = 0;
  1002  0698  1283               	bcf	3,5	;RP0=0, select bank0
  1003  0699  1303               	bcf	3,6	;RP1=0, select bank0
  1004  069A  1306               	bcf	6,6	;volatile
  1005                           
  1006                           ;newmain.c: 76: Lcd8_Port(a);
  1007  069B  0873               	movf	Lcd8_Cmd@a,w
  1008  069C  120A  118A  26EC  120A  118A  	fcall	_Lcd8_Port
  1009                           
  1010                           ;newmain.c: 77: RB7 = 1;
  1011  06A1  1283               	bcf	3,5	;RP0=0, select bank0
  1012  06A2  1303               	bcf	3,6	;RP1=0, select bank0
  1013  06A3  1786               	bsf	6,7	;volatile
  1014                           
  1015                           ;newmain.c: 78: _delay((unsigned long)((5)*(4000000/4000.0)));
  1016  06A4  3007               	movlw	7
  1017  06A5  00F2               	movwf	??_Lcd8_Cmd+1
  1018  06A6  307D               	movlw	125
  1019  06A7  00F1               	movwf	??_Lcd8_Cmd
  1020  06A8                     u307:	
  1021  06A8  0BF1               	decfsz	??_Lcd8_Cmd,f
  1022  06A9  2EA8               	goto	u307
  1023  06AA  0BF2               	decfsz	??_Lcd8_Cmd+1,f
  1024  06AB  2EA8               	goto	u307
  1025                           
  1026                           ;newmain.c: 79: RB7 = 0;
  1027  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  1028  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  1029  06AE  1386               	bcf	6,7	;volatile
  1030  06AF  0008               	return
  1031  06B0                     __end_of_Lcd8_Cmd:	
  1032                           
  1033                           	psect	text9
  1034  06EC                     __ptext9:	
  1035 ;; *************** function _Lcd8_Port *****************
  1036 ;; Defined at:
  1037 ;;		line 31 in file "newmain.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;  a               1    wreg     unsigned char 
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;  a               1    0[COMMON] unsigned char 
  1042 ;; Return value:  Size  Location     Type
  1043 ;;                  1    wreg      void 
  1044 ;; Registers used:
  1045 ;;		wreg
  1046 ;; Tracked objects:
  1047 ;;		On entry : 0/0
  1048 ;;		On exit  : 0/0
  1049 ;;		Unchanged: 0/0
  1050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1051 ;;      Params:         0       0       0       0       0
  1052 ;;      Locals:         1       0       0       0       0
  1053 ;;      Temps:          0       0       0       0       0
  1054 ;;      Totals:         1       0       0       0       0
  1055 ;;Total ram usage:        1 bytes
  1056 ;; Hardware stack levels used:    1
  1057 ;; This function calls:
  1058 ;;		Nothing
  1059 ;; This function is called by:
  1060 ;;		_Lcd8_Cmd
  1061 ;;		_Lcd8_Init
  1062 ;;		_Lcd8_Write_Char
  1063 ;; This function uses a non-reentrant model
  1064 ;;
  1065                           
  1066                           
  1067                           ;psect for function _Lcd8_Port
  1068  06EC                     _Lcd8_Port:	
  1069                           
  1070                           ;incstack = 0
  1071                           ; Regs used in _Lcd8_Port: [wreg]
  1072                           ;Lcd8_Port@a stored from wreg
  1073  06EC  00F0               	movwf	Lcd8_Port@a
  1074                           
  1075                           ;newmain.c: 33: if(a & 1)
  1076  06ED  1C70               	btfss	Lcd8_Port@a,0
  1077  06EE  2EF3               	goto	l29
  1078                           
  1079                           ;newmain.c: 34: RC0 = 1;
  1080  06EF  1283               	bcf	3,5	;RP0=0, select bank0
  1081  06F0  1303               	bcf	3,6	;RP1=0, select bank0
  1082  06F1  1407               	bsf	7,0	;volatile
  1083  06F2  2EF6               	goto	l30
  1084  06F3                     l29:	
  1085                           
  1086                           ;newmain.c: 35: else
  1087                           ;newmain.c: 36: RC0 = 0;
  1088  06F3  1283               	bcf	3,5	;RP0=0, select bank0
  1089  06F4  1303               	bcf	3,6	;RP1=0, select bank0
  1090  06F5  1007               	bcf	7,0	;volatile
  1091  06F6                     l30:	
  1092                           
  1093                           ;newmain.c: 38: if(a & 2)
  1094  06F6  1CF0               	btfss	Lcd8_Port@a,1
  1095  06F7  2EFA               	goto	l31
  1096                           
  1097                           ;newmain.c: 39: RC1 = 1;
  1098  06F8  1487               	bsf	7,1	;volatile
  1099  06F9  2EFB               	goto	l32
  1100  06FA                     l31:	
  1101                           
  1102                           ;newmain.c: 40: else
  1103                           ;newmain.c: 41: RC1 = 0;
  1104  06FA  1087               	bcf	7,1	;volatile
  1105  06FB                     l32:	
  1106                           
  1107                           ;newmain.c: 43: if(a & 4)
  1108  06FB  1D70               	btfss	Lcd8_Port@a,2
  1109  06FC  2EFF               	goto	l33
  1110                           
  1111                           ;newmain.c: 44: RC2 = 1;
  1112  06FD  1507               	bsf	7,2	;volatile
  1113  06FE  2F00               	goto	l34
  1114  06FF                     l33:	
  1115                           
  1116                           ;newmain.c: 45: else
  1117                           ;newmain.c: 46: RC2 = 0;
  1118  06FF  1107               	bcf	7,2	;volatile
  1119  0700                     l34:	
  1120                           
  1121                           ;newmain.c: 48: if(a & 8)
  1122  0700  1DF0               	btfss	Lcd8_Port@a,3
  1123  0701  2F04               	goto	l35
  1124                           
  1125                           ;newmain.c: 49: RC3 = 1;
  1126  0702  1587               	bsf	7,3	;volatile
  1127  0703  2F05               	goto	l36
  1128  0704                     l35:	
  1129                           
  1130                           ;newmain.c: 50: else
  1131                           ;newmain.c: 51: RC3 = 0;
  1132  0704  1187               	bcf	7,3	;volatile
  1133  0705                     l36:	
  1134                           
  1135                           ;newmain.c: 53: if(a & 16)
  1136  0705  1E70               	btfss	Lcd8_Port@a,4
  1137  0706  2F09               	goto	l37
  1138                           
  1139                           ;newmain.c: 54: RC4 = 1;
  1140  0707  1607               	bsf	7,4	;volatile
  1141  0708  2F0A               	goto	l38
  1142  0709                     l37:	
  1143                           
  1144                           ;newmain.c: 55: else
  1145                           ;newmain.c: 56: RC4 = 0;
  1146  0709  1207               	bcf	7,4	;volatile
  1147  070A                     l38:	
  1148                           
  1149                           ;newmain.c: 58: if(a & 32)
  1150  070A  1EF0               	btfss	Lcd8_Port@a,5
  1151  070B  2F0E               	goto	l39
  1152                           
  1153                           ;newmain.c: 59: RC5 = 1;
  1154  070C  1687               	bsf	7,5	;volatile
  1155  070D  2F0F               	goto	l40
  1156  070E                     l39:	
  1157                           
  1158                           ;newmain.c: 60: else
  1159                           ;newmain.c: 61: RC5 = 0;
  1160  070E  1287               	bcf	7,5	;volatile
  1161  070F                     l40:	
  1162                           
  1163                           ;newmain.c: 63: if(a & 64)
  1164  070F  1F70               	btfss	Lcd8_Port@a,6
  1165  0710  2F13               	goto	l41
  1166                           
  1167                           ;newmain.c: 64: RC6 = 1;
  1168  0711  1707               	bsf	7,6	;volatile
  1169  0712  2F14               	goto	l42
  1170  0713                     l41:	
  1171                           
  1172                           ;newmain.c: 65: else
  1173                           ;newmain.c: 66: RC6 = 0;
  1174  0713  1307               	bcf	7,6	;volatile
  1175  0714                     l42:	
  1176                           
  1177                           ;newmain.c: 68: if(a & 128)
  1178  0714  1FF0               	btfss	Lcd8_Port@a,7
  1179  0715  2F18               	goto	l43
  1180                           
  1181                           ;newmain.c: 69: RC7 = 1;
  1182  0716  1787               	bsf	7,7	;volatile
  1183  0717  0008               	return
  1184  0718                     l43:	
  1185                           
  1186                           ;newmain.c: 70: else
  1187                           ;newmain.c: 71: RC7 = 0;
  1188  0718  1387               	bcf	7,7	;volatile
  1189  0719  0008               	return
  1190  071A                     __end_of_Lcd8_Port:	
  1191  007E                     btemp	set	126	;btemp
  1192  007E                     wtemp0	set	126


Data Sizes:
    Strings     28
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd8_Write_String@a	PTR unsigned char  size(1) Largest target is 28
		 -> STR_1(CODE[28]), 


Critical Paths under _main in COMMON

    _main->_Lcd8_Write_String
    _Lcd8_Write_String->_Lcd8_Write_Char
    _Lcd8_Write_Char->_Lcd8_Port
    _Lcd8_Shift_Right->_Lcd8_Cmd
    _Lcd8_Shift_Left->_Lcd8_Cmd
    _Lcd8_Set_Cursor->_Lcd8_Cmd
    _Lcd8_Init->_Lcd8_Cmd
    _Lcd8_Clear->_Lcd8_Cmd
    _Lcd8_Cmd->_Lcd8_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    1468
                                              7 COMMON     5     5      0
                         _Lcd8_Clear
                          _Lcd8_Init
                    _Lcd8_Set_Cursor
                    _Lcd8_Shift_Left
                   _Lcd8_Shift_Right
                    _Lcd8_Write_Char
                  _Lcd8_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd8_Write_String                                    3     3      0     252
                                              4 COMMON     3     3      0
                    _Lcd8_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd8_Write_Char                                      3     3      0     135
                                              1 COMMON     3     3      0
                          _Lcd8_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd8_Shift_Right                                     0     0      0     135
                           _Lcd8_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd8_Shift_Left                                      0     0      0     135
                           _Lcd8_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd8_Set_Cursor                                      2     1      1     329
                                              4 COMMON     2     1      1
                           _Lcd8_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd8_Init                                            2     2      0     255
                                              4 COMMON     2     2      0
                           _Lcd8_Cmd
                          _Lcd8_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd8_Clear                                           0     0      0     135
                           _Lcd8_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd8_Cmd                                             3     3      0     135
                                              1 COMMON     3     3      0
                          _Lcd8_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd8_Port                                            1     1      0     120
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd8_Clear
     _Lcd8_Cmd
       _Lcd8_Port
   _Lcd8_Init
     _Lcd8_Cmd
       _Lcd8_Port
     _Lcd8_Port
   _Lcd8_Set_Cursor
     _Lcd8_Cmd
       _Lcd8_Port
   _Lcd8_Shift_Left
     _Lcd8_Cmd
       _Lcd8_Port
   _Lcd8_Shift_Right
     _Lcd8_Cmd
       _Lcd8_Port
   _Lcd8_Write_Char
     _Lcd8_Port
   _Lcd8_Write_String
     _Lcd8_Write_Char
       _Lcd8_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Dec 23 10:53:36 2017

                         pc 0002                 __CFG_CP$OFF 0000                          l30 06F6  
                        l31 06FA                          l40 070F                          l32 06FB  
                        l41 0713                          l33 06FF                          l42 0714  
                        l34 0700                          l43 0718                          l35 0704  
                        l36 0705                          l37 0709                          l29 06F3  
                        l38 070A                          l39 070E                          fsr 0004  
                       l711 07D5                         l703 07B6                         l663 068D  
                       l673 06CD                         l679 076F                         l697 07A9  
                       l689 078A                         _RC0 0038                         _RC1 0039  
                       _RC2 003A                         _RC3 003B                         _RC4 003C  
                       _RB6 0036                         _RC5 003D                         _RB7 0037  
                       _RC6 003E                         _RC7 003F                         u205 07A7  
                       u215 07B4                         u225 07D3                         u307 06A8  
                       u237 078E                         u247 07BA                         u257 07F4  
              __CFG_CPD$OFF 0000                         u267 06C1                         u195 0788  
                       u277 0727                         u287 0736                         u297 0744  
                       fsr0 0004                __CFG_FOSC$HS 0000                  _Lcd8_Clear 0674  
              __CFG_LVP$OFF 0000                        STR_1 0009                __CFG_WRT$OFF 0000  
                      _main 0766           ??_Lcd8_Set_Cursor 0075                        btemp 007E  
             __CFG_BOREN$ON 0000                        start 0000           ??_Lcd8_Shift_Left 0074  
                     ?_main 0070               __CFG_WDTE$OFF 0000                       _TRISB 0086  
                     _TRISC 0087                       main@i 007A                       pclath 000A  
                     status 0003            __end_of_Lcd8_Cmd 06B0                       wtemp0 007E  
         ?_Lcd8_Shift_Right 0070          ??_Lcd8_Shift_Right 0074             __initialization 07FC  
              __end_of_main 07FC          __size_of_Lcd8_Init 004C          __size_of_Lcd8_Port 002E  
         ??_Lcd8_Write_Char 0071                      ??_main 0077                 ?_Lcd8_Clear 0070  
            __CFG_PWRTE$OFF 0000           __end_of_Lcd8_Init 0766           __end_of_Lcd8_Port 071A  
   __end_of__initialization 07FC              __pcstackCOMMON 0070         __size_of_Lcd8_Clear 0005  
                 ?_Lcd8_Cmd 0070             _Lcd8_Set_Cursor 0683             _Lcd8_Shift_Left 0679  
                __pmaintext 0766            Lcd8_Set_Cursor@a 0075            Lcd8_Set_Cursor@b 0074  
                ??_Lcd8_Cmd 0071                  __stringtab 0003             _Lcd8_Write_Char 06B0  
   __end_of_Lcd8_Set_Cursor 0697                     __ptext1 06CA                     __ptext2 06B0  
                   __ptext3 067E                     __ptext4 0679                     __ptext5 0683  
                   __ptext6 071A                     __ptext7 0674                     __ptext8 0697  
                   __ptext9 06EC   __size_of_Lcd8_Shift_Right 0005     __end_of_Lcd8_Shift_Left 067E  
                 Lcd8_Cmd@a 0073                ??_Lcd8_Clear 0074        end_of_initialization 07FC  
        __end_of_Lcd8_Clear 0679     __end_of_Lcd8_Write_Char 06CA                   _Lcd8_Init 071A  
                 _Lcd8_Port 06EC            ?_Lcd8_Set_Cursor 0074            ?_Lcd8_Shift_Left 0070  
       start_initialization 07FC           __size_of_Lcd8_Cmd 0019           _Lcd8_Write_String 06CA  
        ?_Lcd8_Write_String 0070                  ?_Lcd8_Init 0070                  ?_Lcd8_Port 0070  
       ??_Lcd8_Write_String 0074            _Lcd8_Shift_Right 067E                   ___latbits 0002  
 __end_of_Lcd8_Write_String 06EC            ?_Lcd8_Write_Char 0070                   __pstrings 0003  
               ??_Lcd8_Init 0074            Lcd8_Write_Char@a 0073                 ??_Lcd8_Port 0070  
               __stringbase 0008                    _Lcd8_Cmd 0697  __size_of_Lcd8_Write_String 0022  
        __end_of__stringtab 0009    __end_of_Lcd8_Shift_Right 0683               __size_of_main 0096  
                Lcd8_Port@a 0070    __size_of_Lcd8_Set_Cursor 0014    __size_of_Lcd8_Shift_Left 0005  
                 stringcode 0003          Lcd8_Write_String@a 0076          Lcd8_Write_String@i 0074  
                  stringdir 0003                    stringtab 0003    __size_of_Lcd8_Write_Char 001A  
