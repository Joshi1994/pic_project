

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Thu Nov 30 16:34:29 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F883
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	psect	text25,local,class=CODE,merge=1,delta=2
    36                           	psect	text26,local,class=CODE,merge=1,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 1.44
    40                           ; Generated 14/09/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F883 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0007                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  000E                     	;# 
    88  000F                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0013                     	;# 
    93  0014                     	;# 
    94  0015                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  001D                     	;# 
   105  001E                     	;# 
   106  001F                     	;# 
   107  0081                     	;# 
   108  0085                     	;# 
   109  0086                     	;# 
   110  0087                     	;# 
   111  0089                     	;# 
   112  008C                     	;# 
   113  008D                     	;# 
   114  008E                     	;# 
   115  008F                     	;# 
   116  0090                     	;# 
   117  0091                     	;# 
   118  0092                     	;# 
   119  0093                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0094                     	;# 
   123  0095                     	;# 
   124  0096                     	;# 
   125  0097                     	;# 
   126  0098                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  0105                     	;# 
   135  0107                     	;# 
   136  0108                     	;# 
   137  0109                     	;# 
   138  010C                     	;# 
   139  010C                     	;# 
   140  010D                     	;# 
   141  010E                     	;# 
   142  010F                     	;# 
   143  0185                     	;# 
   144  0187                     	;# 
   145  0188                     	;# 
   146  0189                     	;# 
   147  018C                     	;# 
   148  018D                     	;# 
   149                           
   150                           	psect	strings
   151  0002                     __pstrings:	
   152  0002                     stringtab:	
   153  0002                     __stringtab:	
   154  0002                     stringcode:	
   155                           ;	String table - string pointers are 1 byte each
   156                           
   157  0002                     stringdir:	
   158  0002  3000               	movlw	high stringdir
   159  0003  008A               	movwf	10
   160  0004  0804               	movf	4,w
   161  0005  0A84               	incf	4,f
   162  0006  0782               	addwf	2,f
   163  0007                     __stringbase:	
   164  0007  3400               	retlw	0
   165  0008                     __end_of__stringtab:	
   166  0008                     getTemp@adcMax:	
   167  0008  34C0               	retlw	192
   168  0009  347F               	retlw	127
   169  000A  3444               	retlw	68
   170  000B                     __end_ofgetTemp@adcMax:	
   171  000B                     getTemp@invBeta:	
   172  000B  341D               	retlw	29
   173  000C  349B               	retlw	155
   174  000D  3439               	retlw	57
   175  000E                     __end_ofgetTemp@invBeta:	
   176  000E                     log@coeff:	
   177  000E  3400               	retlw	0
   178  000F  3400               	retlw	0
   179  0010  3400               	retlw	0
   180  0011  3400               	retlw	0
   181  0012  3480               	retlw	128
   182  0013  343F               	retlw	63
   183  0014  34F0               	retlw	240
   184  0015  34FF               	retlw	255
   185  0016  34BE               	retlw	190
   186  0017  34E2               	retlw	226
   187  0018  34A9               	retlw	169
   188  0019  343E               	retlw	62
   189  001A  3483               	retlw	131
   190  001B  3476               	retlw	118
   191  001C  34BE               	retlw	190
   192  001D  34AE               	retlw	174
   193  001E  342B               	retlw	43
   194  001F  343E               	retlw	62
   195  0020  343C               	retlw	60
   196  0021  34C3               	retlw	195
   197  0022  34BD               	retlw	189
   198  0023  34D2               	retlw	210
   199  0024  3413               	retlw	19
   200  0025  343D               	retlw	61
   201  0026  3478               	retlw	120
   202  0027  34D3               	retlw	211
   203  0028  34BB               	retlw	187
   204  0029                     __end_oflog@coeff:	
   205  0029                     getTemp@invT0:	
   206  0029  34CF               	retlw	207
   207  002A  345B               	retlw	91
   208  002B  343B               	retlw	59
   209  002C                     __end_ofgetTemp@invT0:	
   210  001E                     _ADRESH	set	30
   211  001F                     _ADCON0	set	31
   212  0037                     _RB7	set	55
   213  0032                     _RB2	set	50
   214  0031                     _RB1	set	49
   215  0030                     _RB0	set	48
   216  0033                     _RB3	set	51
   217  00F9                     _GO_nDONE	set	249
   218  0039                     _RC1	set	57
   219  0038                     _RC0	set	56
   220  003D                     _RC5	set	61
   221  003C                     _RC4	set	60
   222  003B                     _RC3	set	59
   223  003A                     _RC2	set	58
   224  0087                     _TRISC	set	135
   225  0086                     _TRISB	set	134
   226  0085                     _TRISA	set	133
   227  009E                     _ADRESL	set	158
   228  009F                     _ADCON1	set	159
   229  0189                     _ANSELH	set	393
   230  0188                     _ANSEL	set	392
   231  002C                     STR_17:	
   232  002C  3453               	retlw	83	;'S'
   233  002D  3465               	retlw	101	;'e'
   234  002E  3474               	retlw	116	;'t'
   235  002F  3420               	retlw	32	;' '
   236  0030  3454               	retlw	84	;'T'
   237  0031  3445               	retlw	69	;'E'
   238  0032  344D               	retlw	77	;'M'
   239  0033  3450               	retlw	80	;'P'
   240  0034  3420               	retlw	32	;' '
   241  0035  3431               	retlw	49	;'1'
   242  0036  3430               	retlw	48	;'0'
   243  0037  342D               	retlw	45	;'-'
   244  0038  3437               	retlw	55	;'7'
   245  0039  3430               	retlw	48	;'0'
   246  003A  3400               	retlw	0
   247  003B                     STR_4:	
   248  003B  3445               	retlw	69	;'E'
   249  003C  346E               	retlw	110	;'n'
   250  003D  3474               	retlw	116	;'t'
   251  003E  3465               	retlw	101	;'e'
   252  003F  3472               	retlw	114	;'r'
   253  0040  3469               	retlw	105	;'i'
   254  0041  346E               	retlw	110	;'n'
   255  0042  3467               	retlw	103	;'g'
   256  0043  3420               	retlw	32	;' '
   257  0044  3473               	retlw	115	;'s'
   258  0045  3465               	retlw	101	;'e'
   259  0046  3474               	retlw	116	;'t'
   260  0047  3475               	retlw	117	;'u'
   261  0048  3470               	retlw	112	;'p'
   262  0049  3400               	retlw	0
   263  004A                     STR_3:	
   264  004A  3463               	retlw	99	;'c'
   265  004B  3475               	retlw	117	;'u'
   266  004C  3472               	retlw	114	;'r'
   267  004D  3472               	retlw	114	;'r'
   268  004E  3465               	retlw	101	;'e'
   269  004F  346E               	retlw	110	;'n'
   270  0050  3474               	retlw	116	;'t'
   271  0051  3420               	retlw	32	;' '
   272  0052  3474               	retlw	116	;'t'
   273  0053  3465               	retlw	101	;'e'
   274  0054  346D               	retlw	109	;'m'
   275  0055  3470               	retlw	112	;'p'
   276  0056  343A               	retlw	58	;':'
   277  0057  3400               	retlw	0
   278  0058                     STR_5:	
   279  0058  344F               	retlw	79	;'O'
   280  0059  346E               	retlw	110	;'n'
   281  005A  3420               	retlw	32	;' '
   282  005B  3474               	retlw	116	;'t'
   283  005C  3465               	retlw	101	;'e'
   284  005D  346D               	retlw	109	;'m'
   285  005E  3470               	retlw	112	;'p'
   286  005F  343A               	retlw	58	;':'
   287  0060  3420               	retlw	32	;' '
   288  0061  3400               	retlw	0
   289  0062                     STR_6:	
   290  0062  344F               	retlw	79	;'O'
   291  0063  3446               	retlw	70	;'F'
   292  0064  3446               	retlw	70	;'F'
   293  0065  3420               	retlw	32	;' '
   294  0066  3474               	retlw	116	;'t'
   295  0067  3465               	retlw	101	;'e'
   296  0068  346D               	retlw	109	;'m'
   297  0069  3470               	retlw	112	;'p'
   298  006A  343A               	retlw	58	;':'
   299  006B  3400               	retlw	0
   300  006C                     STR_2:	
   301  006C  344F               	retlw	79	;'O'
   302  006D  3466               	retlw	102	;'f'
   303  006E  3466               	retlw	102	;'f'
   304  006F  345F               	retlw	95	;'_'
   305  0070  3474               	retlw	116	;'t'
   306  0071  3465               	retlw	101	;'e'
   307  0072  346D               	retlw	109	;'m'
   308  0073  3470               	retlw	112	;'p'
   309  0074  343A               	retlw	58	;':'
   310  0075  3400               	retlw	0
   311  0076                     STR_19:	
   312  0076  3448               	retlw	72	;'H'
   313  0077  3449               	retlw	73	;'I'
   314  0078  3447               	retlw	71	;'G'
   315  0079  3448               	retlw	72	;'H'
   316  007A  3420               	retlw	32	;' '
   317  007B  3454               	retlw	84	;'T'
   318  007C  3445               	retlw	69	;'E'
   319  007D  344D               	retlw	77	;'M'
   320  007E  3450               	retlw	80	;'P'
   321  007F  3400               	retlw	0
   322  0080                     STR_1:	
   323  0080  344F               	retlw	79	;'O'
   324  0081  346E               	retlw	110	;'n'
   325  0082  345F               	retlw	95	;'_'
   326  0083  3474               	retlw	116	;'t'
   327  0084  3465               	retlw	101	;'e'
   328  0085  346D               	retlw	109	;'m'
   329  0086  3470               	retlw	112	;'p'
   330  0087  343A               	retlw	58	;':'
   331  0088  3400               	retlw	0
   332  0089                     STR_18:	
   333  0089  344C               	retlw	76	;'L'
   334  008A  344F               	retlw	79	;'O'
   335  008B  3457               	retlw	87	;'W'
   336  008C  3420               	retlw	32	;' '
   337  008D  3454               	retlw	84	;'T'
   338  008E  3445               	retlw	69	;'E'
   339  008F  344D               	retlw	77	;'M'
   340  0090  3450               	retlw	80	;'P'
   341  0091  3400               	retlw	0
   342  0092                     STR_7:	
   343  0092  344F               	retlw	79	;'O'
   344  0093  346E               	retlw	110	;'n'
   345  0094  343A               	retlw	58	;':'
   346  0095  3420               	retlw	32	;' '
   347  0096  3400               	retlw	0
   348  0097                     STR_8:	
   349  0097  344F               	retlw	79	;'O'
   350  0098  3446               	retlw	70	;'F'
   351  0099  3446               	retlw	70	;'F'
   352  009A  343A               	retlw	58	;':'
   353  009B  3400               	retlw	0
   354  009C                     STR_10:	
   355  009C  344F               	retlw	79	;'O'
   356  009D  346E               	retlw	110	;'n'
   357  009E  343A               	retlw	58	;':'
   358  009F  3400               	retlw	0
   359  00A0                     STR_9:	
   360  00A0  343C               	retlw	60	;'<'
   361  00A1  343C               	retlw	60	;'<'
   362  00A2  3400               	retlw	0
   363  0092                     
   364                           	psect	cinit
   365  07F7                     start_initialization:	
   366                           ; #config settings
   367                           
   368  07F7                     __initialization:	
   369                           
   370                           ; Clear objects allocated to BANK1
   371  07F7  1683               	bsf	3,5	;RP0=1, select bank1
   372  07F8  1303               	bcf	3,6	;RP1=0, select bank1
   373  07F9  01CA               	clrf	__pbssBANK1& (0+127)
   374  07FA  01CB               	clrf	(__pbssBANK1+1)& (0+127)
   375  07FB  01CC               	clrf	(__pbssBANK1+2)& (0+127)
   376  07FC  01CD               	clrf	(__pbssBANK1+3)& (0+127)
   377  07FD                     end_of_initialization:	
   378                           ;End of C runtime variable initialization code
   379                           
   380  07FD                     __end_of__initialization:	
   381  07FD  0183               	clrf	3
   382  07FE  118A  2C4F         	ljmp	_main	;jump to C main() function
   383                           
   384                           	psect	bssBANK1
   385  00CA                     __pbssBANK1:	
   386  00CA                     _errno:	
   387  00CA                     	ds	2
   388  00CC                     _start:	
   389  00CC                     	ds	2
   390                           
   391                           	psect	cstackBANK1
   392  00A0                     __pcstackBANK1:	
   393  00A0                     getTemp@F:	
   394                           
   395                           ; 3 bytes @ 0x0
   396  00A0                     	ds	3
   397  00A3                     getTemp@K:	
   398                           
   399                           ; 3 bytes @ 0x3
   400  00A3                     	ds	3
   401  00A6                     _getTemp$607:	
   402                           
   403                           ; 3 bytes @ 0x6
   404  00A6                     	ds	3
   405  00A9                     _getTemp$608:	
   406                           
   407                           ; 3 bytes @ 0x9
   408  00A9                     	ds	3
   409  00AC                     getTemp@numSamples:	
   410                           
   411                           ; 2 bytes @ 0xC
   412  00AC                     	ds	2
   413  00AE                     getTemp@i:	
   414                           
   415                           ; 2 bytes @ 0xE
   416  00AE                     	ds	2
   417  00B0                     getTemp@C:	
   418                           
   419                           ; 3 bytes @ 0x10
   420  00B0                     	ds	3
   421  00B3                     getTemp@adcVal:	
   422                           
   423                           ; 2 bytes @ 0x13
   424  00B3                     	ds	2
   425  00B5                     ??_main:	
   426                           
   427                           ; 1 bytes @ 0x15
   428  00B5                     	ds	3
   429  00B8                     main@b:	
   430                           
   431                           ; 2 bytes @ 0x18
   432  00B8                     	ds	2
   433  00BA                     main@c:	
   434                           
   435                           ; 2 bytes @ 0x1A
   436  00BA                     	ds	2
   437  00BC                     main@start:	
   438                           
   439                           ; 2 bytes @ 0x1C
   440  00BC                     	ds	2
   441  00BE                     main@curs:	
   442                           
   443                           ; 2 bytes @ 0x1E
   444  00BE                     	ds	2
   445  00C0                     main@der:	
   446                           
   447                           ; 2 bytes @ 0x20
   448  00C0                     	ds	2
   449  00C2                     main@switchsel:	
   450                           
   451                           ; 2 bytes @ 0x22
   452  00C2                     	ds	2
   453  00C4                     main@tempval:	
   454                           
   455                           ; 2 bytes @ 0x24
   456  00C4                     	ds	2
   457  00C6                     main@highval:	
   458                           
   459                           ; 2 bytes @ 0x26
   460  00C6                     	ds	2
   461  00C8                     main@lowval:	
   462                           
   463                           ; 2 bytes @ 0x28
   464  00C8                     	ds	2
   465                           
   466                           	psect	cstackCOMMON
   467  0070                     __pcstackCOMMON:	
   468  0070                     ?___ftge:	
   469  0070                     ?_Lcd_Port:	
   470                           ; 1 bit 
   471                           
   472  0070                     ??_Lcd_Port:	
   473                           ; 1 bytes @ 0x0
   474                           
   475  0070                     ?_Lcd_Cmd:	
   476                           ; 1 bytes @ 0x0
   477                           
   478  0070                     ?_Lcd_Clear:	
   479                           ; 1 bytes @ 0x0
   480                           
   481  0070                     ?_Lcd_Init:	
   482                           ; 1 bytes @ 0x0
   483                           
   484  0070                     ?_Lcd_Write_Char:	
   485                           ; 1 bytes @ 0x0
   486                           
   487  0070                     ?_Lcd_Write_String:	
   488                           ; 1 bytes @ 0x0
   489                           
   490  0070                     ?_ADC_Init:	
   491                           ; 1 bytes @ 0x0
   492                           
   493  0070                     ??_ADC_Init:	
   494                           ; 1 bytes @ 0x0
   495                           
   496  0070                     ?_main:	
   497                           ; 1 bytes @ 0x0
   498                           
   499  0070                     ?___bmul:	
   500                           ; 1 bytes @ 0x0
   501                           
   502  0070                     ?_ADC_Read:	
   503                           ; 1 bytes @ 0x0
   504                           
   505  0070                     ?___awdiv:	
   506                           ; 2 bytes @ 0x0
   507                           
   508  0070                     ?___lwdiv:	
   509                           ; 2 bytes @ 0x0
   510                           
   511  0070                     ?___lwmod:	
   512                           ; 2 bytes @ 0x0
   513                           
   514  0070                     ?___ftpack:	
   515                           ; 2 bytes @ 0x0
   516                           
   517  0070                     ?_frexp:	
   518                           ; 3 bytes @ 0x0
   519                           
   520  0070                     ?___fttol:	
   521                           ; 3 bytes @ 0x0
   522                           
   523  0070                     Lcd_Port@a:	
   524                           ; 4 bytes @ 0x0
   525                           
   526  0070                     ___bmul@multiplicand:	
   527                           ; 1 bytes @ 0x0
   528                           
   529  0070                     ___awdiv@divisor:	
   530                           ; 1 bytes @ 0x0
   531                           
   532  0070                     ___lwdiv@divisor:	
   533                           ; 2 bytes @ 0x0
   534                           
   535  0070                     ___lwmod@divisor:	
   536                           ; 2 bytes @ 0x0
   537                           
   538  0070                     ___ftpack@arg:	
   539                           ; 2 bytes @ 0x0
   540                           
   541  0070                     ___ftge@ff1:	
   542                           ; 3 bytes @ 0x0
   543                           
   544  0070                     ___fttol@f1:	
   545                           ; 3 bytes @ 0x0
   546                           
   547  0070                     frexp@value:	
   548                           ; 3 bytes @ 0x0
   549                           
   550                           
   551                           ; 3 bytes @ 0x0
   552  0070                     	ds	1
   553  0071                     ??_Lcd_Cmd:	
   554  0071                     ??_Lcd_Write_Char:	
   555                           ; 1 bytes @ 0x1
   556                           
   557  0071                     ??___bmul:	
   558                           ; 1 bytes @ 0x1
   559                           
   560                           
   561                           ; 1 bytes @ 0x1
   562  0071                     	ds	1
   563  0072                     ??_ADC_Read:	
   564  0072                     Lcd_Write_Char@temp:	
   565                           ; 1 bytes @ 0x2
   566                           
   567  0072                     ___bmul@product:	
   568                           ; 1 bytes @ 0x2
   569                           
   570  0072                     ___awdiv@dividend:	
   571                           ; 1 bytes @ 0x2
   572                           
   573  0072                     ___lwdiv@dividend:	
   574                           ; 2 bytes @ 0x2
   575                           
   576  0072                     ___lwmod@dividend:	
   577                           ; 2 bytes @ 0x2
   578                           
   579                           
   580                           ; 2 bytes @ 0x2
   581  0072                     	ds	1
   582  0073                     Lcd_Cmd@a:	
   583  0073                     Lcd_Write_Char@y:	
   584                           ; 1 bytes @ 0x3
   585                           
   586  0073                     ___bmul@multiplier:	
   587                           ; 1 bytes @ 0x3
   588                           
   589  0073                     ___ftpack@exp:	
   590                           ; 1 bytes @ 0x3
   591                           
   592  0073                     frexp@eptr:	
   593                           ; 1 bytes @ 0x3
   594                           
   595  0073                     ___ftge@ff2:	
   596                           ; 1 bytes @ 0x3
   597                           
   598                           
   599                           ; 3 bytes @ 0x3
   600  0073                     	ds	1
   601  0074                     ??_frexp:	
   602  0074                     ??_Lcd_Clear:	
   603                           ; 1 bytes @ 0x4
   604                           
   605  0074                     ?_Lcd_Set_Cursor:	
   606                           ; 1 bytes @ 0x4
   607                           
   608  0074                     ??_Lcd_Init:	
   609                           ; 1 bytes @ 0x4
   610                           
   611  0074                     ??___awdiv:	
   612                           ; 1 bytes @ 0x4
   613                           
   614  0074                     ??___fttol:	
   615                           ; 1 bytes @ 0x4
   616                           
   617  0074                     ??___lwdiv:	
   618                           ; 1 bytes @ 0x4
   619                           
   620  0074                     ??___lwmod:	
   621                           ; 1 bytes @ 0x4
   622                           
   623  0074                     Lcd_Set_Cursor@b:	
   624                           ; 1 bytes @ 0x4
   625                           
   626  0074                     Lcd_Write_Char@a:	
   627                           ; 1 bytes @ 0x4
   628                           
   629  0074                     ADC_Read@channel:	
   630                           ; 1 bytes @ 0x4
   631                           
   632  0074                     ___ftpack@sign:	
   633                           ; 1 bytes @ 0x4
   634                           
   635                           
   636                           ; 1 bytes @ 0x4
   637  0074                     	ds	1
   638  0075                     ??___ftpack:	
   639  0075                     ??_Lcd_Set_Cursor:	
   640                           ; 1 bytes @ 0x5
   641                           
   642  0075                     ??_Lcd_Write_String:	
   643                           ; 1 bytes @ 0x5
   644                           
   645  0075                     ___awdiv@counter:	
   646                           ; 1 bytes @ 0x5
   647                           
   648  0075                     ___lwmod@counter:	
   649                           ; 1 bytes @ 0x5
   650                           
   651  0075                     Lcd_Write_String@i:	
   652                           ; 1 bytes @ 0x5
   653                           
   654  0075                     ___lwdiv@quotient:	
   655                           ; 2 bytes @ 0x5
   656                           
   657                           
   658                           ; 2 bytes @ 0x5
   659  0075                     	ds	1
   660  0076                     ??___ftge:	
   661  0076                     ___awdiv@sign:	
   662                           ; 1 bytes @ 0x6
   663                           
   664                           
   665                           ; 1 bytes @ 0x6
   666  0076                     	ds	1
   667  0077                     Lcd_Set_Cursor@a:	
   668  0077                     Lcd_Write_String@a:	
   669                           ; 1 bytes @ 0x7
   670                           
   671  0077                     ___lwdiv@counter:	
   672                           ; 1 bytes @ 0x7
   673                           
   674  0077                     ___awdiv@quotient:	
   675                           ; 1 bytes @ 0x7
   676                           
   677                           
   678                           ; 2 bytes @ 0x7
   679  0077                     	ds	1
   680  0078                     ?_lcddisplay:	
   681  0078                     ?___awtoft:	
   682                           ; 1 bytes @ 0x8
   683                           
   684  0078                     Lcd_Set_Cursor@z:	
   685                           ; 3 bytes @ 0x8
   686                           
   687  0078                     ___fttol@sign1:	
   688                           ; 1 bytes @ 0x8
   689                           
   690  0078                     lcddisplay@num:	
   691                           ; 1 bytes @ 0x8
   692                           
   693  0078                     ___awtoft@c:	
   694                           ; 2 bytes @ 0x8
   695                           
   696                           
   697                           ; 2 bytes @ 0x8
   698  0078                     	ds	1
   699  0079                     Lcd_Set_Cursor@y:	
   700  0079                     ___fttol@lval:	
   701                           ; 1 bytes @ 0x9
   702                           
   703                           
   704                           ; 4 bytes @ 0x9
   705  0079                     	ds	1
   706  007A                     ??_lcddisplay:	
   707  007A                     Lcd_Set_Cursor@temp:	
   708                           ; 1 bytes @ 0xA
   709                           
   710                           
   711                           ; 1 bytes @ 0xA
   712  007A                     	ds	1
   713  007B                     ??___awtoft:	
   714                           
   715                           ; 1 bytes @ 0xB
   716  007B                     	ds	2
   717  007D                     ___awtoft@sign:	
   718  007D                     ___fttol@exp1:	
   719                           ; 1 bytes @ 0xD
   720                           
   721                           
   722                           ; 1 bytes @ 0xD
   723  007D                     	ds	1
   724                           
   725                           	psect	cstackBANK0
   726  0020                     __pcstackBANK0:	
   727  0020                     ?___ftdiv:	
   728  0020                     ___ftdiv@f2:	
   729                           ; 3 bytes @ 0x0
   730                           
   731                           
   732                           ; 3 bytes @ 0x0
   733  0020                     	ds	3
   734  0023                     ___ftdiv@f1:	
   735                           
   736                           ; 3 bytes @ 0x3
   737  0023                     	ds	3
   738  0026                     ??___ftdiv:	
   739                           
   740                           ; 1 bytes @ 0x6
   741  0026                     	ds	4
   742  002A                     ___ftdiv@cntr:	
   743                           
   744                           ; 1 bytes @ 0xA
   745  002A                     	ds	1
   746  002B                     ___ftdiv@f3:	
   747                           
   748                           ; 3 bytes @ 0xB
   749  002B                     	ds	3
   750  002E                     ___ftdiv@exp:	
   751                           
   752                           ; 1 bytes @ 0xE
   753  002E                     	ds	1
   754  002F                     ___ftdiv@sign:	
   755                           
   756                           ; 1 bytes @ 0xF
   757  002F                     	ds	1
   758  0030                     ?___ftadd:	
   759  0030                     ___ftadd@f1:	
   760                           ; 3 bytes @ 0x10
   761                           
   762                           
   763                           ; 3 bytes @ 0x10
   764  0030                     	ds	3
   765  0033                     ___ftadd@f2:	
   766                           
   767                           ; 3 bytes @ 0x13
   768  0033                     	ds	3
   769  0036                     ??___ftadd:	
   770                           
   771                           ; 1 bytes @ 0x16
   772  0036                     	ds	4
   773  003A                     ___ftadd@sign:	
   774                           
   775                           ; 1 bytes @ 0x1A
   776  003A                     	ds	1
   777  003B                     ___ftadd@exp2:	
   778                           
   779                           ; 1 bytes @ 0x1B
   780  003B                     	ds	1
   781  003C                     ___ftadd@exp1:	
   782                           
   783                           ; 1 bytes @ 0x1C
   784  003C                     	ds	1
   785  003D                     ?___ftmul:	
   786  003D                     ___ftmul@f1:	
   787                           ; 3 bytes @ 0x1D
   788                           
   789                           
   790                           ; 3 bytes @ 0x1D
   791  003D                     	ds	3
   792  0040                     ___ftmul@f2:	
   793                           
   794                           ; 3 bytes @ 0x20
   795  0040                     	ds	3
   796  0043                     ??___ftmul:	
   797                           
   798                           ; 1 bytes @ 0x23
   799  0043                     	ds	4
   800  0047                     ___ftmul@exp:	
   801                           
   802                           ; 1 bytes @ 0x27
   803  0047                     	ds	1
   804  0048                     ___ftmul@f3_as_product:	
   805                           
   806                           ; 3 bytes @ 0x28
   807  0048                     	ds	3
   808  004B                     ___ftmul@cntr:	
   809                           
   810                           ; 1 bytes @ 0x2B
   811  004B                     	ds	1
   812  004C                     ___ftmul@sign:	
   813                           
   814                           ; 1 bytes @ 0x2C
   815  004C                     	ds	1
   816  004D                     ?_eval_poly:	
   817  004D                     eval_poly@x:	
   818                           ; 3 bytes @ 0x2D
   819                           
   820                           
   821                           ; 3 bytes @ 0x2D
   822  004D                     	ds	3
   823  0050                     eval_poly@d:	
   824                           
   825                           ; 1 bytes @ 0x30
   826  0050                     	ds	1
   827  0051                     eval_poly@n:	
   828                           
   829                           ; 2 bytes @ 0x31
   830  0051                     	ds	2
   831  0053                     ??_eval_poly:	
   832                           
   833                           ; 1 bytes @ 0x33
   834  0053                     	ds	1
   835  0054                     eval_poly@res:	
   836                           
   837                           ; 3 bytes @ 0x34
   838  0054                     	ds	3
   839  0057                     ?_log:	
   840  0057                     log@x:	
   841                           ; 3 bytes @ 0x37
   842                           
   843                           
   844                           ; 3 bytes @ 0x37
   845  0057                     	ds	3
   846  005A                     ??_log:	
   847                           
   848                           ; 1 bytes @ 0x3A
   849  005A                     	ds	1
   850  005B                     log@exponent:	
   851                           
   852                           ; 2 bytes @ 0x3B
   853  005B                     	ds	2
   854  005D                     ?_getTemp:	
   855                           
   856                           ; 2 bytes @ 0x3D
   857  005D                     	ds	2
   858  005F                     ??_getTemp:	
   859                           
   860                           ; 1 bytes @ 0x3F
   861  005F                     	ds	2
   862  0061                     ?_delay60:	
   863  0061                     delay60@a:	
   864                           ; 1 bytes @ 0x41
   865                           
   866                           
   867                           ; 2 bytes @ 0x41
   868  0061                     	ds	2
   869  0063                     delay60@b:	
   870                           
   871                           ; 2 bytes @ 0x43
   872  0063                     	ds	2
   873  0065                     delay60@c:	
   874                           
   875                           ; 2 bytes @ 0x45
   876  0065                     	ds	2
   877  0067                     ??_delay60:	
   878                           
   879                           ; 1 bytes @ 0x47
   880  0067                     	ds	3
   881  006A                     delay60@tempval:	
   882                           
   883                           ; 2 bytes @ 0x4A
   884  006A                     	ds	2
   885  006C                     delay60@i:	
   886                           
   887                           ; 2 bytes @ 0x4C
   888  006C                     	ds	2
   889                           
   890                           	psect	maintext
   891  044F                     __pmaintext:	
   892 ;;
   893 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   894 ;;
   895 ;; *************** function _main *****************
   896 ;; Defined at:
   897 ;;		line 304 in file "newmain.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;		None
   900 ;; Auto vars:     Size  Location     Type
   901 ;;  der             2   32[BANK1 ] int 
   902 ;;  lowval          2   40[BANK1 ] int 
   903 ;;  highval         2   38[BANK1 ] int 
   904 ;;  tempval         2   36[BANK1 ] int 
   905 ;;  switchsel       2   34[BANK1 ] int 
   906 ;;  curs            2   30[BANK1 ] int 
   907 ;;  start           2   28[BANK1 ] int 
   908 ;;  c               2   26[BANK1 ] int 
   909 ;;  b               2   24[BANK1 ] int 
   910 ;;  data            2    0        unsigned short 
   911 ;; Return value:  Size  Location     Type
   912 ;;                  1    wreg      void 
   913 ;; Registers used:
   914 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   915 ;; Tracked objects:
   916 ;;		On entry : B00/0
   917 ;;		On exit  : 0/0
   918 ;;		Unchanged: 0/0
   919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   920 ;;      Params:         0       0       0       0
   921 ;;      Locals:         0       0      18       0
   922 ;;      Temps:          0       0       3       0
   923 ;;      Totals:         0       0      21       0
   924 ;;Total ram usage:       21 bytes
   925 ;; Hardware stack levels required when called:    6
   926 ;; This function calls:
   927 ;;		_ADC_Init
   928 ;;		_Lcd_Clear
   929 ;;		_Lcd_Init
   930 ;;		_Lcd_Set_Cursor
   931 ;;		_Lcd_Write_String
   932 ;;		_delay60
   933 ;;		_getTemp
   934 ;;		_lcddisplay
   935 ;; This function is called by:
   936 ;;		Startup code after reset
   937 ;; This function uses a non-reentrant model
   938 ;;
   939                           
   940                           
   941                           ;psect for function _main
   942  044F                     _main:	
   943                           
   944                           ;newmain.c: 307: TRISA = 0xFF;
   945                           
   946                           ;incstack = 0
   947                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   948  044F  30FF               	movlw	255
   949  0450  1683               	bsf	3,5	;RP0=1, select bank1
   950  0451  1303               	bcf	3,6	;RP1=0, select bank1
   951  0452  0085               	movwf	5	;volatile
   952                           
   953                           ;newmain.c: 308: TRISB = 0x0F;
   954  0453  300F               	movlw	15
   955  0454  0086               	movwf	6	;volatile
   956                           
   957                           ;newmain.c: 309: TRISC = 0x00;
   958  0455  0187               	clrf	7	;volatile
   959                           
   960                           ;newmain.c: 311: ANSELH = 0X00;
   961  0456  1683               	bsf	3,5	;RP0=1, select bank3
   962  0457  1703               	bsf	3,6	;RP1=1, select bank3
   963  0458  0189               	clrf	9	;volatile
   964                           
   965                           ;newmain.c: 312: ADC_Init();
   966  0459  158A  2131  118A   	fcall	_ADC_Init
   967                           
   968                           ;newmain.c: 313: Lcd_Init();
   969  045C  158A  2312  118A   	fcall	_Lcd_Init
   970                           
   971                           ;newmain.c: 319: unsigned short int data;
   972                           ;newmain.c: 320: int highval=70;
   973  045F  3046               	movlw	70
   974  0460  1683               	bsf	3,5	;RP0=1, select bank1
   975  0461  1303               	bcf	3,6	;RP1=0, select bank1
   976  0462  00C6               	movwf	main@highval^(0+128)
   977  0463  3000               	movlw	0
   978  0464  00C7               	movwf	(main@highval^(0+128)+1)
   979                           
   980                           ;newmain.c: 321: int lowval=10;
   981  0465  300A               	movlw	10
   982  0466  00C8               	movwf	main@lowval^(0+128)
   983  0467  3000               	movlw	0
   984  0468  00C9               	movwf	(main@lowval^(0+128)+1)
   985                           
   986                           ;newmain.c: 322: int b=0;
   987  0469  01B8               	clrf	main@b^(0+128)
   988  046A  01B9               	clrf	(main@b+1)^(0+128)
   989                           
   990                           ;newmain.c: 323: int tempval;
   991                           ;newmain.c: 326: int curs;
   992                           ;newmain.c: 327: int switchsel =0;
   993  046B  01C2               	clrf	main@switchsel^(0+128)
   994  046C  01C3               	clrf	(main@switchsel+1)^(0+128)
   995                           
   996                           ;newmain.c: 329: int c = 0;
   997  046D  01BA               	clrf	main@c^(0+128)
   998  046E  01BB               	clrf	(main@c+1)^(0+128)
   999                           
  1000                           ;newmain.c: 332: Lcd_Init();
  1001  046F  158A  2312  118A   	fcall	_Lcd_Init
  1002                           
  1003                           ;newmain.c: 333: Lcd_Clear();
  1004  0472  118A  20A4  118A   	fcall	_Lcd_Clear
  1005                           
  1006                           ;newmain.c: 334: int start = 0;
  1007  0475  1683               	bsf	3,5	;RP0=1, select bank1
  1008  0476  1303               	bcf	3,6	;RP1=0, select bank1
  1009  0477  01BC               	clrf	main@start^(0+128)
  1010  0478  01BD               	clrf	(main@start+1)^(0+128)
  1011  0479                     l2219:	
  1012                           ;newmain.c: 335: while(1)
  1013                           
  1014                           
  1015                           ;newmain.c: 336: {
  1016                           ;newmain.c: 337: Lcd_Clear();
  1017  0479  118A  20A4  118A   	fcall	_Lcd_Clear
  1018                           
  1019                           ;newmain.c: 338: tempval = getTemp();
  1020  047C  118A  22A0  118A   	fcall	_getTemp
  1021  047F  1283               	bcf	3,5	;RP0=0, select bank0
  1022  0480  1303               	bcf	3,6	;RP1=0, select bank0
  1023  0481  085E               	movf	?_getTemp+1,w
  1024  0482  1683               	bsf	3,5	;RP0=1, select bank1
  1025  0483  1303               	bcf	3,6	;RP1=0, select bank1
  1026  0484  00C5               	movwf	(main@tempval+1)^(0+128)
  1027  0485  1283               	bcf	3,5	;RP0=0, select bank0
  1028  0486  1303               	bcf	3,6	;RP1=0, select bank0
  1029  0487  085D               	movf	?_getTemp,w
  1030  0488  1683               	bsf	3,5	;RP0=1, select bank1
  1031  0489  1303               	bcf	3,6	;RP1=0, select bank1
  1032  048A  00C4               	movwf	main@tempval^(0+128)
  1033                           
  1034                           ;newmain.c: 342: if(RB3 == 0)
  1035  048B  1283               	bcf	3,5	;RP0=0, select bank0
  1036  048C  1303               	bcf	3,6	;RP1=0, select bank0
  1037  048D  1986               	btfsc	6,3	;volatile
  1038  048E  2EC5               	goto	l2371
  1039  048F                     l2225:	
  1040                           ;newmain.c: 343: {
  1041                           ;newmain.c: 344: start:
  1042                           
  1043                           
  1044                           ;newmain.c: 345: Lcd_Clear();
  1045  048F  118A  20A4  118A   	fcall	_Lcd_Clear
  1046                           
  1047                           ;newmain.c: 346: Lcd_Set_Cursor(1,1);
  1048  0492  01F4               	clrf	Lcd_Set_Cursor@b
  1049  0493  0AF4               	incf	Lcd_Set_Cursor@b,f
  1050  0494  3001               	movlw	1
  1051  0495  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1052                           
  1053                           ;newmain.c: 347: Lcd_Write_String("Entering setup");
  1054  0498  3034               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1055  0499  158A  2181  118A   	fcall	_Lcd_Write_String
  1056                           
  1057                           ;newmain.c: 348: _delay((unsigned long)((1000)*(4000000/4000.0)));
  1058  049C  3006               	movlw	6
  1059  049D  1683               	bsf	3,5	;RP0=1, select bank1
  1060  049E  1303               	bcf	3,6	;RP1=0, select bank1
  1061  049F  00B7               	movwf	(??_main^(0+128)+2)
  1062  04A0  3013               	movlw	19
  1063  04A1  00B6               	movwf	(??_main^(0+128)+1)
  1064  04A2  30AD               	movlw	173
  1065  04A3  00B5               	movwf	??_main^(0+128)
  1066  04A4                     u3197:	
  1067  04A4  0BB5               	decfsz	??_main^(0+128),f
  1068  04A5  2CA4               	goto	u3197
  1069  04A6  0BB6               	decfsz	(??_main^(0+128)+1),f
  1070  04A7  2CA4               	goto	u3197
  1071  04A8  0BB7               	decfsz	(??_main^(0+128)+2),f
  1072  04A9  2CA4               	goto	u3197
  1073  04AA  0000               	nop
  1074                           
  1075                           ;newmain.c: 349: Lcd_Clear();
  1076  04AB  118A  20A4  118A   	fcall	_Lcd_Clear
  1077                           
  1078                           ;newmain.c: 350: Lcd_Set_Cursor(1,1);
  1079  04AE  01F4               	clrf	Lcd_Set_Cursor@b
  1080  04AF  0AF4               	incf	Lcd_Set_Cursor@b,f
  1081  04B0  3001               	movlw	1
  1082  04B1  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1083                           
  1084                           ;newmain.c: 351: Lcd_Write_String("On temp: ");
  1085  04B4  3051               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1086  04B5  158A  2181  118A   	fcall	_Lcd_Write_String
  1087                           
  1088                           ;newmain.c: 352: lcddisplay(lowval);
  1089  04B8  1683               	bsf	3,5	;RP0=1, select bank1
  1090  04B9  1303               	bcf	3,6	;RP1=0, select bank1
  1091  04BA  0849               	movf	(main@lowval+1)^(0+128),w
  1092  04BB  00F9               	movwf	lcddisplay@num+1
  1093  04BC  0848               	movf	main@lowval^(0+128),w
  1094  04BD  00F8               	movwf	lcddisplay@num
  1095  04BE  158A  2358  118A   	fcall	_lcddisplay
  1096                           
  1097                           ;newmain.c: 353: Lcd_Set_Cursor(2,1);
  1098  04C1  01F4               	clrf	Lcd_Set_Cursor@b
  1099  04C2  0AF4               	incf	Lcd_Set_Cursor@b,f
  1100  04C3  3002               	movlw	2
  1101  04C4  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1102                           
  1103                           ;newmain.c: 354: Lcd_Write_String("OFF temp:");
  1104  04C7  305B               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1105  04C8  158A  2181  118A   	fcall	_Lcd_Write_String
  1106                           
  1107                           ;newmain.c: 355: lcddisplay(highval);
  1108  04CB  1683               	bsf	3,5	;RP0=1, select bank1
  1109  04CC  1303               	bcf	3,6	;RP1=0, select bank1
  1110  04CD  0847               	movf	(main@highval+1)^(0+128),w
  1111  04CE  00F9               	movwf	lcddisplay@num+1
  1112  04CF  0846               	movf	main@highval^(0+128),w
  1113  04D0  00F8               	movwf	lcddisplay@num
  1114  04D1  158A  2358  118A   	fcall	_lcddisplay
  1115  04D4                     l2245:	
  1116                           ;newmain.c: 358: while(1)
  1117                           
  1118                           
  1119                           ;newmain.c: 359: {
  1120                           ;newmain.c: 361: if(!RB0)
  1121  04D4  1283               	bcf	3,5	;RP0=0, select bank0
  1122  04D5  1303               	bcf	3,6	;RP1=0, select bank0
  1123  04D6  1806               	btfsc	6,0	;volatile
  1124  04D7  2CEC               	goto	l2253
  1125                           
  1126                           ;newmain.c: 362: {
  1127                           ;newmain.c: 364: switchsel++;
  1128  04D8  3001               	movlw	1
  1129  04D9  1683               	bsf	3,5	;RP0=1, select bank1
  1130  04DA  1303               	bcf	3,6	;RP1=0, select bank1
  1131  04DB  07C2               	addwf	main@switchsel^(0+128),f
  1132  04DC  1803               	skipnc
  1133  04DD  0AC3               	incf	(main@switchsel+1)^(0+128),f
  1134  04DE  3000               	movlw	0
  1135  04DF  07C3               	addwf	(main@switchsel+1)^(0+128),f
  1136                           
  1137                           ;newmain.c: 365: if(switchsel == 3)
  1138  04E0  3003               	movlw	3
  1139  04E1  0642               	xorwf	main@switchsel^(0+128),w
  1140  04E2  0443               	iorwf	(main@switchsel+1)^(0+128),w
  1141  04E3  1D03               	btfss	3,2
  1142  04E4  2CE9               	goto	l133
  1143                           
  1144                           ;newmain.c: 366: {
  1145                           ;newmain.c: 367: switchsel = 1;
  1146  04E5  3001               	movlw	1
  1147  04E6  00C2               	movwf	main@switchsel^(0+128)
  1148  04E7  3000               	movlw	0
  1149  04E8  00C3               	movwf	(main@switchsel^(0+128)+1)
  1150  04E9                     l133:	
  1151                           ;newmain.c: 368: }
  1152                           ;newmain.c: 369: while(RB0 == 0);
  1153                           
  1154  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  1155  04EA  1C06               	btfss	6,0	;volatile
  1156  04EB  2CE9               	goto	l133
  1157  04EC                     l2253:	
  1158                           
  1159                           ;newmain.c: 370: }
  1160                           ;newmain.c: 371: if((switchsel == 1)&&(switchsel<=2))
  1161  04EC  1683               	bsf	3,5	;RP0=1, select bank1
  1162  04ED  1303               	bcf	3,6	;RP1=0, select bank1
  1163  04EE  0342               	decf	main@switchsel^(0+128),w
  1164  04EF  0443               	iorwf	(main@switchsel+1)^(0+128),w
  1165  04F0  1D03               	btfss	3,2
  1166  04F1  2DC0               	goto	l2305
  1167  04F2  0843               	movf	(main@switchsel+1)^(0+128),w
  1168  04F3  3A80               	xorlw	128
  1169  04F4  00FF               	movwf	127
  1170  04F5  3080               	movlw	128
  1171  04F6  027F               	subwf	127,w
  1172  04F7  1D03               	skipz
  1173  04F8  2CFB               	goto	u2905
  1174  04F9  3003               	movlw	3
  1175  04FA  0242               	subwf	main@switchsel^(0+128),w
  1176  04FB                     u2905:	
  1177  04FB  1803               	skipnc
  1178  04FC  2DC0               	goto	l2305
  1179                           
  1180                           ;newmain.c: 372: {
  1181                           ;newmain.c: 375: Lcd_Clear();
  1182  04FD  118A  20A4  118A   	fcall	_Lcd_Clear
  1183                           
  1184                           ;newmain.c: 376: Lcd_Set_Cursor(1,1);
  1185  0500  01F4               	clrf	Lcd_Set_Cursor@b
  1186  0501  0AF4               	incf	Lcd_Set_Cursor@b,f
  1187  0502  3001               	movlw	1
  1188  0503  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1189                           
  1190                           ;newmain.c: 377: Lcd_Write_String("On: ");
  1191  0506  308B               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1192  0507  158A  2181  118A   	fcall	_Lcd_Write_String
  1193                           
  1194                           ;newmain.c: 378: Lcd_Set_Cursor(1,12);
  1195  050A  300C               	movlw	12
  1196  050B  1683               	bsf	3,5	;RP0=1, select bank1
  1197  050C  1303               	bcf	3,6	;RP1=0, select bank1
  1198  050D  00B5               	movwf	??_main^(0+128)
  1199  050E  0835               	movf	??_main^(0+128),w
  1200  050F  00F4               	movwf	Lcd_Set_Cursor@b
  1201  0510  3001               	movlw	1
  1202  0511  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1203                           
  1204                           ;newmain.c: 379: lcddisplay(lowval);
  1205  0514  1683               	bsf	3,5	;RP0=1, select bank1
  1206  0515  1303               	bcf	3,6	;RP1=0, select bank1
  1207  0516  0849               	movf	(main@lowval+1)^(0+128),w
  1208  0517  00F9               	movwf	lcddisplay@num+1
  1209  0518  0848               	movf	main@lowval^(0+128),w
  1210  0519  00F8               	movwf	lcddisplay@num
  1211  051A  158A  2358  118A   	fcall	_lcddisplay
  1212                           
  1213                           ;newmain.c: 380: Lcd_Set_Cursor(2,1);
  1214  051D  01F4               	clrf	Lcd_Set_Cursor@b
  1215  051E  0AF4               	incf	Lcd_Set_Cursor@b,f
  1216  051F  3002               	movlw	2
  1217  0520  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1218                           
  1219                           ;newmain.c: 381: Lcd_Write_String("OFF:");
  1220  0523  3090               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1221  0524  158A  2181  118A   	fcall	_Lcd_Write_String
  1222                           
  1223                           ;newmain.c: 382: Lcd_Set_Cursor(2,12);
  1224  0527  300C               	movlw	12
  1225  0528  1683               	bsf	3,5	;RP0=1, select bank1
  1226  0529  1303               	bcf	3,6	;RP1=0, select bank1
  1227  052A  00B5               	movwf	??_main^(0+128)
  1228  052B  0835               	movf	??_main^(0+128),w
  1229  052C  00F4               	movwf	Lcd_Set_Cursor@b
  1230  052D  3002               	movlw	2
  1231  052E  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1232                           
  1233                           ;newmain.c: 383: lcddisplay(highval);
  1234  0531  1683               	bsf	3,5	;RP0=1, select bank1
  1235  0532  1303               	bcf	3,6	;RP1=0, select bank1
  1236  0533  0847               	movf	(main@highval+1)^(0+128),w
  1237  0534  00F9               	movwf	lcddisplay@num+1
  1238  0535  0846               	movf	main@highval^(0+128),w
  1239  0536  00F8               	movwf	lcddisplay@num
  1240  0537  158A  2358  118A   	fcall	_lcddisplay
  1241                           
  1242                           ;newmain.c: 385: Lcd_Set_Cursor(1,15);
  1243  053A  300F               	movlw	15
  1244  053B  1683               	bsf	3,5	;RP0=1, select bank1
  1245  053C  1303               	bcf	3,6	;RP1=0, select bank1
  1246  053D  00B5               	movwf	??_main^(0+128)
  1247  053E  0835               	movf	??_main^(0+128),w
  1248  053F  00F4               	movwf	Lcd_Set_Cursor@b
  1249  0540  3001               	movlw	1
  1250  0541  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1251                           
  1252                           ;newmain.c: 386: Lcd_Write_String("<<");
  1253  0544  3099               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1254  0545  158A  2181  118A   	fcall	_Lcd_Write_String
  1255                           
  1256                           ;newmain.c: 387: curs = 1;
  1257  0548  3001               	movlw	1
  1258  0549  1683               	bsf	3,5	;RP0=1, select bank1
  1259  054A  1303               	bcf	3,6	;RP1=0, select bank1
  1260  054B  00BE               	movwf	main@curs^(0+128)
  1261  054C  3000               	movlw	0
  1262  054D  00BF               	movwf	(main@curs^(0+128)+1)
  1263                           
  1264                           ;newmain.c: 390: if(!RB1)
  1265  054E  1283               	bcf	3,5	;RP0=0, select bank0
  1266  054F  1303               	bcf	3,6	;RP1=0, select bank0
  1267  0550  1886               	btfsc	6,1	;volatile
  1268  0551  2D88               	goto	l137
  1269                           
  1270                           ;newmain.c: 391: {
  1271                           ;newmain.c: 393: lowval++;
  1272  0552  3001               	movlw	1
  1273  0553  1683               	bsf	3,5	;RP0=1, select bank1
  1274  0554  1303               	bcf	3,6	;RP1=0, select bank1
  1275  0555  07C8               	addwf	main@lowval^(0+128),f
  1276  0556  1803               	skipnc
  1277  0557  0AC9               	incf	(main@lowval+1)^(0+128),f
  1278  0558  3000               	movlw	0
  1279  0559  07C9               	addwf	(main@lowval+1)^(0+128),f
  1280                           
  1281                           ;newmain.c: 394: if(lowval==highval)
  1282  055A  0847               	movf	(main@highval+1)^(0+128),w
  1283  055B  0649               	xorwf	(main@lowval+1)^(0+128),w
  1284  055C  1D03               	skipz
  1285  055D  2D60               	goto	u2925
  1286  055E  0846               	movf	main@highval^(0+128),w
  1287  055F  0648               	xorwf	main@lowval^(0+128),w
  1288  0560                     u2925:	
  1289  0560  1D03               	skipz
  1290  0561  2D66               	goto	l2283
  1291                           
  1292                           ;newmain.c: 395: {
  1293                           ;newmain.c: 396: lowval = 60;
  1294  0562  303C               	movlw	60
  1295  0563  00C8               	movwf	main@lowval^(0+128)
  1296  0564  3000               	movlw	0
  1297  0565  00C9               	movwf	(main@lowval^(0+128)+1)
  1298  0566                     l2283:	
  1299                           
  1300                           ;newmain.c: 397: }
  1301                           ;newmain.c: 399: Lcd_Set_Cursor(1,1);
  1302  0566  01F4               	clrf	Lcd_Set_Cursor@b
  1303  0567  0AF4               	incf	Lcd_Set_Cursor@b,f
  1304  0568  3001               	movlw	1
  1305  0569  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1306                           
  1307                           ;newmain.c: 400: Lcd_Write_String("On:");
  1308  056C  3095               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1309  056D  158A  2181  118A   	fcall	_Lcd_Write_String
  1310                           
  1311                           ;newmain.c: 401: Lcd_Set_Cursor(1,12);
  1312  0570  300C               	movlw	12
  1313  0571  1683               	bsf	3,5	;RP0=1, select bank1
  1314  0572  1303               	bcf	3,6	;RP1=0, select bank1
  1315  0573  00B5               	movwf	??_main^(0+128)
  1316  0574  0835               	movf	??_main^(0+128),w
  1317  0575  00F4               	movwf	Lcd_Set_Cursor@b
  1318  0576  3001               	movlw	1
  1319  0577  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1320                           
  1321                           ;newmain.c: 402: lcddisplay(lowval);
  1322  057A  1683               	bsf	3,5	;RP0=1, select bank1
  1323  057B  1303               	bcf	3,6	;RP1=0, select bank1
  1324  057C  0849               	movf	(main@lowval+1)^(0+128),w
  1325  057D  00F9               	movwf	lcddisplay@num+1
  1326  057E  0848               	movf	main@lowval^(0+128),w
  1327  057F  00F8               	movwf	lcddisplay@num
  1328  0580  158A  2358  118A   	fcall	_lcddisplay
  1329  0583                     l139:	
  1330                           ;newmain.c: 407: while(!RB1);
  1331                           
  1332  0583  1283               	bcf	3,5	;RP0=0, select bank0
  1333  0584  1303               	bcf	3,6	;RP1=0, select bank0
  1334  0585  1886               	btfsc	6,1	;volatile
  1335  0586  2EA0               	goto	l148
  1336  0587  2D83               	goto	l139
  1337  0588                     l137:	
  1338                           ;newmain.c: 408: }
  1339                           
  1340                           
  1341                           ;newmain.c: 409: else if(!RB2)
  1342  0588  1906               	btfsc	6,2	;volatile
  1343  0589  2EA0               	goto	l148
  1344                           
  1345                           ;newmain.c: 410: {
  1346                           ;newmain.c: 412: if(lowval==60)
  1347  058A  303C               	movlw	60
  1348  058B  1683               	bsf	3,5	;RP0=1, select bank1
  1349  058C  1303               	bcf	3,6	;RP1=0, select bank1
  1350  058D  0648               	xorwf	main@lowval^(0+128),w
  1351  058E  0449               	iorwf	(main@lowval+1)^(0+128),w
  1352  058F  1D03               	btfss	3,2
  1353  0590  2D95               	goto	l144
  1354                           
  1355                           ;newmain.c: 413: {
  1356                           ;newmain.c: 414: lowval = highval;
  1357  0591  0847               	movf	(main@highval+1)^(0+128),w
  1358  0592  00C9               	movwf	(main@lowval+1)^(0+128)
  1359  0593  0846               	movf	main@highval^(0+128),w
  1360  0594  00C8               	movwf	main@lowval^(0+128)
  1361  0595                     l144:	
  1362                           
  1363                           ;newmain.c: 415: }
  1364                           ;newmain.c: 417: lowval--;
  1365  0595  30FF               	movlw	255
  1366  0596  07C8               	addwf	main@lowval^(0+128),f
  1367  0597  1803               	skipnc
  1368  0598  0AC9               	incf	(main@lowval+1)^(0+128),f
  1369  0599  30FF               	movlw	255
  1370  059A  07C9               	addwf	(main@lowval+1)^(0+128),f
  1371                           
  1372                           ;newmain.c: 418: Lcd_Clear();
  1373  059B  118A  20A4  118A   	fcall	_Lcd_Clear
  1374                           
  1375                           ;newmain.c: 419: Lcd_Set_Cursor(1,1);
  1376  059E  01F4               	clrf	Lcd_Set_Cursor@b
  1377  059F  0AF4               	incf	Lcd_Set_Cursor@b,f
  1378  05A0  3001               	movlw	1
  1379  05A1  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1380                           
  1381                           ;newmain.c: 420: Lcd_Write_String("On:");
  1382  05A4  3095               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1383  05A5  158A  2181  118A   	fcall	_Lcd_Write_String
  1384                           
  1385                           ;newmain.c: 421: Lcd_Set_Cursor(1,12);
  1386  05A8  300C               	movlw	12
  1387  05A9  1683               	bsf	3,5	;RP0=1, select bank1
  1388  05AA  1303               	bcf	3,6	;RP1=0, select bank1
  1389  05AB  00B5               	movwf	??_main^(0+128)
  1390  05AC  0835               	movf	??_main^(0+128),w
  1391  05AD  00F4               	movwf	Lcd_Set_Cursor@b
  1392  05AE  3001               	movlw	1
  1393  05AF  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1394                           
  1395                           ;newmain.c: 422: lcddisplay(lowval);
  1396  05B2  1683               	bsf	3,5	;RP0=1, select bank1
  1397  05B3  1303               	bcf	3,6	;RP1=0, select bank1
  1398  05B4  0849               	movf	(main@lowval+1)^(0+128),w
  1399  05B5  00F9               	movwf	lcddisplay@num+1
  1400  05B6  0848               	movf	main@lowval^(0+128),w
  1401  05B7  00F8               	movwf	lcddisplay@num
  1402  05B8  158A  2358  118A   	fcall	_lcddisplay
  1403  05BB                     l145:	
  1404                           ;newmain.c: 427: while(!RB2);
  1405                           
  1406  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  1407  05BC  1303               	bcf	3,6	;RP1=0, select bank0
  1408  05BD  1906               	btfsc	6,2	;volatile
  1409  05BE  2EA0               	goto	l148
  1410  05BF  2DBB               	goto	l145
  1411  05C0                     l2305:	
  1412                           ;newmain.c: 428: }
  1413                           ;newmain.c: 434: }
  1414                           
  1415                           
  1416                           ;newmain.c: 435: else if((switchsel == 2) && (switchsel<=2))
  1417  05C0  3002               	movlw	2
  1418  05C1  1683               	bsf	3,5	;RP0=1, select bank1
  1419  05C2  1303               	bcf	3,6	;RP1=0, select bank1
  1420  05C3  0642               	xorwf	main@switchsel^(0+128),w
  1421  05C4  0443               	iorwf	(main@switchsel+1)^(0+128),w
  1422  05C5  1D03               	btfss	3,2
  1423  05C6  2EA0               	goto	l148
  1424  05C7  0843               	movf	(main@switchsel+1)^(0+128),w
  1425  05C8  3A80               	xorlw	128
  1426  05C9  00FF               	movwf	127
  1427  05CA  3080               	movlw	128
  1428  05CB  027F               	subwf	127,w
  1429  05CC  1D03               	skipz
  1430  05CD  2DD0               	goto	u2985
  1431  05CE  3003               	movlw	3
  1432  05CF  0242               	subwf	main@switchsel^(0+128),w
  1433  05D0                     u2985:	
  1434  05D0  1803               	skipnc
  1435  05D1  2EA0               	goto	l148
  1436                           
  1437                           ;newmain.c: 437: {
  1438                           ;newmain.c: 439: Lcd_Clear();
  1439  05D2  118A  20A4  118A   	fcall	_Lcd_Clear
  1440                           
  1441                           ;newmain.c: 440: Lcd_Set_Cursor(1,1);
  1442  05D5  01F4               	clrf	Lcd_Set_Cursor@b
  1443  05D6  0AF4               	incf	Lcd_Set_Cursor@b,f
  1444  05D7  3001               	movlw	1
  1445  05D8  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1446                           
  1447                           ;newmain.c: 441: Lcd_Write_String("On: ");
  1448  05DB  308B               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1449  05DC  158A  2181  118A   	fcall	_Lcd_Write_String
  1450                           
  1451                           ;newmain.c: 442: Lcd_Set_Cursor(1,12);
  1452  05DF  300C               	movlw	12
  1453  05E0  1683               	bsf	3,5	;RP0=1, select bank1
  1454  05E1  1303               	bcf	3,6	;RP1=0, select bank1
  1455  05E2  00B5               	movwf	??_main^(0+128)
  1456  05E3  0835               	movf	??_main^(0+128),w
  1457  05E4  00F4               	movwf	Lcd_Set_Cursor@b
  1458  05E5  3001               	movlw	1
  1459  05E6  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1460                           
  1461                           ;newmain.c: 443: lcddisplay(lowval);
  1462  05E9  1683               	bsf	3,5	;RP0=1, select bank1
  1463  05EA  1303               	bcf	3,6	;RP1=0, select bank1
  1464  05EB  0849               	movf	(main@lowval+1)^(0+128),w
  1465  05EC  00F9               	movwf	lcddisplay@num+1
  1466  05ED  0848               	movf	main@lowval^(0+128),w
  1467  05EE  00F8               	movwf	lcddisplay@num
  1468  05EF  158A  2358  118A   	fcall	_lcddisplay
  1469                           
  1470                           ;newmain.c: 444: Lcd_Set_Cursor(2,1);
  1471  05F2  01F4               	clrf	Lcd_Set_Cursor@b
  1472  05F3  0AF4               	incf	Lcd_Set_Cursor@b,f
  1473  05F4  3002               	movlw	2
  1474  05F5  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1475                           
  1476                           ;newmain.c: 445: Lcd_Write_String("OFF:");
  1477  05F8  3090               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1478  05F9  158A  2181  118A   	fcall	_Lcd_Write_String
  1479                           
  1480                           ;newmain.c: 446: Lcd_Set_Cursor(2,12);
  1481  05FC  300C               	movlw	12
  1482  05FD  1683               	bsf	3,5	;RP0=1, select bank1
  1483  05FE  1303               	bcf	3,6	;RP1=0, select bank1
  1484  05FF  00B5               	movwf	??_main^(0+128)
  1485  0600  0835               	movf	??_main^(0+128),w
  1486  0601  00F4               	movwf	Lcd_Set_Cursor@b
  1487  0602  3002               	movlw	2
  1488  0603  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1489                           
  1490                           ;newmain.c: 447: lcddisplay(highval);
  1491  0606  1683               	bsf	3,5	;RP0=1, select bank1
  1492  0607  1303               	bcf	3,6	;RP1=0, select bank1
  1493  0608  0847               	movf	(main@highval+1)^(0+128),w
  1494  0609  00F9               	movwf	lcddisplay@num+1
  1495  060A  0846               	movf	main@highval^(0+128),w
  1496  060B  00F8               	movwf	lcddisplay@num
  1497  060C  158A  2358  118A   	fcall	_lcddisplay
  1498                           
  1499                           ;newmain.c: 448: Lcd_Set_Cursor(2,15);
  1500  060F  300F               	movlw	15
  1501  0610  1683               	bsf	3,5	;RP0=1, select bank1
  1502  0611  1303               	bcf	3,6	;RP1=0, select bank1
  1503  0612  00B5               	movwf	??_main^(0+128)
  1504  0613  0835               	movf	??_main^(0+128),w
  1505  0614  00F4               	movwf	Lcd_Set_Cursor@b
  1506  0615  3002               	movlw	2
  1507  0616  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1508                           
  1509                           ;newmain.c: 449: Lcd_Write_String("<<");
  1510  0619  3099               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1511  061A  158A  2181  118A   	fcall	_Lcd_Write_String
  1512                           
  1513                           ;newmain.c: 450: curs = 2;
  1514  061D  3002               	movlw	2
  1515  061E  1683               	bsf	3,5	;RP0=1, select bank1
  1516  061F  1303               	bcf	3,6	;RP1=0, select bank1
  1517  0620  00BE               	movwf	main@curs^(0+128)
  1518  0621  3000               	movlw	0
  1519  0622  00BF               	movwf	(main@curs^(0+128)+1)
  1520                           
  1521                           ;newmain.c: 454: if(!RB1)
  1522  0623  1283               	bcf	3,5	;RP0=0, select bank0
  1523  0624  1303               	bcf	3,6	;RP1=0, select bank0
  1524  0625  1886               	btfsc	6,1	;volatile
  1525  0626  2E5D               	goto	l150
  1526                           
  1527                           ;newmain.c: 455: {
  1528                           ;newmain.c: 459: if(highval == 98)
  1529  0627  3062               	movlw	98
  1530  0628  1683               	bsf	3,5	;RP0=1, select bank1
  1531  0629  1303               	bcf	3,6	;RP1=0, select bank1
  1532  062A  0646               	xorwf	main@highval^(0+128),w
  1533  062B  0447               	iorwf	(main@highval+1)^(0+128),w
  1534  062C  1D03               	btfss	3,2
  1535  062D  2E32               	goto	l151
  1536                           
  1537                           ;newmain.c: 460: {
  1538                           ;newmain.c: 461: highval = lowval;
  1539  062E  0849               	movf	(main@lowval+1)^(0+128),w
  1540  062F  00C7               	movwf	(main@highval+1)^(0+128)
  1541  0630  0848               	movf	main@lowval^(0+128),w
  1542  0631  00C6               	movwf	main@highval^(0+128)
  1543  0632                     l151:	
  1544                           
  1545                           ;newmain.c: 462: }
  1546                           ;newmain.c: 464: highval++;
  1547  0632  3001               	movlw	1
  1548  0633  07C6               	addwf	main@highval^(0+128),f
  1549  0634  1803               	skipnc
  1550  0635  0AC7               	incf	(main@highval+1)^(0+128),f
  1551  0636  3000               	movlw	0
  1552  0637  07C7               	addwf	(main@highval+1)^(0+128),f
  1553                           
  1554                           ;newmain.c: 469: Lcd_Clear();
  1555  0638  118A  20A4  118A   	fcall	_Lcd_Clear
  1556                           
  1557                           ;newmain.c: 474: Lcd_Set_Cursor(2,1);
  1558  063B  01F4               	clrf	Lcd_Set_Cursor@b
  1559  063C  0AF4               	incf	Lcd_Set_Cursor@b,f
  1560  063D  3002               	movlw	2
  1561  063E  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1562                           
  1563                           ;newmain.c: 475: Lcd_Write_String("OFF:");
  1564  0641  3090               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1565  0642  158A  2181  118A   	fcall	_Lcd_Write_String
  1566                           
  1567                           ;newmain.c: 476: Lcd_Set_Cursor(2,12);
  1568  0645  300C               	movlw	12
  1569  0646  1683               	bsf	3,5	;RP0=1, select bank1
  1570  0647  1303               	bcf	3,6	;RP1=0, select bank1
  1571  0648  00B5               	movwf	??_main^(0+128)
  1572  0649  0835               	movf	??_main^(0+128),w
  1573  064A  00F4               	movwf	Lcd_Set_Cursor@b
  1574  064B  3002               	movlw	2
  1575  064C  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1576                           
  1577                           ;newmain.c: 477: lcddisplay(highval);
  1578  064F  1683               	bsf	3,5	;RP0=1, select bank1
  1579  0650  1303               	bcf	3,6	;RP1=0, select bank1
  1580  0651  0847               	movf	(main@highval+1)^(0+128),w
  1581  0652  00F9               	movwf	lcddisplay@num+1
  1582  0653  0846               	movf	main@highval^(0+128),w
  1583  0654  00F8               	movwf	lcddisplay@num
  1584  0655  158A  2358  118A   	fcall	_lcddisplay
  1585  0658                     l152:	
  1586                           ;newmain.c: 478: while(!RB1);
  1587                           
  1588  0658  1283               	bcf	3,5	;RP0=0, select bank0
  1589  0659  1303               	bcf	3,6	;RP1=0, select bank0
  1590  065A  1886               	btfsc	6,1	;volatile
  1591  065B  2EA0               	goto	l148
  1592  065C  2E58               	goto	l152
  1593  065D                     l150:	
  1594                           ;newmain.c: 479: }
  1595                           
  1596                           
  1597                           ;newmain.c: 480: else if(!RB2)
  1598  065D  1906               	btfsc	6,2	;volatile
  1599  065E  2EA0               	goto	l148
  1600                           
  1601                           ;newmain.c: 481: {
  1602                           ;newmain.c: 483: int der = highval;
  1603  065F  1683               	bsf	3,5	;RP0=1, select bank1
  1604  0660  1303               	bcf	3,6	;RP1=0, select bank1
  1605  0661  0847               	movf	(main@highval+1)^(0+128),w
  1606  0662  00C1               	movwf	(main@der+1)^(0+128)
  1607  0663  0846               	movf	main@highval^(0+128),w
  1608  0664  00C0               	movwf	main@der^(0+128)
  1609                           
  1610                           ;newmain.c: 484: der = der-1;
  1611  0665  0840               	movf	main@der^(0+128),w
  1612  0666  3EFF               	addlw	255
  1613  0667  00C0               	movwf	main@der^(0+128)
  1614  0668  0841               	movf	(main@der+1)^(0+128),w
  1615  0669  1803               	skipnc
  1616  066A  3E01               	addlw	1
  1617  066B  3EFF               	addlw	255
  1618  066C  00C1               	movwf	(main@der+1)^(0+128)
  1619                           
  1620                           ;newmain.c: 485: if(der == lowval)
  1621  066D  0849               	movf	(main@lowval+1)^(0+128),w
  1622  066E  0641               	xorwf	(main@der+1)^(0+128),w
  1623  066F  1D03               	skipz
  1624  0670  2E73               	goto	u3035
  1625  0671  0848               	movf	main@lowval^(0+128),w
  1626  0672  0640               	xorwf	main@der^(0+128),w
  1627  0673                     u3035:	
  1628  0673  1D03               	skipz
  1629  0674  2E79               	goto	l157
  1630                           
  1631                           ;newmain.c: 486: {
  1632                           ;newmain.c: 487: highval = 99;
  1633  0675  3063               	movlw	99
  1634  0676  00C6               	movwf	main@highval^(0+128)
  1635  0677  3000               	movlw	0
  1636  0678  00C7               	movwf	(main@highval^(0+128)+1)
  1637  0679                     l157:	
  1638                           
  1639                           ;newmain.c: 488: }
  1640                           ;newmain.c: 489: highval--;
  1641  0679  30FF               	movlw	255
  1642  067A  07C6               	addwf	main@highval^(0+128),f
  1643  067B  1803               	skipnc
  1644  067C  0AC7               	incf	(main@highval+1)^(0+128),f
  1645  067D  30FF               	movlw	255
  1646  067E  07C7               	addwf	(main@highval+1)^(0+128),f
  1647                           
  1648                           ;newmain.c: 495: Lcd_Set_Cursor(2,1);
  1649  067F  01F4               	clrf	Lcd_Set_Cursor@b
  1650  0680  0AF4               	incf	Lcd_Set_Cursor@b,f
  1651  0681  3002               	movlw	2
  1652  0682  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1653                           
  1654                           ;newmain.c: 496: Lcd_Write_String("OFF:");
  1655  0685  3090               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1656  0686  158A  2181  118A   	fcall	_Lcd_Write_String
  1657                           
  1658                           ;newmain.c: 497: Lcd_Set_Cursor(2,12);
  1659  0689  300C               	movlw	12
  1660  068A  1683               	bsf	3,5	;RP0=1, select bank1
  1661  068B  1303               	bcf	3,6	;RP1=0, select bank1
  1662  068C  00B5               	movwf	??_main^(0+128)
  1663  068D  0835               	movf	??_main^(0+128),w
  1664  068E  00F4               	movwf	Lcd_Set_Cursor@b
  1665  068F  3002               	movlw	2
  1666  0690  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1667                           
  1668                           ;newmain.c: 498: lcddisplay(highval);
  1669  0693  1683               	bsf	3,5	;RP0=1, select bank1
  1670  0694  1303               	bcf	3,6	;RP1=0, select bank1
  1671  0695  0847               	movf	(main@highval+1)^(0+128),w
  1672  0696  00F9               	movwf	lcddisplay@num+1
  1673  0697  0846               	movf	main@highval^(0+128),w
  1674  0698  00F8               	movwf	lcddisplay@num
  1675  0699  158A  2358  118A   	fcall	_lcddisplay
  1676  069C                     l158:	
  1677                           ;newmain.c: 499: while(!RB2);
  1678                           
  1679  069C  1283               	bcf	3,5	;RP0=0, select bank0
  1680  069D  1303               	bcf	3,6	;RP1=0, select bank0
  1681  069E  1D06               	btfss	6,2	;volatile
  1682  069F  2E9C               	goto	l158
  1683  06A0                     l148:	
  1684                           
  1685                           ;newmain.c: 500: }
  1686                           ;newmain.c: 501: }
  1687                           ;newmain.c: 504: if((!RB3)&&(curs == 1))
  1688  06A0  1283               	bcf	3,5	;RP0=0, select bank0
  1689  06A1  1303               	bcf	3,6	;RP1=0, select bank0
  1690  06A2  1986               	btfsc	6,3	;volatile
  1691  06A3  2EAA               	goto	l161
  1692  06A4  1683               	bsf	3,5	;RP0=1, select bank1
  1693  06A5  1303               	bcf	3,6	;RP1=0, select bank1
  1694  06A6  033E               	decf	main@curs^(0+128),w
  1695  06A7  043F               	iorwf	(main@curs+1)^(0+128),w
  1696  06A8  1903               	btfsc	3,2
  1697  06A9  2EC0               	goto	l165
  1698  06AA                     l161:	
  1699                           ;newmain.c: 505: {
  1700                           ;newmain.c: 506: break;
  1701                           
  1702                           
  1703                           ;newmain.c: 507: }
  1704                           ;newmain.c: 508: if((!RB3)&&(curs == 2))
  1705  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  1706  06AB  1986               	btfsc	6,3	;volatile
  1707  06AC  2EB4               	goto	l2369
  1708  06AD  3002               	movlw	2
  1709  06AE  1683               	bsf	3,5	;RP0=1, select bank1
  1710  06AF  1303               	bcf	3,6	;RP1=0, select bank1
  1711  06B0  063E               	xorwf	main@curs^(0+128),w
  1712  06B1  043F               	iorwf	(main@curs+1)^(0+128),w
  1713  06B2  1903               	btfsc	3,2
  1714  06B3  2EC0               	goto	l165
  1715  06B4                     l2369:	
  1716                           ;newmain.c: 509: {
  1717                           ;newmain.c: 510: break;
  1718                           
  1719                           
  1720                           ;newmain.c: 511: }
  1721                           ;newmain.c: 512: _delay((unsigned long)((100)*(4000000/4000.0)));
  1722  06B4  3082               	movlw	130
  1723  06B5  1683               	bsf	3,5	;RP0=1, select bank1
  1724  06B6  1303               	bcf	3,6	;RP1=0, select bank1
  1725  06B7  00B6               	movwf	(??_main^(0+128)+1)
  1726  06B8  30DD               	movlw	221
  1727  06B9  00B5               	movwf	??_main^(0+128)
  1728  06BA                     u3207:	
  1729  06BA  0BB5               	decfsz	??_main^(0+128),f
  1730  06BB  2EBA               	goto	u3207
  1731  06BC  0BB6               	decfsz	(??_main^(0+128)+1),f
  1732  06BD  2EBA               	goto	u3207
  1733  06BE  0000               	nop
  1734  06BF  2CD4               	goto	l2245
  1735  06C0                     l165:	
  1736                           ;newmain.c: 516: }
  1737                           ;newmain.c: 517: while(RB3 == 0);
  1738                           
  1739  06C0  1283               	bcf	3,5	;RP0=0, select bank0
  1740  06C1  1303               	bcf	3,6	;RP1=0, select bank0
  1741  06C2  1986               	btfsc	6,3	;volatile
  1742  06C3  2ECB               	goto	l2375
  1743  06C4  2EC0               	goto	l165
  1744  06C5                     l2371:	
  1745                           ;newmain.c: 518: }
  1746                           
  1747                           
  1748                           ;newmain.c: 519: else if(start == 1)
  1749  06C5  1683               	bsf	3,5	;RP0=1, select bank1
  1750  06C6  1303               	bcf	3,6	;RP1=0, select bank1
  1751  06C7  033C               	decf	main@start^(0+128),w
  1752  06C8  043D               	iorwf	(main@start+1)^(0+128),w
  1753  06C9  1903               	btfsc	3,2
  1754  06CA  2C8F               	goto	l2225
  1755  06CB                     l2375:	
  1756                           ;newmain.c: 520: {
  1757                           ;newmain.c: 521: goto start;
  1758                           
  1759                           
  1760                           ;newmain.c: 522: }
  1761                           ;newmain.c: 523: Lcd_Clear();
  1762  06CB  118A  20A4  118A   	fcall	_Lcd_Clear
  1763                           
  1764                           ;newmain.c: 526: if((tempval>=10)&&(tempval<=70))
  1765  06CE  1683               	bsf	3,5	;RP0=1, select bank1
  1766  06CF  1303               	bcf	3,6	;RP1=0, select bank1
  1767  06D0  0845               	movf	(main@tempval+1)^(0+128),w
  1768  06D1  3A80               	xorlw	128
  1769  06D2  00FF               	movwf	127
  1770  06D3  3080               	movlw	128
  1771  06D4  027F               	subwf	127,w
  1772  06D5  1D03               	skipz
  1773  06D6  2ED9               	goto	u3115
  1774  06D7  300A               	movlw	10
  1775  06D8  0244               	subwf	main@tempval^(0+128),w
  1776  06D9                     u3115:	
  1777  06D9  1C03               	skipc
  1778  06DA  2F9D               	goto	l2407
  1779  06DB  1683               	bsf	3,5	;RP0=1, select bank1
  1780  06DC  1303               	bcf	3,6	;RP1=0, select bank1
  1781  06DD  0845               	movf	(main@tempval+1)^(0+128),w
  1782  06DE  3A80               	xorlw	128
  1783  06DF  00FF               	movwf	127
  1784  06E0  3080               	movlw	128
  1785  06E1  027F               	subwf	127,w
  1786  06E2  1D03               	skipz
  1787  06E3  2EE6               	goto	u3125
  1788  06E4  3047               	movlw	71
  1789  06E5  0244               	subwf	main@tempval^(0+128),w
  1790  06E6                     u3125:	
  1791  06E6  1803               	skipnc
  1792  06E7  2F9D               	goto	l2407
  1793                           
  1794                           ;newmain.c: 527: {
  1795                           ;newmain.c: 529: if(((tempval>=lowval)&&(tempval<=highval))&&((lowval>=10)&&(highval<=70
      +                          )))
  1796  06E8  1683               	bsf	3,5	;RP0=1, select bank1
  1797  06E9  1303               	bcf	3,6	;RP1=0, select bank1
  1798  06EA  0845               	movf	(main@tempval+1)^(0+128),w
  1799  06EB  3A80               	xorlw	128
  1800  06EC  00B5               	movwf	??_main^(0+128)
  1801  06ED  0849               	movf	(main@lowval+1)^(0+128),w
  1802  06EE  3A80               	xorlw	128
  1803  06EF  0235               	subwf	??_main^(0+128),w
  1804  06F0  1D03               	skipz
  1805  06F1  2EF4               	goto	u3135
  1806  06F2  0848               	movf	main@lowval^(0+128),w
  1807  06F3  0244               	subwf	main@tempval^(0+128),w
  1808  06F4                     u3135:	
  1809  06F4  1C03               	skipc
  1810  06F5  2F77               	goto	l2397
  1811  06F6  1683               	bsf	3,5	;RP0=1, select bank1
  1812  06F7  1303               	bcf	3,6	;RP1=0, select bank1
  1813  06F8  0847               	movf	(main@highval+1)^(0+128),w
  1814  06F9  3A80               	xorlw	128
  1815  06FA  00B5               	movwf	??_main^(0+128)
  1816  06FB  0845               	movf	(main@tempval+1)^(0+128),w
  1817  06FC  3A80               	xorlw	128
  1818  06FD  0235               	subwf	??_main^(0+128),w
  1819  06FE  1D03               	skipz
  1820  06FF  2F02               	goto	u3145
  1821  0700  0844               	movf	main@tempval^(0+128),w
  1822  0701  0246               	subwf	main@highval^(0+128),w
  1823  0702                     u3145:	
  1824  0702  1C03               	skipc
  1825  0703  2F77               	goto	l2397
  1826  0704  1683               	bsf	3,5	;RP0=1, select bank1
  1827  0705  1303               	bcf	3,6	;RP1=0, select bank1
  1828  0706  0849               	movf	(main@lowval+1)^(0+128),w
  1829  0707  3A80               	xorlw	128
  1830  0708  00FF               	movwf	127
  1831  0709  3080               	movlw	128
  1832  070A  027F               	subwf	127,w
  1833  070B  1D03               	skipz
  1834  070C  2F0F               	goto	u3155
  1835  070D  300A               	movlw	10
  1836  070E  0248               	subwf	main@lowval^(0+128),w
  1837  070F                     u3155:	
  1838  070F  1C03               	skipc
  1839  0710  2F77               	goto	l2397
  1840  0711  1683               	bsf	3,5	;RP0=1, select bank1
  1841  0712  1303               	bcf	3,6	;RP1=0, select bank1
  1842  0713  0847               	movf	(main@highval+1)^(0+128),w
  1843  0714  3A80               	xorlw	128
  1844  0715  00FF               	movwf	127
  1845  0716  3080               	movlw	128
  1846  0717  027F               	subwf	127,w
  1847  0718  1D03               	skipz
  1848  0719  2F1C               	goto	u3165
  1849  071A  3047               	movlw	71
  1850  071B  0246               	subwf	main@highval^(0+128),w
  1851  071C                     u3165:	
  1852  071C  1803               	skipnc
  1853  071D  2F77               	goto	l2397
  1854                           
  1855                           ;newmain.c: 531: {
  1856                           ;newmain.c: 533: RB7 = 1;
  1857  071E  1283               	bcf	3,5	;RP0=0, select bank0
  1858  071F  1303               	bcf	3,6	;RP1=0, select bank0
  1859  0720  1786               	bsf	6,7	;volatile
  1860                           
  1861                           ;newmain.c: 536: delay60(tempval,lowval,highval);
  1862  0721  1683               	bsf	3,5	;RP0=1, select bank1
  1863  0722  1303               	bcf	3,6	;RP1=0, select bank1
  1864  0723  0845               	movf	(main@tempval+1)^(0+128),w
  1865  0724  1283               	bcf	3,5	;RP0=0, select bank0
  1866  0725  1303               	bcf	3,6	;RP1=0, select bank0
  1867  0726  00E2               	movwf	delay60@a+1
  1868  0727  1683               	bsf	3,5	;RP0=1, select bank1
  1869  0728  1303               	bcf	3,6	;RP1=0, select bank1
  1870  0729  0844               	movf	main@tempval^(0+128),w
  1871  072A  1283               	bcf	3,5	;RP0=0, select bank0
  1872  072B  1303               	bcf	3,6	;RP1=0, select bank0
  1873  072C  00E1               	movwf	delay60@a
  1874  072D  1683               	bsf	3,5	;RP0=1, select bank1
  1875  072E  1303               	bcf	3,6	;RP1=0, select bank1
  1876  072F  0849               	movf	(main@lowval+1)^(0+128),w
  1877  0730  1283               	bcf	3,5	;RP0=0, select bank0
  1878  0731  1303               	bcf	3,6	;RP1=0, select bank0
  1879  0732  00E4               	movwf	delay60@b+1
  1880  0733  1683               	bsf	3,5	;RP0=1, select bank1
  1881  0734  1303               	bcf	3,6	;RP1=0, select bank1
  1882  0735  0848               	movf	main@lowval^(0+128),w
  1883  0736  1283               	bcf	3,5	;RP0=0, select bank0
  1884  0737  1303               	bcf	3,6	;RP1=0, select bank0
  1885  0738  00E3               	movwf	delay60@b
  1886  0739  1683               	bsf	3,5	;RP0=1, select bank1
  1887  073A  1303               	bcf	3,6	;RP1=0, select bank1
  1888  073B  0847               	movf	(main@highval+1)^(0+128),w
  1889  073C  1283               	bcf	3,5	;RP0=0, select bank0
  1890  073D  1303               	bcf	3,6	;RP1=0, select bank0
  1891  073E  00E6               	movwf	delay60@c+1
  1892  073F  1683               	bsf	3,5	;RP0=1, select bank1
  1893  0740  1303               	bcf	3,6	;RP1=0, select bank1
  1894  0741  0846               	movf	main@highval^(0+128),w
  1895  0742  1283               	bcf	3,5	;RP0=0, select bank0
  1896  0743  1303               	bcf	3,6	;RP1=0, select bank0
  1897  0744  00E5               	movwf	delay60@c
  1898  0745  118A  20AC  118A   	fcall	_delay60
  1899                           
  1900                           ;newmain.c: 537: RB7 = 0;
  1901  0748  1283               	bcf	3,5	;RP0=0, select bank0
  1902  0749  1303               	bcf	3,6	;RP1=0, select bank0
  1903  074A  1386               	bcf	6,7	;volatile
  1904                           
  1905                           ;newmain.c: 538: delay60(tempval,lowval,highval);
  1906  074B  1683               	bsf	3,5	;RP0=1, select bank1
  1907  074C  1303               	bcf	3,6	;RP1=0, select bank1
  1908  074D  0845               	movf	(main@tempval+1)^(0+128),w
  1909  074E  1283               	bcf	3,5	;RP0=0, select bank0
  1910  074F  1303               	bcf	3,6	;RP1=0, select bank0
  1911  0750  00E2               	movwf	delay60@a+1
  1912  0751  1683               	bsf	3,5	;RP0=1, select bank1
  1913  0752  1303               	bcf	3,6	;RP1=0, select bank1
  1914  0753  0844               	movf	main@tempval^(0+128),w
  1915  0754  1283               	bcf	3,5	;RP0=0, select bank0
  1916  0755  1303               	bcf	3,6	;RP1=0, select bank0
  1917  0756  00E1               	movwf	delay60@a
  1918  0757  1683               	bsf	3,5	;RP0=1, select bank1
  1919  0758  1303               	bcf	3,6	;RP1=0, select bank1
  1920  0759  0849               	movf	(main@lowval+1)^(0+128),w
  1921  075A  1283               	bcf	3,5	;RP0=0, select bank0
  1922  075B  1303               	bcf	3,6	;RP1=0, select bank0
  1923  075C  00E4               	movwf	delay60@b+1
  1924  075D  1683               	bsf	3,5	;RP0=1, select bank1
  1925  075E  1303               	bcf	3,6	;RP1=0, select bank1
  1926  075F  0848               	movf	main@lowval^(0+128),w
  1927  0760  1283               	bcf	3,5	;RP0=0, select bank0
  1928  0761  1303               	bcf	3,6	;RP1=0, select bank0
  1929  0762  00E3               	movwf	delay60@b
  1930  0763  1683               	bsf	3,5	;RP0=1, select bank1
  1931  0764  1303               	bcf	3,6	;RP1=0, select bank1
  1932  0765  0847               	movf	(main@highval+1)^(0+128),w
  1933  0766  1283               	bcf	3,5	;RP0=0, select bank0
  1934  0767  1303               	bcf	3,6	;RP1=0, select bank0
  1935  0768  00E6               	movwf	delay60@c+1
  1936  0769  1683               	bsf	3,5	;RP0=1, select bank1
  1937  076A  1303               	bcf	3,6	;RP1=0, select bank1
  1938  076B  0846               	movf	main@highval^(0+128),w
  1939  076C  1283               	bcf	3,5	;RP0=0, select bank0
  1940  076D  1303               	bcf	3,6	;RP1=0, select bank0
  1941  076E  00E5               	movwf	delay60@c
  1942  076F  118A  20AC  118A   	fcall	_delay60
  1943                           
  1944                           ;newmain.c: 539: c = 0;
  1945  0772  1683               	bsf	3,5	;RP0=1, select bank1
  1946  0773  1303               	bcf	3,6	;RP1=0, select bank1
  1947  0774  01BA               	clrf	main@c^(0+128)
  1948  0775  01BB               	clrf	(main@c+1)^(0+128)
  1949                           
  1950                           ;newmain.c: 545: }
  1951  0776  2C79               	goto	l2219
  1952  0777                     l2397:	
  1953                           
  1954                           ;newmain.c: 546: else
  1955                           ;newmain.c: 547: {
  1956                           ;newmain.c: 548: Lcd_Clear();
  1957  0777  118A  20A4  118A   	fcall	_Lcd_Clear
  1958                           
  1959                           ;newmain.c: 549: Lcd_Set_Cursor(1,1);
  1960  077A  01F4               	clrf	Lcd_Set_Cursor@b
  1961  077B  0AF4               	incf	Lcd_Set_Cursor@b,f
  1962  077C  3001               	movlw	1
  1963  077D  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  1964                           
  1965                           ;newmain.c: 551: Lcd_Write_String("Set TEMP 10-70");
  1966  0780  3025               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  1967  0781  158A  2181  118A   	fcall	_Lcd_Write_String
  1968                           
  1969                           ;newmain.c: 553: RB7 = 0;
  1970  0784  1283               	bcf	3,5	;RP0=0, select bank0
  1971  0785  1303               	bcf	3,6	;RP1=0, select bank0
  1972  0786  1386               	bcf	6,7	;volatile
  1973                           
  1974                           ;newmain.c: 554: c=1;
  1975  0787  3001               	movlw	1
  1976  0788  1683               	bsf	3,5	;RP0=1, select bank1
  1977  0789  1303               	bcf	3,6	;RP1=0, select bank1
  1978  078A  00BA               	movwf	main@c^(0+128)
  1979  078B  3000               	movlw	0
  1980  078C  00BB               	movwf	(main@c^(0+128)+1)
  1981                           
  1982                           ;newmain.c: 555: _delay((unsigned long)((1000)*(4000000/4000.0)));
  1983  078D  3006               	movlw	6
  1984  078E  1683               	bsf	3,5	;RP0=1, select bank1
  1985  078F  1303               	bcf	3,6	;RP1=0, select bank1
  1986  0790  00B7               	movwf	(??_main^(0+128)+2)
  1987  0791  3013               	movlw	19
  1988  0792  00B6               	movwf	(??_main^(0+128)+1)
  1989  0793  30AD               	movlw	173
  1990  0794  00B5               	movwf	??_main^(0+128)
  1991  0795                     u3217:	
  1992  0795  0BB5               	decfsz	??_main^(0+128),f
  1993  0796  2F95               	goto	u3217
  1994  0797  0BB6               	decfsz	(??_main^(0+128)+1),f
  1995  0798  2F95               	goto	u3217
  1996  0799  0BB7               	decfsz	(??_main^(0+128)+2),f
  1997  079A  2F95               	goto	u3217
  1998  079B  0000               	nop
  1999                           
  2000                           ;newmain.c: 556: }
  2001                           ;newmain.c: 557: }
  2002  079C  2C79               	goto	l2219
  2003  079D                     l2407:	
  2004                           
  2005                           ;newmain.c: 558: else
  2006                           ;newmain.c: 559: {
  2007                           ;newmain.c: 560: if(tempval<10)
  2008  079D  1683               	bsf	3,5	;RP0=1, select bank1
  2009  079E  1303               	bcf	3,6	;RP1=0, select bank1
  2010  079F  0845               	movf	(main@tempval+1)^(0+128),w
  2011  07A0  3A80               	xorlw	128
  2012  07A1  00FF               	movwf	127
  2013  07A2  3080               	movlw	128
  2014  07A3  027F               	subwf	127,w
  2015  07A4  1D03               	skipz
  2016  07A5  2FA8               	goto	u3175
  2017  07A6  300A               	movlw	10
  2018  07A7  0244               	subwf	main@tempval^(0+128),w
  2019  07A8                     u3175:	
  2020  07A8  1803               	skipnc
  2021  07A9  2FCA               	goto	l2417
  2022                           
  2023                           ;newmain.c: 561: {
  2024                           ;newmain.c: 562: Lcd_Clear();
  2025  07AA  118A  20A4  118A   	fcall	_Lcd_Clear
  2026                           
  2027                           ;newmain.c: 563: RB7 = 0;
  2028  07AD  1283               	bcf	3,5	;RP0=0, select bank0
  2029  07AE  1303               	bcf	3,6	;RP1=0, select bank0
  2030  07AF  1386               	bcf	6,7	;volatile
  2031                           
  2032                           ;newmain.c: 564: Lcd_Set_Cursor(1,1);
  2033  07B0  01F4               	clrf	Lcd_Set_Cursor@b
  2034  07B1  0AF4               	incf	Lcd_Set_Cursor@b,f
  2035  07B2  3001               	movlw	1
  2036  07B3  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  2037                           
  2038                           ;newmain.c: 565: Lcd_Write_String("LOW TEMP");
  2039  07B6  3082               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  2040  07B7  158A  2181  118A   	fcall	_Lcd_Write_String
  2041                           
  2042                           ;newmain.c: 566: _delay((unsigned long)((1000)*(4000000/4000.0)));
  2043  07BA  3006               	movlw	6
  2044  07BB  1683               	bsf	3,5	;RP0=1, select bank1
  2045  07BC  1303               	bcf	3,6	;RP1=0, select bank1
  2046  07BD  00B7               	movwf	(??_main^(0+128)+2)
  2047  07BE  3013               	movlw	19
  2048  07BF  00B6               	movwf	(??_main^(0+128)+1)
  2049  07C0  30AD               	movlw	173
  2050  07C1  00B5               	movwf	??_main^(0+128)
  2051  07C2                     u3227:	
  2052  07C2  0BB5               	decfsz	??_main^(0+128),f
  2053  07C3  2FC2               	goto	u3227
  2054  07C4  0BB6               	decfsz	(??_main^(0+128)+1),f
  2055  07C5  2FC2               	goto	u3227
  2056  07C6  0BB7               	decfsz	(??_main^(0+128)+2),f
  2057  07C7  2FC2               	goto	u3227
  2058  07C8  0000               	nop
  2059                           
  2060                           ;newmain.c: 567: }
  2061  07C9  2C79               	goto	l2219
  2062  07CA                     l2417:	
  2063                           
  2064                           ;newmain.c: 568: else if(tempval>70)
  2065  07CA  1683               	bsf	3,5	;RP0=1, select bank1
  2066  07CB  1303               	bcf	3,6	;RP1=0, select bank1
  2067  07CC  0845               	movf	(main@tempval+1)^(0+128),w
  2068  07CD  3A80               	xorlw	128
  2069  07CE  00FF               	movwf	127
  2070  07CF  3080               	movlw	128
  2071  07D0  027F               	subwf	127,w
  2072  07D1  1D03               	skipz
  2073  07D2  2FD5               	goto	u3185
  2074  07D3  3047               	movlw	71
  2075  07D4  0244               	subwf	main@tempval^(0+128),w
  2076  07D5                     u3185:	
  2077  07D5  1C03               	skipc
  2078  07D6  2C79               	goto	l2219
  2079                           
  2080                           ;newmain.c: 569: {
  2081                           ;newmain.c: 570: Lcd_Clear();
  2082  07D7  118A  20A4  118A   	fcall	_Lcd_Clear
  2083                           
  2084                           ;newmain.c: 571: RB7 = 0;
  2085  07DA  1283               	bcf	3,5	;RP0=0, select bank0
  2086  07DB  1303               	bcf	3,6	;RP1=0, select bank0
  2087  07DC  1386               	bcf	6,7	;volatile
  2088                           
  2089                           ;newmain.c: 572: Lcd_Set_Cursor(1,1);
  2090  07DD  01F4               	clrf	Lcd_Set_Cursor@b
  2091  07DE  0AF4               	incf	Lcd_Set_Cursor@b,f
  2092  07DF  3001               	movlw	1
  2093  07E0  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  2094                           
  2095                           ;newmain.c: 573: Lcd_Write_String("HIGH TEMP");
  2096  07E3  306F               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  2097  07E4  158A  2181  118A   	fcall	_Lcd_Write_String
  2098                           
  2099                           ;newmain.c: 574: _delay((unsigned long)((1000)*(4000000/4000.0)));
  2100  07E7  3006               	movlw	6
  2101  07E8  1683               	bsf	3,5	;RP0=1, select bank1
  2102  07E9  1303               	bcf	3,6	;RP1=0, select bank1
  2103  07EA  00B7               	movwf	(??_main^(0+128)+2)
  2104  07EB  3013               	movlw	19
  2105  07EC  00B6               	movwf	(??_main^(0+128)+1)
  2106  07ED  30AD               	movlw	173
  2107  07EE  00B5               	movwf	??_main^(0+128)
  2108  07EF                     u3237:	
  2109  07EF  0BB5               	decfsz	??_main^(0+128),f
  2110  07F0  2FEF               	goto	u3237
  2111  07F1  0BB6               	decfsz	(??_main^(0+128)+1),f
  2112  07F2  2FEF               	goto	u3237
  2113  07F3  0BB7               	decfsz	(??_main^(0+128)+2),f
  2114  07F4  2FEF               	goto	u3237
  2115  07F5  0000               	nop
  2116  07F6  2C79               	goto	l2219
  2117  07F7                     __end_of_main:	
  2118                           
  2119                           	psect	text1
  2120  00AC                     __ptext1:	
  2121 ;; *************** function _delay60 *****************
  2122 ;; Defined at:
  2123 ;;		line 253 in file "newmain.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;  a               2   65[BANK0 ] int 
  2126 ;;  b               2   67[BANK0 ] int 
  2127 ;;  c               2   69[BANK0 ] int 
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;  i               2   76[BANK0 ] int 
  2130 ;;  tempval         2   74[BANK0 ] int 
  2131 ;; Return value:  Size  Location     Type
  2132 ;;                  1    wreg      void 
  2133 ;; Registers used:
  2134 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2135 ;; Tracked objects:
  2136 ;;		On entry : 0/0
  2137 ;;		On exit  : 0/0
  2138 ;;		Unchanged: 0/0
  2139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2140 ;;      Params:         0       6       0       0
  2141 ;;      Locals:         0       4       0       0
  2142 ;;      Temps:          0       3       0       0
  2143 ;;      Totals:         0      13       0       0
  2144 ;;Total ram usage:       13 bytes
  2145 ;; Hardware stack levels used:    1
  2146 ;; Hardware stack levels required when called:    5
  2147 ;; This function calls:
  2148 ;;		_Lcd_Clear
  2149 ;;		_Lcd_Set_Cursor
  2150 ;;		_Lcd_Write_String
  2151 ;;		_getTemp
  2152 ;;		_lcddisplay
  2153 ;; This function is called by:
  2154 ;;		_main
  2155 ;; This function uses a non-reentrant model
  2156 ;;
  2157                           
  2158                           
  2159                           ;psect for function _delay60
  2160  00AC                     _delay60:	
  2161                           
  2162                           ;newmain.c: 255: int i,tempval;
  2163                           ;newmain.c: 256: for(i=0;i<=29;i++)
  2164                           
  2165                           ;incstack = 0
  2166                           ; Regs used in _delay60: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2167  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  2168  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  2169  00AE  01EC               	clrf	delay60@i
  2170  00AF  01ED               	clrf	delay60@i+1
  2171  00B0                     L1:	
  2172  00B0  086D               	movf	delay60@i+1,w
  2173  00B1  3A80               	xorlw	128
  2174  00B2  00FF               	movwf	127
  2175  00B3  3080               	movlw	128
  2176  00B4  027F               	subwf	127,w
  2177  00B5  1D03               	skipz
  2178  00B6  28B9               	goto	u2775
  2179  00B7  301E               	movlw	30
  2180  00B8  026C               	subwf	delay60@i,w
  2181  00B9                     u2775:	
  2182  00B9  1803               	btfsc	3,0
  2183  00BA  0008               	return
  2184                           
  2185                           ;newmain.c: 257: {
  2186                           ;newmain.c: 258: tempval = getTemp();
  2187  00BB  118A  22A0  118A   	fcall	_getTemp
  2188  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  2189  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  2190  00C0  085E               	movf	?_getTemp+1,w
  2191  00C1  00EB               	movwf	delay60@tempval+1
  2192  00C2  085D               	movf	?_getTemp,w
  2193  00C3  00EA               	movwf	delay60@tempval
  2194                           
  2195                           ;newmain.c: 259: if((a<10)&&(a>70))
  2196  00C4  0862               	movf	delay60@a+1,w
  2197  00C5  3A80               	xorlw	128
  2198  00C6  00FF               	movwf	127
  2199  00C7  3080               	movlw	128
  2200  00C8  027F               	subwf	127,w
  2201  00C9  1D03               	skipz
  2202  00CA  28CD               	goto	u2785
  2203  00CB  300A               	movlw	10
  2204  00CC  0261               	subwf	delay60@a,w
  2205  00CD                     u2785:	
  2206  00CD  1803               	skipnc
  2207  00CE  28DC               	goto	l116
  2208  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  2209  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  2210  00D1  0862               	movf	delay60@a+1,w
  2211  00D2  3A80               	xorlw	128
  2212  00D3  00FF               	movwf	127
  2213  00D4  3080               	movlw	128
  2214  00D5  027F               	subwf	127,w
  2215  00D6  1D03               	skipz
  2216  00D7  28DA               	goto	u2795
  2217  00D8  3047               	movlw	71
  2218  00D9  0261               	subwf	delay60@a,w
  2219  00DA                     u2795:	
  2220  00DA  1803               	btfsc	3,0
  2221  00DB  0008               	return
  2222  00DC                     l116:	
  2223                           ;newmain.c: 260: {
  2224                           ;newmain.c: 261: break;
  2225                           
  2226                           
  2227                           ;newmain.c: 262: }
  2228                           ;newmain.c: 263: if(RB3 == 0)
  2229  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  2230  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  2231  00DE  1986               	btfsc	6,3	;volatile
  2232  00DF  28E7               	goto	l2137
  2233                           
  2234                           ;newmain.c: 264: {
  2235                           ;newmain.c: 265: start = 1;
  2236  00E0  3001               	movlw	1
  2237  00E1  1683               	bsf	3,5	;RP0=1, select bank1
  2238  00E2  1303               	bcf	3,6	;RP1=0, select bank1
  2239  00E3  00CC               	movwf	_start^(0+128)
  2240  00E4  3000               	movlw	0
  2241  00E5  00CD               	movwf	(_start^(0+128)+1)
  2242                           
  2243                           ;newmain.c: 267: break;
  2244  00E6  0008               	return
  2245  00E7                     l2137:	
  2246                           ;newmain.c: 269: }
  2247                           
  2248                           
  2249                           ;newmain.c: 270: else
  2250                           ;newmain.c: 271: {
  2251                           ;newmain.c: 272: start = 0;
  2252  00E7  1683               	bsf	3,5	;RP0=1, select bank1
  2253  00E8  1303               	bcf	3,6	;RP1=0, select bank1
  2254  00E9  01CC               	clrf	_start^(0+128)
  2255  00EA  01CD               	clrf	(_start+1)^(0+128)
  2256                           
  2257                           ;newmain.c: 273: }
  2258                           ;newmain.c: 274: if((tempval>=70)||(tempval<=10))
  2259  00EB  1283               	bcf	3,5	;RP0=0, select bank0
  2260  00EC  1303               	bcf	3,6	;RP1=0, select bank0
  2261  00ED  086B               	movf	delay60@tempval+1,w
  2262  00EE  3A80               	xorlw	128
  2263  00EF  00FF               	movwf	127
  2264  00F0  3080               	movlw	128
  2265  00F1  027F               	subwf	127,w
  2266  00F2  1D03               	skipz
  2267  00F3  28F6               	goto	u2815
  2268  00F4  3046               	movlw	70
  2269  00F5  026A               	subwf	delay60@tempval,w
  2270  00F6                     u2815:	
  2271  00F6  1803               	skipnc
  2272  00F7  0008               	return
  2273  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  2274  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  2275  00FA  086B               	movf	delay60@tempval+1,w
  2276  00FB  3A80               	xorlw	128
  2277  00FC  00FF               	movwf	127
  2278  00FD  3080               	movlw	128
  2279  00FE  027F               	subwf	127,w
  2280  00FF  1D03               	skipz
  2281  0100  2903               	goto	u2825
  2282  0101  300B               	movlw	11
  2283  0102  026A               	subwf	delay60@tempval,w
  2284  0103                     u2825:	
  2285  0103  1C03               	btfss	3,0
  2286  0104  0008               	return
  2287                           
  2288                           ;newmain.c: 279: }
  2289                           ;newmain.c: 281: Lcd_Clear();
  2290                           
  2291                           ;newmain.c: 275: {
  2292                           ;newmain.c: 277: break;
  2293  0105  118A  20A4  118A   	fcall	_Lcd_Clear
  2294                           
  2295                           ;newmain.c: 282: Lcd_Set_Cursor(1,1);
  2296  0108  01F4               	clrf	Lcd_Set_Cursor@b
  2297  0109  0AF4               	incf	Lcd_Set_Cursor@b,f
  2298  010A  3001               	movlw	1
  2299  010B  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  2300                           
  2301                           ;newmain.c: 283: Lcd_Write_String("On_temp:");
  2302  010E  3079               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2303  010F  158A  2181  118A   	fcall	_Lcd_Write_String
  2304                           
  2305                           ;newmain.c: 285: Lcd_Set_Cursor(1,14);
  2306  0112  300E               	movlw	14
  2307  0113  1283               	bcf	3,5	;RP0=0, select bank0
  2308  0114  1303               	bcf	3,6	;RP1=0, select bank0
  2309  0115  00E7               	movwf	??_delay60
  2310  0116  0867               	movf	??_delay60,w
  2311  0117  00F4               	movwf	Lcd_Set_Cursor@b
  2312  0118  3001               	movlw	1
  2313  0119  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  2314                           
  2315                           ;newmain.c: 286: lcddisplay(b);
  2316  011C  1283               	bcf	3,5	;RP0=0, select bank0
  2317  011D  1303               	bcf	3,6	;RP1=0, select bank0
  2318  011E  0864               	movf	delay60@b+1,w
  2319  011F  00F9               	movwf	lcddisplay@num+1
  2320  0120  0863               	movf	delay60@b,w
  2321  0121  00F8               	movwf	lcddisplay@num
  2322  0122  158A  2358  118A   	fcall	_lcddisplay
  2323                           
  2324                           ;newmain.c: 287: Lcd_Set_Cursor(2,1);
  2325  0125  01F4               	clrf	Lcd_Set_Cursor@b
  2326  0126  0AF4               	incf	Lcd_Set_Cursor@b,f
  2327  0127  3002               	movlw	2
  2328  0128  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  2329                           
  2330                           ;newmain.c: 288: Lcd_Write_String("Off_temp:");
  2331  012B  3065               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2332  012C  158A  2181  118A   	fcall	_Lcd_Write_String
  2333                           
  2334                           ;newmain.c: 289: Lcd_Set_Cursor(2,14);
  2335  012F  300E               	movlw	14
  2336  0130  1283               	bcf	3,5	;RP0=0, select bank0
  2337  0131  1303               	bcf	3,6	;RP1=0, select bank0
  2338  0132  00E7               	movwf	??_delay60
  2339  0133  0867               	movf	??_delay60,w
  2340  0134  00F4               	movwf	Lcd_Set_Cursor@b
  2341  0135  3002               	movlw	2
  2342  0136  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  2343                           
  2344                           ;newmain.c: 290: lcddisplay(c);
  2345  0139  1283               	bcf	3,5	;RP0=0, select bank0
  2346  013A  1303               	bcf	3,6	;RP1=0, select bank0
  2347  013B  0866               	movf	delay60@c+1,w
  2348  013C  00F9               	movwf	lcddisplay@num+1
  2349  013D  0865               	movf	delay60@c,w
  2350  013E  00F8               	movwf	lcddisplay@num
  2351  013F  158A  2358  118A   	fcall	_lcddisplay
  2352                           
  2353                           ;newmain.c: 291: _delay((unsigned long)((1000)*(4000000/4000.0)));
  2354  0142  3006               	movlw	6
  2355  0143  1283               	bcf	3,5	;RP0=0, select bank0
  2356  0144  1303               	bcf	3,6	;RP1=0, select bank0
  2357  0145  00E9               	movwf	??_delay60+2
  2358  0146  3013               	movlw	19
  2359  0147  00E8               	movwf	??_delay60+1
  2360  0148  30AD               	movlw	173
  2361  0149  00E7               	movwf	??_delay60
  2362  014A                     u3247:	
  2363  014A  0BE7               	decfsz	??_delay60,f
  2364  014B  294A               	goto	u3247
  2365  014C  0BE8               	decfsz	??_delay60+1,f
  2366  014D  294A               	goto	u3247
  2367  014E  0BE9               	decfsz	??_delay60+2,f
  2368  014F  294A               	goto	u3247
  2369  0150  0000               	nop
  2370                           
  2371                           ;newmain.c: 292: Lcd_Clear();
  2372  0151  118A  20A4  118A   	fcall	_Lcd_Clear
  2373                           
  2374                           ;newmain.c: 293: Lcd_Set_Cursor(1,1);
  2375  0154  01F4               	clrf	Lcd_Set_Cursor@b
  2376  0155  0AF4               	incf	Lcd_Set_Cursor@b,f
  2377  0156  3001               	movlw	1
  2378  0157  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  2379                           
  2380                           ;newmain.c: 294: Lcd_Write_String("current temp:");
  2381  015A  3043               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2382  015B  158A  2181  118A   	fcall	_Lcd_Write_String
  2383                           
  2384                           ;newmain.c: 295: Lcd_Set_Cursor(1,14);
  2385  015E  300E               	movlw	14
  2386  015F  1283               	bcf	3,5	;RP0=0, select bank0
  2387  0160  1303               	bcf	3,6	;RP1=0, select bank0
  2388  0161  00E7               	movwf	??_delay60
  2389  0162  0867               	movf	??_delay60,w
  2390  0163  00F4               	movwf	Lcd_Set_Cursor@b
  2391  0164  3001               	movlw	1
  2392  0165  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  2393                           
  2394                           ;newmain.c: 296: lcddisplay(tempval);
  2395  0168  1283               	bcf	3,5	;RP0=0, select bank0
  2396  0169  1303               	bcf	3,6	;RP1=0, select bank0
  2397  016A  086B               	movf	delay60@tempval+1,w
  2398  016B  00F9               	movwf	lcddisplay@num+1
  2399  016C  086A               	movf	delay60@tempval,w
  2400  016D  00F8               	movwf	lcddisplay@num
  2401  016E  158A  2358  118A   	fcall	_lcddisplay
  2402                           
  2403                           ;newmain.c: 297: Lcd_Set_Cursor(2,1);
  2404  0171  01F4               	clrf	Lcd_Set_Cursor@b
  2405  0172  0AF4               	incf	Lcd_Set_Cursor@b,f
  2406  0173  3002               	movlw	2
  2407  0174  158A  22CE  118A   	fcall	_Lcd_Set_Cursor
  2408                           
  2409                           ;newmain.c: 298: lcddisplay(i);
  2410  0177  1283               	bcf	3,5	;RP0=0, select bank0
  2411  0178  1303               	bcf	3,6	;RP1=0, select bank0
  2412  0179  086D               	movf	delay60@i+1,w
  2413  017A  00F9               	movwf	lcddisplay@num+1
  2414  017B  086C               	movf	delay60@i,w
  2415  017C  00F8               	movwf	lcddisplay@num
  2416  017D  158A  2358  118A   	fcall	_lcddisplay
  2417                           
  2418                           ;newmain.c: 299: _delay((unsigned long)((1000)*(4000000/4000.0)));
  2419  0180  3006               	movlw	6
  2420  0181  1283               	bcf	3,5	;RP0=0, select bank0
  2421  0182  1303               	bcf	3,6	;RP1=0, select bank0
  2422  0183  00E9               	movwf	??_delay60+2
  2423  0184  3013               	movlw	19
  2424  0185  00E8               	movwf	??_delay60+1
  2425  0186  30AD               	movlw	173
  2426  0187  00E7               	movwf	??_delay60
  2427  0188                     u3257:	
  2428  0188  0BE7               	decfsz	??_delay60,f
  2429  0189  2988               	goto	u3257
  2430  018A  0BE8               	decfsz	??_delay60+1,f
  2431  018B  2988               	goto	u3257
  2432  018C  0BE9               	decfsz	??_delay60+2,f
  2433  018D  2988               	goto	u3257
  2434  018E  0000               	nop
  2435  018F  3001               	movlw	1
  2436  0190  1283               	bcf	3,5	;RP0=0, select bank0
  2437  0191  1303               	bcf	3,6	;RP1=0, select bank0
  2438  0192  07EC               	addwf	delay60@i,f
  2439  0193  1803               	skipnc
  2440  0194  0AED               	incf	delay60@i+1,f
  2441  0195  3000               	movlw	0
  2442  0196  07ED               	addwf	delay60@i+1,f
  2443  0197  28B0               	goto	L1
  2444  0198                     __end_of_delay60:	
  2445                           
  2446                           	psect	text2
  2447  0B58                     __ptext2:	
  2448 ;; *************** function _lcddisplay *****************
  2449 ;; Defined at:
  2450 ;;		line 125 in file "newmain.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;  num             2    8[COMMON] unsigned int 
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;		None
  2455 ;; Return value:  Size  Location     Type
  2456 ;;                  1    wreg      void 
  2457 ;; Registers used:
  2458 ;;		wreg, status,2, status,0, pclath, cstack
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/0
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2464 ;;      Params:         2       0       0       0
  2465 ;;      Locals:         0       0       0       0
  2466 ;;      Temps:          0       0       0       0
  2467 ;;      Totals:         2       0       0       0
  2468 ;;Total ram usage:        2 bytes
  2469 ;; Hardware stack levels used:    1
  2470 ;; Hardware stack levels required when called:    2
  2471 ;; This function calls:
  2472 ;;		_Lcd_Write_Char
  2473 ;;		___lwdiv
  2474 ;;		___lwmod
  2475 ;; This function is called by:
  2476 ;;		_delay60
  2477 ;;		_main
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           
  2482                           ;psect for function _lcddisplay
  2483  0B58                     _lcddisplay:	
  2484                           
  2485                           ;newmain.c: 129: num=num%10000;
  2486                           
  2487                           ;incstack = 0
  2488                           ; Regs used in _lcddisplay: [wreg+status,2+status,0+pclath+cstack]
  2489  0B58  3010               	movlw	16
  2490  0B59  00F0               	movwf	___lwmod@divisor
  2491  0B5A  3027               	movlw	39
  2492  0B5B  00F1               	movwf	___lwmod@divisor+1
  2493  0B5C  0879               	movf	lcddisplay@num+1,w
  2494  0B5D  00F3               	movwf	___lwmod@dividend+1
  2495  0B5E  0878               	movf	lcddisplay@num,w
  2496  0B5F  00F2               	movwf	___lwmod@dividend
  2497  0B60  158A  21ED  158A   	fcall	___lwmod
  2498  0B63  0871               	movf	?___lwmod+1,w
  2499  0B64  00F9               	movwf	lcddisplay@num+1
  2500  0B65  0870               	movf	?___lwmod,w
  2501  0B66  00F8               	movwf	lcddisplay@num
  2502                           
  2503                           ;newmain.c: 132: num=num%1000;
  2504  0B67  30E8               	movlw	232
  2505  0B68  00F0               	movwf	___lwmod@divisor
  2506  0B69  3003               	movlw	3
  2507  0B6A  00F1               	movwf	___lwmod@divisor+1
  2508  0B6B  0879               	movf	lcddisplay@num+1,w
  2509  0B6C  00F3               	movwf	___lwmod@dividend+1
  2510  0B6D  0878               	movf	lcddisplay@num,w
  2511  0B6E  00F2               	movwf	___lwmod@dividend
  2512  0B6F  158A  21ED  158A   	fcall	___lwmod
  2513  0B72  0871               	movf	?___lwmod+1,w
  2514  0B73  00F9               	movwf	lcddisplay@num+1
  2515  0B74  0870               	movf	?___lwmod,w
  2516  0B75  00F8               	movwf	lcddisplay@num
  2517                           
  2518                           ;newmain.c: 135: num=num%100;
  2519  0B76  3064               	movlw	100
  2520  0B77  00F0               	movwf	___lwmod@divisor
  2521  0B78  3000               	movlw	0
  2522  0B79  00F1               	movwf	___lwmod@divisor+1
  2523  0B7A  0879               	movf	lcddisplay@num+1,w
  2524  0B7B  00F3               	movwf	___lwmod@dividend+1
  2525  0B7C  0878               	movf	lcddisplay@num,w
  2526  0B7D  00F2               	movwf	___lwmod@dividend
  2527  0B7E  158A  21ED  158A   	fcall	___lwmod
  2528  0B81  0871               	movf	?___lwmod+1,w
  2529  0B82  00F9               	movwf	lcddisplay@num+1
  2530  0B83  0870               	movf	?___lwmod,w
  2531  0B84  00F8               	movwf	lcddisplay@num
  2532                           
  2533                           ;newmain.c: 137: Lcd_Write_Char((num/10)+0x30);
  2534  0B85  300A               	movlw	10
  2535  0B86  00F0               	movwf	___lwdiv@divisor
  2536  0B87  3000               	movlw	0
  2537  0B88  00F1               	movwf	___lwdiv@divisor+1
  2538  0B89  0879               	movf	lcddisplay@num+1,w
  2539  0B8A  00F3               	movwf	___lwdiv@dividend+1
  2540  0B8B  0878               	movf	lcddisplay@num,w
  2541  0B8C  00F2               	movwf	___lwdiv@dividend
  2542  0B8D  158A  2252  158A   	fcall	___lwdiv
  2543  0B90  0870               	movf	?___lwdiv,w
  2544  0B91  3E30               	addlw	48
  2545  0B92  158A  221F  158A   	fcall	_Lcd_Write_Char
  2546                           
  2547                           ;newmain.c: 139: Lcd_Write_Char((num%10)+0x30);
  2548  0B95  300A               	movlw	10
  2549  0B96  00F0               	movwf	___lwmod@divisor
  2550  0B97  3000               	movlw	0
  2551  0B98  00F1               	movwf	___lwmod@divisor+1
  2552  0B99  0879               	movf	lcddisplay@num+1,w
  2553  0B9A  00F3               	movwf	___lwmod@dividend+1
  2554  0B9B  0878               	movf	lcddisplay@num,w
  2555  0B9C  00F2               	movwf	___lwmod@dividend
  2556  0B9D  158A  21ED  158A   	fcall	___lwmod
  2557  0BA0  0870               	movf	?___lwmod,w
  2558  0BA1  3E30               	addlw	48
  2559  0BA2  158A  221F         	fcall	_Lcd_Write_Char
  2560  0BA4  0008               	return
  2561  0BA5                     __end_of_lcddisplay:	
  2562                           
  2563                           	psect	text3
  2564  09ED                     __ptext3:	
  2565 ;; *************** function ___lwmod *****************
  2566 ;; Defined at:
  2567 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lwmod.c"
  2568 ;; Parameters:    Size  Location     Type
  2569 ;;  divisor         2    0[COMMON] unsigned int 
  2570 ;;  dividend        2    2[COMMON] unsigned int 
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;  counter         1    5[COMMON] unsigned char 
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  2    0[COMMON] unsigned int 
  2575 ;; Registers used:
  2576 ;;		wreg, status,2, status,0
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2582 ;;      Params:         4       0       0       0
  2583 ;;      Locals:         1       0       0       0
  2584 ;;      Temps:          1       0       0       0
  2585 ;;      Totals:         6       0       0       0
  2586 ;;Total ram usage:        6 bytes
  2587 ;; Hardware stack levels used:    1
  2588 ;; This function calls:
  2589 ;;		Nothing
  2590 ;; This function is called by:
  2591 ;;		_lcddisplay
  2592 ;; This function uses a non-reentrant model
  2593 ;;
  2594                           
  2595                           
  2596                           ;psect for function ___lwmod
  2597  09ED                     ___lwmod:	
  2598                           
  2599                           ;incstack = 0
  2600                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2601  09ED  0870               	movf	___lwmod@divisor,w
  2602  09EE  0471               	iorwf	___lwmod@divisor+1,w
  2603  09EF  1903               	btfsc	3,2
  2604  09F0  2A1A               	goto	l2041
  2605  09F1  01F5               	clrf	___lwmod@counter
  2606  09F2  0AF5               	incf	___lwmod@counter,f
  2607  09F3                     l2031:	
  2608  09F3  1BF1               	btfsc	___lwmod@divisor+1,7
  2609  09F4  2A01               	goto	l2033
  2610  09F5  3001               	movlw	1
  2611  09F6                     u2665:	
  2612  09F6  1003               	clrc
  2613  09F7  0DF0               	rlf	___lwmod@divisor,f
  2614  09F8  0DF1               	rlf	___lwmod@divisor+1,f
  2615  09F9  3EFF               	addlw	-1
  2616  09FA  1D03               	skipz
  2617  09FB  29F6               	goto	u2665
  2618  09FC  3001               	movlw	1
  2619  09FD  00F4               	movwf	??___lwmod
  2620  09FE  0874               	movf	??___lwmod,w
  2621  09FF  07F5               	addwf	___lwmod@counter,f
  2622  0A00  29F3               	goto	l2031
  2623  0A01                     l2033:	
  2624  0A01  0871               	movf	___lwmod@divisor+1,w
  2625  0A02  0273               	subwf	___lwmod@dividend+1,w
  2626  0A03  1D03               	skipz
  2627  0A04  2A07               	goto	u2685
  2628  0A05  0870               	movf	___lwmod@divisor,w
  2629  0A06  0272               	subwf	___lwmod@dividend,w
  2630  0A07                     u2685:	
  2631  0A07  1C03               	skipc
  2632  0A08  2A0F               	goto	l2037
  2633  0A09  0870               	movf	___lwmod@divisor,w
  2634  0A0A  02F2               	subwf	___lwmod@dividend,f
  2635  0A0B  0871               	movf	___lwmod@divisor+1,w
  2636  0A0C  1C03               	skipc
  2637  0A0D  03F3               	decf	___lwmod@dividend+1,f
  2638  0A0E  02F3               	subwf	___lwmod@dividend+1,f
  2639  0A0F                     l2037:	
  2640  0A0F  3001               	movlw	1
  2641  0A10                     u2695:	
  2642  0A10  1003               	clrc
  2643  0A11  0CF1               	rrf	___lwmod@divisor+1,f
  2644  0A12  0CF0               	rrf	___lwmod@divisor,f
  2645  0A13  3EFF               	addlw	-1
  2646  0A14  1D03               	skipz
  2647  0A15  2A10               	goto	u2695
  2648  0A16  3001               	movlw	1
  2649  0A17  02F5               	subwf	___lwmod@counter,f
  2650  0A18  1D03               	btfss	3,2
  2651  0A19  2A01               	goto	l2033
  2652  0A1A                     l2041:	
  2653  0A1A  0873               	movf	___lwmod@dividend+1,w
  2654  0A1B  00F1               	movwf	?___lwmod+1
  2655  0A1C  0872               	movf	___lwmod@dividend,w
  2656  0A1D  00F0               	movwf	?___lwmod
  2657  0A1E  0008               	return
  2658  0A1F                     __end_of___lwmod:	
  2659                           
  2660                           	psect	text4
  2661  0A52                     __ptext4:	
  2662 ;; *************** function ___lwdiv *****************
  2663 ;; Defined at:
  2664 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;  divisor         2    0[COMMON] unsigned int 
  2667 ;;  dividend        2    2[COMMON] unsigned int 
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;  quotient        2    5[COMMON] unsigned int 
  2670 ;;  counter         1    7[COMMON] unsigned char 
  2671 ;; Return value:  Size  Location     Type
  2672 ;;                  2    0[COMMON] unsigned int 
  2673 ;; Registers used:
  2674 ;;		wreg, status,2, status,0
  2675 ;; Tracked objects:
  2676 ;;		On entry : 0/0
  2677 ;;		On exit  : 0/0
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2680 ;;      Params:         4       0       0       0
  2681 ;;      Locals:         3       0       0       0
  2682 ;;      Temps:          1       0       0       0
  2683 ;;      Totals:         8       0       0       0
  2684 ;;Total ram usage:        8 bytes
  2685 ;; Hardware stack levels used:    1
  2686 ;; This function calls:
  2687 ;;		Nothing
  2688 ;; This function is called by:
  2689 ;;		_lcddisplay
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693                           
  2694                           ;psect for function ___lwdiv
  2695  0A52                     ___lwdiv:	
  2696                           
  2697                           ;incstack = 0
  2698                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2699  0A52  01F5               	clrf	___lwdiv@quotient
  2700  0A53  01F6               	clrf	___lwdiv@quotient+1
  2701  0A54  0870               	movf	___lwdiv@divisor,w
  2702  0A55  0471               	iorwf	___lwdiv@divisor+1,w
  2703  0A56  1903               	btfsc	3,2
  2704  0A57  2A89               	goto	l2019
  2705  0A58  01F7               	clrf	___lwdiv@counter
  2706  0A59  0AF7               	incf	___lwdiv@counter,f
  2707  0A5A                     l2007:	
  2708  0A5A  1BF1               	btfsc	___lwdiv@divisor+1,7
  2709  0A5B  2A68               	goto	l2009
  2710  0A5C  3001               	movlw	1
  2711  0A5D                     u2595:	
  2712  0A5D  1003               	clrc
  2713  0A5E  0DF0               	rlf	___lwdiv@divisor,f
  2714  0A5F  0DF1               	rlf	___lwdiv@divisor+1,f
  2715  0A60  3EFF               	addlw	-1
  2716  0A61  1D03               	skipz
  2717  0A62  2A5D               	goto	u2595
  2718  0A63  3001               	movlw	1
  2719  0A64  00F4               	movwf	??___lwdiv
  2720  0A65  0874               	movf	??___lwdiv,w
  2721  0A66  07F7               	addwf	___lwdiv@counter,f
  2722  0A67  2A5A               	goto	l2007
  2723  0A68                     l2009:	
  2724  0A68  3001               	movlw	1
  2725  0A69                     u2615:	
  2726  0A69  1003               	clrc
  2727  0A6A  0DF5               	rlf	___lwdiv@quotient,f
  2728  0A6B  0DF6               	rlf	___lwdiv@quotient+1,f
  2729  0A6C  3EFF               	addlw	-1
  2730  0A6D  1D03               	skipz
  2731  0A6E  2A69               	goto	u2615
  2732  0A6F  0871               	movf	___lwdiv@divisor+1,w
  2733  0A70  0273               	subwf	___lwdiv@dividend+1,w
  2734  0A71  1D03               	skipz
  2735  0A72  2A75               	goto	u2625
  2736  0A73  0870               	movf	___lwdiv@divisor,w
  2737  0A74  0272               	subwf	___lwdiv@dividend,w
  2738  0A75                     u2625:	
  2739  0A75  1C03               	skipc
  2740  0A76  2A7E               	goto	l2015
  2741  0A77  0870               	movf	___lwdiv@divisor,w
  2742  0A78  02F2               	subwf	___lwdiv@dividend,f
  2743  0A79  0871               	movf	___lwdiv@divisor+1,w
  2744  0A7A  1C03               	skipc
  2745  0A7B  03F3               	decf	___lwdiv@dividend+1,f
  2746  0A7C  02F3               	subwf	___lwdiv@dividend+1,f
  2747  0A7D  1475               	bsf	___lwdiv@quotient,0
  2748  0A7E                     l2015:	
  2749  0A7E  3001               	movlw	1
  2750  0A7F                     u2635:	
  2751  0A7F  1003               	clrc
  2752  0A80  0CF1               	rrf	___lwdiv@divisor+1,f
  2753  0A81  0CF0               	rrf	___lwdiv@divisor,f
  2754  0A82  3EFF               	addlw	-1
  2755  0A83  1D03               	skipz
  2756  0A84  2A7F               	goto	u2635
  2757  0A85  3001               	movlw	1
  2758  0A86  02F7               	subwf	___lwdiv@counter,f
  2759  0A87  1D03               	btfss	3,2
  2760  0A88  2A68               	goto	l2009
  2761  0A89                     l2019:	
  2762  0A89  0876               	movf	___lwdiv@quotient+1,w
  2763  0A8A  00F1               	movwf	?___lwdiv+1
  2764  0A8B  0875               	movf	___lwdiv@quotient,w
  2765  0A8C  00F0               	movwf	?___lwdiv
  2766  0A8D  0008               	return
  2767  0A8E                     __end_of___lwdiv:	
  2768                           
  2769                           	psect	text5
  2770  02A0                     __ptext5:	
  2771 ;; *************** function _getTemp *****************
  2772 ;; Defined at:
  2773 ;;		line 169 in file "newmain.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;  C               3   16[BANK1 ] float 
  2778 ;;  K               3    3[BANK1 ] float 
  2779 ;;  F               3    0[BANK1 ] float 
  2780 ;;  adcVal          2   19[BANK1 ] int 
  2781 ;;  i               2   14[BANK1 ] int 
  2782 ;;  numSamples      2   12[BANK1 ] int 
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  2   61[BANK0 ] int 
  2785 ;; Registers used:
  2786 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2792 ;;      Params:         0       2       0       0
  2793 ;;      Locals:         0       0      21       0
  2794 ;;      Temps:          0       2       0       0
  2795 ;;      Totals:         0       4      21       0
  2796 ;;Total ram usage:       25 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    4
  2799 ;; This function calls:
  2800 ;;		_ADC_Read
  2801 ;;		___awdiv
  2802 ;;		___awtoft
  2803 ;;		___ftadd
  2804 ;;		___ftdiv
  2805 ;;		___ftmul
  2806 ;;		___fttol
  2807 ;;		_log
  2808 ;; This function is called by:
  2809 ;;		_delay60
  2810 ;;		_main
  2811 ;; This function uses a non-reentrant model
  2812 ;;
  2813                           
  2814                           
  2815                           ;psect for function _getTemp
  2816  02A0                     _getTemp:	
  2817                           
  2818                           ;newmain.c: 174: const float invBeta = 1.00 / 3380.00;
  2819                           ;newmain.c: 176: const float adcMax = 1023.00;
  2820                           ;newmain.c: 177: const float invT0 = 1.00 / 298.15;
  2821                           ;newmain.c: 179: int adcVal, i, numSamples = 5;
  2822                           
  2823                           ;incstack = 0
  2824                           ; Regs used in _getTemp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2825  02A0  3005               	movlw	5
  2826  02A1  1683               	bsf	3,5	;RP0=1, select bank1
  2827  02A2  1303               	bcf	3,6	;RP1=0, select bank1
  2828  02A3  00AC               	movwf	getTemp@numSamples^(0+128)
  2829  02A4  3000               	movlw	0
  2830  02A5  00AD               	movwf	(getTemp@numSamples^(0+128)+1)
  2831                           
  2832                           ;newmain.c: 180: float K, C, F;
  2833                           ;newmain.c: 182: adcVal = 0;
  2834  02A6  01B3               	clrf	getTemp@adcVal^(0+128)
  2835  02A7  01B4               	clrf	(getTemp@adcVal+1)^(0+128)
  2836                           
  2837                           ;newmain.c: 183: for (i = 0; i < numSamples; i++)
  2838  02A8  01AE               	clrf	getTemp@i^(0+128)
  2839  02A9  01AF               	clrf	(getTemp@i+1)^(0+128)
  2840  02AA                     l2089:	
  2841  02AA  082F               	movf	(getTemp@i+1)^(0+128),w
  2842  02AB  3A80               	xorlw	128
  2843  02AC  1283               	bcf	3,5	;RP0=0, select bank0
  2844  02AD  1303               	bcf	3,6	;RP1=0, select bank0
  2845  02AE  00DF               	movwf	??_getTemp
  2846  02AF  1683               	bsf	3,5	;RP0=1, select bank1
  2847  02B0  1303               	bcf	3,6	;RP1=0, select bank1
  2848  02B1  082D               	movf	(getTemp@numSamples+1)^(0+128),w
  2849  02B2  3A80               	xorlw	128
  2850  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  2851  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  2852  02B5  025F               	subwf	??_getTemp,w
  2853  02B6  1D03               	skipz
  2854  02B7  2ABC               	goto	u2765
  2855  02B8  1683               	bsf	3,5	;RP0=1, select bank1
  2856  02B9  1303               	bcf	3,6	;RP1=0, select bank1
  2857  02BA  082C               	movf	getTemp@numSamples^(0+128),w
  2858  02BB  022E               	subwf	getTemp@i^(0+128),w
  2859  02BC                     u2765:	
  2860  02BC  1803               	btfsc	3,0
  2861  02BD  2AE0               	goto	l2091
  2862                           
  2863                           ;newmain.c: 184: {
  2864                           ;newmain.c: 185: adcVal = adcVal + ADC_Read(0);
  2865  02BE  3000               	movlw	0
  2866  02BF  158A  21BD  118A   	fcall	_ADC_Read
  2867  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  2868  02C3  1303               	bcf	3,6	;RP1=0, select bank1
  2869  02C4  0833               	movf	getTemp@adcVal^(0+128),w
  2870  02C5  0770               	addwf	?_ADC_Read,w
  2871  02C6  00B3               	movwf	getTemp@adcVal^(0+128)
  2872  02C7  0834               	movf	(getTemp@adcVal+1)^(0+128),w
  2873  02C8  1803               	skipnc
  2874  02C9  0A34               	incf	(getTemp@adcVal+1)^(0+128),w
  2875  02CA  0771               	addwf	?_ADC_Read+1,w
  2876  02CB  00B4               	movwf	(getTemp@adcVal+1)^(0+128)
  2877                           
  2878                           ;newmain.c: 186: _delay((unsigned long)((10)*(4000000/4000.0)));
  2879  02CC  300D               	movlw	13
  2880  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  2881  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  2882  02CF  00E0               	movwf	??_getTemp+1
  2883  02D0  30FB               	movlw	251
  2884  02D1  00DF               	movwf	??_getTemp
  2885  02D2                     u3267:	
  2886  02D2  0BDF               	decfsz	??_getTemp,f
  2887  02D3  2AD2               	goto	u3267
  2888  02D4  0BE0               	decfsz	??_getTemp+1,f
  2889  02D5  2AD2               	goto	u3267
  2890  02D6  0000               	nop
  2891  02D7  3001               	movlw	1
  2892  02D8  1683               	bsf	3,5	;RP0=1, select bank1
  2893  02D9  1303               	bcf	3,6	;RP1=0, select bank1
  2894  02DA  07AE               	addwf	getTemp@i^(0+128),f
  2895  02DB  1803               	skipnc
  2896  02DC  0AAF               	incf	(getTemp@i+1)^(0+128),f
  2897  02DD  3000               	movlw	0
  2898  02DE  07AF               	addwf	(getTemp@i+1)^(0+128),f
  2899  02DF  2AAA               	goto	l2089
  2900  02E0                     l2091:	
  2901                           
  2902                           ;newmain.c: 187: }
  2903                           ;newmain.c: 188: adcVal = adcVal/5;
  2904  02E0  3005               	movlw	5
  2905  02E1  00F0               	movwf	___awdiv@divisor
  2906  02E2  3000               	movlw	0
  2907  02E3  00F1               	movwf	___awdiv@divisor+1
  2908  02E4  1683               	bsf	3,5	;RP0=1, select bank1
  2909  02E5  1303               	bcf	3,6	;RP1=0, select bank1
  2910  02E6  0834               	movf	(getTemp@adcVal+1)^(0+128),w
  2911  02E7  00F3               	movwf	___awdiv@dividend+1
  2912  02E8  0833               	movf	getTemp@adcVal^(0+128),w
  2913  02E9  00F2               	movwf	___awdiv@dividend
  2914  02EA  158A  23A5  118A   	fcall	___awdiv
  2915  02ED  0871               	movf	?___awdiv+1,w
  2916  02EE  1683               	bsf	3,5	;RP0=1, select bank1
  2917  02EF  1303               	bcf	3,6	;RP1=0, select bank1
  2918  02F0  00B4               	movwf	(getTemp@adcVal+1)^(0+128)
  2919  02F1  0870               	movf	?___awdiv,w
  2920  02F2  00B3               	movwf	getTemp@adcVal^(0+128)
  2921                           
  2922                           ;newmain.c: 189: K = 1.00 / (invT0 + invBeta*(log ( adcMax / (float) adcVal - 1.00)));
  2923  02F3  3000               	movlw	0
  2924  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  2925  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  2926  02F6  00B0               	movwf	___ftadd@f1
  2927  02F7  3080               	movlw	128
  2928  02F8  00B1               	movwf	___ftadd@f1+1
  2929  02F9  30BF               	movlw	191
  2930  02FA  00B2               	movwf	___ftadd@f1+2
  2931  02FB  1683               	bsf	3,5	;RP0=1, select bank1
  2932  02FC  1303               	bcf	3,6	;RP1=0, select bank1
  2933  02FD  0834               	movf	(getTemp@adcVal+1)^(0+128),w
  2934  02FE  00F9               	movwf	___awtoft@c+1
  2935  02FF  0833               	movf	getTemp@adcVal^(0+128),w
  2936  0300  00F8               	movwf	___awtoft@c
  2937  0301  158A  219D  118A   	fcall	___awtoft
  2938  0304  0878               	movf	?___awtoft,w
  2939  0305  1283               	bcf	3,5	;RP0=0, select bank0
  2940  0306  1303               	bcf	3,6	;RP1=0, select bank0
  2941  0307  00A0               	movwf	___ftdiv@f2
  2942  0308  0879               	movf	?___awtoft+1,w
  2943  0309  00A1               	movwf	___ftdiv@f2+1
  2944  030A  087A               	movf	?___awtoft+2,w
  2945  030B  00A2               	movwf	___ftdiv@f2+2
  2946  030C  3001               	movlw	low (getTemp@adcMax-__stringbase)
  2947  030D  0084               	movwf	4
  2948  030E  118A  2002  118A   	fcall	stringdir
  2949  0311  00A3               	movwf	___ftdiv@f1
  2950  0312  118A  2002  118A   	fcall	stringdir
  2951  0315  00A4               	movwf	___ftdiv@f1+1
  2952  0316  118A  2002  118A   	fcall	stringdir
  2953  0319  00A5               	movwf	___ftdiv@f1+2
  2954  031A  158A  25B8  118A   	fcall	___ftdiv
  2955  031D  1283               	bcf	3,5	;RP0=0, select bank0
  2956  031E  1303               	bcf	3,6	;RP1=0, select bank0
  2957  031F  0820               	movf	?___ftdiv,w
  2958  0320  00B3               	movwf	___ftadd@f2
  2959  0321  0821               	movf	?___ftdiv+1,w
  2960  0322  00B4               	movwf	___ftadd@f2+1
  2961  0323  0822               	movf	?___ftdiv+2,w
  2962  0324  00B5               	movwf	___ftadd@f2+2
  2963  0325  118A  2198  118A   	fcall	___ftadd
  2964  0328  1283               	bcf	3,5	;RP0=0, select bank0
  2965  0329  1303               	bcf	3,6	;RP1=0, select bank0
  2966  032A  0830               	movf	?___ftadd,w
  2967  032B  1683               	bsf	3,5	;RP0=1, select bank1
  2968  032C  1303               	bcf	3,6	;RP1=0, select bank1
  2969  032D  00A6               	movwf	_getTemp$607^(0+128)
  2970  032E  1283               	bcf	3,5	;RP0=0, select bank0
  2971  032F  1303               	bcf	3,6	;RP1=0, select bank0
  2972  0330  0831               	movf	?___ftadd+1,w
  2973  0331  1683               	bsf	3,5	;RP0=1, select bank1
  2974  0332  1303               	bcf	3,6	;RP1=0, select bank1
  2975  0333  00A7               	movwf	(_getTemp$607+1)^(0+128)
  2976  0334  1283               	bcf	3,5	;RP0=0, select bank0
  2977  0335  1303               	bcf	3,6	;RP1=0, select bank0
  2978  0336  0832               	movf	?___ftadd+2,w
  2979  0337  1683               	bsf	3,5	;RP0=1, select bank1
  2980  0338  1303               	bcf	3,6	;RP1=0, select bank1
  2981  0339  00A8               	movwf	(_getTemp$607+2)^(0+128)
  2982                           
  2983                           ;newmain.c: 189: K = 1.00 / (invT0 + invBeta*(log ( adcMax / (float) adcVal - 1.00)));
  2984  033A  0826               	movf	_getTemp$607^(0+128),w
  2985  033B  1283               	bcf	3,5	;RP0=0, select bank0
  2986  033C  1303               	bcf	3,6	;RP1=0, select bank0
  2987  033D  00D7               	movwf	log@x
  2988  033E  1683               	bsf	3,5	;RP0=1, select bank1
  2989  033F  1303               	bcf	3,6	;RP1=0, select bank1
  2990  0340  0827               	movf	(_getTemp$607+1)^(0+128),w
  2991  0341  1283               	bcf	3,5	;RP0=0, select bank0
  2992  0342  1303               	bcf	3,6	;RP1=0, select bank0
  2993  0343  00D8               	movwf	log@x+1
  2994  0344  1683               	bsf	3,5	;RP0=1, select bank1
  2995  0345  1303               	bcf	3,6	;RP1=0, select bank1
  2996  0346  0828               	movf	(_getTemp$607+2)^(0+128),w
  2997  0347  1283               	bcf	3,5	;RP0=0, select bank0
  2998  0348  1303               	bcf	3,6	;RP1=0, select bank0
  2999  0349  00D9               	movwf	log@x+2
  3000  034A  158A  266F  118A   	fcall	_log
  3001  034D  1283               	bcf	3,5	;RP0=0, select bank0
  3002  034E  1303               	bcf	3,6	;RP1=0, select bank0
  3003  034F  0857               	movf	?_log,w
  3004  0350  1683               	bsf	3,5	;RP0=1, select bank1
  3005  0351  1303               	bcf	3,6	;RP1=0, select bank1
  3006  0352  00A9               	movwf	_getTemp$608^(0+128)
  3007  0353  1283               	bcf	3,5	;RP0=0, select bank0
  3008  0354  1303               	bcf	3,6	;RP1=0, select bank0
  3009  0355  0858               	movf	?_log+1,w
  3010  0356  1683               	bsf	3,5	;RP0=1, select bank1
  3011  0357  1303               	bcf	3,6	;RP1=0, select bank1
  3012  0358  00AA               	movwf	(_getTemp$608+1)^(0+128)
  3013  0359  1283               	bcf	3,5	;RP0=0, select bank0
  3014  035A  1303               	bcf	3,6	;RP1=0, select bank0
  3015  035B  0859               	movf	?_log+2,w
  3016  035C  1683               	bsf	3,5	;RP0=1, select bank1
  3017  035D  1303               	bcf	3,6	;RP1=0, select bank1
  3018  035E  00AB               	movwf	(_getTemp$608+2)^(0+128)
  3019                           
  3020                           ;newmain.c: 189: K = 1.00 / (invT0 + invBeta*(log ( adcMax / (float) adcVal - 1.00)));
  3021  035F  3022               	movlw	low (getTemp@invT0-__stringbase)
  3022  0360  0084               	movwf	4
  3023  0361  118A  2002  118A   	fcall	stringdir
  3024  0364  1283               	bcf	3,5	;RP0=0, select bank0
  3025  0365  1303               	bcf	3,6	;RP1=0, select bank0
  3026  0366  00B0               	movwf	___ftadd@f1
  3027  0367  118A  2002  118A   	fcall	stringdir
  3028  036A  00B1               	movwf	___ftadd@f1+1
  3029  036B  118A  2002  118A   	fcall	stringdir
  3030  036E  00B2               	movwf	___ftadd@f1+2
  3031  036F  3004               	movlw	low (getTemp@invBeta-__stringbase)
  3032  0370  0084               	movwf	4
  3033  0371  118A  2002  118A   	fcall	stringdir
  3034  0374  00BD               	movwf	___ftmul@f1
  3035  0375  118A  2002  118A   	fcall	stringdir
  3036  0378  00BE               	movwf	___ftmul@f1+1
  3037  0379  118A  2002  118A   	fcall	stringdir
  3038  037C  00BF               	movwf	___ftmul@f1+2
  3039  037D  1683               	bsf	3,5	;RP0=1, select bank1
  3040  037E  1303               	bcf	3,6	;RP1=0, select bank1
  3041  037F  0829               	movf	_getTemp$608^(0+128),w
  3042  0380  1283               	bcf	3,5	;RP0=0, select bank0
  3043  0381  1303               	bcf	3,6	;RP1=0, select bank0
  3044  0382  00C0               	movwf	___ftmul@f2
  3045  0383  1683               	bsf	3,5	;RP0=1, select bank1
  3046  0384  1303               	bcf	3,6	;RP1=0, select bank1
  3047  0385  082A               	movf	(_getTemp$608+1)^(0+128),w
  3048  0386  1283               	bcf	3,5	;RP0=0, select bank0
  3049  0387  1303               	bcf	3,6	;RP1=0, select bank0
  3050  0388  00C1               	movwf	___ftmul@f2+1
  3051  0389  1683               	bsf	3,5	;RP0=1, select bank1
  3052  038A  1303               	bcf	3,6	;RP1=0, select bank1
  3053  038B  082B               	movf	(_getTemp$608+2)^(0+128),w
  3054  038C  1283               	bcf	3,5	;RP0=0, select bank0
  3055  038D  1303               	bcf	3,6	;RP1=0, select bank0
  3056  038E  00C2               	movwf	___ftmul@f2+2
  3057  038F  158A  272E  118A   	fcall	___ftmul
  3058  0392  1283               	bcf	3,5	;RP0=0, select bank0
  3059  0393  1303               	bcf	3,6	;RP1=0, select bank0
  3060  0394  083D               	movf	?___ftmul,w
  3061  0395  00B3               	movwf	___ftadd@f2
  3062  0396  083E               	movf	?___ftmul+1,w
  3063  0397  00B4               	movwf	___ftadd@f2+1
  3064  0398  083F               	movf	?___ftmul+2,w
  3065  0399  00B5               	movwf	___ftadd@f2+2
  3066  039A  118A  2198  118A   	fcall	___ftadd
  3067  039D  1283               	bcf	3,5	;RP0=0, select bank0
  3068  039E  1303               	bcf	3,6	;RP1=0, select bank0
  3069  039F  0830               	movf	?___ftadd,w
  3070  03A0  00A0               	movwf	___ftdiv@f2
  3071  03A1  0831               	movf	?___ftadd+1,w
  3072  03A2  00A1               	movwf	___ftdiv@f2+1
  3073  03A3  0832               	movf	?___ftadd+2,w
  3074  03A4  00A2               	movwf	___ftdiv@f2+2
  3075  03A5  3000               	movlw	0
  3076  03A6  00A3               	movwf	___ftdiv@f1
  3077  03A7  3080               	movlw	128
  3078  03A8  00A4               	movwf	___ftdiv@f1+1
  3079  03A9  303F               	movlw	63
  3080  03AA  00A5               	movwf	___ftdiv@f1+2
  3081  03AB  158A  25B8  118A   	fcall	___ftdiv
  3082  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  3083  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  3084  03B0  0820               	movf	?___ftdiv,w
  3085  03B1  1683               	bsf	3,5	;RP0=1, select bank1
  3086  03B2  1303               	bcf	3,6	;RP1=0, select bank1
  3087  03B3  00A3               	movwf	getTemp@K^(0+128)
  3088  03B4  1283               	bcf	3,5	;RP0=0, select bank0
  3089  03B5  1303               	bcf	3,6	;RP1=0, select bank0
  3090  03B6  0821               	movf	?___ftdiv+1,w
  3091  03B7  1683               	bsf	3,5	;RP0=1, select bank1
  3092  03B8  1303               	bcf	3,6	;RP1=0, select bank1
  3093  03B9  00A4               	movwf	(getTemp@K+1)^(0+128)
  3094  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  3095  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  3096  03BC  0822               	movf	?___ftdiv+2,w
  3097  03BD  1683               	bsf	3,5	;RP0=1, select bank1
  3098  03BE  1303               	bcf	3,6	;RP1=0, select bank1
  3099  03BF  00A5               	movwf	(getTemp@K+2)^(0+128)
  3100                           
  3101                           ;newmain.c: 190: C = K - 273.15;
  3102  03C0  3093               	movlw	147
  3103  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  3104  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  3105  03C3  00B0               	movwf	___ftadd@f1
  3106  03C4  3088               	movlw	136
  3107  03C5  00B1               	movwf	___ftadd@f1+1
  3108  03C6  30C3               	movlw	195
  3109  03C7  00B2               	movwf	___ftadd@f1+2
  3110  03C8  1683               	bsf	3,5	;RP0=1, select bank1
  3111  03C9  1303               	bcf	3,6	;RP1=0, select bank1
  3112  03CA  0823               	movf	getTemp@K^(0+128),w
  3113  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  3114  03CC  1303               	bcf	3,6	;RP1=0, select bank0
  3115  03CD  00B3               	movwf	___ftadd@f2
  3116  03CE  1683               	bsf	3,5	;RP0=1, select bank1
  3117  03CF  1303               	bcf	3,6	;RP1=0, select bank1
  3118  03D0  0824               	movf	(getTemp@K+1)^(0+128),w
  3119  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  3120  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  3121  03D3  00B4               	movwf	___ftadd@f2+1
  3122  03D4  1683               	bsf	3,5	;RP0=1, select bank1
  3123  03D5  1303               	bcf	3,6	;RP1=0, select bank1
  3124  03D6  0825               	movf	(getTemp@K+2)^(0+128),w
  3125  03D7  1283               	bcf	3,5	;RP0=0, select bank0
  3126  03D8  1303               	bcf	3,6	;RP1=0, select bank0
  3127  03D9  00B5               	movwf	___ftadd@f2+2
  3128  03DA  118A  2198  118A   	fcall	___ftadd
  3129  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  3130  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  3131  03DF  0830               	movf	?___ftadd,w
  3132  03E0  1683               	bsf	3,5	;RP0=1, select bank1
  3133  03E1  1303               	bcf	3,6	;RP1=0, select bank1
  3134  03E2  00B0               	movwf	getTemp@C^(0+128)
  3135  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  3136  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  3137  03E5  0831               	movf	?___ftadd+1,w
  3138  03E6  1683               	bsf	3,5	;RP0=1, select bank1
  3139  03E7  1303               	bcf	3,6	;RP1=0, select bank1
  3140  03E8  00B1               	movwf	(getTemp@C+1)^(0+128)
  3141  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  3142  03EA  1303               	bcf	3,6	;RP1=0, select bank0
  3143  03EB  0832               	movf	?___ftadd+2,w
  3144  03EC  1683               	bsf	3,5	;RP0=1, select bank1
  3145  03ED  1303               	bcf	3,6	;RP1=0, select bank1
  3146  03EE  00B2               	movwf	(getTemp@C+2)^(0+128)
  3147                           
  3148                           ;newmain.c: 191: F = ((9.0*C)/5.00) + 32.00;
  3149  03EF  3000               	movlw	0
  3150  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  3151  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  3152  03F2  00B0               	movwf	___ftadd@f1
  3153  03F3  3000               	movlw	0
  3154  03F4  00B1               	movwf	___ftadd@f1+1
  3155  03F5  3042               	movlw	66
  3156  03F6  00B2               	movwf	___ftadd@f1+2
  3157  03F7  3000               	movlw	0
  3158  03F8  00A0               	movwf	___ftdiv@f2
  3159  03F9  30A0               	movlw	160
  3160  03FA  00A1               	movwf	___ftdiv@f2+1
  3161  03FB  3040               	movlw	64
  3162  03FC  00A2               	movwf	___ftdiv@f2+2
  3163  03FD  3000               	movlw	0
  3164  03FE  00BD               	movwf	___ftmul@f1
  3165  03FF  3010               	movlw	16
  3166  0400  00BE               	movwf	___ftmul@f1+1
  3167  0401  3041               	movlw	65
  3168  0402  00BF               	movwf	___ftmul@f1+2
  3169  0403  1683               	bsf	3,5	;RP0=1, select bank1
  3170  0404  1303               	bcf	3,6	;RP1=0, select bank1
  3171  0405  0830               	movf	getTemp@C^(0+128),w
  3172  0406  1283               	bcf	3,5	;RP0=0, select bank0
  3173  0407  1303               	bcf	3,6	;RP1=0, select bank0
  3174  0408  00C0               	movwf	___ftmul@f2
  3175  0409  1683               	bsf	3,5	;RP0=1, select bank1
  3176  040A  1303               	bcf	3,6	;RP1=0, select bank1
  3177  040B  0831               	movf	(getTemp@C+1)^(0+128),w
  3178  040C  1283               	bcf	3,5	;RP0=0, select bank0
  3179  040D  1303               	bcf	3,6	;RP1=0, select bank0
  3180  040E  00C1               	movwf	___ftmul@f2+1
  3181  040F  1683               	bsf	3,5	;RP0=1, select bank1
  3182  0410  1303               	bcf	3,6	;RP1=0, select bank1
  3183  0411  0832               	movf	(getTemp@C+2)^(0+128),w
  3184  0412  1283               	bcf	3,5	;RP0=0, select bank0
  3185  0413  1303               	bcf	3,6	;RP1=0, select bank0
  3186  0414  00C2               	movwf	___ftmul@f2+2
  3187  0415  158A  272E  118A   	fcall	___ftmul
  3188  0418  1283               	bcf	3,5	;RP0=0, select bank0
  3189  0419  1303               	bcf	3,6	;RP1=0, select bank0
  3190  041A  083D               	movf	?___ftmul,w
  3191  041B  00A3               	movwf	___ftdiv@f1
  3192  041C  083E               	movf	?___ftmul+1,w
  3193  041D  00A4               	movwf	___ftdiv@f1+1
  3194  041E  083F               	movf	?___ftmul+2,w
  3195  041F  00A5               	movwf	___ftdiv@f1+2
  3196  0420  158A  25B8  118A   	fcall	___ftdiv
  3197  0423  1283               	bcf	3,5	;RP0=0, select bank0
  3198  0424  1303               	bcf	3,6	;RP1=0, select bank0
  3199  0425  0820               	movf	?___ftdiv,w
  3200  0426  00B3               	movwf	___ftadd@f2
  3201  0427  0821               	movf	?___ftdiv+1,w
  3202  0428  00B4               	movwf	___ftadd@f2+1
  3203  0429  0822               	movf	?___ftdiv+2,w
  3204  042A  00B5               	movwf	___ftadd@f2+2
  3205  042B  118A  2198  118A   	fcall	___ftadd
  3206  042E  1283               	bcf	3,5	;RP0=0, select bank0
  3207  042F  1303               	bcf	3,6	;RP1=0, select bank0
  3208  0430  0830               	movf	?___ftadd,w
  3209  0431  1683               	bsf	3,5	;RP0=1, select bank1
  3210  0432  1303               	bcf	3,6	;RP1=0, select bank1
  3211  0433  00A0               	movwf	getTemp@F^(0+128)
  3212  0434  1283               	bcf	3,5	;RP0=0, select bank0
  3213  0435  1303               	bcf	3,6	;RP1=0, select bank0
  3214  0436  0831               	movf	?___ftadd+1,w
  3215  0437  1683               	bsf	3,5	;RP0=1, select bank1
  3216  0438  1303               	bcf	3,6	;RP1=0, select bank1
  3217  0439  00A1               	movwf	(getTemp@F+1)^(0+128)
  3218  043A  1283               	bcf	3,5	;RP0=0, select bank0
  3219  043B  1303               	bcf	3,6	;RP1=0, select bank0
  3220  043C  0832               	movf	?___ftadd+2,w
  3221  043D  1683               	bsf	3,5	;RP0=1, select bank1
  3222  043E  1303               	bcf	3,6	;RP1=0, select bank1
  3223  043F  00A2               	movwf	(getTemp@F+2)^(0+128)
  3224                           
  3225                           ;newmain.c: 193: return C;
  3226  0440  0830               	movf	getTemp@C^(0+128),w
  3227  0441  00F0               	movwf	___fttol@f1
  3228  0442  0831               	movf	(getTemp@C+1)^(0+128),w
  3229  0443  00F1               	movwf	___fttol@f1+1
  3230  0444  0832               	movf	(getTemp@C+2)^(0+128),w
  3231  0445  00F2               	movwf	___fttol@f1+2
  3232  0446  158A  252C         	fcall	___fttol
  3233  0448  0871               	movf	?___fttol+1,w
  3234  0449  1283               	bcf	3,5	;RP0=0, select bank0
  3235  044A  1303               	bcf	3,6	;RP1=0, select bank0
  3236  044B  00DE               	movwf	?_getTemp+1
  3237  044C  0870               	movf	?___fttol,w
  3238  044D  00DD               	movwf	?_getTemp
  3239  044E  0008               	return
  3240  044F                     __end_of_getTemp:	
  3241                           
  3242                           	psect	text6
  3243  0E6F                     __ptext6:	
  3244 ;; *************** function _log *****************
  3245 ;; Defined at:
  3246 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\log.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;  x               3   55[BANK0 ] int 
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;  exponent        2   59[BANK0 ] int 
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  3   55[BANK0 ] int 
  3253 ;; Registers used:
  3254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3260 ;;      Params:         0       3       0       0
  3261 ;;      Locals:         0       2       0       0
  3262 ;;      Temps:          0       1       0       0
  3263 ;;      Totals:         0       6       0       0
  3264 ;;Total ram usage:        6 bytes
  3265 ;; Hardware stack levels used:    1
  3266 ;; Hardware stack levels required when called:    3
  3267 ;; This function calls:
  3268 ;;		___awtoft
  3269 ;;		___ftadd
  3270 ;;		___ftge
  3271 ;;		___ftmul
  3272 ;;		_eval_poly
  3273 ;;		_frexp
  3274 ;; This function is called by:
  3275 ;;		_getTemp
  3276 ;;		_checktemp
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           
  3281                           ;psect for function _log
  3282  0E6F                     _log:	
  3283                           
  3284                           ;incstack = 0
  3285                           ; Regs used in _log: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3286  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  3287  0E70  1303               	bcf	3,6	;RP1=0, select bank0
  3288  0E71  0857               	movf	log@x,w
  3289  0E72  00F0               	movwf	___ftge@ff1
  3290  0E73  0858               	movf	log@x+1,w
  3291  0E74  00F1               	movwf	___ftge@ff1+1
  3292  0E75  0859               	movf	log@x+2,w
  3293  0E76  00F2               	movwf	___ftge@ff1+2
  3294  0E77  3000               	movlw	0
  3295  0E78  00F3               	movwf	___ftge@ff2
  3296  0E79  3000               	movlw	0
  3297  0E7A  00F4               	movwf	___ftge@ff2+1
  3298  0E7B  3000               	movlw	0
  3299  0E7C  00F5               	movwf	___ftge@ff2+2
  3300  0E7D  158A  23FE  158A   	fcall	___ftge
  3301  0E80  1803               	btfsc	3,0
  3302  0E81  2E91               	goto	l1853
  3303  0E82  3021               	movlw	33
  3304  0E83  1683               	bsf	3,5	;RP0=1, select bank1
  3305  0E84  1303               	bcf	3,6	;RP1=0, select bank1
  3306  0E85  00CA               	movwf	_errno^(0+128)
  3307  0E86  3000               	movlw	0
  3308  0E87  00CB               	movwf	(_errno^(0+128)+1)
  3309  0E88  3000               	movlw	0
  3310  0E89  1283               	bcf	3,5	;RP0=0, select bank0
  3311  0E8A  1303               	bcf	3,6	;RP1=0, select bank0
  3312  0E8B  00D7               	movwf	?_log
  3313  0E8C  3000               	movlw	0
  3314  0E8D  00D8               	movwf	?_log+1
  3315  0E8E  3000               	movlw	0
  3316  0E8F  00D9               	movwf	?_log+2
  3317  0E90  0008               	return
  3318  0E91                     l1853:	
  3319  0E91  1283               	bcf	3,5	;RP0=0, select bank0
  3320  0E92  1303               	bcf	3,6	;RP1=0, select bank0
  3321  0E93  0859               	movf	log@x+2,w
  3322  0E94  0458               	iorwf	log@x+1,w
  3323  0E95  0457               	iorwf	log@x,w
  3324  0E96  1D03               	skipz
  3325  0E97  2EA7               	goto	l1859
  3326  0E98  3022               	movlw	34
  3327  0E99  1683               	bsf	3,5	;RP0=1, select bank1
  3328  0E9A  1303               	bcf	3,6	;RP1=0, select bank1
  3329  0E9B  00CA               	movwf	_errno^(0+128)
  3330  0E9C  3000               	movlw	0
  3331  0E9D  00CB               	movwf	(_errno^(0+128)+1)
  3332  0E9E  3000               	movlw	0
  3333  0E9F  1283               	bcf	3,5	;RP0=0, select bank0
  3334  0EA0  1303               	bcf	3,6	;RP1=0, select bank0
  3335  0EA1  00D7               	movwf	?_log
  3336  0EA2  3000               	movlw	0
  3337  0EA3  00D8               	movwf	?_log+1
  3338  0EA4  3000               	movlw	0
  3339  0EA5  00D9               	movwf	?_log+2
  3340  0EA6  0008               	return
  3341  0EA7                     l1859:	
  3342  0EA7  3000               	movlw	0
  3343  0EA8  00B0               	movwf	___ftadd@f1
  3344  0EA9  3080               	movlw	128
  3345  0EAA  00B1               	movwf	___ftadd@f1+1
  3346  0EAB  30BF               	movlw	191
  3347  0EAC  00B2               	movwf	___ftadd@f1+2
  3348  0EAD  3000               	movlw	0
  3349  0EAE  00BD               	movwf	___ftmul@f1
  3350  0EAF  3000               	movlw	0
  3351  0EB0  00BE               	movwf	___ftmul@f1+1
  3352  0EB1  3040               	movlw	64
  3353  0EB2  00BF               	movwf	___ftmul@f1+2
  3354  0EB3  305B               	movlw	(low (log@exponent| 0))& (0+255)
  3355  0EB4  00DA               	movwf	??_log
  3356  0EB5  085A               	movf	??_log,w
  3357  0EB6  00F3               	movwf	frexp@eptr
  3358  0EB7  0857               	movf	log@x,w
  3359  0EB8  00F0               	movwf	frexp@value
  3360  0EB9  0858               	movf	log@x+1,w
  3361  0EBA  00F1               	movwf	frexp@value+1
  3362  0EBB  0859               	movf	log@x+2,w
  3363  0EBC  00F2               	movwf	frexp@value+2
  3364  0EBD  158A  228E  158A   	fcall	_frexp
  3365  0EC0  0870               	movf	?_frexp,w
  3366  0EC1  1283               	bcf	3,5	;RP0=0, select bank0
  3367  0EC2  1303               	bcf	3,6	;RP1=0, select bank0
  3368  0EC3  00C0               	movwf	___ftmul@f2
  3369  0EC4  0871               	movf	?_frexp+1,w
  3370  0EC5  00C1               	movwf	___ftmul@f2+1
  3371  0EC6  0872               	movf	?_frexp+2,w
  3372  0EC7  00C2               	movwf	___ftmul@f2+2
  3373  0EC8  158A  272E  158A   	fcall	___ftmul
  3374  0ECB  1283               	bcf	3,5	;RP0=0, select bank0
  3375  0ECC  1303               	bcf	3,6	;RP1=0, select bank0
  3376  0ECD  083D               	movf	?___ftmul,w
  3377  0ECE  00B3               	movwf	___ftadd@f2
  3378  0ECF  083E               	movf	?___ftmul+1,w
  3379  0ED0  00B4               	movwf	___ftadd@f2+1
  3380  0ED1  083F               	movf	?___ftmul+2,w
  3381  0ED2  00B5               	movwf	___ftadd@f2+2
  3382  0ED3  118A  2198  158A   	fcall	___ftadd
  3383  0ED6  1283               	bcf	3,5	;RP0=0, select bank0
  3384  0ED7  1303               	bcf	3,6	;RP1=0, select bank0
  3385  0ED8  0830               	movf	?___ftadd,w
  3386  0ED9  00D7               	movwf	log@x
  3387  0EDA  0831               	movf	?___ftadd+1,w
  3388  0EDB  00D8               	movwf	log@x+1
  3389  0EDC  0832               	movf	?___ftadd+2,w
  3390  0EDD  00D9               	movwf	log@x+2
  3391  0EDE  30FF               	movlw	255
  3392  0EDF  07DB               	addwf	log@exponent,f
  3393  0EE0  1803               	skipnc
  3394  0EE1  0ADC               	incf	log@exponent+1,f
  3395  0EE2  30FF               	movlw	255
  3396  0EE3  07DC               	addwf	log@exponent+1,f
  3397  0EE4  0857               	movf	log@x,w
  3398  0EE5  00CD               	movwf	eval_poly@x
  3399  0EE6  0858               	movf	log@x+1,w
  3400  0EE7  00CE               	movwf	eval_poly@x+1
  3401  0EE8  0859               	movf	log@x+2,w
  3402  0EE9  00CF               	movwf	eval_poly@x+2
  3403  0EEA  3007               	movlw	(low ((log@coeff-__stringbase)| (0+32768)))& (0+255)
  3404  0EEB  00DA               	movwf	??_log
  3405  0EEC  085A               	movf	??_log,w
  3406  0EED  00D0               	movwf	eval_poly@d
  3407  0EEE  3008               	movlw	8
  3408  0EEF  00D1               	movwf	eval_poly@n
  3409  0EF0  3000               	movlw	0
  3410  0EF1  00D2               	movwf	eval_poly@n+1
  3411  0EF2  158A  245B  158A   	fcall	_eval_poly
  3412  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  3413  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  3414  0EF7  084D               	movf	?_eval_poly,w
  3415  0EF8  00D7               	movwf	log@x
  3416  0EF9  084E               	movf	?_eval_poly+1,w
  3417  0EFA  00D8               	movwf	log@x+1
  3418  0EFB  084F               	movf	?_eval_poly+2,w
  3419  0EFC  00D9               	movwf	log@x+2
  3420  0EFD  0857               	movf	log@x,w
  3421  0EFE  00B0               	movwf	___ftadd@f1
  3422  0EFF  0858               	movf	log@x+1,w
  3423  0F00  00B1               	movwf	___ftadd@f1+1
  3424  0F01  0859               	movf	log@x+2,w
  3425  0F02  00B2               	movwf	___ftadd@f1+2
  3426  0F03  3072               	movlw	114
  3427  0F04  00BD               	movwf	___ftmul@f1
  3428  0F05  3031               	movlw	49
  3429  0F06  00BE               	movwf	___ftmul@f1+1
  3430  0F07  303F               	movlw	63
  3431  0F08  00BF               	movwf	___ftmul@f1+2
  3432  0F09  085C               	movf	log@exponent+1,w
  3433  0F0A  00F9               	movwf	___awtoft@c+1
  3434  0F0B  085B               	movf	log@exponent,w
  3435  0F0C  00F8               	movwf	___awtoft@c
  3436  0F0D  158A  219D  158A   	fcall	___awtoft
  3437  0F10  0878               	movf	?___awtoft,w
  3438  0F11  1283               	bcf	3,5	;RP0=0, select bank0
  3439  0F12  1303               	bcf	3,6	;RP1=0, select bank0
  3440  0F13  00C0               	movwf	___ftmul@f2
  3441  0F14  0879               	movf	?___awtoft+1,w
  3442  0F15  00C1               	movwf	___ftmul@f2+1
  3443  0F16  087A               	movf	?___awtoft+2,w
  3444  0F17  00C2               	movwf	___ftmul@f2+2
  3445  0F18  158A  272E  158A   	fcall	___ftmul
  3446  0F1B  1283               	bcf	3,5	;RP0=0, select bank0
  3447  0F1C  1303               	bcf	3,6	;RP1=0, select bank0
  3448  0F1D  083D               	movf	?___ftmul,w
  3449  0F1E  00B3               	movwf	___ftadd@f2
  3450  0F1F  083E               	movf	?___ftmul+1,w
  3451  0F20  00B4               	movwf	___ftadd@f2+1
  3452  0F21  083F               	movf	?___ftmul+2,w
  3453  0F22  00B5               	movwf	___ftadd@f2+2
  3454  0F23  118A  2198         	fcall	___ftadd
  3455  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  3456  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  3457  0F27  0830               	movf	?___ftadd,w
  3458  0F28  00D7               	movwf	?_log
  3459  0F29  0831               	movf	?___ftadd+1,w
  3460  0F2A  00D8               	movwf	?_log+1
  3461  0F2B  0832               	movf	?___ftadd+2,w
  3462  0F2C  00D9               	movwf	?_log+2
  3463  0F2D  0008               	return
  3464  0F2E                     __end_of_log:	
  3465                           
  3466                           	psect	text7
  3467  0A8E                     __ptext7:	
  3468 ;; *************** function _frexp *****************
  3469 ;; Defined at:
  3470 ;;		line 254 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\frexp.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;  value           3    0[COMMON] int 
  3473 ;;  eptr            1    3[COMMON] PTR int 
  3474 ;;		 -> log@exponent(2), 
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;		None
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  3    0[COMMON] PTR int 
  3479 ;; Registers used:
  3480 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3486 ;;      Params:         4       0       0       0
  3487 ;;      Locals:         0       0       0       0
  3488 ;;      Temps:          2       0       0       0
  3489 ;;      Totals:         6       0       0       0
  3490 ;;Total ram usage:        6 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; This function calls:
  3493 ;;		Nothing
  3494 ;; This function is called by:
  3495 ;;		_log
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           
  3500                           ;psect for function _frexp
  3501  0A8E                     _frexp:	
  3502                           
  3503                           ;incstack = 0
  3504                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  3505  0A8E  0872               	movf	frexp@value+2,w
  3506  0A8F  0471               	iorwf	frexp@value+1,w
  3507  0A90  0470               	iorwf	frexp@value,w
  3508  0A91  1D03               	skipz
  3509  0A92  2AA0               	goto	l1779
  3510  0A93  0873               	movf	frexp@eptr,w
  3511  0A94  0084               	movwf	4
  3512  0A95  1383               	bcf	3,7	;select IRP bank0
  3513  0A96  0180               	clrf	0
  3514  0A97  0A84               	incf	4,f
  3515  0A98  0180               	clrf	0
  3516  0A99  3000               	movlw	0
  3517  0A9A  00F0               	movwf	?_frexp
  3518  0A9B  3000               	movlw	0
  3519  0A9C  00F1               	movwf	?_frexp+1
  3520  0A9D  3000               	movlw	0
  3521  0A9E  00F2               	movwf	?_frexp+2
  3522  0A9F  0008               	return
  3523  0AA0                     l1779:	
  3524  0AA0  0872               	movf	frexp@value+2,w
  3525  0AA1  397F               	andlw	127
  3526  0AA2  00F4               	movwf	??_frexp
  3527  0AA3  01F5               	clrf	??_frexp+1
  3528  0AA4  1003               	clrc
  3529  0AA5  0DF4               	rlf	??_frexp,f
  3530  0AA6  0DF5               	rlf	??_frexp+1,f
  3531  0AA7  0873               	movf	frexp@eptr,w
  3532  0AA8  0084               	movwf	4
  3533  0AA9  0874               	movf	??_frexp,w
  3534  0AAA  1383               	bcf	3,7	;select IRP bank0
  3535  0AAB  0080               	movwf	0
  3536  0AAC  0A84               	incf	4,f
  3537  0AAD  0875               	movf	??_frexp+1,w
  3538  0AAE  0080               	movwf	0
  3539  0AAF  0D71               	rlf	frexp@value+1,w
  3540  0AB0  0D71               	rlf	frexp@value+1,w
  3541  0AB1  3901               	andlw	1
  3542  0AB2  00F4               	movwf	??_frexp
  3543  0AB3  01F5               	clrf	??_frexp+1
  3544  0AB4  0873               	movf	frexp@eptr,w
  3545  0AB5  0084               	movwf	4
  3546  0AB6  0874               	movf	??_frexp,w
  3547  0AB7  0480               	iorwf	0,f
  3548  0AB8  0A84               	incf	4,f
  3549  0AB9  0875               	movf	??_frexp+1,w
  3550  0ABA  0480               	iorwf	0,f
  3551  0ABB  0873               	movf	frexp@eptr,w
  3552  0ABC  0084               	movwf	4
  3553  0ABD  3082               	movlw	130
  3554  0ABE  0780               	addwf	0,f
  3555  0ABF  0F84               	incfsz	4,f
  3556  0AC0  0800               	movf	0,w
  3557  0AC1  1803               	skipnc
  3558  0AC2  0A00               	incf	0,w
  3559  0AC3  00FF               	movwf	127
  3560  0AC4  30FF               	movlw	255
  3561  0AC5  077F               	addwf	127,w
  3562  0AC6  0080               	movwf	0
  3563  0AC7  0384               	decf	4,f
  3564  0AC8  0872               	movf	frexp@value+2,w
  3565  0AC9  3980               	andlw	-128
  3566  0ACA  383F               	iorlw	63
  3567  0ACB  00F2               	movwf	frexp@value+2
  3568  0ACC  13F1               	bcf	frexp@value+1,7
  3569  0ACD  0008               	return
  3570  0ACE                     __end_of_frexp:	
  3571                           
  3572                           	psect	text8
  3573  0C5B                     __ptext8:	
  3574 ;; *************** function _eval_poly *****************
  3575 ;; Defined at:
  3576 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\evalpoly.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;  x               3   45[BANK0 ] PTR int 
  3579 ;;  d               1   48[BANK0 ] PTR const 
  3580 ;;		 -> log@coeff(27), 
  3581 ;;  n               2   49[BANK0 ] int 
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;  res             3   52[BANK0 ] int 
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  3   45[BANK0 ] int 
  3586 ;; Registers used:
  3587 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3593 ;;      Params:         0       6       0       0
  3594 ;;      Locals:         0       3       0       0
  3595 ;;      Temps:          0       1       0       0
  3596 ;;      Totals:         0      10       0       0
  3597 ;;Total ram usage:       10 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; Hardware stack levels required when called:    2
  3600 ;; This function calls:
  3601 ;;		___bmul
  3602 ;;		___ftadd
  3603 ;;		___ftmul
  3604 ;; This function is called by:
  3605 ;;		_log
  3606 ;; This function uses a non-reentrant model
  3607 ;;
  3608                           
  3609                           
  3610                           ;psect for function _eval_poly
  3611  0C5B                     _eval_poly:	
  3612                           
  3613                           ;incstack = 0
  3614                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3615  0C5B  3003               	movlw	3
  3616  0C5C  1283               	bcf	3,5	;RP0=0, select bank0
  3617  0C5D  1303               	bcf	3,6	;RP1=0, select bank0
  3618  0C5E  00D3               	movwf	??_eval_poly
  3619  0C5F  0853               	movf	??_eval_poly,w
  3620  0C60  00F0               	movwf	___bmul@multiplicand
  3621  0C61  0851               	movf	eval_poly@n,w
  3622  0C62  158A  213E  158A   	fcall	___bmul
  3623  0C65  1283               	bcf	3,5	;RP0=0, select bank0
  3624  0C66  1303               	bcf	3,6	;RP1=0, select bank0
  3625  0C67  0750               	addwf	eval_poly@d,w
  3626  0C68  0084               	movwf	4
  3627  0C69  118A  2002  158A   	fcall	stringdir
  3628  0C6C  00D4               	movwf	eval_poly@res
  3629  0C6D  118A  2002  158A   	fcall	stringdir
  3630  0C70  00D5               	movwf	eval_poly@res+1
  3631  0C71  118A  2002  158A   	fcall	stringdir
  3632  0C74                     L2:	
  3633  0C74  00D6               	movwf	eval_poly@res+2
  3634  0C75  0851               	movf	eval_poly@n,w
  3635  0C76  0452               	iorwf	eval_poly@n+1,w
  3636  0C77  1903               	btfsc	3,2
  3637  0C78  2CB9               	goto	l1797
  3638  0C79  3003               	movlw	3
  3639  0C7A  00D3               	movwf	??_eval_poly
  3640  0C7B  0853               	movf	??_eval_poly,w
  3641  0C7C  00F0               	movwf	___bmul@multiplicand
  3642  0C7D  30FF               	movlw	255
  3643  0C7E  07D1               	addwf	eval_poly@n,f
  3644  0C7F  1803               	skipnc
  3645  0C80  0AD2               	incf	eval_poly@n+1,f
  3646  0C81  30FF               	movlw	255
  3647  0C82  07D2               	addwf	eval_poly@n+1,f
  3648  0C83  0851               	movf	eval_poly@n,w
  3649  0C84  158A  213E  158A   	fcall	___bmul
  3650  0C87  1283               	bcf	3,5	;RP0=0, select bank0
  3651  0C88  1303               	bcf	3,6	;RP1=0, select bank0
  3652  0C89  0750               	addwf	eval_poly@d,w
  3653  0C8A  0084               	movwf	4
  3654  0C8B  118A  2002  158A   	fcall	stringdir
  3655  0C8E  00B0               	movwf	___ftadd@f1
  3656  0C8F  118A  2002  158A   	fcall	stringdir
  3657  0C92  00B1               	movwf	___ftadd@f1+1
  3658  0C93  118A  2002  158A   	fcall	stringdir
  3659  0C96  00B2               	movwf	___ftadd@f1+2
  3660  0C97  0854               	movf	eval_poly@res,w
  3661  0C98  00BD               	movwf	___ftmul@f1
  3662  0C99  0855               	movf	eval_poly@res+1,w
  3663  0C9A  00BE               	movwf	___ftmul@f1+1
  3664  0C9B  0856               	movf	eval_poly@res+2,w
  3665  0C9C  00BF               	movwf	___ftmul@f1+2
  3666  0C9D  084D               	movf	eval_poly@x,w
  3667  0C9E  00C0               	movwf	___ftmul@f2
  3668  0C9F  084E               	movf	eval_poly@x+1,w
  3669  0CA0  00C1               	movwf	___ftmul@f2+1
  3670  0CA1  084F               	movf	eval_poly@x+2,w
  3671  0CA2  00C2               	movwf	___ftmul@f2+2
  3672  0CA3  158A  272E  158A   	fcall	___ftmul
  3673  0CA6  1283               	bcf	3,5	;RP0=0, select bank0
  3674  0CA7  1303               	bcf	3,6	;RP1=0, select bank0
  3675  0CA8  083D               	movf	?___ftmul,w
  3676  0CA9  00B3               	movwf	___ftadd@f2
  3677  0CAA  083E               	movf	?___ftmul+1,w
  3678  0CAB  00B4               	movwf	___ftadd@f2+1
  3679  0CAC  083F               	movf	?___ftmul+2,w
  3680  0CAD  00B5               	movwf	___ftadd@f2+2
  3681  0CAE  118A  2198  158A   	fcall	___ftadd
  3682  0CB1  1283               	bcf	3,5	;RP0=0, select bank0
  3683  0CB2  1303               	bcf	3,6	;RP1=0, select bank0
  3684  0CB3  0830               	movf	?___ftadd,w
  3685  0CB4  00D4               	movwf	eval_poly@res
  3686  0CB5  0831               	movf	?___ftadd+1,w
  3687  0CB6  00D5               	movwf	eval_poly@res+1
  3688  0CB7  0832               	movf	?___ftadd+2,w
  3689  0CB8  2C74               	goto	L2
  3690  0CB9                     l1797:	
  3691  0CB9  0854               	movf	eval_poly@res,w
  3692  0CBA  00CD               	movwf	?_eval_poly
  3693  0CBB  0855               	movf	eval_poly@res+1,w
  3694  0CBC  00CE               	movwf	?_eval_poly+1
  3695  0CBD  0856               	movf	eval_poly@res+2,w
  3696  0CBE  00CF               	movwf	?_eval_poly+2
  3697  0CBF  0008               	return
  3698  0CC0                     __end_of_eval_poly:	
  3699                           
  3700                           	psect	text9
  3701  0F2E                     __ptext9:	
  3702 ;; *************** function ___ftmul *****************
  3703 ;; Defined at:
  3704 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\ftmul.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;  f1              3   29[BANK0 ] float 
  3707 ;;  f2              3   32[BANK0 ] float 
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;  f3_as_produc    3   40[BANK0 ] unsigned um
  3710 ;;  sign            1   44[BANK0 ] unsigned char 
  3711 ;;  cntr            1   43[BANK0 ] unsigned char 
  3712 ;;  exp             1   39[BANK0 ] unsigned char 
  3713 ;; Return value:  Size  Location     Type
  3714 ;;                  3   29[BANK0 ] float 
  3715 ;; Registers used:
  3716 ;;		wreg, status,2, status,0, pclath, cstack
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/0
  3719 ;;		On exit  : 0/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3722 ;;      Params:         0       6       0       0
  3723 ;;      Locals:         0       6       0       0
  3724 ;;      Temps:          0       4       0       0
  3725 ;;      Totals:         0      16       0       0
  3726 ;;Total ram usage:       16 bytes
  3727 ;; Hardware stack levels used:    1
  3728 ;; Hardware stack levels required when called:    1
  3729 ;; This function calls:
  3730 ;;		___ftpack
  3731 ;; This function is called by:
  3732 ;;		_getTemp
  3733 ;;		_log
  3734 ;;		_eval_poly
  3735 ;;		_checktemp
  3736 ;; This function uses a non-reentrant model
  3737 ;;
  3738                           
  3739                           
  3740                           ;psect for function ___ftmul
  3741  0F2E                     ___ftmul:	
  3742                           
  3743                           ;incstack = 0
  3744                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  3745  0F2E  1283               	bcf	3,5	;RP0=0, select bank0
  3746  0F2F  1303               	bcf	3,6	;RP1=0, select bank0
  3747  0F30  083D               	movf	___ftmul@f1,w
  3748  0F31  00C3               	movwf	??___ftmul
  3749  0F32  083E               	movf	___ftmul@f1+1,w
  3750  0F33  00C4               	movwf	??___ftmul+1
  3751  0F34  083F               	movf	___ftmul@f1+2,w
  3752  0F35  00C5               	movwf	??___ftmul+2
  3753  0F36  1003               	clrc
  3754  0F37  0D44               	rlf	??___ftmul+1,w
  3755  0F38  0D45               	rlf	??___ftmul+2,w
  3756  0F39  00C6               	movwf	??___ftmul+3
  3757  0F3A  0846               	movf	??___ftmul+3,w
  3758  0F3B  00C7               	movwf	___ftmul@exp
  3759  0F3C  0847               	movf	___ftmul@exp,w
  3760  0F3D  1D03               	btfss	3,2
  3761  0F3E  2F46               	goto	l1685
  3762  0F3F  3000               	movlw	0
  3763  0F40  00BD               	movwf	?___ftmul
  3764  0F41  3000               	movlw	0
  3765  0F42  00BE               	movwf	?___ftmul+1
  3766  0F43  3000               	movlw	0
  3767  0F44  00BF               	movwf	?___ftmul+2
  3768  0F45  0008               	return
  3769  0F46                     l1685:	
  3770  0F46  0840               	movf	___ftmul@f2,w
  3771  0F47  00C3               	movwf	??___ftmul
  3772  0F48  0841               	movf	___ftmul@f2+1,w
  3773  0F49  00C4               	movwf	??___ftmul+1
  3774  0F4A  0842               	movf	___ftmul@f2+2,w
  3775  0F4B  00C5               	movwf	??___ftmul+2
  3776  0F4C  1003               	clrc
  3777  0F4D  0D44               	rlf	??___ftmul+1,w
  3778  0F4E  0D45               	rlf	??___ftmul+2,w
  3779  0F4F  00C6               	movwf	??___ftmul+3
  3780  0F50  0846               	movf	??___ftmul+3,w
  3781  0F51  00CC               	movwf	___ftmul@sign
  3782  0F52  084C               	movf	___ftmul@sign,w
  3783  0F53  1D03               	btfss	3,2
  3784  0F54  2F5C               	goto	l1691
  3785  0F55  3000               	movlw	0
  3786  0F56  00BD               	movwf	?___ftmul
  3787  0F57  3000               	movlw	0
  3788  0F58  00BE               	movwf	?___ftmul+1
  3789  0F59  3000               	movlw	0
  3790  0F5A  00BF               	movwf	?___ftmul+2
  3791  0F5B  0008               	return
  3792  0F5C                     l1691:	
  3793  0F5C  084C               	movf	___ftmul@sign,w
  3794  0F5D  3E7B               	addlw	123
  3795  0F5E  00C3               	movwf	??___ftmul
  3796  0F5F  0843               	movf	??___ftmul,w
  3797  0F60  07C7               	addwf	___ftmul@exp,f
  3798  0F61  083D               	movf	___ftmul@f1,w
  3799  0F62  00C3               	movwf	??___ftmul
  3800  0F63  083E               	movf	___ftmul@f1+1,w
  3801  0F64  00C4               	movwf	??___ftmul+1
  3802  0F65  083F               	movf	___ftmul@f1+2,w
  3803  0F66  00C5               	movwf	??___ftmul+2
  3804  0F67  3010               	movlw	16
  3805  0F68                     u2005:	
  3806  0F68  1003               	clrc
  3807  0F69  0CC5               	rrf	??___ftmul+2,f
  3808  0F6A  0CC4               	rrf	??___ftmul+1,f
  3809  0F6B  0CC3               	rrf	??___ftmul,f
  3810  0F6C  3EFF               	addlw	-1
  3811  0F6D  1D03               	skipz
  3812  0F6E  2F68               	goto	u2005
  3813  0F6F  0843               	movf	??___ftmul,w
  3814  0F70  00C6               	movwf	??___ftmul+3
  3815  0F71  0846               	movf	??___ftmul+3,w
  3816  0F72  00CC               	movwf	___ftmul@sign
  3817  0F73  0840               	movf	___ftmul@f2,w
  3818  0F74  00C3               	movwf	??___ftmul
  3819  0F75  0841               	movf	___ftmul@f2+1,w
  3820  0F76  00C4               	movwf	??___ftmul+1
  3821  0F77  0842               	movf	___ftmul@f2+2,w
  3822  0F78  00C5               	movwf	??___ftmul+2
  3823  0F79  3010               	movlw	16
  3824  0F7A                     u2015:	
  3825  0F7A  1003               	clrc
  3826  0F7B  0CC5               	rrf	??___ftmul+2,f
  3827  0F7C  0CC4               	rrf	??___ftmul+1,f
  3828  0F7D  0CC3               	rrf	??___ftmul,f
  3829  0F7E  3EFF               	addlw	-1
  3830  0F7F  1D03               	skipz
  3831  0F80  2F7A               	goto	u2015
  3832  0F81  0843               	movf	??___ftmul,w
  3833  0F82  00C6               	movwf	??___ftmul+3
  3834  0F83  0846               	movf	??___ftmul+3,w
  3835  0F84  06CC               	xorwf	___ftmul@sign,f
  3836  0F85  3080               	movlw	128
  3837  0F86  00C3               	movwf	??___ftmul
  3838  0F87  0843               	movf	??___ftmul,w
  3839  0F88  05CC               	andwf	___ftmul@sign,f
  3840  0F89  17BE               	bsf	___ftmul@f1+1,7
  3841  0F8A  17C1               	bsf	___ftmul@f2+1,7
  3842  0F8B  30FF               	movlw	255
  3843  0F8C  05C0               	andwf	___ftmul@f2,f
  3844  0F8D  30FF               	movlw	255
  3845  0F8E  05C1               	andwf	___ftmul@f2+1,f
  3846  0F8F  3000               	movlw	0
  3847  0F90  05C2               	andwf	___ftmul@f2+2,f
  3848  0F91  3000               	movlw	0
  3849  0F92  00C8               	movwf	___ftmul@f3_as_product
  3850  0F93  3000               	movlw	0
  3851  0F94  00C9               	movwf	___ftmul@f3_as_product+1
  3852  0F95  3000               	movlw	0
  3853  0F96  00CA               	movwf	___ftmul@f3_as_product+2
  3854  0F97  3007               	movlw	7
  3855  0F98  00C3               	movwf	??___ftmul
  3856  0F99  0843               	movf	??___ftmul,w
  3857  0F9A  00CB               	movwf	___ftmul@cntr
  3858  0F9B                     l1703:	
  3859  0F9B  1C3D               	btfss	___ftmul@f1,0
  3860  0F9C  2FAB               	goto	l1707
  3861  0F9D  0840               	movf	___ftmul@f2,w
  3862  0F9E  07C8               	addwf	___ftmul@f3_as_product,f
  3863  0F9F  0841               	movf	___ftmul@f2+1,w
  3864  0FA0  1103               	clrz
  3865  0FA1  1803               	skipnc
  3866  0FA2  0A41               	incf	___ftmul@f2+1,w
  3867  0FA3  1D03               	btfss	3,2
  3868  0FA4  07C9               	addwf	___ftmul@f3_as_product+1,f
  3869  0FA5  0842               	movf	___ftmul@f2+2,w
  3870  0FA6  1103               	clrz
  3871  0FA7  1803               	skipnc
  3872  0FA8  0A42               	incf	___ftmul@f2+2,w
  3873  0FA9  1D03               	btfss	3,2
  3874  0FAA  07CA               	addwf	___ftmul@f3_as_product+2,f
  3875  0FAB                     l1707:	
  3876  0FAB  3001               	movlw	1
  3877  0FAC                     u2045:	
  3878  0FAC  1003               	clrc
  3879  0FAD  0CBF               	rrf	___ftmul@f1+2,f
  3880  0FAE  0CBE               	rrf	___ftmul@f1+1,f
  3881  0FAF  0CBD               	rrf	___ftmul@f1,f
  3882  0FB0  3EFF               	addlw	-1
  3883  0FB1  1D03               	skipz
  3884  0FB2  2FAC               	goto	u2045
  3885  0FB3  3001               	movlw	1
  3886  0FB4                     u2055:	
  3887  0FB4  1003               	clrc
  3888  0FB5  0DC0               	rlf	___ftmul@f2,f
  3889  0FB6  0DC1               	rlf	___ftmul@f2+1,f
  3890  0FB7  0DC2               	rlf	___ftmul@f2+2,f
  3891  0FB8  3EFF               	addlw	-1
  3892  0FB9  1D03               	skipz
  3893  0FBA  2FB4               	goto	u2055
  3894  0FBB  3001               	movlw	1
  3895  0FBC  02CB               	subwf	___ftmul@cntr,f
  3896  0FBD  1D03               	btfss	3,2
  3897  0FBE  2F9B               	goto	l1703
  3898  0FBF  3009               	movlw	9
  3899  0FC0  00C3               	movwf	??___ftmul
  3900  0FC1  0843               	movf	??___ftmul,w
  3901  0FC2  00CB               	movwf	___ftmul@cntr
  3902  0FC3                     l1715:	
  3903  0FC3  1C3D               	btfss	___ftmul@f1,0
  3904  0FC4  2FD3               	goto	l1719
  3905  0FC5  0840               	movf	___ftmul@f2,w
  3906  0FC6  07C8               	addwf	___ftmul@f3_as_product,f
  3907  0FC7  0841               	movf	___ftmul@f2+1,w
  3908  0FC8  1103               	clrz
  3909  0FC9  1803               	skipnc
  3910  0FCA  0A41               	incf	___ftmul@f2+1,w
  3911  0FCB  1D03               	btfss	3,2
  3912  0FCC  07C9               	addwf	___ftmul@f3_as_product+1,f
  3913  0FCD  0842               	movf	___ftmul@f2+2,w
  3914  0FCE  1103               	clrz
  3915  0FCF  1803               	skipnc
  3916  0FD0  0A42               	incf	___ftmul@f2+2,w
  3917  0FD1  1D03               	btfss	3,2
  3918  0FD2  07CA               	addwf	___ftmul@f3_as_product+2,f
  3919  0FD3                     l1719:	
  3920  0FD3  3001               	movlw	1
  3921  0FD4                     u2095:	
  3922  0FD4  1003               	clrc
  3923  0FD5  0CBF               	rrf	___ftmul@f1+2,f
  3924  0FD6  0CBE               	rrf	___ftmul@f1+1,f
  3925  0FD7  0CBD               	rrf	___ftmul@f1,f
  3926  0FD8  3EFF               	addlw	-1
  3927  0FD9  1D03               	skipz
  3928  0FDA  2FD4               	goto	u2095
  3929  0FDB  3001               	movlw	1
  3930  0FDC                     u2105:	
  3931  0FDC  1003               	clrc
  3932  0FDD  0CCA               	rrf	___ftmul@f3_as_product+2,f
  3933  0FDE  0CC9               	rrf	___ftmul@f3_as_product+1,f
  3934  0FDF  0CC8               	rrf	___ftmul@f3_as_product,f
  3935  0FE0  3EFF               	addlw	-1
  3936  0FE1  1D03               	skipz
  3937  0FE2  2FDC               	goto	u2105
  3938  0FE3  3001               	movlw	1
  3939  0FE4  02CB               	subwf	___ftmul@cntr,f
  3940  0FE5  1D03               	btfss	3,2
  3941  0FE6  2FC3               	goto	l1715
  3942  0FE7  0848               	movf	___ftmul@f3_as_product,w
  3943  0FE8  00F0               	movwf	___ftpack@arg
  3944  0FE9  0849               	movf	___ftmul@f3_as_product+1,w
  3945  0FEA  00F1               	movwf	___ftpack@arg+1
  3946  0FEB  084A               	movf	___ftmul@f3_as_product+2,w
  3947  0FEC  00F2               	movwf	___ftpack@arg+2
  3948  0FED  0847               	movf	___ftmul@exp,w
  3949  0FEE  00C3               	movwf	??___ftmul
  3950  0FEF  0843               	movf	??___ftmul,w
  3951  0FF0  00F3               	movwf	___ftpack@exp
  3952  0FF1  084C               	movf	___ftmul@sign,w
  3953  0FF2  00C4               	movwf	??___ftmul+1
  3954  0FF3  0844               	movf	??___ftmul+1,w
  3955  0FF4  00F4               	movwf	___ftpack@sign
  3956  0FF5  158A  24C0         	fcall	___ftpack
  3957  0FF7  0870               	movf	?___ftpack,w
  3958  0FF8  1283               	bcf	3,5	;RP0=0, select bank0
  3959  0FF9  1303               	bcf	3,6	;RP1=0, select bank0
  3960  0FFA  00BD               	movwf	?___ftmul
  3961  0FFB  0871               	movf	?___ftpack+1,w
  3962  0FFC  00BE               	movwf	?___ftmul+1
  3963  0FFD  0872               	movf	?___ftpack+2,w
  3964  0FFE  00BF               	movwf	?___ftmul+2
  3965  0FFF  0008               	return
  3966  1000                     __end_of___ftmul:	
  3967                           
  3968                           	psect	text10
  3969  0198                     __ptext10:	
  3970 ;; *************** function ___ftadd *****************
  3971 ;; Defined at:
  3972 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\ftadd.c"
  3973 ;; Parameters:    Size  Location     Type
  3974 ;;  f1              3   16[BANK0 ] float 
  3975 ;;  f2              3   19[BANK0 ] float 
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;  exp1            1   28[BANK0 ] unsigned char 
  3978 ;;  exp2            1   27[BANK0 ] unsigned char 
  3979 ;;  sign            1   26[BANK0 ] unsigned char 
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  3   16[BANK0 ] float 
  3982 ;; Registers used:
  3983 ;;		wreg, status,2, status,0, pclath, cstack
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3989 ;;      Params:         0       6       0       0
  3990 ;;      Locals:         0       3       0       0
  3991 ;;      Temps:          0       4       0       0
  3992 ;;      Totals:         0      13       0       0
  3993 ;;Total ram usage:       13 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    1
  3996 ;; This function calls:
  3997 ;;		___ftpack
  3998 ;; This function is called by:
  3999 ;;		_getTemp
  4000 ;;		_log
  4001 ;;		_eval_poly
  4002 ;;		_checktemp
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           
  4007                           ;psect for function ___ftadd
  4008  0198                     ___ftadd:	
  4009                           
  4010                           ;incstack = 0
  4011                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4012  0198  1283               	bcf	3,5	;RP0=0, select bank0
  4013  0199  1303               	bcf	3,6	;RP1=0, select bank0
  4014  019A  0830               	movf	___ftadd@f1,w
  4015  019B  00B6               	movwf	??___ftadd
  4016  019C  0831               	movf	___ftadd@f1+1,w
  4017  019D  00B7               	movwf	??___ftadd+1
  4018  019E  0832               	movf	___ftadd@f1+2,w
  4019  019F  00B8               	movwf	??___ftadd+2
  4020  01A0  1003               	clrc
  4021  01A1  0D37               	rlf	??___ftadd+1,w
  4022  01A2  0D38               	rlf	??___ftadd+2,w
  4023  01A3  00B9               	movwf	??___ftadd+3
  4024  01A4  0839               	movf	??___ftadd+3,w
  4025  01A5  00BC               	movwf	___ftadd@exp1
  4026  01A6  0833               	movf	___ftadd@f2,w
  4027  01A7  00B6               	movwf	??___ftadd
  4028  01A8  0834               	movf	___ftadd@f2+1,w
  4029  01A9  00B7               	movwf	??___ftadd+1
  4030  01AA  0835               	movf	___ftadd@f2+2,w
  4031  01AB  00B8               	movwf	??___ftadd+2
  4032  01AC  1003               	clrc
  4033  01AD  0D37               	rlf	??___ftadd+1,w
  4034  01AE  0D38               	rlf	??___ftadd+2,w
  4035  01AF  00B9               	movwf	??___ftadd+3
  4036  01B0  0839               	movf	??___ftadd+3,w
  4037  01B1  00BB               	movwf	___ftadd@exp2
  4038  01B2  083C               	movf	___ftadd@exp1,w
  4039  01B3  1903               	btfsc	3,2
  4040  01B4  29C1               	goto	l1615
  4041  01B5  083B               	movf	___ftadd@exp2,w
  4042  01B6  023C               	subwf	___ftadd@exp1,w
  4043  01B7  1803               	skipnc
  4044  01B8  29C8               	goto	l1619
  4045  01B9  033C               	decf	___ftadd@exp1,w
  4046  01BA  3AFF               	xorlw	255
  4047  01BB  073B               	addwf	___ftadd@exp2,w
  4048  01BC  00B6               	movwf	??___ftadd
  4049  01BD  3019               	movlw	25
  4050  01BE  0236               	subwf	??___ftadd,w
  4051  01BF  1C03               	skipc
  4052  01C0  29C8               	goto	l1619
  4053  01C1                     l1615:	
  4054  01C1  0833               	movf	___ftadd@f2,w
  4055  01C2  00B0               	movwf	?___ftadd
  4056  01C3  0834               	movf	___ftadd@f2+1,w
  4057  01C4  00B1               	movwf	?___ftadd+1
  4058  01C5  0835               	movf	___ftadd@f2+2,w
  4059  01C6  00B2               	movwf	?___ftadd+2
  4060  01C7  0008               	return
  4061  01C8                     l1619:	
  4062  01C8  083B               	movf	___ftadd@exp2,w
  4063  01C9  1903               	btfsc	3,2
  4064  01CA  0008               	return
  4065  01CB  083C               	movf	___ftadd@exp1,w
  4066  01CC  023B               	subwf	___ftadd@exp2,w
  4067  01CD  1803               	skipnc
  4068  01CE  29D7               	goto	l1625
  4069  01CF  033B               	decf	___ftadd@exp2,w
  4070  01D0  3AFF               	xorlw	255
  4071  01D1  073C               	addwf	___ftadd@exp1,w
  4072  01D2  00B6               	movwf	??___ftadd
  4073  01D3  3019               	movlw	25
  4074  01D4  0236               	subwf	??___ftadd,w
  4075  01D5  1803               	btfsc	3,0
  4076  01D6  0008               	return
  4077  01D7                     l1625:	
  4078  01D7  3006               	movlw	6
  4079  01D8  00B6               	movwf	??___ftadd
  4080  01D9  0836               	movf	??___ftadd,w
  4081  01DA  00BA               	movwf	___ftadd@sign
  4082  01DB  1BB2               	btfsc	___ftadd@f1+2,7
  4083  01DC  17BA               	bsf	___ftadd@sign,7
  4084  01DD  1BB5               	btfsc	___ftadd@f2+2,7
  4085  01DE  173A               	bsf	___ftadd@sign,6
  4086  01DF  17B1               	bsf	___ftadd@f1+1,7
  4087  01E0  30FF               	movlw	255
  4088  01E1  05B0               	andwf	___ftadd@f1,f
  4089  01E2  30FF               	movlw	255
  4090  01E3  05B1               	andwf	___ftadd@f1+1,f
  4091  01E4  3000               	movlw	0
  4092  01E5  05B2               	andwf	___ftadd@f1+2,f
  4093  01E6  17B4               	bsf	___ftadd@f2+1,7
  4094  01E7  30FF               	movlw	255
  4095  01E8  05B3               	andwf	___ftadd@f2,f
  4096  01E9  30FF               	movlw	255
  4097  01EA  05B4               	andwf	___ftadd@f2+1,f
  4098  01EB  3000               	movlw	0
  4099  01EC  05B5               	andwf	___ftadd@f2+2,f
  4100  01ED  083B               	movf	___ftadd@exp2,w
  4101  01EE  023C               	subwf	___ftadd@exp1,w
  4102  01EF  1803               	skipnc
  4103  01F0  2A17               	goto	l1647
  4104  01F1                     l1637:	
  4105  01F1  3001               	movlw	1
  4106  01F2                     u1835:	
  4107  01F2  1003               	clrc
  4108  01F3  0DB3               	rlf	___ftadd@f2,f
  4109  01F4  0DB4               	rlf	___ftadd@f2+1,f
  4110  01F5  0DB5               	rlf	___ftadd@f2+2,f
  4111  01F6  3EFF               	addlw	-1
  4112  01F7  1D03               	skipz
  4113  01F8  29F2               	goto	u1835
  4114  01F9  3001               	movlw	1
  4115  01FA  02BB               	subwf	___ftadd@exp2,f
  4116  01FB  083B               	movf	___ftadd@exp2,w
  4117  01FC  063C               	xorwf	___ftadd@exp1,w
  4118  01FD  1903               	skipnz
  4119  01FE  2A12               	goto	l1645
  4120  01FF  3001               	movlw	1
  4121  0200  02BA               	subwf	___ftadd@sign,f
  4122  0201  083A               	movf	___ftadd@sign,w
  4123  0202  3907               	andlw	7
  4124  0203  1903               	btfsc	3,2
  4125  0204  2A12               	goto	l1645
  4126  0205  29F1               	goto	l1637
  4127  0206                     l1643:	
  4128  0206  3001               	movlw	1
  4129  0207                     u1865:	
  4130  0207  1003               	clrc
  4131  0208  0CB2               	rrf	___ftadd@f1+2,f
  4132  0209  0CB1               	rrf	___ftadd@f1+1,f
  4133  020A  0CB0               	rrf	___ftadd@f1,f
  4134  020B  3EFF               	addlw	-1
  4135  020C  1D03               	skipz
  4136  020D  2A07               	goto	u1865
  4137  020E  3001               	movlw	1
  4138  020F  00B6               	movwf	??___ftadd
  4139  0210  0836               	movf	??___ftadd,w
  4140  0211  07BC               	addwf	___ftadd@exp1,f
  4141  0212                     l1645:	
  4142  0212  083C               	movf	___ftadd@exp1,w
  4143  0213  063B               	xorwf	___ftadd@exp2,w
  4144  0214  1903               	btfsc	3,2
  4145  0215  2A40               	goto	l455
  4146  0216  2A06               	goto	l1643
  4147  0217                     l1647:	
  4148  0217  083C               	movf	___ftadd@exp1,w
  4149  0218  023B               	subwf	___ftadd@exp2,w
  4150  0219  1803               	skipnc
  4151  021A  2A40               	goto	l455
  4152  021B                     l1649:	
  4153  021B  3001               	movlw	1
  4154  021C                     u1895:	
  4155  021C  1003               	clrc
  4156  021D  0DB0               	rlf	___ftadd@f1,f
  4157  021E  0DB1               	rlf	___ftadd@f1+1,f
  4158  021F  0DB2               	rlf	___ftadd@f1+2,f
  4159  0220  3EFF               	addlw	-1
  4160  0221  1D03               	skipz
  4161  0222  2A1C               	goto	u1895
  4162  0223  3001               	movlw	1
  4163  0224  02BC               	subwf	___ftadd@exp1,f
  4164  0225  083B               	movf	___ftadd@exp2,w
  4165  0226  063C               	xorwf	___ftadd@exp1,w
  4166  0227  1903               	skipnz
  4167  0228  2A3C               	goto	l1657
  4168  0229  3001               	movlw	1
  4169  022A  02BA               	subwf	___ftadd@sign,f
  4170  022B  083A               	movf	___ftadd@sign,w
  4171  022C  3907               	andlw	7
  4172  022D  1903               	btfsc	3,2
  4173  022E  2A3C               	goto	l1657
  4174  022F  2A1B               	goto	l1649
  4175  0230                     l1655:	
  4176  0230  3001               	movlw	1
  4177  0231                     u1925:	
  4178  0231  1003               	clrc
  4179  0232  0CB5               	rrf	___ftadd@f2+2,f
  4180  0233  0CB4               	rrf	___ftadd@f2+1,f
  4181  0234  0CB3               	rrf	___ftadd@f2,f
  4182  0235  3EFF               	addlw	-1
  4183  0236  1D03               	skipz
  4184  0237  2A31               	goto	u1925
  4185  0238  3001               	movlw	1
  4186  0239  00B6               	movwf	??___ftadd
  4187  023A  0836               	movf	??___ftadd,w
  4188  023B  07BB               	addwf	___ftadd@exp2,f
  4189  023C                     l1657:	
  4190  023C  083C               	movf	___ftadd@exp1,w
  4191  023D  063B               	xorwf	___ftadd@exp2,w
  4192  023E  1D03               	skipz
  4193  023F  2A30               	goto	l1655
  4194  0240                     l455:	
  4195  0240  1FBA               	btfss	___ftadd@sign,7
  4196  0241  2A52               	goto	l1661
  4197  0242  30FF               	movlw	255
  4198  0243  06B0               	xorwf	___ftadd@f1,f
  4199  0244  30FF               	movlw	255
  4200  0245  06B1               	xorwf	___ftadd@f1+1,f
  4201  0246  30FF               	movlw	255
  4202  0247  06B2               	xorwf	___ftadd@f1+2,f
  4203  0248  3001               	movlw	1
  4204  0249  07B0               	addwf	___ftadd@f1,f
  4205  024A  3000               	movlw	0
  4206  024B  1803               	skipnc
  4207  024C  3001               	movlw	1
  4208  024D  07B1               	addwf	___ftadd@f1+1,f
  4209  024E  3000               	movlw	0
  4210  024F  1803               	skipnc
  4211  0250  3001               	movlw	1
  4212  0251  07B2               	addwf	___ftadd@f1+2,f
  4213  0252                     l1661:	
  4214  0252  1F3A               	btfss	___ftadd@sign,6
  4215  0253  2A64               	goto	l1665
  4216  0254  30FF               	movlw	255
  4217  0255  06B3               	xorwf	___ftadd@f2,f
  4218  0256  30FF               	movlw	255
  4219  0257  06B4               	xorwf	___ftadd@f2+1,f
  4220  0258  30FF               	movlw	255
  4221  0259  06B5               	xorwf	___ftadd@f2+2,f
  4222  025A  3001               	movlw	1
  4223  025B  07B3               	addwf	___ftadd@f2,f
  4224  025C  3000               	movlw	0
  4225  025D  1803               	skipnc
  4226  025E  3001               	movlw	1
  4227  025F  07B4               	addwf	___ftadd@f2+1,f
  4228  0260  3000               	movlw	0
  4229  0261  1803               	skipnc
  4230  0262  3001               	movlw	1
  4231  0263  07B5               	addwf	___ftadd@f2+2,f
  4232  0264                     l1665:	
  4233  0264  01BA               	clrf	___ftadd@sign
  4234  0265  0830               	movf	___ftadd@f1,w
  4235  0266  07B3               	addwf	___ftadd@f2,f
  4236  0267  0831               	movf	___ftadd@f1+1,w
  4237  0268  1103               	clrz
  4238  0269  1803               	skipnc
  4239  026A  0A31               	incf	___ftadd@f1+1,w
  4240  026B  1D03               	btfss	3,2
  4241  026C  07B4               	addwf	___ftadd@f2+1,f
  4242  026D  0832               	movf	___ftadd@f1+2,w
  4243  026E  1103               	clrz
  4244  026F  1803               	skipnc
  4245  0270  0A32               	incf	___ftadd@f1+2,w
  4246  0271  1D03               	btfss	3,2
  4247  0272  07B5               	addwf	___ftadd@f2+2,f
  4248  0273  1FB5               	btfss	___ftadd@f2+2,7
  4249  0274  2A87               	goto	l1675
  4250  0275  30FF               	movlw	255
  4251  0276  06B3               	xorwf	___ftadd@f2,f
  4252  0277  30FF               	movlw	255
  4253  0278  06B4               	xorwf	___ftadd@f2+1,f
  4254  0279  30FF               	movlw	255
  4255  027A  06B5               	xorwf	___ftadd@f2+2,f
  4256  027B  3001               	movlw	1
  4257  027C  07B3               	addwf	___ftadd@f2,f
  4258  027D  3000               	movlw	0
  4259  027E  1803               	skipnc
  4260  027F  3001               	movlw	1
  4261  0280  07B4               	addwf	___ftadd@f2+1,f
  4262  0281  3000               	movlw	0
  4263  0282  1803               	skipnc
  4264  0283  3001               	movlw	1
  4265  0284  07B5               	addwf	___ftadd@f2+2,f
  4266  0285  01BA               	clrf	___ftadd@sign
  4267  0286  0ABA               	incf	___ftadd@sign,f
  4268  0287                     l1675:	
  4269  0287  0833               	movf	___ftadd@f2,w
  4270  0288  00F0               	movwf	___ftpack@arg
  4271  0289  0834               	movf	___ftadd@f2+1,w
  4272  028A  00F1               	movwf	___ftpack@arg+1
  4273  028B  0835               	movf	___ftadd@f2+2,w
  4274  028C  00F2               	movwf	___ftpack@arg+2
  4275  028D  083C               	movf	___ftadd@exp1,w
  4276  028E  00B6               	movwf	??___ftadd
  4277  028F  0836               	movf	??___ftadd,w
  4278  0290  00F3               	movwf	___ftpack@exp
  4279  0291  083A               	movf	___ftadd@sign,w
  4280  0292  00B7               	movwf	??___ftadd+1
  4281  0293  0837               	movf	??___ftadd+1,w
  4282  0294  00F4               	movwf	___ftpack@sign
  4283  0295  158A  24C0         	fcall	___ftpack
  4284  0297  0870               	movf	?___ftpack,w
  4285  0298  1283               	bcf	3,5	;RP0=0, select bank0
  4286  0299  1303               	bcf	3,6	;RP1=0, select bank0
  4287  029A  00B0               	movwf	?___ftadd
  4288  029B  0871               	movf	?___ftpack+1,w
  4289  029C  00B1               	movwf	?___ftadd+1
  4290  029D  0872               	movf	?___ftpack+2,w
  4291  029E  00B2               	movwf	?___ftadd+2
  4292  029F  0008               	return
  4293  02A0                     __end_of___ftadd:	
  4294                           
  4295                           	psect	text11
  4296  093E                     __ptext11:	
  4297 ;; *************** function ___bmul *****************
  4298 ;; Defined at:
  4299 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\Umul8.c"
  4300 ;; Parameters:    Size  Location     Type
  4301 ;;  multiplier      1    wreg     unsigned char 
  4302 ;;  multiplicand    1    0[COMMON] unsigned char 
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;  multiplier      1    3[COMMON] unsigned char 
  4305 ;;  product         1    2[COMMON] unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      unsigned char 
  4308 ;; Registers used:
  4309 ;;		wreg, status,2, status,0
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4315 ;;      Params:         1       0       0       0
  4316 ;;      Locals:         2       0       0       0
  4317 ;;      Temps:          1       0       0       0
  4318 ;;      Totals:         4       0       0       0
  4319 ;;Total ram usage:        4 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; This function calls:
  4322 ;;		Nothing
  4323 ;; This function is called by:
  4324 ;;		_eval_poly
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           
  4329                           ;psect for function ___bmul
  4330  093E                     ___bmul:	
  4331                           
  4332                           ;incstack = 0
  4333                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4334                           ;___bmul@multiplier stored from wreg
  4335  093E  00F3               	movwf	___bmul@multiplier
  4336  093F  01F2               	clrf	___bmul@product
  4337  0940                     l1597:	
  4338  0940  1C73               	btfss	___bmul@multiplier,0
  4339  0941  2946               	goto	l1601
  4340  0942  0870               	movf	___bmul@multiplicand,w
  4341  0943  00F1               	movwf	??___bmul
  4342  0944  0871               	movf	??___bmul,w
  4343  0945  07F2               	addwf	___bmul@product,f
  4344  0946                     l1601:	
  4345  0946  1003               	clrc
  4346  0947  0DF0               	rlf	___bmul@multiplicand,f
  4347  0948  1003               	clrc
  4348  0949  0CF3               	rrf	___bmul@multiplier,f
  4349  094A  0873               	movf	___bmul@multiplier,w
  4350  094B  1D03               	btfss	3,2
  4351  094C  2940               	goto	l1597
  4352  094D  0872               	movf	___bmul@product,w
  4353  094E  0008               	return
  4354  094F                     __end_of___bmul:	
  4355                           
  4356                           	psect	text12
  4357  0BFE                     __ptext12:	
  4358 ;; *************** function ___ftge *****************
  4359 ;; Defined at:
  4360 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\ftge.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;  ff1             3    0[COMMON] float 
  4363 ;;  ff2             3    3[COMMON] float 
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;		None
  4366 ;; Return value:  Size  Location     Type
  4367 ;;		None               void
  4368 ;; Registers used:
  4369 ;;		wreg, status,2, status,0
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4375 ;;      Params:         6       0       0       0
  4376 ;;      Locals:         0       0       0       0
  4377 ;;      Temps:          6       0       0       0
  4378 ;;      Totals:        12       0       0       0
  4379 ;;Total ram usage:       12 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; This function calls:
  4382 ;;		Nothing
  4383 ;; This function is called by:
  4384 ;;		_log
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           
  4389                           ;psect for function ___ftge
  4390  0BFE                     ___ftge:	
  4391                           
  4392                           ;incstack = 0
  4393                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4394  0BFE  1FF2               	btfss	___ftge@ff1+2,7
  4395  0BFF  2C25               	goto	l1755
  4396  0C00  3000               	movlw	0
  4397  0C01  00F6               	movwf	??___ftge
  4398  0C02  3000               	movlw	0
  4399  0C03  00F7               	movwf	??___ftge+1
  4400  0C04  3080               	movlw	128
  4401  0C05  00F8               	movwf	??___ftge+2
  4402  0C06  0970               	comf	___ftge@ff1,w
  4403  0C07  00F9               	movwf	??___ftge+3
  4404  0C08  0971               	comf	___ftge@ff1+1,w
  4405  0C09  00FA               	movwf	??___ftge+4
  4406  0C0A  0972               	comf	___ftge@ff1+2,w
  4407  0C0B  00FB               	movwf	??___ftge+5
  4408  0C0C  0AF9               	incf	??___ftge+3,f
  4409  0C0D  1903               	skipnz
  4410  0C0E  0AFA               	incf	??___ftge+4,f
  4411  0C0F  1903               	skipnz
  4412  0C10  0AFB               	incf	??___ftge+5,f
  4413  0C11  0879               	movf	??___ftge+3,w
  4414  0C12  07F6               	addwf	??___ftge,f
  4415  0C13  087A               	movf	??___ftge+4,w
  4416  0C14  1803               	skipnc
  4417  0C15  0F7A               	incfsz	??___ftge+4,w
  4418  0C16  2C18               	goto	u2181
  4419  0C17  2C19               	goto	u2182
  4420  0C18                     u2181:	
  4421  0C18  07F7               	addwf	??___ftge+1,f
  4422  0C19                     u2182:	
  4423  0C19  087B               	movf	??___ftge+5,w
  4424  0C1A  1803               	skipnc
  4425  0C1B  0F7B               	incfsz	??___ftge+5,w
  4426  0C1C  2C1E               	goto	u2183
  4427  0C1D  2C1F               	goto	u2184
  4428  0C1E                     u2183:	
  4429  0C1E  07F8               	addwf	??___ftge+2,f
  4430  0C1F                     u2184:	
  4431  0C1F  0876               	movf	??___ftge,w
  4432  0C20  00F0               	movwf	___ftge@ff1
  4433  0C21  0877               	movf	??___ftge+1,w
  4434  0C22  00F1               	movwf	___ftge@ff1+1
  4435  0C23  0878               	movf	??___ftge+2,w
  4436  0C24  00F2               	movwf	___ftge@ff1+2
  4437  0C25                     l1755:	
  4438  0C25  1FF5               	btfss	___ftge@ff2+2,7
  4439  0C26  2C4C               	goto	l1759
  4440  0C27  3000               	movlw	0
  4441  0C28  00F6               	movwf	??___ftge
  4442  0C29  3000               	movlw	0
  4443  0C2A  00F7               	movwf	??___ftge+1
  4444  0C2B  3080               	movlw	128
  4445  0C2C  00F8               	movwf	??___ftge+2
  4446  0C2D  0973               	comf	___ftge@ff2,w
  4447  0C2E  00F9               	movwf	??___ftge+3
  4448  0C2F  0974               	comf	___ftge@ff2+1,w
  4449  0C30  00FA               	movwf	??___ftge+4
  4450  0C31  0975               	comf	___ftge@ff2+2,w
  4451  0C32  00FB               	movwf	??___ftge+5
  4452  0C33  0AF9               	incf	??___ftge+3,f
  4453  0C34  1903               	skipnz
  4454  0C35  0AFA               	incf	??___ftge+4,f
  4455  0C36  1903               	skipnz
  4456  0C37  0AFB               	incf	??___ftge+5,f
  4457  0C38  0879               	movf	??___ftge+3,w
  4458  0C39  07F6               	addwf	??___ftge,f
  4459  0C3A  087A               	movf	??___ftge+4,w
  4460  0C3B  1803               	skipnc
  4461  0C3C  0F7A               	incfsz	??___ftge+4,w
  4462  0C3D  2C3F               	goto	u2201
  4463  0C3E  2C40               	goto	u2202
  4464  0C3F                     u2201:	
  4465  0C3F  07F7               	addwf	??___ftge+1,f
  4466  0C40                     u2202:	
  4467  0C40  087B               	movf	??___ftge+5,w
  4468  0C41  1803               	skipnc
  4469  0C42  0F7B               	incfsz	??___ftge+5,w
  4470  0C43  2C45               	goto	u2203
  4471  0C44  2C46               	goto	u2204
  4472  0C45                     u2203:	
  4473  0C45  07F8               	addwf	??___ftge+2,f
  4474  0C46                     u2204:	
  4475  0C46  0876               	movf	??___ftge,w
  4476  0C47  00F3               	movwf	___ftge@ff2
  4477  0C48  0877               	movf	??___ftge+1,w
  4478  0C49  00F4               	movwf	___ftge@ff2+1
  4479  0C4A  0878               	movf	??___ftge+2,w
  4480  0C4B  00F5               	movwf	___ftge@ff2+2
  4481  0C4C                     l1759:	
  4482  0C4C  3080               	movlw	128
  4483  0C4D  06F2               	xorwf	___ftge@ff1+2,f
  4484  0C4E  3080               	movlw	128
  4485  0C4F  06F5               	xorwf	___ftge@ff2+2,f
  4486  0C50  0875               	movf	___ftge@ff2+2,w
  4487  0C51  0272               	subwf	___ftge@ff1+2,w
  4488  0C52  1D03               	skipz
  4489  0C53  0008               	return
  4490  0C54  0874               	movf	___ftge@ff2+1,w
  4491  0C55  0271               	subwf	___ftge@ff1+1,w
  4492  0C56  1D03               	skipz
  4493  0C57  0008               	return
  4494  0C58  0873               	movf	___ftge@ff2,w
  4495  0C59  0270               	subwf	___ftge@ff1,w
  4496  0C5A  0008               	return
  4497  0C5B                     __end_of___ftge:	
  4498                           
  4499                           	psect	text13
  4500  099D                     __ptext13:	
  4501 ;; *************** function ___awtoft *****************
  4502 ;; Defined at:
  4503 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\awtoft.c"
  4504 ;; Parameters:    Size  Location     Type
  4505 ;;  c               2    8[COMMON] int 
  4506 ;; Auto vars:     Size  Location     Type
  4507 ;;  sign            1   13[COMMON] unsigned char 
  4508 ;; Return value:  Size  Location     Type
  4509 ;;                  3    8[COMMON] float 
  4510 ;; Registers used:
  4511 ;;		wreg, status,2, status,0, pclath, cstack
  4512 ;; Tracked objects:
  4513 ;;		On entry : 0/0
  4514 ;;		On exit  : 0/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4517 ;;      Params:         3       0       0       0
  4518 ;;      Locals:         1       0       0       0
  4519 ;;      Temps:          2       0       0       0
  4520 ;;      Totals:         6       0       0       0
  4521 ;;Total ram usage:        6 bytes
  4522 ;; Hardware stack levels used:    1
  4523 ;; Hardware stack levels required when called:    1
  4524 ;; This function calls:
  4525 ;;		___ftpack
  4526 ;; This function is called by:
  4527 ;;		_getTemp
  4528 ;;		_log
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532                           
  4533                           ;psect for function ___awtoft
  4534  099D                     ___awtoft:	
  4535                           
  4536                           ;incstack = 0
  4537                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  4538  099D  01FD               	clrf	___awtoft@sign
  4539  099E  1FF9               	btfss	___awtoft@c+1,7
  4540  099F  29A7               	goto	l1747
  4541  09A0  09F8               	comf	___awtoft@c,f
  4542  09A1  09F9               	comf	___awtoft@c+1,f
  4543  09A2  0AF8               	incf	___awtoft@c,f
  4544  09A3  1903               	skipnz
  4545  09A4  0AF9               	incf	___awtoft@c+1,f
  4546  09A5  01FD               	clrf	___awtoft@sign
  4547  09A6  0AFD               	incf	___awtoft@sign,f
  4548  09A7                     l1747:	
  4549  09A7  0878               	movf	___awtoft@c,w
  4550  09A8  00F0               	movwf	___ftpack@arg
  4551  09A9  0879               	movf	___awtoft@c+1,w
  4552  09AA  00F1               	movwf	___ftpack@arg+1
  4553  09AB  01F2               	clrf	___ftpack@arg+2
  4554  09AC  308E               	movlw	142
  4555  09AD  00FB               	movwf	??___awtoft
  4556  09AE  087B               	movf	??___awtoft,w
  4557  09AF  00F3               	movwf	___ftpack@exp
  4558  09B0  087D               	movf	___awtoft@sign,w
  4559  09B1  00FC               	movwf	??___awtoft+1
  4560  09B2  087C               	movf	??___awtoft+1,w
  4561  09B3  00F4               	movwf	___ftpack@sign
  4562  09B4  158A  24C0         	fcall	___ftpack
  4563  09B6  0870               	movf	?___ftpack,w
  4564  09B7  00F8               	movwf	?___awtoft
  4565  09B8  0871               	movf	?___ftpack+1,w
  4566  09B9  00F9               	movwf	?___awtoft+1
  4567  09BA  0872               	movf	?___ftpack+2,w
  4568  09BB  00FA               	movwf	?___awtoft+2
  4569  09BC  0008               	return
  4570  09BD                     __end_of___awtoft:	
  4571                           
  4572                           	psect	text14
  4573  0D2C                     __ptext14:	
  4574 ;; *************** function ___fttol *****************
  4575 ;; Defined at:
  4576 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\fttol.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;  f1              3    0[COMMON] float 
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;  lval            4    9[COMMON] unsigned long 
  4581 ;;  exp1            1   13[COMMON] unsigned char 
  4582 ;;  sign1           1    8[COMMON] unsigned char 
  4583 ;; Return value:  Size  Location     Type
  4584 ;;                  4    0[COMMON] long 
  4585 ;; Registers used:
  4586 ;;		wreg, status,2, status,0
  4587 ;; Tracked objects:
  4588 ;;		On entry : 0/0
  4589 ;;		On exit  : 0/0
  4590 ;;		Unchanged: 0/0
  4591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4592 ;;      Params:         4       0       0       0
  4593 ;;      Locals:         6       0       0       0
  4594 ;;      Temps:          4       0       0       0
  4595 ;;      Totals:        14       0       0       0
  4596 ;;Total ram usage:       14 bytes
  4597 ;; Hardware stack levels used:    1
  4598 ;; This function calls:
  4599 ;;		Nothing
  4600 ;; This function is called by:
  4601 ;;		_getTemp
  4602 ;;		_checktemp
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           
  4607                           ;psect for function ___fttol
  4608  0D2C                     ___fttol:	
  4609                           
  4610                           ;incstack = 0
  4611                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4612  0D2C  0870               	movf	___fttol@f1,w
  4613  0D2D  00F4               	movwf	??___fttol
  4614  0D2E  0871               	movf	___fttol@f1+1,w
  4615  0D2F  00F5               	movwf	??___fttol+1
  4616  0D30  0872               	movf	___fttol@f1+2,w
  4617  0D31  00F6               	movwf	??___fttol+2
  4618  0D32  1003               	clrc
  4619  0D33  0D75               	rlf	??___fttol+1,w
  4620  0D34  0D76               	rlf	??___fttol+2,w
  4621  0D35  00F7               	movwf	??___fttol+3
  4622  0D36  0877               	movf	??___fttol+3,w
  4623  0D37  00FD               	movwf	___fttol@exp1
  4624  0D38  087D               	movf	___fttol@exp1,w
  4625  0D39  1D03               	btfss	3,2
  4626  0D3A  2D44               	goto	l1961
  4627  0D3B  3000               	movlw	0
  4628  0D3C  00F3               	movwf	?___fttol+3
  4629  0D3D  3000               	movlw	0
  4630  0D3E  00F2               	movwf	?___fttol+2
  4631  0D3F  3000               	movlw	0
  4632  0D40  00F1               	movwf	?___fttol+1
  4633  0D41  3000               	movlw	0
  4634  0D42  00F0               	movwf	?___fttol
  4635  0D43  0008               	return
  4636  0D44                     l1961:	
  4637  0D44  0870               	movf	___fttol@f1,w
  4638  0D45  00F4               	movwf	??___fttol
  4639  0D46  0871               	movf	___fttol@f1+1,w
  4640  0D47  00F5               	movwf	??___fttol+1
  4641  0D48  0872               	movf	___fttol@f1+2,w
  4642  0D49  00F6               	movwf	??___fttol+2
  4643  0D4A  3017               	movlw	23
  4644  0D4B                     u2495:	
  4645  0D4B  1003               	clrc
  4646  0D4C  0CF6               	rrf	??___fttol+2,f
  4647  0D4D  0CF5               	rrf	??___fttol+1,f
  4648  0D4E  0CF4               	rrf	??___fttol,f
  4649  0D4F  3EFF               	addlw	-1
  4650  0D50  1D03               	skipz
  4651  0D51  2D4B               	goto	u2495
  4652  0D52  0874               	movf	??___fttol,w
  4653  0D53  00F7               	movwf	??___fttol+3
  4654  0D54  0877               	movf	??___fttol+3,w
  4655  0D55  00F8               	movwf	___fttol@sign1
  4656  0D56  17F1               	bsf	___fttol@f1+1,7
  4657  0D57  30FF               	movlw	255
  4658  0D58  05F0               	andwf	___fttol@f1,f
  4659  0D59  30FF               	movlw	255
  4660  0D5A  05F1               	andwf	___fttol@f1+1,f
  4661  0D5B  3000               	movlw	0
  4662  0D5C  05F2               	andwf	___fttol@f1+2,f
  4663  0D5D  0870               	movf	___fttol@f1,w
  4664  0D5E  00F9               	movwf	___fttol@lval
  4665  0D5F  0871               	movf	___fttol@f1+1,w
  4666  0D60  00FA               	movwf	___fttol@lval+1
  4667  0D61  0872               	movf	___fttol@f1+2,w
  4668  0D62  00FB               	movwf	___fttol@lval+2
  4669  0D63  01FC               	clrf	___fttol@lval+3
  4670  0D64  308E               	movlw	142
  4671  0D65  02FD               	subwf	___fttol@exp1,f
  4672  0D66  1FFD               	btfss	___fttol@exp1,7
  4673  0D67  2D86               	goto	l1981
  4674  0D68  087D               	movf	___fttol@exp1,w
  4675  0D69  3A80               	xorlw	128
  4676  0D6A  3E8F               	addlw	143
  4677  0D6B  1803               	skipnc
  4678  0D6C  2D76               	goto	l1979
  4679  0D6D  3000               	movlw	0
  4680  0D6E  00F3               	movwf	?___fttol+3
  4681  0D6F  3000               	movlw	0
  4682  0D70  00F2               	movwf	?___fttol+2
  4683  0D71  3000               	movlw	0
  4684  0D72  00F1               	movwf	?___fttol+1
  4685  0D73  3000               	movlw	0
  4686  0D74  00F0               	movwf	?___fttol
  4687  0D75  0008               	return
  4688  0D76                     l1979:	
  4689  0D76  3001               	movlw	1
  4690  0D77                     u2525:	
  4691  0D77  1003               	clrc
  4692  0D78  0CFC               	rrf	___fttol@lval+3,f
  4693  0D79  0CFB               	rrf	___fttol@lval+2,f
  4694  0D7A  0CFA               	rrf	___fttol@lval+1,f
  4695  0D7B  0CF9               	rrf	___fttol@lval,f
  4696  0D7C  3EFF               	addlw	-1
  4697  0D7D  1D03               	skipz
  4698  0D7E  2D77               	goto	u2525
  4699  0D7F  3001               	movlw	1
  4700  0D80  00F4               	movwf	??___fttol
  4701  0D81  0874               	movf	??___fttol,w
  4702  0D82  07FD               	addwf	___fttol@exp1,f
  4703  0D83  1903               	btfsc	3,2
  4704  0D84  2DA1               	goto	l1989
  4705  0D85  2D76               	goto	l1979
  4706  0D86                     l1981:	
  4707  0D86  3018               	movlw	24
  4708  0D87  027D               	subwf	___fttol@exp1,w
  4709  0D88  1C03               	skipc
  4710  0D89  2D9E               	goto	l515
  4711  0D8A  3000               	movlw	0
  4712  0D8B  00F3               	movwf	?___fttol+3
  4713  0D8C  3000               	movlw	0
  4714  0D8D  00F2               	movwf	?___fttol+2
  4715  0D8E  3000               	movlw	0
  4716  0D8F  00F1               	movwf	?___fttol+1
  4717  0D90  3000               	movlw	0
  4718  0D91  00F0               	movwf	?___fttol
  4719  0D92  0008               	return
  4720  0D93                     l1987:	
  4721  0D93  3001               	movlw	1
  4722  0D94  00F4               	movwf	??___fttol
  4723  0D95                     u2555:	
  4724  0D95  1003               	clrc
  4725  0D96  0DF9               	rlf	___fttol@lval,f
  4726  0D97  0DFA               	rlf	___fttol@lval+1,f
  4727  0D98  0DFB               	rlf	___fttol@lval+2,f
  4728  0D99  0DFC               	rlf	___fttol@lval+3,f
  4729  0D9A  0BF4               	decfsz	??___fttol,f
  4730  0D9B  2D95               	goto	u2555
  4731  0D9C  3001               	movlw	1
  4732  0D9D  02FD               	subwf	___fttol@exp1,f
  4733  0D9E                     l515:	
  4734  0D9E  087D               	movf	___fttol@exp1,w
  4735  0D9F  1D03               	btfss	3,2
  4736  0DA0  2D93               	goto	l1987
  4737  0DA1                     l1989:	
  4738  0DA1  0878               	movf	___fttol@sign1,w
  4739  0DA2  1903               	btfsc	3,2
  4740  0DA3  2DAF               	goto	l1993
  4741  0DA4  09F9               	comf	___fttol@lval,f
  4742  0DA5  09FA               	comf	___fttol@lval+1,f
  4743  0DA6  09FB               	comf	___fttol@lval+2,f
  4744  0DA7  09FC               	comf	___fttol@lval+3,f
  4745  0DA8  0AF9               	incf	___fttol@lval,f
  4746  0DA9  1903               	skipnz
  4747  0DAA  0AFA               	incf	___fttol@lval+1,f
  4748  0DAB  1903               	skipnz
  4749  0DAC  0AFB               	incf	___fttol@lval+2,f
  4750  0DAD  1903               	skipnz
  4751  0DAE  0AFC               	incf	___fttol@lval+3,f
  4752  0DAF                     l1993:	
  4753  0DAF  087C               	movf	___fttol@lval+3,w
  4754  0DB0  00F3               	movwf	?___fttol+3
  4755  0DB1  087B               	movf	___fttol@lval+2,w
  4756  0DB2  00F2               	movwf	?___fttol+2
  4757  0DB3  087A               	movf	___fttol@lval+1,w
  4758  0DB4  00F1               	movwf	?___fttol+1
  4759  0DB5  0879               	movf	___fttol@lval,w
  4760  0DB6  00F0               	movwf	?___fttol
  4761  0DB7  0008               	return
  4762  0DB8                     __end_of___fttol:	
  4763                           
  4764                           	psect	text15
  4765  0DB8                     __ptext15:	
  4766 ;; *************** function ___ftdiv *****************
  4767 ;; Defined at:
  4768 ;;		line 56 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  4769 ;; Parameters:    Size  Location     Type
  4770 ;;  f2              3    0[BANK0 ] float 
  4771 ;;  f1              3    3[BANK0 ] float 
  4772 ;; Auto vars:     Size  Location     Type
  4773 ;;  f3              3   11[BANK0 ] float 
  4774 ;;  sign            1   15[BANK0 ] unsigned char 
  4775 ;;  exp             1   14[BANK0 ] unsigned char 
  4776 ;;  cntr            1   10[BANK0 ] unsigned char 
  4777 ;; Return value:  Size  Location     Type
  4778 ;;                  3    0[BANK0 ] float 
  4779 ;; Registers used:
  4780 ;;		wreg, status,2, status,0, pclath, cstack
  4781 ;; Tracked objects:
  4782 ;;		On entry : 0/0
  4783 ;;		On exit  : 0/0
  4784 ;;		Unchanged: 0/0
  4785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4786 ;;      Params:         0       6       0       0
  4787 ;;      Locals:         0       6       0       0
  4788 ;;      Temps:          0       4       0       0
  4789 ;;      Totals:         0      16       0       0
  4790 ;;Total ram usage:       16 bytes
  4791 ;; Hardware stack levels used:    1
  4792 ;; Hardware stack levels required when called:    1
  4793 ;; This function calls:
  4794 ;;		___ftpack
  4795 ;; This function is called by:
  4796 ;;		_getTemp
  4797 ;;		_checktemp
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801                           
  4802                           ;psect for function ___ftdiv
  4803  0DB8                     ___ftdiv:	
  4804                           
  4805                           ;incstack = 0
  4806                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4807  0DB8  1283               	bcf	3,5	;RP0=0, select bank0
  4808  0DB9  1303               	bcf	3,6	;RP1=0, select bank0
  4809  0DBA  0823               	movf	___ftdiv@f1,w
  4810  0DBB  00A6               	movwf	??___ftdiv
  4811  0DBC  0824               	movf	___ftdiv@f1+1,w
  4812  0DBD  00A7               	movwf	??___ftdiv+1
  4813  0DBE  0825               	movf	___ftdiv@f1+2,w
  4814  0DBF  00A8               	movwf	??___ftdiv+2
  4815  0DC0  1003               	clrc
  4816  0DC1  0D27               	rlf	??___ftdiv+1,w
  4817  0DC2  0D28               	rlf	??___ftdiv+2,w
  4818  0DC3  00A9               	movwf	??___ftdiv+3
  4819  0DC4  0829               	movf	??___ftdiv+3,w
  4820  0DC5  00AE               	movwf	___ftdiv@exp
  4821  0DC6  082E               	movf	___ftdiv@exp,w
  4822  0DC7  1D03               	btfss	3,2
  4823  0DC8  2DD0               	goto	l1919
  4824  0DC9  3000               	movlw	0
  4825  0DCA  00A0               	movwf	?___ftdiv
  4826  0DCB  3000               	movlw	0
  4827  0DCC  00A1               	movwf	?___ftdiv+1
  4828  0DCD  3000               	movlw	0
  4829  0DCE  00A2               	movwf	?___ftdiv+2
  4830  0DCF  0008               	return
  4831  0DD0                     l1919:	
  4832  0DD0  0820               	movf	___ftdiv@f2,w
  4833  0DD1  00A6               	movwf	??___ftdiv
  4834  0DD2  0821               	movf	___ftdiv@f2+1,w
  4835  0DD3  00A7               	movwf	??___ftdiv+1
  4836  0DD4  0822               	movf	___ftdiv@f2+2,w
  4837  0DD5  00A8               	movwf	??___ftdiv+2
  4838  0DD6  1003               	clrc
  4839  0DD7  0D27               	rlf	??___ftdiv+1,w
  4840  0DD8  0D28               	rlf	??___ftdiv+2,w
  4841  0DD9  00A9               	movwf	??___ftdiv+3
  4842  0DDA  0829               	movf	??___ftdiv+3,w
  4843  0DDB  00AF               	movwf	___ftdiv@sign
  4844  0DDC  082F               	movf	___ftdiv@sign,w
  4845  0DDD  1D03               	btfss	3,2
  4846  0DDE  2DE6               	goto	l1925
  4847  0DDF  3000               	movlw	0
  4848  0DE0  00A0               	movwf	?___ftdiv
  4849  0DE1  3000               	movlw	0
  4850  0DE2  00A1               	movwf	?___ftdiv+1
  4851  0DE3  3000               	movlw	0
  4852  0DE4  00A2               	movwf	?___ftdiv+2
  4853  0DE5  0008               	return
  4854  0DE6                     l1925:	
  4855  0DE6  3000               	movlw	0
  4856  0DE7  00AB               	movwf	___ftdiv@f3
  4857  0DE8  3000               	movlw	0
  4858  0DE9  00AC               	movwf	___ftdiv@f3+1
  4859  0DEA  3000               	movlw	0
  4860  0DEB  00AD               	movwf	___ftdiv@f3+2
  4861  0DEC  3089               	movlw	137
  4862  0DED  072F               	addwf	___ftdiv@sign,w
  4863  0DEE  00A6               	movwf	??___ftdiv
  4864  0DEF  0826               	movf	??___ftdiv,w
  4865  0DF0  02AE               	subwf	___ftdiv@exp,f
  4866  0DF1  0823               	movf	___ftdiv@f1,w
  4867  0DF2  00A6               	movwf	??___ftdiv
  4868  0DF3  0824               	movf	___ftdiv@f1+1,w
  4869  0DF4  00A7               	movwf	??___ftdiv+1
  4870  0DF5  0825               	movf	___ftdiv@f1+2,w
  4871  0DF6  00A8               	movwf	??___ftdiv+2
  4872  0DF7  3010               	movlw	16
  4873  0DF8                     u2425:	
  4874  0DF8  1003               	clrc
  4875  0DF9  0CA8               	rrf	??___ftdiv+2,f
  4876  0DFA  0CA7               	rrf	??___ftdiv+1,f
  4877  0DFB  0CA6               	rrf	??___ftdiv,f
  4878  0DFC  3EFF               	addlw	-1
  4879  0DFD  1D03               	skipz
  4880  0DFE  2DF8               	goto	u2425
  4881  0DFF  0826               	movf	??___ftdiv,w
  4882  0E00  00A9               	movwf	??___ftdiv+3
  4883  0E01  0829               	movf	??___ftdiv+3,w
  4884  0E02  00AF               	movwf	___ftdiv@sign
  4885  0E03  0820               	movf	___ftdiv@f2,w
  4886  0E04  00A6               	movwf	??___ftdiv
  4887  0E05  0821               	movf	___ftdiv@f2+1,w
  4888  0E06  00A7               	movwf	??___ftdiv+1
  4889  0E07  0822               	movf	___ftdiv@f2+2,w
  4890  0E08  00A8               	movwf	??___ftdiv+2
  4891  0E09  3010               	movlw	16
  4892  0E0A                     u2435:	
  4893  0E0A  1003               	clrc
  4894  0E0B  0CA8               	rrf	??___ftdiv+2,f
  4895  0E0C  0CA7               	rrf	??___ftdiv+1,f
  4896  0E0D  0CA6               	rrf	??___ftdiv,f
  4897  0E0E  3EFF               	addlw	-1
  4898  0E0F  1D03               	skipz
  4899  0E10  2E0A               	goto	u2435
  4900  0E11  0826               	movf	??___ftdiv,w
  4901  0E12  00A9               	movwf	??___ftdiv+3
  4902  0E13  0829               	movf	??___ftdiv+3,w
  4903  0E14  06AF               	xorwf	___ftdiv@sign,f
  4904  0E15  3080               	movlw	128
  4905  0E16  00A6               	movwf	??___ftdiv
  4906  0E17  0826               	movf	??___ftdiv,w
  4907  0E18  05AF               	andwf	___ftdiv@sign,f
  4908  0E19  17A4               	bsf	___ftdiv@f1+1,7
  4909  0E1A  30FF               	movlw	255
  4910  0E1B  05A3               	andwf	___ftdiv@f1,f
  4911  0E1C  30FF               	movlw	255
  4912  0E1D  05A4               	andwf	___ftdiv@f1+1,f
  4913  0E1E  3000               	movlw	0
  4914  0E1F  05A5               	andwf	___ftdiv@f1+2,f
  4915  0E20  17A1               	bsf	___ftdiv@f2+1,7
  4916  0E21  30FF               	movlw	255
  4917  0E22  05A0               	andwf	___ftdiv@f2,f
  4918  0E23  30FF               	movlw	255
  4919  0E24  05A1               	andwf	___ftdiv@f2+1,f
  4920  0E25  3000               	movlw	0
  4921  0E26  05A2               	andwf	___ftdiv@f2+2,f
  4922  0E27  3018               	movlw	24
  4923  0E28  00A6               	movwf	??___ftdiv
  4924  0E29  0826               	movf	??___ftdiv,w
  4925  0E2A  00AA               	movwf	___ftdiv@cntr
  4926  0E2B                     l1939:	
  4927  0E2B  3001               	movlw	1
  4928  0E2C                     u2445:	
  4929  0E2C  1003               	clrc
  4930  0E2D  0DAB               	rlf	___ftdiv@f3,f
  4931  0E2E  0DAC               	rlf	___ftdiv@f3+1,f
  4932  0E2F  0DAD               	rlf	___ftdiv@f3+2,f
  4933  0E30  3EFF               	addlw	-1
  4934  0E31  1D03               	skipz
  4935  0E32  2E2C               	goto	u2445
  4936  0E33  0822               	movf	___ftdiv@f2+2,w
  4937  0E34  0225               	subwf	___ftdiv@f1+2,w
  4938  0E35  1D03               	skipz
  4939  0E36  2E3D               	goto	u2455
  4940  0E37  0821               	movf	___ftdiv@f2+1,w
  4941  0E38  0224               	subwf	___ftdiv@f1+1,w
  4942  0E39  1D03               	skipz
  4943  0E3A  2E3D               	goto	u2455
  4944  0E3B  0820               	movf	___ftdiv@f2,w
  4945  0E3C  0223               	subwf	___ftdiv@f1,w
  4946  0E3D                     u2455:	
  4947  0E3D  1C03               	skipc
  4948  0E3E  2E4A               	goto	l1947
  4949  0E3F  0820               	movf	___ftdiv@f2,w
  4950  0E40  02A3               	subwf	___ftdiv@f1,f
  4951  0E41  0821               	movf	___ftdiv@f2+1,w
  4952  0E42  1C03               	skipc
  4953  0E43  0F21               	incfsz	___ftdiv@f2+1,w
  4954  0E44  02A4               	subwf	___ftdiv@f1+1,f
  4955  0E45  0822               	movf	___ftdiv@f2+2,w
  4956  0E46  1C03               	skipc
  4957  0E47  0A22               	incf	___ftdiv@f2+2,w
  4958  0E48  02A5               	subwf	___ftdiv@f1+2,f
  4959  0E49  142B               	bsf	___ftdiv@f3,0
  4960  0E4A                     l1947:	
  4961  0E4A  3001               	movlw	1
  4962  0E4B                     u2465:	
  4963  0E4B  1003               	clrc
  4964  0E4C  0DA3               	rlf	___ftdiv@f1,f
  4965  0E4D  0DA4               	rlf	___ftdiv@f1+1,f
  4966  0E4E  0DA5               	rlf	___ftdiv@f1+2,f
  4967  0E4F  3EFF               	addlw	-1
  4968  0E50  1D03               	skipz
  4969  0E51  2E4B               	goto	u2465
  4970  0E52  3001               	movlw	1
  4971  0E53  02AA               	subwf	___ftdiv@cntr,f
  4972  0E54  1D03               	btfss	3,2
  4973  0E55  2E2B               	goto	l1939
  4974  0E56  082B               	movf	___ftdiv@f3,w
  4975  0E57  00F0               	movwf	___ftpack@arg
  4976  0E58  082C               	movf	___ftdiv@f3+1,w
  4977  0E59  00F1               	movwf	___ftpack@arg+1
  4978  0E5A  082D               	movf	___ftdiv@f3+2,w
  4979  0E5B  00F2               	movwf	___ftpack@arg+2
  4980  0E5C  082E               	movf	___ftdiv@exp,w
  4981  0E5D  00A6               	movwf	??___ftdiv
  4982  0E5E  0826               	movf	??___ftdiv,w
  4983  0E5F  00F3               	movwf	___ftpack@exp
  4984  0E60  082F               	movf	___ftdiv@sign,w
  4985  0E61  00A7               	movwf	??___ftdiv+1
  4986  0E62  0827               	movf	??___ftdiv+1,w
  4987  0E63  00F4               	movwf	___ftpack@sign
  4988  0E64  158A  24C0         	fcall	___ftpack
  4989  0E66  0870               	movf	?___ftpack,w
  4990  0E67  1283               	bcf	3,5	;RP0=0, select bank0
  4991  0E68  1303               	bcf	3,6	;RP1=0, select bank0
  4992  0E69  00A0               	movwf	?___ftdiv
  4993  0E6A  0871               	movf	?___ftpack+1,w
  4994  0E6B  00A1               	movwf	?___ftdiv+1
  4995  0E6C  0872               	movf	?___ftpack+2,w
  4996  0E6D  00A2               	movwf	?___ftdiv+2
  4997  0E6E  0008               	return
  4998  0E6F                     __end_of___ftdiv:	
  4999                           
  5000                           	psect	text16
  5001  0CC0                     __ptext16:	
  5002 ;; *************** function ___ftpack *****************
  5003 ;; Defined at:
  5004 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\float.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;  arg             3    0[COMMON] unsigned um
  5007 ;;  exp             1    3[COMMON] unsigned char 
  5008 ;;  sign            1    4[COMMON] unsigned char 
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;		None
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  3    0[COMMON] float 
  5013 ;; Registers used:
  5014 ;;		wreg, status,2, status,0
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5020 ;;      Params:         5       0       0       0
  5021 ;;      Locals:         0       0       0       0
  5022 ;;      Temps:          3       0       0       0
  5023 ;;      Totals:         8       0       0       0
  5024 ;;Total ram usage:        8 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; This function calls:
  5027 ;;		Nothing
  5028 ;; This function is called by:
  5029 ;;		___awtoft
  5030 ;;		___ftadd
  5031 ;;		___ftdiv
  5032 ;;		___ftmul
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           
  5037                           ;psect for function ___ftpack
  5038  0CC0                     ___ftpack:	
  5039                           
  5040                           ;incstack = 0
  5041                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5042  0CC0  0873               	movf	___ftpack@exp,w
  5043  0CC1  1903               	btfsc	3,2
  5044  0CC2  2CC8               	goto	l1567
  5045  0CC3  0872               	movf	___ftpack@arg+2,w
  5046  0CC4  0471               	iorwf	___ftpack@arg+1,w
  5047  0CC5  0470               	iorwf	___ftpack@arg,w
  5048  0CC6  1D03               	skipz
  5049  0CC7  2CDB               	goto	l1573
  5050  0CC8                     l1567:	
  5051  0CC8  3000               	movlw	0
  5052  0CC9  00F0               	movwf	?___ftpack
  5053  0CCA  3000               	movlw	0
  5054  0CCB  00F1               	movwf	?___ftpack+1
  5055  0CCC  3000               	movlw	0
  5056  0CCD  00F2               	movwf	?___ftpack+2
  5057  0CCE  0008               	return
  5058  0CCF                     l1571:	
  5059  0CCF  3001               	movlw	1
  5060  0CD0  00F5               	movwf	??___ftpack
  5061  0CD1  0875               	movf	??___ftpack,w
  5062  0CD2  07F3               	addwf	___ftpack@exp,f
  5063  0CD3  3001               	movlw	1
  5064  0CD4                     u1625:	
  5065  0CD4  1003               	clrc
  5066  0CD5  0CF2               	rrf	___ftpack@arg+2,f
  5067  0CD6  0CF1               	rrf	___ftpack@arg+1,f
  5068  0CD7  0CF0               	rrf	___ftpack@arg,f
  5069  0CD8  3EFF               	addlw	-1
  5070  0CD9  1D03               	skipz
  5071  0CDA  2CD4               	goto	u1625
  5072  0CDB                     l1573:	
  5073  0CDB  30FE               	movlw	254
  5074  0CDC  0572               	andwf	___ftpack@arg+2,w
  5075  0CDD  1903               	btfsc	3,2
  5076  0CDE  2CF6               	goto	l424
  5077  0CDF  2CCF               	goto	l1571
  5078  0CE0                     l1575:	
  5079  0CE0  3001               	movlw	1
  5080  0CE1  00F5               	movwf	??___ftpack
  5081  0CE2  0875               	movf	??___ftpack,w
  5082  0CE3  07F3               	addwf	___ftpack@exp,f
  5083  0CE4  3001               	movlw	1
  5084  0CE5  07F0               	addwf	___ftpack@arg,f
  5085  0CE6  3000               	movlw	0
  5086  0CE7  1803               	skipnc
  5087  0CE8  3001               	movlw	1
  5088  0CE9  07F1               	addwf	___ftpack@arg+1,f
  5089  0CEA  3000               	movlw	0
  5090  0CEB  1803               	skipnc
  5091  0CEC  3001               	movlw	1
  5092  0CED  07F2               	addwf	___ftpack@arg+2,f
  5093  0CEE  3001               	movlw	1
  5094  0CEF                     u1645:	
  5095  0CEF  1003               	clrc
  5096  0CF0  0CF2               	rrf	___ftpack@arg+2,f
  5097  0CF1  0CF1               	rrf	___ftpack@arg+1,f
  5098  0CF2  0CF0               	rrf	___ftpack@arg,f
  5099  0CF3  3EFF               	addlw	-1
  5100  0CF4  1D03               	skipz
  5101  0CF5  2CEF               	goto	u1645
  5102  0CF6                     l424:	
  5103  0CF6  30FF               	movlw	255
  5104  0CF7  0572               	andwf	___ftpack@arg+2,w
  5105  0CF8  1903               	btfsc	3,2
  5106  0CF9  2D05               	goto	l1583
  5107  0CFA  2CE0               	goto	l1575
  5108  0CFB                     l1581:	
  5109  0CFB  3001               	movlw	1
  5110  0CFC  02F3               	subwf	___ftpack@exp,f
  5111  0CFD  3001               	movlw	1
  5112  0CFE                     u1665:	
  5113  0CFE  1003               	clrc
  5114  0CFF  0DF0               	rlf	___ftpack@arg,f
  5115  0D00  0DF1               	rlf	___ftpack@arg+1,f
  5116  0D01  0DF2               	rlf	___ftpack@arg+2,f
  5117  0D02  3EFF               	addlw	-1
  5118  0D03  1D03               	skipz
  5119  0D04  2CFE               	goto	u1665
  5120  0D05                     l1583:	
  5121  0D05  1BF1               	btfsc	___ftpack@arg+1,7
  5122  0D06  2D0B               	goto	l431
  5123  0D07  3002               	movlw	2
  5124  0D08  0273               	subwf	___ftpack@exp,w
  5125  0D09  1803               	skipnc
  5126  0D0A  2CFB               	goto	l1581
  5127  0D0B                     l431:	
  5128  0D0B  1873               	btfsc	___ftpack@exp,0
  5129  0D0C  2D13               	goto	l432
  5130  0D0D  30FF               	movlw	255
  5131  0D0E  05F0               	andwf	___ftpack@arg,f
  5132  0D0F  307F               	movlw	127
  5133  0D10  05F1               	andwf	___ftpack@arg+1,f
  5134  0D11  30FF               	movlw	255
  5135  0D12  05F2               	andwf	___ftpack@arg+2,f
  5136  0D13                     l432:	
  5137  0D13  1003               	clrc
  5138  0D14  0CF3               	rrf	___ftpack@exp,f
  5139  0D15  0873               	movf	___ftpack@exp,w
  5140  0D16  00F5               	movwf	??___ftpack
  5141  0D17  01F6               	clrf	??___ftpack+1
  5142  0D18  01F7               	clrf	??___ftpack+2
  5143  0D19  3010               	movlw	16
  5144  0D1A                     u1705:	
  5145  0D1A  1003               	clrc
  5146  0D1B  0DF5               	rlf	??___ftpack,f
  5147  0D1C  0DF6               	rlf	??___ftpack+1,f
  5148  0D1D  0DF7               	rlf	??___ftpack+2,f
  5149  0D1E  3EFF               	addlw	-1
  5150  0D1F  1D03               	skipz
  5151  0D20  2D1A               	goto	u1705
  5152  0D21  0875               	movf	??___ftpack,w
  5153  0D22  04F0               	iorwf	___ftpack@arg,f
  5154  0D23  0876               	movf	??___ftpack+1,w
  5155  0D24  04F1               	iorwf	___ftpack@arg+1,f
  5156  0D25  0877               	movf	??___ftpack+2,w
  5157  0D26  04F2               	iorwf	___ftpack@arg+2,f
  5158  0D27  0874               	movf	___ftpack@sign,w
  5159  0D28  1903               	btfsc	3,2
  5160  0D29  0008               	return
  5161  0D2A  17F2               	bsf	___ftpack@arg+2,7
  5162  0D2B  0008               	return
  5163  0D2C                     __end_of___ftpack:	
  5164                           
  5165                           	psect	text17
  5166  0BA5                     __ptext17:	
  5167 ;; *************** function ___awdiv *****************
  5168 ;; Defined at:
  5169 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\awdiv.c"
  5170 ;; Parameters:    Size  Location     Type
  5171 ;;  divisor         2    0[COMMON] int 
  5172 ;;  dividend        2    2[COMMON] int 
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;  quotient        2    7[COMMON] int 
  5175 ;;  sign            1    6[COMMON] unsigned char 
  5176 ;;  counter         1    5[COMMON] unsigned char 
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  2    0[COMMON] int 
  5179 ;; Registers used:
  5180 ;;		wreg, status,2, status,0
  5181 ;; Tracked objects:
  5182 ;;		On entry : 0/0
  5183 ;;		On exit  : 0/0
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5186 ;;      Params:         4       0       0       0
  5187 ;;      Locals:         4       0       0       0
  5188 ;;      Temps:          1       0       0       0
  5189 ;;      Totals:         9       0       0       0
  5190 ;;Total ram usage:        9 bytes
  5191 ;; Hardware stack levels used:    1
  5192 ;; This function calls:
  5193 ;;		Nothing
  5194 ;; This function is called by:
  5195 ;;		_getTemp
  5196 ;;		_checktemp
  5197 ;; This function uses a non-reentrant model
  5198 ;;
  5199                           
  5200                           
  5201                           ;psect for function ___awdiv
  5202  0BA5                     ___awdiv:	
  5203                           
  5204                           ;incstack = 0
  5205                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5206  0BA5  01F6               	clrf	___awdiv@sign
  5207  0BA6  1FF1               	btfss	___awdiv@divisor+1,7
  5208  0BA7  2BAF               	goto	l1877
  5209  0BA8  09F0               	comf	___awdiv@divisor,f
  5210  0BA9  09F1               	comf	___awdiv@divisor+1,f
  5211  0BAA  0AF0               	incf	___awdiv@divisor,f
  5212  0BAB  1903               	skipnz
  5213  0BAC  0AF1               	incf	___awdiv@divisor+1,f
  5214  0BAD  01F6               	clrf	___awdiv@sign
  5215  0BAE  0AF6               	incf	___awdiv@sign,f
  5216  0BAF                     l1877:	
  5217  0BAF  1FF3               	btfss	___awdiv@dividend+1,7
  5218  0BB0  2BBA               	goto	l1883
  5219  0BB1  09F2               	comf	___awdiv@dividend,f
  5220  0BB2  09F3               	comf	___awdiv@dividend+1,f
  5221  0BB3  0AF2               	incf	___awdiv@dividend,f
  5222  0BB4  1903               	skipnz
  5223  0BB5  0AF3               	incf	___awdiv@dividend+1,f
  5224  0BB6  3001               	movlw	1
  5225  0BB7  00F4               	movwf	??___awdiv
  5226  0BB8  0874               	movf	??___awdiv,w
  5227  0BB9  06F6               	xorwf	___awdiv@sign,f
  5228  0BBA                     l1883:	
  5229  0BBA  01F7               	clrf	___awdiv@quotient
  5230  0BBB  01F8               	clrf	___awdiv@quotient+1
  5231  0BBC  0870               	movf	___awdiv@divisor,w
  5232  0BBD  0471               	iorwf	___awdiv@divisor+1,w
  5233  0BBE  1903               	btfsc	3,2
  5234  0BBF  2BF1               	goto	l1905
  5235  0BC0  01F5               	clrf	___awdiv@counter
  5236  0BC1  0AF5               	incf	___awdiv@counter,f
  5237  0BC2                     l1893:	
  5238  0BC2  1BF1               	btfsc	___awdiv@divisor+1,7
  5239  0BC3  2BD0               	goto	l1895
  5240  0BC4  3001               	movlw	1
  5241  0BC5                     u2335:	
  5242  0BC5  1003               	clrc
  5243  0BC6  0DF0               	rlf	___awdiv@divisor,f
  5244  0BC7  0DF1               	rlf	___awdiv@divisor+1,f
  5245  0BC8  3EFF               	addlw	-1
  5246  0BC9  1D03               	skipz
  5247  0BCA  2BC5               	goto	u2335
  5248  0BCB  3001               	movlw	1
  5249  0BCC  00F4               	movwf	??___awdiv
  5250  0BCD  0874               	movf	??___awdiv,w
  5251  0BCE  07F5               	addwf	___awdiv@counter,f
  5252  0BCF  2BC2               	goto	l1893
  5253  0BD0                     l1895:	
  5254  0BD0  3001               	movlw	1
  5255  0BD1                     u2355:	
  5256  0BD1  1003               	clrc
  5257  0BD2  0DF7               	rlf	___awdiv@quotient,f
  5258  0BD3  0DF8               	rlf	___awdiv@quotient+1,f
  5259  0BD4  3EFF               	addlw	-1
  5260  0BD5  1D03               	skipz
  5261  0BD6  2BD1               	goto	u2355
  5262  0BD7  0871               	movf	___awdiv@divisor+1,w
  5263  0BD8  0273               	subwf	___awdiv@dividend+1,w
  5264  0BD9  1D03               	skipz
  5265  0BDA  2BDD               	goto	u2365
  5266  0BDB  0870               	movf	___awdiv@divisor,w
  5267  0BDC  0272               	subwf	___awdiv@dividend,w
  5268  0BDD                     u2365:	
  5269  0BDD  1C03               	skipc
  5270  0BDE  2BE6               	goto	l1901
  5271  0BDF  0870               	movf	___awdiv@divisor,w
  5272  0BE0  02F2               	subwf	___awdiv@dividend,f
  5273  0BE1  0871               	movf	___awdiv@divisor+1,w
  5274  0BE2  1C03               	skipc
  5275  0BE3  03F3               	decf	___awdiv@dividend+1,f
  5276  0BE4  02F3               	subwf	___awdiv@dividend+1,f
  5277  0BE5  1477               	bsf	___awdiv@quotient,0
  5278  0BE6                     l1901:	
  5279  0BE6  3001               	movlw	1
  5280  0BE7                     u2375:	
  5281  0BE7  1003               	clrc
  5282  0BE8  0CF1               	rrf	___awdiv@divisor+1,f
  5283  0BE9  0CF0               	rrf	___awdiv@divisor,f
  5284  0BEA  3EFF               	addlw	-1
  5285  0BEB  1D03               	skipz
  5286  0BEC  2BE7               	goto	u2375
  5287  0BED  3001               	movlw	1
  5288  0BEE  02F5               	subwf	___awdiv@counter,f
  5289  0BEF  1D03               	btfss	3,2
  5290  0BF0  2BD0               	goto	l1895
  5291  0BF1                     l1905:	
  5292  0BF1  0876               	movf	___awdiv@sign,w
  5293  0BF2  1903               	btfsc	3,2
  5294  0BF3  2BF9               	goto	l1909
  5295  0BF4  09F7               	comf	___awdiv@quotient,f
  5296  0BF5  09F8               	comf	___awdiv@quotient+1,f
  5297  0BF6  0AF7               	incf	___awdiv@quotient,f
  5298  0BF7  1903               	skipnz
  5299  0BF8  0AF8               	incf	___awdiv@quotient+1,f
  5300  0BF9                     l1909:	
  5301  0BF9  0878               	movf	___awdiv@quotient+1,w
  5302  0BFA  00F1               	movwf	?___awdiv+1
  5303  0BFB  0877               	movf	___awdiv@quotient,w
  5304  0BFC  00F0               	movwf	?___awdiv
  5305  0BFD  0008               	return
  5306  0BFE                     __end_of___awdiv:	
  5307                           
  5308                           	psect	text18
  5309  09BD                     __ptext18:	
  5310 ;; *************** function _ADC_Read *****************
  5311 ;; Defined at:
  5312 ;;		line 156 in file "newmain.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;  channel         1    wreg     unsigned char 
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;  channel         1    4[COMMON] unsigned char 
  5317 ;; Return value:  Size  Location     Type
  5318 ;;                  2    0[COMMON] unsigned int 
  5319 ;; Registers used:
  5320 ;;		wreg, status,2, status,0
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5326 ;;      Params:         2       0       0       0
  5327 ;;      Locals:         1       0       0       0
  5328 ;;      Temps:          2       0       0       0
  5329 ;;      Totals:         5       0       0       0
  5330 ;;Total ram usage:        5 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; This function calls:
  5333 ;;		Nothing
  5334 ;; This function is called by:
  5335 ;;		_getTemp
  5336 ;;		_checktemp
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           
  5341                           ;psect for function _ADC_Read
  5342  09BD                     _ADC_Read:	
  5343                           
  5344                           ;incstack = 0
  5345                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  5346                           ;ADC_Read@channel stored from wreg
  5347  09BD  00F4               	movwf	ADC_Read@channel
  5348                           
  5349                           ;newmain.c: 158: if(channel > 7)
  5350  09BE  3008               	movlw	8
  5351  09BF  0274               	subwf	ADC_Read@channel,w
  5352  09C0  1C03               	skipc
  5353  09C1  29C5               	goto	l1837
  5354                           
  5355                           ;newmain.c: 159: return 0;
  5356  09C2  01F0               	clrf	?_ADC_Read
  5357  09C3  01F1               	clrf	?_ADC_Read+1
  5358  09C4  0008               	return
  5359  09C5                     l1837:	
  5360                           
  5361                           ;newmain.c: 161: ADCON0 &= 0xC5;
  5362  09C5  30C5               	movlw	197
  5363  09C6  00F2               	movwf	??_ADC_Read
  5364  09C7  0872               	movf	??_ADC_Read,w
  5365  09C8  1283               	bcf	3,5	;RP0=0, select bank0
  5366  09C9  1303               	bcf	3,6	;RP1=0, select bank0
  5367  09CA  059F               	andwf	31,f	;volatile
  5368                           
  5369                           ;newmain.c: 162: ADCON0 |= channel<<3;
  5370  09CB  0874               	movf	ADC_Read@channel,w
  5371  09CC  00F2               	movwf	??_ADC_Read
  5372  09CD  3002               	movlw	2
  5373  09CE                     u2265:	
  5374  09CE  1003               	clrc
  5375  09CF  0DF2               	rlf	??_ADC_Read,f
  5376  09D0  3EFF               	addlw	-1
  5377  09D1  1D03               	skipz
  5378  09D2  29CE               	goto	u2265
  5379  09D3  1003               	clrc
  5380  09D4  0D72               	rlf	??_ADC_Read,w
  5381  09D5  00F3               	movwf	??_ADC_Read+1
  5382  09D6  0873               	movf	??_ADC_Read+1,w
  5383  09D7  049F               	iorwf	31,f	;volatile
  5384                           
  5385                           ;newmain.c: 163: _delay((unsigned long)((2)*(4000000/4000.0)));
  5386  09D8  3003               	movlw	3
  5387  09D9  00F3               	movwf	??_ADC_Read+1
  5388  09DA  3097               	movlw	151
  5389  09DB  00F2               	movwf	??_ADC_Read
  5390  09DC                     u3277:	
  5391  09DC  0BF2               	decfsz	??_ADC_Read,f
  5392  09DD  29DC               	goto	u3277
  5393  09DE  0BF3               	decfsz	??_ADC_Read+1,f
  5394  09DF  29DC               	goto	u3277
  5395  09E0  29E1               	nop2
  5396                           
  5397                           ;newmain.c: 164: GO_nDONE = 1;
  5398  09E1  1283               	bcf	3,5	;RP0=0, select bank0
  5399  09E2  1303               	bcf	3,6	;RP1=0, select bank0
  5400  09E3  149F               	bsf	31,1	;volatile
  5401  09E4                     l94:	
  5402                           ;newmain.c: 165: while(GO_nDONE);
  5403                           
  5404  09E4  189F               	btfsc	31,1	;volatile
  5405  09E5  29E4               	goto	l94
  5406                           
  5407                           ;newmain.c: 166: return ((ADRESH<<8)+ADRESL);
  5408  09E6  081E               	movf	30,w	;volatile
  5409  09E7  00F1               	movwf	?_ADC_Read+1
  5410  09E8  1683               	bsf	3,5	;RP0=1, select bank1
  5411  09E9  1303               	bcf	3,6	;RP1=0, select bank1
  5412  09EA  081E               	movf	30,w	;volatile
  5413  09EB  00F0               	movwf	?_ADC_Read
  5414  09EC  0008               	return
  5415  09ED                     __end_of_ADC_Read:	
  5416                           
  5417                           	psect	text19
  5418  0981                     __ptext19:	
  5419 ;; *************** function _Lcd_Write_String *****************
  5420 ;; Defined at:
  5421 ;;		line 114 in file "newmain.c"
  5422 ;; Parameters:    Size  Location     Type
  5423 ;;  a               1    wreg     PTR const unsigned char 
  5424 ;;		 -> STR_19(10), STR_18(9), STR_17(15), STR_16(5), 
  5425 ;;		 -> STR_15(5), STR_14(3), STR_13(5), STR_12(5), 
  5426 ;;		 -> STR_11(4), STR_10(4), STR_9(3), STR_8(5), 
  5427 ;;		 -> STR_7(5), STR_6(10), STR_5(10), STR_4(15), 
  5428 ;;		 -> STR_3(14), STR_2(10), STR_1(9), 
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;  a               1    7[COMMON] PTR const unsigned char 
  5431 ;;		 -> STR_19(10), STR_18(9), STR_17(15), STR_16(5), 
  5432 ;;		 -> STR_15(5), STR_14(3), STR_13(5), STR_12(5), 
  5433 ;;		 -> STR_11(4), STR_10(4), STR_9(3), STR_8(5), 
  5434 ;;		 -> STR_7(5), STR_6(10), STR_5(10), STR_4(15), 
  5435 ;;		 -> STR_3(14), STR_2(10), STR_1(9), 
  5436 ;;  i               2    5[COMMON] int 
  5437 ;; Return value:  Size  Location     Type
  5438 ;;                  1    wreg      void 
  5439 ;; Registers used:
  5440 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5441 ;; Tracked objects:
  5442 ;;		On entry : 0/0
  5443 ;;		On exit  : 0/0
  5444 ;;		Unchanged: 0/0
  5445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5446 ;;      Params:         0       0       0       0
  5447 ;;      Locals:         3       0       0       0
  5448 ;;      Temps:          0       0       0       0
  5449 ;;      Totals:         3       0       0       0
  5450 ;;Total ram usage:        3 bytes
  5451 ;; Hardware stack levels used:    1
  5452 ;; Hardware stack levels required when called:    2
  5453 ;; This function calls:
  5454 ;;		_Lcd_Write_Char
  5455 ;; This function is called by:
  5456 ;;		_delay60
  5457 ;;		_main
  5458 ;; This function uses a non-reentrant model
  5459 ;;
  5460                           
  5461                           
  5462                           ;psect for function _Lcd_Write_String
  5463  0981                     _Lcd_Write_String:	
  5464                           
  5465                           ;incstack = 0
  5466                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5467                           ;Lcd_Write_String@a stored from wreg
  5468  0981  00F7               	movwf	Lcd_Write_String@a
  5469                           
  5470                           ;newmain.c: 118: int i;
  5471                           ;newmain.c: 119: for(i=0;a[i]!='\0';i++)
  5472  0982  01F5               	clrf	Lcd_Write_String@i
  5473  0983  01F6               	clrf	Lcd_Write_String@i+1
  5474  0984                     l2073:	
  5475  0984  0875               	movf	Lcd_Write_String@i,w
  5476  0985  0777               	addwf	Lcd_Write_String@a,w
  5477  0986  0084               	movwf	4
  5478  0987  118A  2002  158A   	fcall	stringdir
  5479  098A  3A00               	xorlw	0
  5480  098B  1903               	btfsc	3,2
  5481  098C  0008               	return
  5482                           
  5483                           ;newmain.c: 120: Lcd_Write_Char(a[i]);
  5484  098D  0875               	movf	Lcd_Write_String@i,w
  5485  098E  0777               	addwf	Lcd_Write_String@a,w
  5486  098F  0084               	movwf	4
  5487  0990  118A  2002  158A   	fcall	stringdir
  5488  0993  158A  221F  158A   	fcall	_Lcd_Write_Char
  5489  0996  3001               	movlw	1
  5490  0997  07F5               	addwf	Lcd_Write_String@i,f
  5491  0998  1803               	skipnc
  5492  0999  0AF6               	incf	Lcd_Write_String@i+1,f
  5493  099A  3000               	movlw	0
  5494  099B  07F6               	addwf	Lcd_Write_String@i+1,f
  5495  099C  2984               	goto	l2073
  5496  099D                     __end_of_Lcd_Write_String:	
  5497                           
  5498                           	psect	text20
  5499  0A1F                     __ptext20:	
  5500 ;; *************** function _Lcd_Write_Char *****************
  5501 ;; Defined at:
  5502 ;;		line 98 in file "newmain.c"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;  a               1    wreg     unsigned char 
  5505 ;; Auto vars:     Size  Location     Type
  5506 ;;  a               1    4[COMMON] unsigned char 
  5507 ;;  y               1    3[COMMON] unsigned char 
  5508 ;;  temp            1    2[COMMON] unsigned char 
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  1    wreg      void 
  5511 ;; Registers used:
  5512 ;;		wreg, status,2, status,0, pclath, cstack
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5518 ;;      Params:         0       0       0       0
  5519 ;;      Locals:         3       0       0       0
  5520 ;;      Temps:          1       0       0       0
  5521 ;;      Totals:         4       0       0       0
  5522 ;;Total ram usage:        4 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:    1
  5525 ;; This function calls:
  5526 ;;		_Lcd_Port
  5527 ;; This function is called by:
  5528 ;;		_Lcd_Write_String
  5529 ;;		_lcddisplay
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           
  5534                           ;psect for function _Lcd_Write_Char
  5535  0A1F                     _Lcd_Write_Char:	
  5536                           
  5537                           ;incstack = 0
  5538                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  5539                           ;Lcd_Write_Char@a stored from wreg
  5540  0A1F  00F4               	movwf	Lcd_Write_Char@a
  5541                           
  5542                           ;newmain.c: 100: char temp,y;
  5543                           ;newmain.c: 101: temp = a&0x0F;
  5544  0A20  0874               	movf	Lcd_Write_Char@a,w
  5545  0A21  390F               	andlw	15
  5546  0A22  00F1               	movwf	??_Lcd_Write_Char
  5547  0A23  0871               	movf	??_Lcd_Write_Char,w
  5548  0A24  00F2               	movwf	Lcd_Write_Char@temp
  5549                           
  5550                           ;newmain.c: 102: y = a&0xF0;
  5551  0A25  0874               	movf	Lcd_Write_Char@a,w
  5552  0A26  39F0               	andlw	240
  5553  0A27  00F1               	movwf	??_Lcd_Write_Char
  5554  0A28  0871               	movf	??_Lcd_Write_Char,w
  5555  0A29  00F3               	movwf	Lcd_Write_Char@y
  5556                           
  5557                           ;newmain.c: 103: RC0 = 1;
  5558  0A2A  1283               	bcf	3,5	;RP0=0, select bank0
  5559  0A2B  1303               	bcf	3,6	;RP1=0, select bank0
  5560  0A2C  1407               	bsf	7,0	;volatile
  5561                           
  5562                           ;newmain.c: 104: Lcd_Port(y>>4);
  5563  0A2D  0873               	movf	Lcd_Write_Char@y,w
  5564  0A2E  00F1               	movwf	??_Lcd_Write_Char
  5565  0A2F  3004               	movlw	4
  5566  0A30                     u2245:	
  5567  0A30  1003               	clrc
  5568  0A31  0CF1               	rrf	??_Lcd_Write_Char,f
  5569  0A32  3EFF               	addlw	-1
  5570  0A33  1D03               	skipz
  5571  0A34  2A30               	goto	u2245
  5572  0A35  0871               	movf	??_Lcd_Write_Char,w
  5573  0A36  158A  2167  158A   	fcall	_Lcd_Port
  5574                           
  5575                           ;newmain.c: 105: RC1 = 1;
  5576  0A39  1283               	bcf	3,5	;RP0=0, select bank0
  5577  0A3A  1303               	bcf	3,6	;RP1=0, select bank0
  5578  0A3B  1487               	bsf	7,1	;volatile
  5579                           
  5580                           ;newmain.c: 106: _delay((unsigned long)((40)*(4000000/4000000.0)));
  5581  0A3C  300D               	movlw	13
  5582  0A3D  00F1               	movwf	??_Lcd_Write_Char
  5583  0A3E                     u3287:	
  5584  0A3E  0BF1               	decfsz	??_Lcd_Write_Char,f
  5585  0A3F  2A3E               	goto	u3287
  5586                           
  5587                           ;newmain.c: 107: RC1 = 0;
  5588  0A40  1283               	bcf	3,5	;RP0=0, select bank0
  5589  0A41  1303               	bcf	3,6	;RP1=0, select bank0
  5590  0A42  1087               	bcf	7,1	;volatile
  5591                           
  5592                           ;newmain.c: 108: Lcd_Port(temp);
  5593  0A43  0872               	movf	Lcd_Write_Char@temp,w
  5594  0A44  158A  2167  158A   	fcall	_Lcd_Port
  5595                           
  5596                           ;newmain.c: 109: RC1 = 1;
  5597  0A47  1283               	bcf	3,5	;RP0=0, select bank0
  5598  0A48  1303               	bcf	3,6	;RP1=0, select bank0
  5599  0A49  1487               	bsf	7,1	;volatile
  5600                           
  5601                           ;newmain.c: 110: _delay((unsigned long)((40)*(4000000/4000000.0)));
  5602  0A4A  300D               	movlw	13
  5603  0A4B  00F1               	movwf	??_Lcd_Write_Char
  5604  0A4C                     u3297:	
  5605  0A4C  0BF1               	decfsz	??_Lcd_Write_Char,f
  5606  0A4D  2A4C               	goto	u3297
  5607                           
  5608                           ;newmain.c: 111: RC1 = 0;
  5609  0A4E  1283               	bcf	3,5	;RP0=0, select bank0
  5610  0A4F  1303               	bcf	3,6	;RP1=0, select bank0
  5611  0A50  1087               	bcf	7,1	;volatile
  5612  0A51  0008               	return
  5613  0A52                     __end_of_Lcd_Write_Char:	
  5614                           
  5615                           	psect	text21
  5616  0ACE                     __ptext21:	
  5617 ;; *************** function _Lcd_Set_Cursor *****************
  5618 ;; Defined at:
  5619 ;;		line 58 in file "newmain.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;  a               1    wreg     unsigned char 
  5622 ;;  b               1    4[COMMON] unsigned char 
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;  a               1    7[COMMON] unsigned char 
  5625 ;;  temp            1   10[COMMON] unsigned char 
  5626 ;;  y               1    9[COMMON] unsigned char 
  5627 ;;  z               1    8[COMMON] unsigned char 
  5628 ;; Return value:  Size  Location     Type
  5629 ;;                  1    wreg      void 
  5630 ;; Registers used:
  5631 ;;		wreg, status,2, status,0, pclath, cstack
  5632 ;; Tracked objects:
  5633 ;;		On entry : 0/0
  5634 ;;		On exit  : 0/0
  5635 ;;		Unchanged: 0/0
  5636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5637 ;;      Params:         1       0       0       0
  5638 ;;      Locals:         4       0       0       0
  5639 ;;      Temps:          2       0       0       0
  5640 ;;      Totals:         7       0       0       0
  5641 ;;Total ram usage:        7 bytes
  5642 ;; Hardware stack levels used:    1
  5643 ;; Hardware stack levels required when called:    2
  5644 ;; This function calls:
  5645 ;;		_Lcd_Cmd
  5646 ;; This function is called by:
  5647 ;;		_delay60
  5648 ;;		_main
  5649 ;; This function uses a non-reentrant model
  5650 ;;
  5651                           
  5652                           
  5653                           ;psect for function _Lcd_Set_Cursor
  5654  0ACE                     _Lcd_Set_Cursor:	
  5655                           
  5656                           ;incstack = 0
  5657                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  5658                           ;Lcd_Set_Cursor@a stored from wreg
  5659  0ACE  00F7               	movwf	Lcd_Set_Cursor@a
  5660                           
  5661                           ;newmain.c: 60: char temp,z,y;
  5662                           ;newmain.c: 61: if(a == 1)
  5663  0ACF  0377               	decf	Lcd_Set_Cursor@a,w
  5664  0AD0  1D03               	btfss	3,2
  5665  0AD1  2AF0               	goto	l2057
  5666                           
  5667                           ;newmain.c: 62: {
  5668                           ;newmain.c: 63: temp = 0x80 + b - 1;
  5669  0AD2  0874               	movf	Lcd_Set_Cursor@b,w
  5670  0AD3  3E7F               	addlw	127
  5671  0AD4  00F5               	movwf	??_Lcd_Set_Cursor
  5672  0AD5  0875               	movf	??_Lcd_Set_Cursor,w
  5673  0AD6  00FA               	movwf	Lcd_Set_Cursor@temp
  5674                           
  5675                           ;newmain.c: 64: z = temp>>4;
  5676  0AD7  087A               	movf	Lcd_Set_Cursor@temp,w
  5677  0AD8  00F5               	movwf	??_Lcd_Set_Cursor
  5678  0AD9  3004               	movlw	4
  5679  0ADA                     u2725:	
  5680  0ADA  1003               	clrc
  5681  0ADB  0CF5               	rrf	??_Lcd_Set_Cursor,f
  5682  0ADC  3EFF               	addlw	-1
  5683  0ADD  1D03               	skipz
  5684  0ADE  2ADA               	goto	u2725
  5685  0ADF  0875               	movf	??_Lcd_Set_Cursor,w
  5686  0AE0  00F6               	movwf	??_Lcd_Set_Cursor+1
  5687  0AE1  0876               	movf	??_Lcd_Set_Cursor+1,w
  5688  0AE2  00F8               	movwf	Lcd_Set_Cursor@z
  5689                           
  5690                           ;newmain.c: 65: y = temp & 0x0F;
  5691  0AE3  087A               	movf	Lcd_Set_Cursor@temp,w
  5692  0AE4  390F               	andlw	15
  5693  0AE5  00F5               	movwf	??_Lcd_Set_Cursor
  5694  0AE6  0875               	movf	??_Lcd_Set_Cursor,w
  5695  0AE7  00F9               	movwf	Lcd_Set_Cursor@y
  5696                           
  5697                           ;newmain.c: 66: Lcd_Cmd(z);
  5698  0AE8  0878               	movf	Lcd_Set_Cursor@z,w
  5699  0AE9  158A  214F  158A   	fcall	_Lcd_Cmd
  5700                           
  5701                           ;newmain.c: 67: Lcd_Cmd(y);
  5702  0AEC  0879               	movf	Lcd_Set_Cursor@y,w
  5703  0AED  158A  214F         	fcall	_Lcd_Cmd
  5704                           
  5705                           ;newmain.c: 68: }
  5706  0AEF  0008               	return
  5707  0AF0                     l2057:	
  5708                           
  5709                           ;newmain.c: 69: else if(a == 2)
  5710  0AF0  3002               	movlw	2
  5711  0AF1  0677               	xorwf	Lcd_Set_Cursor@a,w
  5712  0AF2  1D03               	btfss	3,2
  5713  0AF3  0008               	return
  5714                           
  5715                           ;newmain.c: 70: {
  5716                           ;newmain.c: 71: temp = 0xC0 + b - 1;
  5717  0AF4  0874               	movf	Lcd_Set_Cursor@b,w
  5718  0AF5  3EBF               	addlw	191
  5719  0AF6  00F5               	movwf	??_Lcd_Set_Cursor
  5720  0AF7  0875               	movf	??_Lcd_Set_Cursor,w
  5721  0AF8  00FA               	movwf	Lcd_Set_Cursor@temp
  5722                           
  5723                           ;newmain.c: 72: z = temp>>4;
  5724  0AF9  087A               	movf	Lcd_Set_Cursor@temp,w
  5725  0AFA  00F5               	movwf	??_Lcd_Set_Cursor
  5726  0AFB  3004               	movlw	4
  5727  0AFC                     u2745:	
  5728  0AFC  1003               	clrc
  5729  0AFD  0CF5               	rrf	??_Lcd_Set_Cursor,f
  5730  0AFE  3EFF               	addlw	-1
  5731  0AFF  1D03               	skipz
  5732  0B00  2AFC               	goto	u2745
  5733  0B01  0875               	movf	??_Lcd_Set_Cursor,w
  5734  0B02  00F6               	movwf	??_Lcd_Set_Cursor+1
  5735  0B03  0876               	movf	??_Lcd_Set_Cursor+1,w
  5736  0B04  00F8               	movwf	Lcd_Set_Cursor@z
  5737                           
  5738                           ;newmain.c: 73: y = temp & 0x0F;
  5739  0B05  087A               	movf	Lcd_Set_Cursor@temp,w
  5740  0B06  390F               	andlw	15
  5741  0B07  00F5               	movwf	??_Lcd_Set_Cursor
  5742  0B08  0875               	movf	??_Lcd_Set_Cursor,w
  5743  0B09  00F9               	movwf	Lcd_Set_Cursor@y
  5744                           
  5745                           ;newmain.c: 74: Lcd_Cmd(z);
  5746  0B0A  0878               	movf	Lcd_Set_Cursor@z,w
  5747  0B0B  158A  214F  158A   	fcall	_Lcd_Cmd
  5748                           
  5749                           ;newmain.c: 75: Lcd_Cmd(y);
  5750  0B0E  0879               	movf	Lcd_Set_Cursor@y,w
  5751  0B0F  158A  214F         	fcall	_Lcd_Cmd
  5752  0B11  0008               	return
  5753  0B12                     __end_of_Lcd_Set_Cursor:	
  5754                           
  5755                           	psect	text22
  5756  00A4                     __ptext22:	
  5757 ;; *************** function _Lcd_Clear *****************
  5758 ;; Defined at:
  5759 ;;		line 52 in file "newmain.c"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;		None
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;		None
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  1    wreg      void 
  5766 ;; Registers used:
  5767 ;;		wreg, status,2, status,0, pclath, cstack
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5773 ;;      Params:         0       0       0       0
  5774 ;;      Locals:         0       0       0       0
  5775 ;;      Temps:          0       0       0       0
  5776 ;;      Totals:         0       0       0       0
  5777 ;;Total ram usage:        0 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; Hardware stack levels required when called:    2
  5780 ;; This function calls:
  5781 ;;		_Lcd_Cmd
  5782 ;; This function is called by:
  5783 ;;		_delay60
  5784 ;;		_main
  5785 ;;		_checktemp
  5786 ;; This function uses a non-reentrant model
  5787 ;;
  5788                           
  5789                           
  5790                           ;psect for function _Lcd_Clear
  5791  00A4                     _Lcd_Clear:	
  5792                           
  5793                           ;newmain.c: 54: Lcd_Cmd(0);
  5794                           
  5795                           ;incstack = 0
  5796                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  5797  00A4  3000               	movlw	0
  5798  00A5  158A  214F  118A   	fcall	_Lcd_Cmd
  5799                           
  5800                           ;newmain.c: 55: Lcd_Cmd(1);
  5801  00A8  3001               	movlw	1
  5802  00A9  158A  214F         	fcall	_Lcd_Cmd
  5803  00AB  0008               	return
  5804  00AC                     __end_of_Lcd_Clear:	
  5805                           
  5806                           	psect	text23
  5807  0B12                     __ptext23:	
  5808 ;; *************** function _Lcd_Init *****************
  5809 ;; Defined at:
  5810 ;;		line 79 in file "newmain.c"
  5811 ;; Parameters:    Size  Location     Type
  5812 ;;		None
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;		None
  5815 ;; Return value:  Size  Location     Type
  5816 ;;                  1    wreg      void 
  5817 ;; Registers used:
  5818 ;;		wreg, status,2, status,0, pclath, cstack
  5819 ;; Tracked objects:
  5820 ;;		On entry : 0/0
  5821 ;;		On exit  : 0/0
  5822 ;;		Unchanged: 0/0
  5823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5824 ;;      Params:         0       0       0       0
  5825 ;;      Locals:         0       0       0       0
  5826 ;;      Temps:          2       0       0       0
  5827 ;;      Totals:         2       0       0       0
  5828 ;;Total ram usage:        2 bytes
  5829 ;; Hardware stack levels used:    1
  5830 ;; Hardware stack levels required when called:    2
  5831 ;; This function calls:
  5832 ;;		_Lcd_Cmd
  5833 ;;		_Lcd_Port
  5834 ;; This function is called by:
  5835 ;;		_main
  5836 ;; This function uses a non-reentrant model
  5837 ;;
  5838                           
  5839                           
  5840                           ;psect for function _Lcd_Init
  5841  0B12                     _Lcd_Init:	
  5842                           
  5843                           ;newmain.c: 81: Lcd_Port(0x00);
  5844                           
  5845                           ;incstack = 0
  5846                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  5847  0B12  3000               	movlw	0
  5848  0B13  158A  2167  158A   	fcall	_Lcd_Port
  5849                           
  5850                           ;newmain.c: 82: _delay((unsigned long)((20)*(4000000/4000.0)));
  5851  0B16  301A               	movlw	26
  5852  0B17  00F5               	movwf	??_Lcd_Init+1
  5853  0B18  30F8               	movlw	248
  5854  0B19  00F4               	movwf	??_Lcd_Init
  5855  0B1A                     u3307:	
  5856  0B1A  0BF4               	decfsz	??_Lcd_Init,f
  5857  0B1B  2B1A               	goto	u3307
  5858  0B1C  0BF5               	decfsz	??_Lcd_Init+1,f
  5859  0B1D  2B1A               	goto	u3307
  5860  0B1E  0000               	nop
  5861                           
  5862                           ;newmain.c: 83: Lcd_Cmd(0x03);
  5863  0B1F  3003               	movlw	3
  5864  0B20  158A  214F  158A   	fcall	_Lcd_Cmd
  5865                           
  5866                           ;newmain.c: 84: _delay((unsigned long)((5)*(4000000/4000.0)));
  5867  0B23  3007               	movlw	7
  5868  0B24  00F5               	movwf	??_Lcd_Init+1
  5869  0B25  307D               	movlw	125
  5870  0B26  00F4               	movwf	??_Lcd_Init
  5871  0B27                     u3317:	
  5872  0B27  0BF4               	decfsz	??_Lcd_Init,f
  5873  0B28  2B27               	goto	u3317
  5874  0B29  0BF5               	decfsz	??_Lcd_Init+1,f
  5875  0B2A  2B27               	goto	u3317
  5876                           
  5877                           ;newmain.c: 85: Lcd_Cmd(0x03);
  5878  0B2B  3003               	movlw	3
  5879  0B2C  158A  214F  158A   	fcall	_Lcd_Cmd
  5880                           
  5881                           ;newmain.c: 86: _delay((unsigned long)((11)*(4000000/4000.0)));
  5882  0B2F  300F               	movlw	15
  5883  0B30  00F5               	movwf	??_Lcd_Init+1
  5884  0B31  3047               	movlw	71
  5885  0B32  00F4               	movwf	??_Lcd_Init
  5886  0B33                     u3327:	
  5887  0B33  0BF4               	decfsz	??_Lcd_Init,f
  5888  0B34  2B33               	goto	u3327
  5889  0B35  0BF5               	decfsz	??_Lcd_Init+1,f
  5890  0B36  2B33               	goto	u3327
  5891  0B37  2B38               	nop2
  5892                           
  5893                           ;newmain.c: 87: Lcd_Cmd(0x03);
  5894  0B38  3003               	movlw	3
  5895  0B39  158A  214F  158A   	fcall	_Lcd_Cmd
  5896                           
  5897                           ;newmain.c: 89: Lcd_Cmd(0x02);
  5898  0B3C  3002               	movlw	2
  5899  0B3D  158A  214F  158A   	fcall	_Lcd_Cmd
  5900                           
  5901                           ;newmain.c: 90: Lcd_Cmd(0x02);
  5902  0B40  3002               	movlw	2
  5903  0B41  158A  214F  158A   	fcall	_Lcd_Cmd
  5904                           
  5905                           ;newmain.c: 91: Lcd_Cmd(0x08);
  5906  0B44  3008               	movlw	8
  5907  0B45  158A  214F  158A   	fcall	_Lcd_Cmd
  5908                           
  5909                           ;newmain.c: 92: Lcd_Cmd(0x00);
  5910  0B48  3000               	movlw	0
  5911  0B49  158A  214F  158A   	fcall	_Lcd_Cmd
  5912                           
  5913                           ;newmain.c: 93: Lcd_Cmd(0x0C);
  5914  0B4C  300C               	movlw	12
  5915  0B4D  158A  214F  158A   	fcall	_Lcd_Cmd
  5916                           
  5917                           ;newmain.c: 94: Lcd_Cmd(0x00);
  5918  0B50  3000               	movlw	0
  5919  0B51  158A  214F  158A   	fcall	_Lcd_Cmd
  5920                           
  5921                           ;newmain.c: 95: Lcd_Cmd(0x06);
  5922  0B54  3006               	movlw	6
  5923  0B55  158A  214F         	fcall	_Lcd_Cmd
  5924  0B57  0008               	return
  5925  0B58                     __end_of_Lcd_Init:	
  5926                           
  5927                           	psect	text24
  5928  094F                     __ptext24:	
  5929 ;; *************** function _Lcd_Cmd *****************
  5930 ;; Defined at:
  5931 ;;		line 43 in file "newmain.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;  a               1    wreg     unsigned char 
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;  a               1    3[COMMON] unsigned char 
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  1    wreg      void 
  5938 ;; Registers used:
  5939 ;;		wreg, status,2, status,0, pclath, cstack
  5940 ;; Tracked objects:
  5941 ;;		On entry : 0/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5945 ;;      Params:         0       0       0       0
  5946 ;;      Locals:         1       0       0       0
  5947 ;;      Temps:          2       0       0       0
  5948 ;;      Totals:         3       0       0       0
  5949 ;;Total ram usage:        3 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    1
  5952 ;; This function calls:
  5953 ;;		_Lcd_Port
  5954 ;; This function is called by:
  5955 ;;		_Lcd_Clear
  5956 ;;		_Lcd_Set_Cursor
  5957 ;;		_Lcd_Init
  5958 ;; This function uses a non-reentrant model
  5959 ;;
  5960                           
  5961                           
  5962                           ;psect for function _Lcd_Cmd
  5963  094F                     _Lcd_Cmd:	
  5964                           
  5965                           ;incstack = 0
  5966                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  5967                           ;Lcd_Cmd@a stored from wreg
  5968  094F  00F3               	movwf	Lcd_Cmd@a
  5969                           
  5970                           ;newmain.c: 45: RC0 = 0;
  5971  0950  1283               	bcf	3,5	;RP0=0, select bank0
  5972  0951  1303               	bcf	3,6	;RP1=0, select bank0
  5973  0952  1007               	bcf	7,0	;volatile
  5974                           
  5975                           ;newmain.c: 46: Lcd_Port(a);
  5976  0953  0873               	movf	Lcd_Cmd@a,w
  5977  0954  158A  2167  158A   	fcall	_Lcd_Port
  5978                           
  5979                           ;newmain.c: 47: RC1 = 1;
  5980  0957  1283               	bcf	3,5	;RP0=0, select bank0
  5981  0958  1303               	bcf	3,6	;RP1=0, select bank0
  5982  0959  1487               	bsf	7,1	;volatile
  5983                           
  5984                           ;newmain.c: 48: _delay((unsigned long)((4)*(4000000/4000.0)));
  5985  095A  3006               	movlw	6
  5986  095B  00F2               	movwf	??_Lcd_Cmd+1
  5987  095C  3030               	movlw	48
  5988  095D  00F1               	movwf	??_Lcd_Cmd
  5989  095E                     u3337:	
  5990  095E  0BF1               	decfsz	??_Lcd_Cmd,f
  5991  095F  295E               	goto	u3337
  5992  0960  0BF2               	decfsz	??_Lcd_Cmd+1,f
  5993  0961  295E               	goto	u3337
  5994  0962  0000               	nop
  5995                           
  5996                           ;newmain.c: 49: RC1 = 0;
  5997  0963  1283               	bcf	3,5	;RP0=0, select bank0
  5998  0964  1303               	bcf	3,6	;RP1=0, select bank0
  5999  0965  1087               	bcf	7,1	;volatile
  6000  0966  0008               	return
  6001  0967                     __end_of_Lcd_Cmd:	
  6002                           
  6003                           	psect	text25
  6004  0967                     __ptext25:	
  6005 ;; *************** function _Lcd_Port *****************
  6006 ;; Defined at:
  6007 ;;		line 21 in file "newmain.c"
  6008 ;; Parameters:    Size  Location     Type
  6009 ;;  a               1    wreg     unsigned char 
  6010 ;; Auto vars:     Size  Location     Type
  6011 ;;  a               1    0[COMMON] unsigned char 
  6012 ;; Return value:  Size  Location     Type
  6013 ;;                  1    wreg      void 
  6014 ;; Registers used:
  6015 ;;		wreg
  6016 ;; Tracked objects:
  6017 ;;		On entry : 0/0
  6018 ;;		On exit  : 0/0
  6019 ;;		Unchanged: 0/0
  6020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6021 ;;      Params:         0       0       0       0
  6022 ;;      Locals:         1       0       0       0
  6023 ;;      Temps:          0       0       0       0
  6024 ;;      Totals:         1       0       0       0
  6025 ;;Total ram usage:        1 bytes
  6026 ;; Hardware stack levels used:    1
  6027 ;; This function calls:
  6028 ;;		Nothing
  6029 ;; This function is called by:
  6030 ;;		_Lcd_Cmd
  6031 ;;		_Lcd_Init
  6032 ;;		_Lcd_Write_Char
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           
  6037                           ;psect for function _Lcd_Port
  6038  0967                     _Lcd_Port:	
  6039                           
  6040                           ;incstack = 0
  6041                           ; Regs used in _Lcd_Port: [wreg]
  6042                           ;Lcd_Port@a stored from wreg
  6043  0967  00F0               	movwf	Lcd_Port@a
  6044                           
  6045                           ;newmain.c: 23: if(a & 1)
  6046  0968  1C70               	btfss	Lcd_Port@a,0
  6047  0969  296E               	goto	l51
  6048                           
  6049                           ;newmain.c: 24: RC2 = 1;
  6050  096A  1283               	bcf	3,5	;RP0=0, select bank0
  6051  096B  1303               	bcf	3,6	;RP1=0, select bank0
  6052  096C  1507               	bsf	7,2	;volatile
  6053  096D  2971               	goto	l52
  6054  096E                     l51:	
  6055                           
  6056                           ;newmain.c: 25: else
  6057                           ;newmain.c: 26: RC2 = 0;
  6058  096E  1283               	bcf	3,5	;RP0=0, select bank0
  6059  096F  1303               	bcf	3,6	;RP1=0, select bank0
  6060  0970  1107               	bcf	7,2	;volatile
  6061  0971                     l52:	
  6062                           
  6063                           ;newmain.c: 28: if(a & 2)
  6064  0971  1CF0               	btfss	Lcd_Port@a,1
  6065  0972  2975               	goto	l53
  6066                           
  6067                           ;newmain.c: 29: RC3 = 1;
  6068  0973  1587               	bsf	7,3	;volatile
  6069  0974  2976               	goto	l54
  6070  0975                     l53:	
  6071                           
  6072                           ;newmain.c: 30: else
  6073                           ;newmain.c: 31: RC3 = 0;
  6074  0975  1187               	bcf	7,3	;volatile
  6075  0976                     l54:	
  6076                           
  6077                           ;newmain.c: 33: if(a & 4)
  6078  0976  1D70               	btfss	Lcd_Port@a,2
  6079  0977  297A               	goto	l55
  6080                           
  6081                           ;newmain.c: 34: RC4 = 1;
  6082  0978  1607               	bsf	7,4	;volatile
  6083  0979  297B               	goto	l56
  6084  097A                     l55:	
  6085                           
  6086                           ;newmain.c: 35: else
  6087                           ;newmain.c: 36: RC4 = 0;
  6088  097A  1207               	bcf	7,4	;volatile
  6089  097B                     l56:	
  6090                           
  6091                           ;newmain.c: 38: if(a & 8)
  6092  097B  1DF0               	btfss	Lcd_Port@a,3
  6093  097C  297F               	goto	l57
  6094                           
  6095                           ;newmain.c: 39: RC5 = 1;
  6096  097D  1687               	bsf	7,5	;volatile
  6097  097E  0008               	return
  6098  097F                     l57:	
  6099                           
  6100                           ;newmain.c: 40: else
  6101                           ;newmain.c: 41: RC5 = 0;
  6102  097F  1287               	bcf	7,5	;volatile
  6103  0980  0008               	return
  6104  0981                     __end_of_Lcd_Port:	
  6105                           
  6106                           	psect	text26
  6107  0931                     __ptext26:	
  6108 ;; *************** function _ADC_Init *****************
  6109 ;; Defined at:
  6110 ;;		line 146 in file "newmain.c"
  6111 ;; Parameters:    Size  Location     Type
  6112 ;;		None
  6113 ;; Auto vars:     Size  Location     Type
  6114 ;;		None
  6115 ;; Return value:  Size  Location     Type
  6116 ;;                  1    wreg      void 
  6117 ;; Registers used:
  6118 ;;		wreg
  6119 ;; Tracked objects:
  6120 ;;		On entry : 0/0
  6121 ;;		On exit  : 0/0
  6122 ;;		Unchanged: 0/0
  6123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6124 ;;      Params:         0       0       0       0
  6125 ;;      Locals:         0       0       0       0
  6126 ;;      Temps:          0       0       0       0
  6127 ;;      Totals:         0       0       0       0
  6128 ;;Total ram usage:        0 bytes
  6129 ;; Hardware stack levels used:    1
  6130 ;; This function calls:
  6131 ;;		Nothing
  6132 ;; This function is called by:
  6133 ;;		_main
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           
  6138                           ;psect for function _ADC_Init
  6139  0931                     _ADC_Init:	
  6140                           
  6141                           ;newmain.c: 148: ANSEL = 0X01;
  6142                           
  6143                           ;incstack = 0
  6144                           ; Regs used in _ADC_Init: [wreg]
  6145  0931  3001               	movlw	1
  6146  0932  1683               	bsf	3,5	;RP0=1, select bank3
  6147  0933  1703               	bsf	3,6	;RP1=1, select bank3
  6148  0934  0088               	movwf	8	;volatile
  6149                           
  6150                           ;newmain.c: 149: ADCON0 = 0x01;
  6151  0935  3001               	movlw	1
  6152  0936  1283               	bcf	3,5	;RP0=0, select bank0
  6153  0937  1303               	bcf	3,6	;RP1=0, select bank0
  6154  0938  009F               	movwf	31	;volatile
  6155                           
  6156                           ;newmain.c: 150: ADCON1 = 0x80;
  6157  0939  3080               	movlw	128
  6158  093A  1683               	bsf	3,5	;RP0=1, select bank1
  6159  093B  1303               	bcf	3,6	;RP1=0, select bank1
  6160  093C  009F               	movwf	31	;volatile
  6161  093D  0008               	return
  6162  093E                     __end_of_ADC_Init:	
  6163  007E                     btemp	set	126	;btemp
  6164  007E                     wtemp0	set	126


Data Sizes:
    Strings     119
    Constant    36
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      78
    BANK1            80     42      46
    BANK2            80      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(1) Largest target is 27
		 -> log@coeff(CODE[27]), 

    Lcd_Write_String@a	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_19(CODE[10]), STR_18(CODE[9]), STR_17(CODE[15]), STR_16(CODE[5]), 
		 -> STR_15(CODE[5]), STR_14(CODE[3]), STR_13(CODE[5]), STR_12(CODE[5]), 
		 -> STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[3]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[15]), 
		 -> STR_3(CODE[14]), STR_2(CODE[10]), STR_1(CODE[9]), 


Critical Paths under _main in COMMON

    _lcddisplay->___lwdiv
    _getTemp->___awtoft
    _getTemp->___fttol
    _log->___awtoft
    ___ftmul->___awtoft
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    ___ftdiv->___awtoft
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_delay60
    _delay60->_getTemp
    _getTemp->_log
    _log->_eval_poly
    _eval_poly->___ftmul
    ___ftmul->___ftadd
    ___ftadd->___ftdiv

Critical Paths under _main in BANK1

    _main->_getTemp
    _delay60->_getTemp

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0   68862
                                             21 BANK1     21    21      0
                           _ADC_Init
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _delay60
                            _getTemp
                         _lcddisplay
 ---------------------------------------------------------------------------------
 (1) _delay60                                             13     7      6   34107
                                             65 BANK0     13     7      6
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _getTemp
                         _lcddisplay
 ---------------------------------------------------------------------------------
 (1) _lcddisplay                                           2     0      2    1884
                                              8 COMMON     2     0      2
                     _Lcd_Write_Char
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     583
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _getTemp                                             25    23      2   28768
                                             61 BANK0      4     2      2
                                              0 BANK1     21    21      0
                           _ADC_Read
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   16660
                                             55 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     4      6    7145
                                             45 BANK0     10     4      6
                             ___bmul
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    2961
                                             29 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3687
                                             16 BANK0     13     7      6
                           ___awtoft (ARG)
                             ___bmul (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     160
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) ___ftge                                              12     6      6     322
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    1904
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     358
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2411
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                             ___bmul (ARG)
                             ___ftge (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     512
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ADC_Read                                             5     3      2      44
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     3     3      0     781
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1    2023
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _delay60
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _getTemp
       _ADC_Read
       ___awdiv
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
           ___ftge (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
         ___ftge (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             ___ftge (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
           ___ftge (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             ___ftge (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
           ___ftge (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               ___ftge (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             ___ftge (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly (ARG)
           ___bmul
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               ___ftge (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             ___ftge (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 ___ftge (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               ___ftge (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)
     _lcddisplay
       _Lcd_Write_Char
         _Lcd_Port
       ___lwdiv
       ___lwmod
   _getTemp
     _ADC_Read
     ___awdiv
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___bmul (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
         ___ftge (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___bmul (ARG)
       ___ftge (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
           ___ftge (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
         ___ftge (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
     _log
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
           ___ftge (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
         ___ftge (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             ___ftge (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
           ___ftge (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly (ARG)
         ___bmul
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             ___ftge (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
           ___ftge (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               ___ftge (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             ___ftge (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
       _frexp (ARG)
   _lcddisplay
     _Lcd_Write_Char
       _Lcd_Port
     ___lwdiv
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     4E      4E       3       97.5%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50     2A      2E       5       57.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      8A       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0      8A      10        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Thu Nov 30 16:34:29 2017

                        pc 0002             ___bmul@product 0072                         l51 096E  
                       l52 0971                         l53 0975                         l54 0976  
                       l55 097A                         l56 097B                         l57 097F  
                       l94 09E4               ___awdiv@sign 0076                         fsr 0004  
             ___ftadd@exp1 003C               ___ftadd@exp2 003B               ___ftadd@sign 003A  
                      l116 00DC                        l133 04E9                        l150 065D  
                      l151 0632                        l152 0658                        l144 0595  
                      l161 06AA                        l145 05BB                        l137 0588  
                      l139 0583                        l148 06A0                        l165 06C0  
                      l157 0679                        l158 069C                        l431 0D0B  
                      l432 0D13                        l424 0CF6                        l515 0D9E  
                      l455 0240                        _RB0 0030                        _RB1 0031  
                      _RC0 0038                        _RB2 0032                        _RC1 0039  
                      _RB3 0033                        _RC2 003A                        _RC3 003B  
                      _RC4 003C                        _RC5 003D                        _RB7 0037  
                      _log 0E6F                        fsr0 0004                        indf 0000  
             ___ftdiv@cntr 002A               ___ftdiv@sign 002F                       l2015 0A7E  
                     l2007 0A5A                       l2031 09F3                       l2009 0A68  
                     l2033 0A01                       l2041 0A1A                       l2019 0A89  
                     l2037 0A0F                       l2057 0AF0                       l2073 0984  
                     l1601 0946                       l2137 00E7                       l2305 05C0  
                     l2225 048F                       l2091 02E0                       l2219 0479  
                     l2253 04EC                       l2245 04D4                       l1615 01C1  
                     l1703 0F9B                       l2407 079D                       l1625 01D7  
                     l2089 02AA                       l2417 07CA                       l1571 0CCF  
                     l1643 0206                       l1619 01C8                       l1715 0FC3  
                     l1707 0FAB                       l2283 0566                       l2371 06C5  
              main@highval 00C6                       l1901 0BE6                       l1581 0CFB  
                     l1573 0CDB                       l1661 0252                       l1645 0212  
                     l1637 01F1                       l1583 0D05                       l1575 0CE0  
                     l1567 0CC8                       l1655 0230                       l1647 0217  
                     l1719 0FD3                       l2375 06CB                       l1905 0BF1  
                     l1665 0264                       l1657 023C                       l1649 021B  
                     l2369 06B4                       l1747 09A7                       l1755 0C25  
                     l1675 0287                       l1691 0F5C                       l1837 09C5  
                     l1909 0BF9                       l1925 0DE6                       l1597 0940  
                     l1685 0F46                       l1853 0E91                       l2397 0777  
                     l1919 0DD0                       l1759 0C4C                       l1961 0D44  
                     l1883 0BBA                       l1947 0E4A                       l1939 0E2B  
                     l1779 0AA0                       l1859 0EA7                       l1893 0BC2  
                     l1877 0BAF                       l1981 0D86                       l1797 0CB9  
                     l1895 0BD0                       l1993 0DAF                       l1987 0D93  
                     l1979 0D76                       l1989 0DA1                       ?_log 0057  
                     STR_1 0080                       STR_2 006C                       STR_3 004A  
                     STR_4 003B                       STR_5 0058                       STR_6 0062  
                     STR_7 0092                       STR_8 0097                       STR_9 00A0  
                     u2005 0F68                       u2015 0F7A                       u2201 0C3F  
                     u2105 0FDC                       u2202 0C40                       u2203 0C45  
                     u2204 0C46                       u2045 0FAC                       u2055 0FB4  
                     u3115 06D9                       u3035 0673                       u2245 0A30  
                     u2181 0C18                       u3125 06E6                       u2182 0C19  
                     u2335 0BC5                       u2183 0C1E                       u2095 0FD4  
                     u3135 06F4                       u3207 06BA                       u2184 0C1F  
                     u2265 09CE                       u1705 0D1A                       u1625 0CD4  
                     u2425 0DF8                       u3217 0795                       u3145 0702  
                     u3307 0B1A                       u2355 0BD1                       u2435 0E0A  
                     u3227 07C2                       u3155 070F                       u3317 0B27  
                     u2365 0BDD                       u1645 0CEF                       u2445 0E2C  
                     u2525 0D77                       u3237 07EF                       u3165 071C  
                     u3327 0B33                       u2375 0BE7                       u2455 0E3D  
                     u2615 0A69                       u3247 014A                       u3175 07A8  
                     u3337 095E                       u1665 0CFE                       u2465 0E4B  
                     u2625 0A75                       u3257 0188                       u3185 07D5  
                     u2555 0D95                       u1835 01F2                       u3267 02D2  
                     u2635 0A7F                       u2725 0ADA                       u3277 09DC  
                     u1925 0231                       u3197 04A4                       u3287 0A3E  
                     u2495 0D4B                       u2815 00F6                       u2745 0AFC  
                     u3297 0A4C                       u1865 0207                       u2665 09F6  
                     u2825 0103                       u2905 04FB                       u2595 0A5D  
                     u2765 02BC                       u2685 0A07                       u2925 0560  
                     u1895 021C                       u2695 0A10                       u2775 00B9  
                     u2785 00CD                       u2795 00DA                       u2985 05D0  
        ?_Lcd_Write_String 0070                       _main 044F               ___ftpack@arg 0070  
             ___ftpack@exp 0073                       btemp 007E                       log@x 0057  
              main@tempval 00C4           __end_of_ADC_Init 093E           __end_of_ADC_Read 09ED  
                     start 0000         ??_Lcd_Write_String 0075            __end_of_Lcd_Cmd 0967  
        ___bmul@multiplier 0073               ___ftmul@cntr 004B               ___ftmul@sign 004C  
             ___fttol@exp1 007D                      ??_log 005A               ___fttol@lval 0079  
                    ?_main 0070            __end_of___awdiv 0BFE            __end_of___ftadd 02A0  
                    STR_10 009C                      STR_11 009C                      STR_12 0092  
                    STR_13 0097                      STR_14 00A0                      STR_15 0097  
                    STR_16 0097                      STR_17 002C                      STR_18 0089  
                    STR_19 0076            __end_of___ftdiv 0E6F                      _ANSEL 0188  
          __end_of___ftmul 1000            ___awdiv@divisor 0070            __end_of___fttol 0DB8  
          __end_of___lwdiv 0A8E            __end_of___lwmod 0A1F            ___awdiv@counter 0075  
  __size_of_Lcd_Set_Cursor 0044                      _TRISA 0085                      _TRISB 0086  
                    _TRISC 0087            __end_of_delay60 0198            __end_of_getTemp 044F  
            ___awtoft@sign 007D                      _frexp 0A8E                      _errno 00CA  
            ___ftpack@sign 0074                      _start 00CC                      main@b 00B8  
                    main@c 00BA                      pclath 000A                      status 0003  
                    wtemp0 007E           __end_of_Lcd_Init 0B58           __end_of_Lcd_Port 0981  
          __initialization 07F7                log@exponent 005B               __end_of_main 07F7  
                   ??_main 00B5              ___fttol@sign1 0078         __size_of_Lcd_Clear 0008  
                   _ADCON0 001F                     _ADCON1 009F                     ?_frexp 0070  
                   _ADRESH 001E                     _ADRESL 009E           ___awdiv@dividend 0072  
         __end_of___awtoft 09BD           __end_of___ftpack 0D2C                     _ANSELH 0189  
                ??_Lcd_Cmd 0071    __size_of_Lcd_Write_Char 0033                     ___bmul 093E  
                   ___ftge 0BFE                  ??___awdiv 0074                  ??___ftadd 0036  
                ??___ftdiv 0026                  ??___ftmul 0043                  ??___fttol 0074  
                ??___lwdiv 0074                  ??___lwmod 0074            ADC_Read@channel 0074  
                ??_delay60 0067           ___awdiv@quotient 0077                  ??_getTemp 005F  
    ___ftmul@f3_as_product 0048                  ?_ADC_Init 0070                  ?_ADC_Read 0070  
            lcddisplay@num 0078            Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074  
          Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078           __end_oflog@coeff 0029  
  __end_of__initialization 07FD              main@switchsel 00C2                 ___ftadd@f1 0030  
               ___ftadd@f2 0033                 ___ftge@ff1 0070                 ___ftge@ff2 0073  
        __end_of_Lcd_Clear 00AC               eval_poly@res 0054                 ___ftdiv@f1 0023  
               ___ftdiv@f2 0020                 ___ftdiv@f3 002B                 ___awtoft@c 0078  
      ___bmul@multiplicand 0070                 ___ftmul@f1 003D                 ___ftmul@f2 0040  
               ___fttol@f1 0070             __pcstackCOMMON 0070              __end_of_frexp 0ACE  
           _Lcd_Set_Cursor 0ACE                 ??_ADC_Init 0070                 ??_ADC_Read 0072  
                ?_Lcd_Init 0070                  ?_Lcd_Port 0070                    ??_frexp 0074  
               __pbssBANK1 00CA         __size_of_eval_poly 0065                 __pmaintext 044F  
                  ?___bmul 0070                    ?___ftge 0070  __size_of_Lcd_Write_String 001C  
                ?___awtoft 0078                  ?___ftpack 0070     __end_of_Lcd_Set_Cursor 0B12  
               ??_Lcd_Init 0074                 ??_Lcd_Port 0070                 _lcddisplay 0B58  
               __stringtab 0002             _Lcd_Write_Char 0A1F                    _Lcd_Cmd 094F  
    __end_ofgetTemp@adcMax 000B            __size_of___bmul 0011            __size_of___ftge 005D  
                  ___awdiv 0BA5                    ___ftadd 0198                    ___ftdiv 0DB8  
                  ___ftmul 0F2E                    ___fttol 0D2C                    ___lwdiv 0A52  
                  ___lwmod 09ED                    _delay60 00AC                 ??___awtoft 007B  
               ??___ftpack 0075          __end_of_eval_poly 0CC0            ?_Lcd_Set_Cursor 0074  
                  _getTemp 02A0                    __ptext1 00AC                    __ptext2 0B58  
                  __ptext3 09ED                    __ptext4 0A52                    __ptext5 02A0  
                  __ptext6 0E6F                    __ptext7 0A8E                    __ptext8 0C5B  
                  __ptext9 0F2E               __size_of_log 00BF             delay60@tempval 006A  
                  main@der 00C0     __end_of_Lcd_Write_Char 0A52       end_of_initialization 07FD  
                Lcd_Port@a 0070          __size_of_ADC_Init 000D          __size_of_ADC_Read 0030  
              ?_lcddisplay 0078            ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0077  
        Lcd_Write_String@i 0075                ___ftdiv@exp 002E                 main@lowval 00C8  
              ___ftmul@exp 0047                  _Lcd_Clear 00A4             __end_of___bmul 094F  
           __end_of___ftge 0C5B           _Lcd_Write_String 0981        start_initialization 07F7  
               eval_poly@d 0050                 eval_poly@n 0051                 eval_poly@x 004D  
              __end_of_log 0F2E          __size_of_Lcd_Init 0046          __size_of_Lcd_Port 001A  
               frexp@value 0070                 ?_Lcd_Clear 0070                   ??___bmul 0071  
                 ??___ftge 0076        __size_of_lcddisplay 004D            Lcd_Write_Char@a 0074  
          Lcd_Write_Char@y 0073          __size_of___awtoft 0020          __size_of___ftpack 006C  
                ___latbits 0001              __pcstackBANK0 0020              __pcstackBANK1 00A0  
                 ?_Lcd_Cmd 0070           ___lwdiv@dividend 0072           ??_Lcd_Set_Cursor 0075  
                 ?___awdiv 0070                   ?___ftadd 0030                   ?___ftdiv 0020  
                 ?___ftmul 003D                   ?___fttol 0070                   ?___lwdiv 0070  
                 ?___lwmod 0070                   ?_delay60 0061                  __pstrings 0002  
                 ?_getTemp 005D                _getTemp$607 00A6                _getTemp$608 00A9  
                _eval_poly 0C5B                   _ADC_Init 0931                   _ADC_Read 09BD  
     __end_ofgetTemp@invT0 002C           ___lwdiv@quotient 0075             __size_of_frexp 0040  
                 Lcd_Cmd@a 0073                   _GO_nDONE 00F9                ??_Lcd_Clear 0074  
           getTemp@invBeta 000B                __stringbase 0007           ??_Lcd_Write_Char 0071  
               ?_eval_poly 004D                  main@start 00BC                   _Lcd_Init 0B12  
                 _Lcd_Port 0967               ??_lcddisplay 007A   __end_of_Lcd_Write_String 099D  
         __size_of_Lcd_Cmd 0018                  frexp@eptr 0073     __end_ofgetTemp@invBeta 000E  
         __size_of___awdiv 0059           __size_of___ftadd 0108           __size_of___ftdiv 00B7  
         __size_of___ftmul 00D2           __size_of___fttol 008C           __size_of___lwdiv 003C  
       __end_of_lcddisplay 0BA5           __size_of___lwmod 0032                   ___awtoft 099D  
                 ___ftpack 0CC0         __end_of__stringtab 0008           __size_of_delay60 00EC  
         __size_of_getTemp 01AF            ___lwdiv@divisor 0070            ___lwdiv@counter 0077  
                 __ptext10 0198                   __ptext11 093E                   __ptext20 0A1F  
                 __ptext12 0BFE                   __ptext21 0ACE                   __ptext13 099D  
                 __ptext22 00A4                   __ptext14 0D2C                   __ptext23 0B12  
                 __ptext15 0DB8                   __ptext24 094F                   __ptext16 0CC0  
                 __ptext25 0967                   __ptext17 0BA5                   __ptext26 0931  
                 __ptext18 09BD                   __ptext19 0981                   delay60@a 0061  
                 delay60@b 0063                   delay60@c 0065                   delay60@i 006C  
            __size_of_main 03A8              getTemp@adcMax 0008              getTemp@adcVal 00B3  
                 getTemp@C 00B0                   getTemp@F 00A0                   getTemp@K 00A3  
                 getTemp@i 00AE                   main@curs 00BE                   log@coeff 000E  
              ??_eval_poly 0053         Lcd_Write_Char@temp 0072           ___lwmod@dividend 0072  
                stringcode 0002               getTemp@invT0 0029         Lcd_Set_Cursor@temp 007A  
          ___lwmod@divisor 0070            ___lwmod@counter 0075                   stringdir 0002  
                 stringtab 0002          getTemp@numSamples 00AC  
